!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
A	/usr/include/opencv/cvcompat.h	/^                                const float* A, const float* k,$/;"	v
ADD	core_structures.h	46;"	d
ALIGN	/usr/include/opencv/cv.hpp	/^    enum { ALIGN=32 };$/;"	e	enum:CvBaseImageFilter::__anon8
ALL	core_structures.h	51;"	d
ALLOC	core_debug.h	35;"	d
ASSERT	core_debug.h	34;"	d
ASSERT_IS_SET	core_structures.h	50;"	d
ASYMMETRICAL	/usr/include/opencv/cv.hpp	/^    enum { GENERIC=0, ASYMMETRICAL=1, SYMMETRICAL=2, POSITIVE=4, SUM_TO_1=8, INTEGER=16 };$/;"	e	enum:CvSepFilter::__anon9
AddBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob* AddBlob(CvBlob* pBlob, IplImage* pImg, IplImage* pImgFG = NULL ) = 0;$/;"	p	class:CvBlobTracker	access:public	signature:(CvBlob* pBlob, IplImage* pImg, IplImage* pImgFG = NULL )
AddBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    AddBlob(CvBlob* pBlob) = 0;$/;"	p	class:CvBlobTrackAnalysis	access:public	signature:(CvBlob* pBlob)
AddBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    AddBlob(CvBlob* pBlob) = 0;$/;"	p	class:CvBlobTrackFVGen	access:public	signature:(CvBlob* pBlob)
AddBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    AddBlob(CvBlob* pBlob) = 0;$/;"	p	class:CvBlobTrackGen	access:public	signature:(CvBlob* pBlob)
AddBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    AddBlob(CvBlob* pBlob) = 0;$/;"	p	class:CvBlobTrackPostProc	access:public	signature:(CvBlob* pBlob)
AddBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void AddBlob(CvBlob* pB)$/;"	f	class:CvBlobSeq	access:public	signature:(CvBlob* pB)
AddBlobTrack	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void AddBlobTrack(int TrackID, int StartFrame = 0)$/;"	f	class:CvBlobTrackSeq	access:public	signature:(int TrackID, int StartFrame = 0)
AddFeature	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void AddFeature(float W, int* comps, int x =0, int y = 0) = 0;$/;"	p	class:CvProb	access:public	signature:(float W, int* comps, int x =0, int y = 0)
AddFormat	/usr/include/opencv/cvvidsurv.hpp	/^    void AddFormat(char* str){strcat(m_pElemFormat,str);}$/;"	f	class:CvBlobSeq	access:public	signature:(char* str)
AddParam	/usr/include/opencv/cvvidsurv.hpp	/^    void AddParam(char* name)$/;"	f	class:CvVSModule	access:protected	signature:(char* name)
AddParam	/usr/include/opencv/cvvidsurv.hpp	/^    void AddParam(char* name, char** pAddr)$/;"	f	class:CvVSModule	access:protected	signature:(char* name, char** pAddr)
AddParam	/usr/include/opencv/cvvidsurv.hpp	/^    void AddParam(char* name, double* pAddr)$/;"	f	class:CvVSModule	access:protected	signature:(char* name, double* pAddr)
AddParam	/usr/include/opencv/cvvidsurv.hpp	/^    void AddParam(char* name, float* pAddr)$/;"	f	class:CvVSModule	access:protected	signature:(char* name, float* pAddr)
AddParam	/usr/include/opencv/cvvidsurv.hpp	/^    void AddParam(char* name, int* pAddr)$/;"	f	class:CvVSModule	access:protected	signature:(char* name, int* pAddr)
All	/usr/include/opencv/cvaux.h	/^    int** All;$/;"	m	struct:CvCliqueFinder	access:public
Allocated_Memory	core_debug.cpp	/^struct Allocated_Memory $/;"	s	file:
Allocated_Memory::active	core_debug.cpp	/^	bool active;$/;"	m	struct:Allocated_Memory	file:	access:public
Allocated_Memory::description	core_debug.cpp	/^	const char * description, * file, * line;$/;"	m	struct:Allocated_Memory	file:	access:public
Allocated_Memory::effective_size	core_debug.cpp	/^	size_t effective_size;$/;"	m	struct:Allocated_Memory	file:	access:public
Allocated_Memory::file	core_debug.cpp	/^	const char * description, * file, * line;$/;"	m	struct:Allocated_Memory	file:	access:public
Allocated_Memory::line	core_debug.cpp	/^	const char * description, * file, * line;$/;"	m	struct:Allocated_Memory	file:	access:public
Allocated_Memory::p	core_debug.cpp	/^	void * p;$/;"	m	struct:Allocated_Memory	file:	access:public
BACKPROP	/usr/include/opencv/ml.h	/^    enum { BACKPROP=0, RPROP=1 };$/;"	e	enum:CvANN_MLP_TrainParams::__anon29
BINARY	/usr/include/opencv/cv.hpp	/^    enum { RECT=0, CROSS=1, ELLIPSE=2, CUSTOM=100, BINARY = 0, GRAYSCALE=256 };$/;"	e	enum:CvMorphology::__anon11
BITMAPINFOHEADER	/usr/include/opencv/cxcore.h	/^        typedef struct tagBITMAPINFOHEADER BITMAPINFOHEADER;$/;"	t	typeref:struct:tagBITMAPINFOHEADER
BOOL	/usr/include/opencv/cxcore.h	/^        typedef int BOOL;$/;"	t
BorderConst	/usr/include/opencv/cxtypes.h	/^    int  BorderConst[4]; \/* ditto *\/$/;"	m	struct:_IplImage	access:public
BorderMode	/usr/include/opencv/cxtypes.h	/^    int  BorderMode[4]; \/* ignored by OpenCV *\/$/;"	m	struct:_IplImage	access:public
Bpp	/usr/include/opencv/highgui.h	/^    int Bpp() { return m_img ? (m_img->depth & 255)*m_img->nChannels : 0; };$/;"	f	class:CvvImage	access:public	signature:()
C	/usr/include/opencv/ml.h	/^    double      C;  \/\/ for CV_SVM_C_SVC, CV_SVM_EPS_SVR and CV_SVM_NU_SVR$/;"	m	struct:CvSVMParams	access:public
C	/usr/include/opencv/ml.h	/^    double C[2];  \/\/ C[0] == Cn, C[1] == Cp$/;"	m	class:CvSVMSolver	access:public
CALIBRATION_IMAGE_MEASUREMENT_THRESHOLD	tool_calibration.cpp	/^	CALIBRATION_IMAGE_MEASUREMENT_THRESHOLD = 0,$/;"	v
CALIBRATION_NORMALIZE_A	tool_calibration.cpp	/^	CALIBRATION_NORMALIZE_A = 2,$/;"	v
CALIBRATION_NORMALIZE_DATA	tool_calibration.cpp	/^	CALIBRATION_NORMALIZE_DATA = 1,$/;"	v
CALIBRATION_RANDOMNESS	tool_calibration.cpp	/^	CALIBRATION_RANDOMNESS = 3$/;"	v
CHECK_ERROR	core_state.h	58;"	d
CImage	/usr/include/opencv/highgui.h	423;"	d
CLIQUE_END	/usr/include/opencv/cvaux.h	340;"	d
CLIQUE_FOUND	/usr/include/opencv/cvaux.h	339;"	d
CLIQUE_TIME_OFF	/usr/include/opencv/cvaux.h	338;"	d
CORE_DEBUG_QUOTE	core_debug.h	33;"	d
CORE_DEBUG_QUOTE_HELPER	core_debug.h	32;"	d
CORE_ERROR	core_state.h	/^enum CORE_ERROR { $/;"	g
CORE_ERROR_GUI_INITIALIZATION	core_state.h	/^	CORE_ERROR_GUI_INITIALIZATION,$/;"	e	enum:CORE_ERROR
CORE_ERROR_OUT_OF_MEMORY	core_state.h	/^	CORE_ERROR_OUT_OF_MEMORY,$/;"	e	enum:CORE_ERROR
CORE_ERROR_UNABLE_TO_CREATE_THREAD	core_state.h	/^	CORE_ERROR_UNABLE_TO_CREATE_THREAD$/;"	e	enum:CORE_ERROR
CORE_ERROR_UNABLE_TO_OPEN_FILE	core_state.h	/^	CORE_ERROR_UNABLE_TO_OPEN_FILE, $/;"	e	enum:CORE_ERROR
CORE_NO_ERROR	core_state.h	/^	CORE_NO_ERROR,$/;"	e	enum:CORE_ERROR
CORE_PI	core_constants.cpp	/^const double CORE_PI = 3.14159265358979323846;$/;"	v
CORE_PRECISION	core_constants.cpp	/^const double CORE_PRECISION = 0.000001;$/;"	v
COV_MAT_DIAGONAL	/usr/include/opencv/ml.h	/^    enum { COV_MAT_SPHERICAL=0, COV_MAT_DIAGONAL=1, COV_MAT_GENERIC=2 };$/;"	e	enum:CvEM::__anon23
COV_MAT_GENERIC	/usr/include/opencv/ml.h	/^    enum { COV_MAT_SPHERICAL=0, COV_MAT_DIAGONAL=1, COV_MAT_GENERIC=2 };$/;"	e	enum:CvEM::__anon23
COV_MAT_SPHERICAL	/usr/include/opencv/ml.h	/^    enum { COV_MAT_SPHERICAL=0, COV_MAT_DIAGONAL=1, COV_MAT_GENERIC=2 };$/;"	e	enum:CvEM::__anon23
CP	/usr/include/opencv/cvtypes.h	/^    int CP;                     \/* number of control vector dimensions *\/$/;"	m	struct:CvKalman	access:public
CROSS	/usr/include/opencv/cv.hpp	/^    enum { RECT=0, CROSS=1, ELLIPSE=2, CUSTOM=100, BINARY = 0, GRAYSCALE=256 };$/;"	e	enum:CvMorphology::__anon11
CUSTOM	/usr/include/opencv/cv.hpp	/^    enum { RECT=0, CROSS=1, ELLIPSE=2, CUSTOM=100, BINARY = 0, GRAYSCALE=256 };$/;"	e	enum:CvMorphology::__anon11
CVAPI	/usr/include/opencv/cxtypes.h	137;"	d
CVAPI	/usr/include/opencv/highgui.h	97;"	d
CVStatus	/usr/include/opencv/cxerror.h	/^typedef int CVStatus;$/;"	t
CV_16S	/usr/include/opencv/cxtypes.h	466;"	d
CV_16SC	/usr/include/opencv/cxtypes.h	497;"	d
CV_16SC1	/usr/include/opencv/cxtypes.h	493;"	d
CV_16SC2	/usr/include/opencv/cxtypes.h	494;"	d
CV_16SC3	/usr/include/opencv/cxtypes.h	495;"	d
CV_16SC4	/usr/include/opencv/cxtypes.h	496;"	d
CV_16U	/usr/include/opencv/cxtypes.h	465;"	d
CV_16UC	/usr/include/opencv/cxtypes.h	491;"	d
CV_16UC1	/usr/include/opencv/cxtypes.h	487;"	d
CV_16UC2	/usr/include/opencv/cxtypes.h	488;"	d
CV_16UC3	/usr/include/opencv/cxtypes.h	489;"	d
CV_16UC4	/usr/include/opencv/cxtypes.h	490;"	d
CV_1F	/usr/include/opencv/cxmisc.h	169;"	d
CV_32F	/usr/include/opencv/cxtypes.h	468;"	d
CV_32FC	/usr/include/opencv/cxtypes.h	509;"	d
CV_32FC1	/usr/include/opencv/cxtypes.h	505;"	d
CV_32FC2	/usr/include/opencv/cxtypes.h	506;"	d
CV_32FC3	/usr/include/opencv/cxtypes.h	507;"	d
CV_32FC4	/usr/include/opencv/cxtypes.h	508;"	d
CV_32S	/usr/include/opencv/cxtypes.h	467;"	d
CV_32SC	/usr/include/opencv/cxtypes.h	503;"	d
CV_32SC1	/usr/include/opencv/cxtypes.h	499;"	d
CV_32SC2	/usr/include/opencv/cxtypes.h	500;"	d
CV_32SC3	/usr/include/opencv/cxtypes.h	501;"	d
CV_32SC4	/usr/include/opencv/cxtypes.h	502;"	d
CV_64F	/usr/include/opencv/cxtypes.h	469;"	d
CV_64FC	/usr/include/opencv/cxtypes.h	515;"	d
CV_64FC1	/usr/include/opencv/cxtypes.h	511;"	d
CV_64FC2	/usr/include/opencv/cxtypes.h	512;"	d
CV_64FC3	/usr/include/opencv/cxtypes.h	513;"	d
CV_64FC4	/usr/include/opencv/cxtypes.h	514;"	d
CV_8S	/usr/include/opencv/cxtypes.h	464;"	d
CV_8SC	/usr/include/opencv/cxtypes.h	485;"	d
CV_8SC1	/usr/include/opencv/cxtypes.h	481;"	d
CV_8SC2	/usr/include/opencv/cxtypes.h	482;"	d
CV_8SC3	/usr/include/opencv/cxtypes.h	483;"	d
CV_8SC4	/usr/include/opencv/cxtypes.h	484;"	d
CV_8U	/usr/include/opencv/cxtypes.h	463;"	d
CV_8UC	/usr/include/opencv/cxtypes.h	479;"	d
CV_8UC1	/usr/include/opencv/cxtypes.h	475;"	d
CV_8UC2	/usr/include/opencv/cxtypes.h	476;"	d
CV_8UC3	/usr/include/opencv/cxtypes.h	477;"	d
CV_8UC4	/usr/include/opencv/cxtypes.h	478;"	d
CV_AA	/usr/include/opencv/cxcore.h	1266;"	d
CV_ADAPTIVE_THRESH_GAUSSIAN_C	/usr/include/opencv/cv.h	946;"	d
CV_ADAPTIVE_THRESH_MEAN_C	/usr/include/opencv/cv.h	945;"	d
CV_ADD	/usr/include/opencv/cxmisc.h	175;"	d
CV_AND	/usr/include/opencv/cxmisc.h	178;"	d
CV_ANDMASK	/usr/include/opencv/cxmisc.h	213;"	d
CV_ANDN	/usr/include/opencv/cxmisc.h	181;"	d
CV_ARE_CNS_EQ	/usr/include/opencv/cxtypes.h	591;"	d
CV_ARE_DEPTHS_EQ	/usr/include/opencv/cxtypes.h	594;"	d
CV_ARE_SIZES_EQ	/usr/include/opencv/cxtypes.h	597;"	d
CV_ARE_TYPES_EQ	/usr/include/opencv/cxtypes.h	588;"	d
CV_ARRAY	/usr/include/opencv/cv.h	903;"	d
CV_ASSERT	/usr/include/opencv/cxerror.h	176;"	d
CV_AUTOSTEP	/usr/include/opencv/cxcore.h	135;"	d
CV_AUTO_STEP	/usr/include/opencv/cxtypes.h	517;"	d
CV_BACK	/usr/include/opencv/cxcore.h	970;"	d
CV_BADARG_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADARG_ERR      = -49,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_BADCHANNELS_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADCHANNELS_ERR = -47,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_BADCOEF_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADCOEF_ERR     =  -10,$/;"	e	enum:CvStatus
CV_BADCONVERGENCE_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADCONVERGENCE_ERR       = -109,$/;"	e	enum:CvStatus
CV_BADDEPTH_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADDEPTH_ERR             = -107,$/;"	e	enum:CvStatus
CV_BADFACTOR_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADFACTOR_ERR   =  -7,$/;"	e	enum:CvStatus
CV_BADFLAG_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADFLAG_ERR     =  -12,$/;"	e	enum:CvStatus
CV_BADHEADER_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADHEADER_ERR            = -105,$/;"	e	enum:CvStatus
CV_BADMEMBLOCK_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADMEMBLOCK_ERR          = -113,$/;"	e	enum:CvStatus
CV_BADPOINT_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADPOINT_ERR    =  -6,$/;"	e	enum:CvStatus
CV_BADRANGE_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADRANGE_ERR    = -44,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_BADROI_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADROI_ERR               = -106,$/;"	e	enum:CvStatus
CV_BADSCALE_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADSCALE_ERR    =  -4,$/;"	e	enum:CvStatus
CV_BADSIZE_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADSIZE_ERR     =  -1,$/;"	e	enum:CvStatus
CV_BADSTEP_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADSTEP_ERR     = -29,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_BGFG_FGD_ALPHA_1	/usr/include/opencv/cvaux.h	1189;"	d
CV_BGFG_FGD_ALPHA_2	/usr/include/opencv/cvaux.h	1193;"	d
CV_BGFG_FGD_ALPHA_3	/usr/include/opencv/cvaux.h	1196;"	d
CV_BGFG_FGD_BG_UPDATE_TRESH	/usr/include/opencv/cvaux.h	1204;"	d
CV_BGFG_FGD_DELTA	/usr/include/opencv/cvaux.h	1198;"	d
CV_BGFG_FGD_LC	/usr/include/opencv/cvaux.h	1180;"	d
CV_BGFG_FGD_LCC	/usr/include/opencv/cvaux.h	1184;"	d
CV_BGFG_FGD_MINAREA	/usr/include/opencv/cvaux.h	1202;"	d
CV_BGFG_FGD_N1C	/usr/include/opencv/cvaux.h	1181;"	d
CV_BGFG_FGD_N1CC	/usr/include/opencv/cvaux.h	1185;"	d
CV_BGFG_FGD_N2C	/usr/include/opencv/cvaux.h	1182;"	d
CV_BGFG_FGD_N2CC	/usr/include/opencv/cvaux.h	1186;"	d
CV_BGFG_FGD_T	/usr/include/opencv/cvaux.h	1200;"	d
CV_BGFG_MOG_BACKGROUND_THRESHOLD	/usr/include/opencv/cvaux.h	1264;"	d
CV_BGFG_MOG_MAX_NGAUSSIANS	/usr/include/opencv/cvaux.h	1261;"	d
CV_BGFG_MOG_MINAREA	/usr/include/opencv/cvaux.h	1270;"	d
CV_BGFG_MOG_NCOLORS	/usr/include/opencv/cvaux.h	1273;"	d
CV_BGFG_MOG_NGAUSSIANS	/usr/include/opencv/cvaux.h	1267;"	d
CV_BGFG_MOG_SIGMA_INIT	/usr/include/opencv/cvaux.h	1269;"	d
CV_BGFG_MOG_STD_THRESHOLD	/usr/include/opencv/cvaux.h	1265;"	d
CV_BGFG_MOG_WEIGHT_INIT	/usr/include/opencv/cvaux.h	1268;"	d
CV_BGFG_MOG_WINDOW_SIZE	/usr/include/opencv/cvaux.h	1266;"	d
CV_BGR2BGR555	/usr/include/opencv/cv.h	199;"	d
CV_BGR2BGR565	/usr/include/opencv/cv.h	187;"	d
CV_BGR2BGRA	/usr/include/opencv/cv.h	160;"	d
CV_BGR2GRAY	/usr/include/opencv/cv.h	178;"	d
CV_BGR2HLS	/usr/include/opencv/cv.h	239;"	d
CV_BGR2HSV	/usr/include/opencv/cv.h	221;"	d
CV_BGR2Lab	/usr/include/opencv/cv.h	224;"	d
CV_BGR2Luv	/usr/include/opencv/cv.h	237;"	d
CV_BGR2RGB	/usr/include/opencv/cv.h	172;"	d
CV_BGR2RGBA	/usr/include/opencv/cv.h	166;"	d
CV_BGR2XYZ	/usr/include/opencv/cv.h	211;"	d
CV_BGR2YCrCb	/usr/include/opencv/cv.h	216;"	d
CV_BGR5552BGR	/usr/include/opencv/cv.h	201;"	d
CV_BGR5552BGRA	/usr/include/opencv/cv.h	205;"	d
CV_BGR5552GRAY	/usr/include/opencv/cv.h	209;"	d
CV_BGR5552RGB	/usr/include/opencv/cv.h	202;"	d
CV_BGR5552RGBA	/usr/include/opencv/cv.h	206;"	d
CV_BGR5652BGR	/usr/include/opencv/cv.h	189;"	d
CV_BGR5652BGRA	/usr/include/opencv/cv.h	193;"	d
CV_BGR5652GRAY	/usr/include/opencv/cv.h	197;"	d
CV_BGR5652RGB	/usr/include/opencv/cv.h	190;"	d
CV_BGR5652RGBA	/usr/include/opencv/cv.h	194;"	d
CV_BGRA2BGR	/usr/include/opencv/cv.h	163;"	d
CV_BGRA2BGR555	/usr/include/opencv/cv.h	203;"	d
CV_BGRA2BGR565	/usr/include/opencv/cv.h	191;"	d
CV_BGRA2GRAY	/usr/include/opencv/cv.h	184;"	d
CV_BGRA2RGB	/usr/include/opencv/cv.h	170;"	d
CV_BGRA2RGBA	/usr/include/opencv/cv.h	175;"	d
CV_BG_MODEL_FGD	/usr/include/opencv/cvaux.h	1120;"	d
CV_BG_MODEL_FGD_SIMPLE	/usr/include/opencv/cvaux.h	1122;"	d
CV_BG_MODEL_MOG	/usr/include/opencv/cvaux.h	1121;"	d
CV_BG_STAT_MODEL_FIELDS	/usr/include/opencv/cvaux.h	/^    CV_BG_STAT_MODEL_FIELDS();$/;"	p	struct:CvBGStatModel	access:public	signature:()
CV_BG_STAT_MODEL_FIELDS	/usr/include/opencv/cvaux.h	/^    CV_BG_STAT_MODEL_FIELDS();$/;"	p	struct:CvFGDStatModel	access:public	signature:()
CV_BG_STAT_MODEL_FIELDS	/usr/include/opencv/cvaux.h	/^    CV_BG_STAT_MODEL_FIELDS();$/;"	p	struct:CvGaussBGModel	access:public	signature:()
CV_BG_STAT_MODEL_FIELDS	/usr/include/opencv/cvaux.h	1129;"	d
CV_BIG_INT	/usr/include/opencv/cxmisc.h	141;"	d
CV_BIG_INT	/usr/include/opencv/cxmisc.h	144;"	d
CV_BIG_UINT	/usr/include/opencv/cxmisc.h	142;"	d
CV_BIG_UINT	/usr/include/opencv/cxmisc.h	145;"	d
CV_BILATERAL	/usr/include/opencv/cv.h	78;"	d
CV_BLOB_CENTER	/usr/include/opencv/cvvidsurv.hpp	441;"	d
CV_BLOB_ID	/usr/include/opencv/cvvidsurv.hpp	440;"	d
CV_BLOB_MINH	/usr/include/opencv/cvvidsurv.hpp	439;"	d
CV_BLOB_MINW	/usr/include/opencv/cvvidsurv.hpp	438;"	d
CV_BLOB_RECT	/usr/include/opencv/cvvidsurv.hpp	448;"	d
CV_BLOB_RX	/usr/include/opencv/cvvidsurv.hpp	446;"	d
CV_BLOB_RY	/usr/include/opencv/cvvidsurv.hpp	447;"	d
CV_BLOB_WX	/usr/include/opencv/cvvidsurv.hpp	444;"	d
CV_BLOB_WY	/usr/include/opencv/cvvidsurv.hpp	445;"	d
CV_BLOB_X	/usr/include/opencv/cvvidsurv.hpp	442;"	d
CV_BLOB_Y	/usr/include/opencv/cvvidsurv.hpp	443;"	d
CV_BLUR	/usr/include/opencv/cv.h	75;"	d
CV_BLUR_NO_SCALE	/usr/include/opencv/cv.h	74;"	d
CV_BT_HIST_TYPE_H	/usr/include/opencv/cvvidsurv.hpp	1197;"	d
CV_BT_HIST_TYPE_MG	/usr/include/opencv/cvvidsurv.hpp	1195;"	d
CV_BT_HIST_TYPE_MG2	/usr/include/opencv/cvvidsurv.hpp	1196;"	d
CV_BT_HIST_TYPE_S	/usr/include/opencv/cvvidsurv.hpp	1194;"	d
CV_BadAlign	/usr/include/opencv/cxerror.h	74;"	d
CV_BadAlphaChannel	/usr/include/opencv/cxerror.h	71;"	d
CV_BadCOI	/usr/include/opencv/cxerror.h	77;"	d
CV_BadCallBack	/usr/include/opencv/cxerror.h	75;"	d
CV_BadDataPtr	/usr/include/opencv/cxerror.h	65;"	d
CV_BadDepth	/usr/include/opencv/cxerror.h	70;"	d
CV_BadImageSize	/usr/include/opencv/cxerror.h	63;"	d
CV_BadModelOrChSeq	/usr/include/opencv/cxerror.h	67;"	d
CV_BadNumChannel1U	/usr/include/opencv/cxerror.h	69;"	d
CV_BadNumChannels	/usr/include/opencv/cxerror.h	68;"	d
CV_BadOffset	/usr/include/opencv/cxerror.h	64;"	d
CV_BadOrder	/usr/include/opencv/cxerror.h	72;"	d
CV_BadOrigin	/usr/include/opencv/cxerror.h	73;"	d
CV_BadROISize	/usr/include/opencv/cxerror.h	78;"	d
CV_BadStep	/usr/include/opencv/cxerror.h	66;"	d
CV_BadTileSize	/usr/include/opencv/cxerror.h	76;"	d
CV_BayerBG2BGR	/usr/include/opencv/cv.h	227;"	d
CV_BayerBG2RGB	/usr/include/opencv/cv.h	232;"	d
CV_BayerGB2BGR	/usr/include/opencv/cv.h	228;"	d
CV_BayerGB2RGB	/usr/include/opencv/cv.h	233;"	d
CV_BayerGR2BGR	/usr/include/opencv/cv.h	230;"	d
CV_BayerGR2RGB	/usr/include/opencv/cv.h	235;"	d
CV_BayerRG2BGR	/usr/include/opencv/cv.h	229;"	d
CV_BayerRG2RGB	/usr/include/opencv/cv.h	234;"	d
CV_C	/usr/include/opencv/cxcore.h	838;"	d
CV_CALIB_CB_ADAPTIVE_THRESH	/usr/include/opencv/cv.h	1134;"	d
CV_CALIB_CB_FILTER_QUADS	/usr/include/opencv/cv.h	1136;"	d
CV_CALIB_CB_NORMALIZE_IMAGE	/usr/include/opencv/cv.h	1135;"	d
CV_CALIB_ETALON_CHECKERBOARD	/usr/include/opencv/cvaux.h	/^    CV_CALIB_ETALON_CHECKERBOARD = CV_CALIB_ETALON_CHESSBOARD$/;"	e	enum:CvCalibEtalonType
CV_CALIB_ETALON_CHESSBOARD	/usr/include/opencv/cvaux.h	/^    CV_CALIB_ETALON_CHESSBOARD = 0,$/;"	e	enum:CvCalibEtalonType
CV_CALIB_ETALON_USER	/usr/include/opencv/cvaux.h	/^    CV_CALIB_ETALON_USER = -1,$/;"	e	enum:CvCalibEtalonType
CV_CALIB_FIX_ASPECT_RATIO	/usr/include/opencv/cv.h	1118;"	d
CV_CALIB_FIX_PRINCIPAL_POINT	/usr/include/opencv/cv.h	1119;"	d
CV_CALIB_USE_INTRINSIC_GUESS	/usr/include/opencv/cv.h	1117;"	d
CV_CALIB_ZERO_TANGENT_DIST	/usr/include/opencv/cv.h	1120;"	d
CV_CALL	/usr/include/opencv/cxerror.h	168;"	d
CV_CAMERA_TO_WARP	/usr/include/opencv/cvaux.h	550;"	d
CV_CANNY_L2_GRADIENT	/usr/include/opencv/cv.h	974;"	d
CV_CAP_ANY	/usr/include/opencv/highgui.h	221;"	d
CV_CAP_CMU1394	/usr/include/opencv/highgui.h	232;"	d
CV_CAP_DC1394	/usr/include/opencv/highgui.h	231;"	d
CV_CAP_FIREWARE	/usr/include/opencv/highgui.h	229;"	d
CV_CAP_IEEE1394	/usr/include/opencv/highgui.h	230;"	d
CV_CAP_MIL	/usr/include/opencv/highgui.h	223;"	d
CV_CAP_PROP_BRIGHTNESS	/usr/include/opencv/highgui.h	273;"	d
CV_CAP_PROP_CONTRAST	/usr/include/opencv/highgui.h	274;"	d
CV_CAP_PROP_CONVERT_RGB	/usr/include/opencv/highgui.h	278;"	d
CV_CAP_PROP_FORMAT	/usr/include/opencv/highgui.h	271;"	d
CV_CAP_PROP_FOURCC	/usr/include/opencv/highgui.h	269;"	d
CV_CAP_PROP_FPS	/usr/include/opencv/highgui.h	268;"	d
CV_CAP_PROP_FRAME_COUNT	/usr/include/opencv/highgui.h	270;"	d
CV_CAP_PROP_FRAME_HEIGHT	/usr/include/opencv/highgui.h	267;"	d
CV_CAP_PROP_FRAME_WIDTH	/usr/include/opencv/highgui.h	266;"	d
CV_CAP_PROP_GAIN	/usr/include/opencv/highgui.h	277;"	d
CV_CAP_PROP_HUE	/usr/include/opencv/highgui.h	276;"	d
CV_CAP_PROP_MODE	/usr/include/opencv/highgui.h	272;"	d
CV_CAP_PROP_POS_AVI_RATIO	/usr/include/opencv/highgui.h	265;"	d
CV_CAP_PROP_POS_FRAMES	/usr/include/opencv/highgui.h	264;"	d
CV_CAP_PROP_POS_MSEC	/usr/include/opencv/highgui.h	263;"	d
CV_CAP_PROP_SATURATION	/usr/include/opencv/highgui.h	275;"	d
CV_CAP_QT	/usr/include/opencv/highgui.h	241;"	d
CV_CAP_STEREO	/usr/include/opencv/highgui.h	234;"	d
CV_CAP_TYZX	/usr/include/opencv/highgui.h	235;"	d
CV_CAP_V4L	/usr/include/opencv/highgui.h	226;"	d
CV_CAP_V4L2	/usr/include/opencv/highgui.h	227;"	d
CV_CAP_VFW	/usr/include/opencv/highgui.h	225;"	d
CV_CAST_16S	/usr/include/opencv/cxmisc.h	199;"	d
CV_CAST_16U	/usr/include/opencv/cxmisc.h	198;"	d
CV_CAST_32F	/usr/include/opencv/cxmisc.h	202;"	d
CV_CAST_32S	/usr/include/opencv/cxmisc.h	200;"	d
CV_CAST_64F	/usr/include/opencv/cxmisc.h	203;"	d
CV_CAST_64S	/usr/include/opencv/cxmisc.h	201;"	d
CV_CAST_8S	/usr/include/opencv/cxmisc.h	197;"	d
CV_CAST_8U	/usr/include/opencv/cxmisc.h	196;"	d
CV_CDECL	/usr/include/opencv/cxtypes.h	95;"	d
CV_CDECL	/usr/include/opencv/cxtypes.h	98;"	d
CV_CDECL	/usr/include/opencv/highgui.h	55;"	d
CV_CDECL	/usr/include/opencv/highgui.h	58;"	d
CV_CHAIN_APPROX_NONE	/usr/include/opencv/cvtypes.h	92;"	d
CV_CHAIN_APPROX_SIMPLE	/usr/include/opencv/cvtypes.h	93;"	d
CV_CHAIN_APPROX_TC89_KCOS	/usr/include/opencv/cvtypes.h	95;"	d
CV_CHAIN_APPROX_TC89_L1	/usr/include/opencv/cvtypes.h	94;"	d
CV_CHAIN_CODE	/usr/include/opencv/cvtypes.h	91;"	d
CV_CHECK	/usr/include/opencv/cxerror.h	156;"	d
CV_CHECK_NANS	/usr/include/opencv/cxmisc.h	114;"	d
CV_CHECK_QUIET	/usr/include/opencv/cxcore.h	666;"	d
CV_CHECK_RANGE	/usr/include/opencv/cxcore.h	665;"	d
CV_CLOCKWISE	/usr/include/opencv/cv.h	769;"	d
CV_CMP	/usr/include/opencv/cxtypes.h	202;"	d
CV_CMP_EQ	/usr/include/opencv/cxcore.h	589;"	d
CV_CMP_GE	/usr/include/opencv/cxcore.h	591;"	d
CV_CMP_GT	/usr/include/opencv/cxcore.h	590;"	d
CV_CMP_LE	/usr/include/opencv/cxcore.h	593;"	d
CV_CMP_LT	/usr/include/opencv/cxcore.h	592;"	d
CV_CMP_NE	/usr/include/opencv/cxcore.h	594;"	d
CV_CN_MAX	/usr/include/opencv/cxtypes.h	459;"	d
CV_CN_SHIFT	/usr/include/opencv/cxtypes.h	460;"	d
CV_COLORCVT_MAX	/usr/include/opencv/cv.h	252;"	d
CV_COL_SAMPLE	/usr/include/opencv/ml.h	64;"	d
CV_COMP_BHATTACHARYYA	/usr/include/opencv/cv.h	850;"	d
CV_COMP_CHISQR	/usr/include/opencv/cv.h	848;"	d
CV_COMP_CORREL	/usr/include/opencv/cv.h	847;"	d
CV_COMP_INTERSECT	/usr/include/opencv/cv.h	849;"	d
CV_CONTOURS_MATCH_I1	/usr/include/opencv/cv.h	741;"	d
CV_CONTOURS_MATCH_I2	/usr/include/opencv/cv.h	742;"	d
CV_CONTOURS_MATCH_I3	/usr/include/opencv/cv.h	743;"	d
CV_CONTOUR_FIELDS	/usr/include/opencv/cxtypes.h	1332;"	d
CV_CONTOUR_TREES_MATCH_I1	/usr/include/opencv/cv.h	760;"	d
CV_COUNTER_CLOCKWISE	/usr/include/opencv/cv.h	770;"	d
CV_COUNT_OBS	/usr/include/opencv/cvaux.h	174;"	d
CV_COVAR_COLS	/usr/include/opencv/cxcore.h	793;"	d
CV_COVAR_NORMAL	/usr/include/opencv/cxcore.h	780;"	d
CV_COVAR_ROWS	/usr/include/opencv/cxcore.h	790;"	d
CV_COVAR_SCALE	/usr/include/opencv/cxcore.h	787;"	d
CV_COVAR_SCRAMBLED	/usr/include/opencv/cxcore.h	777;"	d
CV_COVAR_USE_AVG	/usr/include/opencv/cxcore.h	784;"	d
CV_CURRENT_INT	/usr/include/opencv/cvaux.h	276;"	d
CV_CURRENT_POINT	/usr/include/opencv/cxtypes.h	1592;"	d
CV_CVTIMG_FLIP	/usr/include/opencv/highgui.h	202;"	d
CV_CVTIMG_SWAP_RB	/usr/include/opencv/highgui.h	203;"	d
CV_DBG_BREAK	/usr/include/opencv/cxmisc.h	151;"	d
CV_DBG_BREAK	/usr/include/opencv/cxmisc.h	153;"	d
CV_DEFAULT	/usr/include/opencv/cxcore.h	/^                               CvFreeFunc free_func CV_DEFAULT(NULL),$/;"	p	signature:(NULL)
CV_DEFAULT	/usr/include/opencv/cxcore.h	/^                               void* userdata CV_DEFAULT(NULL));$/;"	p	signature:(NULL)
CV_DEFAULT	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvSetMemoryManager( CvAllocFunc alloc_func CV_DEFAULT(NULL),$/;"	p	signature:(NULL)
CV_DEFAULT	/usr/include/opencv/cxtypes.h	105;"	d
CV_DEFAULT	/usr/include/opencv/cxtypes.h	108;"	d
CV_DEFAULT	/usr/include/opencv/highgui.h	65;"	d
CV_DEFAULT	/usr/include/opencv/highgui.h	68;"	d
CV_DEFAULT_IMAGE_ROW_ALIGN	/usr/include/opencv/cxmisc.h	74;"	d
CV_DEFAULT_MAT_ROW_ALIGN	/usr/include/opencv/cxmisc.h	77;"	d
CV_DEFINE_MASK	/usr/include/opencv/cxmisc.h	211;"	d
CV_DEF_INIT_BIG_FUNC_TAB_2D	/usr/include/opencv/cxmisc.h	844;"	d
CV_DEF_INIT_FUNC_TAB_0D	/usr/include/opencv/cxmisc.h	885;"	d
CV_DEF_INIT_FUNC_TAB_1D	/usr/include/opencv/cxmisc.h	897;"	d
CV_DEF_INIT_FUNC_TAB_2D	/usr/include/opencv/cxmisc.h	829;"	d
CV_DEF_INIT_PIXSIZE_TAB_2D	/usr/include/opencv/cxmisc.h	900;"	d
CV_DEPTH_MAX	/usr/include/opencv/cxtypes.h	461;"	d
CV_DESCALE	/usr/include/opencv/cxmisc.h	257;"	d
CV_DIFF	/usr/include/opencv/cxcore.h	843;"	d
CV_DIFF_C	/usr/include/opencv/cxcore.h	846;"	d
CV_DIFF_L1	/usr/include/opencv/cxcore.h	847;"	d
CV_DIFF_L2	/usr/include/opencv/cxcore.h	848;"	d
CV_DIM	/usr/include/opencv/cxmisc.h	223;"	d
CV_DISPARITY_BIRCHFIELD	/usr/include/opencv/cvaux.h	453;"	d
CV_DIST_C	/usr/include/opencv/cvtypes.h	208;"	d
CV_DIST_FAIR	/usr/include/opencv/cvtypes.h	210;"	d
CV_DIST_HUBER	/usr/include/opencv/cvtypes.h	212;"	d
CV_DIST_L1	/usr/include/opencv/cvtypes.h	206;"	d
CV_DIST_L12	/usr/include/opencv/cvtypes.h	209;"	d
CV_DIST_L2	/usr/include/opencv/cvtypes.h	207;"	d
CV_DIST_MASK_3	/usr/include/opencv/cv.h	916;"	d
CV_DIST_MASK_5	/usr/include/opencv/cv.h	917;"	d
CV_DIST_MASK_PRECISE	/usr/include/opencv/cv.h	918;"	d
CV_DIST_USER	/usr/include/opencv/cvtypes.h	205;"	d
CV_DIST_WELSCH	/usr/include/opencv/cvtypes.h	211;"	d
CV_DIV_BY_ZERO_ERR	/usr/include/opencv/cxmisc.h	/^    CV_DIV_BY_ZERO_ERR =  -11, \/\/ipp comp$/;"	e	enum:CvStatus
CV_DOMINANT_IPAN	/usr/include/opencv/cv.h	709;"	d
CV_DTREE_CAT_DIR	/usr/include/opencv/ml.h	559;"	d
CV_DXT_FORWARD	/usr/include/opencv/cxcore.h	876;"	d
CV_DXT_INVERSE	/usr/include/opencv/cxcore.h	877;"	d
CV_DXT_INVERSE_SCALE	/usr/include/opencv/cxcore.h	880;"	d
CV_DXT_INV_SCALE	/usr/include/opencv/cxcore.h	879;"	d
CV_DXT_MUL_CONJ	/usr/include/opencv/cxcore.h	882;"	d
CV_DXT_ROWS	/usr/include/opencv/cxcore.h	881;"	d
CV_DXT_SCALE	/usr/include/opencv/cxcore.h	878;"	d
CV_EIGOBJ_BOTH_CALLBACK	/usr/include/opencv/cvaux.h	71;"	d
CV_EIGOBJ_INPUT_CALLBACK	/usr/include/opencv/cvaux.h	69;"	d
CV_EIGOBJ_NO_CALLBACK	/usr/include/opencv/cvaux.h	68;"	d
CV_EIGOBJ_OUTPUT_CALLBACK	/usr/include/opencv/cvaux.h	70;"	d
CV_ELEM_SIZE	/usr/include/opencv/cxtypes.h	609;"	d
CV_ELEM_SIZE1	/usr/include/opencv/cxtypes.h	605;"	d
CV_EMPTY	/usr/include/opencv/cxmisc.h	208;"	d
CV_END	/usr/include/opencv/cv.hpp	53;"	d
CV_EQ	/usr/include/opencv/cxmisc.h	187;"	d
CV_ERROR	/usr/include/opencv/cxerror.h	141;"	d
CV_ERROR_FROM_CODE	/usr/include/opencv/cxerror.h	148;"	d
CV_ERROR_FROM_STATUS	/usr/include/opencv/cxmisc.h	636;"	d
CV_EVENT_FLAG_ALTKEY	/usr/include/opencv/highgui.h	171;"	d
CV_EVENT_FLAG_CTRLKEY	/usr/include/opencv/highgui.h	169;"	d
CV_EVENT_FLAG_LBUTTON	/usr/include/opencv/highgui.h	166;"	d
CV_EVENT_FLAG_MBUTTON	/usr/include/opencv/highgui.h	168;"	d
CV_EVENT_FLAG_RBUTTON	/usr/include/opencv/highgui.h	167;"	d
CV_EVENT_FLAG_SHIFTKEY	/usr/include/opencv/highgui.h	170;"	d
CV_EVENT_LBUTTONDBLCLK	/usr/include/opencv/highgui.h	162;"	d
CV_EVENT_LBUTTONDOWN	/usr/include/opencv/highgui.h	156;"	d
CV_EVENT_LBUTTONUP	/usr/include/opencv/highgui.h	159;"	d
CV_EVENT_MBUTTONDBLCLK	/usr/include/opencv/highgui.h	164;"	d
CV_EVENT_MBUTTONDOWN	/usr/include/opencv/highgui.h	158;"	d
CV_EVENT_MBUTTONUP	/usr/include/opencv/highgui.h	161;"	d
CV_EVENT_MOUSEMOVE	/usr/include/opencv/highgui.h	155;"	d
CV_EVENT_RBUTTONDBLCLK	/usr/include/opencv/highgui.h	163;"	d
CV_EVENT_RBUTTONDOWN	/usr/include/opencv/highgui.h	157;"	d
CV_EVENT_RBUTTONUP	/usr/include/opencv/highgui.h	160;"	d
CV_EXPORTS	/usr/include/opencv/cxtypes.h	131;"	d
CV_EXPORTS	/usr/include/opencv/cxtypes.h	133;"	d
CV_EXPORTS	/usr/include/opencv/highgui.h	91;"	d
CV_EXPORTS	/usr/include/opencv/highgui.h	93;"	d
CV_EXTERN_C	/usr/include/opencv/cxtypes.h	104;"	d
CV_EXTERN_C	/usr/include/opencv/cxtypes.h	107;"	d
CV_EXTERN_C	/usr/include/opencv/highgui.h	64;"	d
CV_EXTERN_C	/usr/include/opencv/highgui.h	67;"	d
CV_EXTERN_C_FUNCPTR	/usr/include/opencv/cxtypes.h	114;"	d
CV_EXTERN_C_FUNCPTR	/usr/include/opencv/cxtypes.h	116;"	d
CV_EXTERN_C_FUNCPTR	/usr/include/opencv/highgui.h	74;"	d
CV_EXTERN_C_FUNCPTR	/usr/include/opencv/highgui.h	76;"	d
CV_ErrModeLeaf	/usr/include/opencv/cxcore.h	1481;"	d
CV_ErrModeParent	/usr/include/opencv/cxcore.h	1482;"	d
CV_ErrModeSilent	/usr/include/opencv/cxcore.h	1483;"	d
CV_FACE_ELEMENTS	/usr/include/opencv/cvaux.h	/^enum CV_FACE_ELEMENTS$/;"	g
CV_FACE_LEFT_EYE	/usr/include/opencv/cvaux.h	/^    CV_FACE_LEFT_EYE = 1,$/;"	e	enum:CV_FACE_ELEMENTS
CV_FACE_MOUTH	/usr/include/opencv/cvaux.h	/^    CV_FACE_MOUTH = 0,$/;"	e	enum:CV_FACE_ELEMENTS
CV_FACE_RIGHT_EYE	/usr/include/opencv/cvaux.h	/^    CV_FACE_RIGHT_EYE = 2$/;"	e	enum:CV_FACE_ELEMENTS
CV_FILLED	/usr/include/opencv/cxcore.h	1264;"	d
CV_FIRST_VORONOIEDGE2D	/usr/include/opencv/cvaux.h	934;"	d
CV_FLOODFILL_FIXED_RANGE	/usr/include/opencv/cv.h	959;"	d
CV_FLOODFILL_MASK_ONLY	/usr/include/opencv/cv.h	960;"	d
CV_FLT_TO_FIX	/usr/include/opencv/cxmisc.h	258;"	d
CV_FM_7POINT	/usr/include/opencv/cv.h	1172;"	d
CV_FM_8POINT	/usr/include/opencv/cv.h	1173;"	d
CV_FM_LMEDS	/usr/include/opencv/cv.h	1176;"	d
CV_FM_LMEDS_ONLY	/usr/include/opencv/cv.h	1174;"	d
CV_FM_RANSAC	/usr/include/opencv/cv.h	1177;"	d
CV_FM_RANSAC_ONLY	/usr/include/opencv/cv.h	1175;"	d
CV_FONT_HERSHEY_COMPLEX	/usr/include/opencv/cxcore.h	1353;"	d
CV_FONT_HERSHEY_COMPLEX_SMALL	/usr/include/opencv/cxcore.h	1355;"	d
CV_FONT_HERSHEY_DUPLEX	/usr/include/opencv/cxcore.h	1352;"	d
CV_FONT_HERSHEY_PLAIN	/usr/include/opencv/cxcore.h	1351;"	d
CV_FONT_HERSHEY_SCRIPT_COMPLEX	/usr/include/opencv/cxcore.h	1357;"	d
CV_FONT_HERSHEY_SCRIPT_SIMPLEX	/usr/include/opencv/cxcore.h	1356;"	d
CV_FONT_HERSHEY_SIMPLEX	/usr/include/opencv/cxcore.h	1350;"	d
CV_FONT_HERSHEY_TRIPLEX	/usr/include/opencv/cxcore.h	1354;"	d
CV_FONT_ITALIC	/usr/include/opencv/cxcore.h	1360;"	d
CV_FONT_VECTOR0	/usr/include/opencv/cxcore.h	1362;"	d
CV_FOURCC	/usr/include/opencv/highgui.h	288;"	d
CV_FRONT	/usr/include/opencv/cxcore.h	969;"	d
CV_FUNCNAME	/usr/include/opencv/cxerror.h	129;"	d
CV_FUNCNAME	/usr/include/opencv/cxerror.h	132;"	d
CV_GAUSSIAN	/usr/include/opencv/cv.h	76;"	d
CV_GAUSSIAN_5x5	/usr/include/opencv/cvtypes.h	/^    CV_GAUSSIAN_5x5 = 7$/;"	e	enum:CvFilter
CV_GE	/usr/include/opencv/cxmisc.h	190;"	d
CV_GEMM_A_T	/usr/include/opencv/cxcore.h	693;"	d
CV_GEMM_B_T	/usr/include/opencv/cxcore.h	694;"	d
CV_GEMM_C_T	/usr/include/opencv/cxcore.h	695;"	d
CV_GET_CURRENT	/usr/include/opencv/cvcompat.h	976;"	d
CV_GET_FUNC_PTR	/usr/include/opencv/cxmisc.h	915;"	d
CV_GET_SEQ_ELEM	/usr/include/opencv/cxtypes.h	1518;"	d
CV_GLCMDESC_CLUSTERSHADE	/usr/include/opencv/cvaux.h	783;"	d
CV_GLCMDESC_CLUSTERTENDENCY	/usr/include/opencv/cvaux.h	782;"	d
CV_GLCMDESC_CONTRAST	/usr/include/opencv/cvaux.h	781;"	d
CV_GLCMDESC_CORRELATION	/usr/include/opencv/cvaux.h	784;"	d
CV_GLCMDESC_CORRELATIONINFO1	/usr/include/opencv/cvaux.h	785;"	d
CV_GLCMDESC_CORRELATIONINFO2	/usr/include/opencv/cvaux.h	786;"	d
CV_GLCMDESC_ENERGY	/usr/include/opencv/cvaux.h	779;"	d
CV_GLCMDESC_ENTROPY	/usr/include/opencv/cvaux.h	778;"	d
CV_GLCMDESC_HOMOGENITY	/usr/include/opencv/cvaux.h	780;"	d
CV_GLCMDESC_MAXIMUMPROBABILITY	/usr/include/opencv/cvaux.h	787;"	d
CV_GLCMDESC_OPTIMIZATION_ALLOWDOUBLENEST	/usr/include/opencv/cvaux.h	774;"	d
CV_GLCMDESC_OPTIMIZATION_ALLOWTRIPLENEST	/usr/include/opencv/cvaux.h	775;"	d
CV_GLCMDESC_OPTIMIZATION_HISTOGRAM	/usr/include/opencv/cvaux.h	776;"	d
CV_GLCM_ALL	/usr/include/opencv/cvaux.h	789;"	d
CV_GLCM_DESC	/usr/include/opencv/cvaux.h	791;"	d
CV_GLCM_GLCM	/usr/include/opencv/cvaux.h	790;"	d
CV_GLCM_OPTIMIZATION_HISTOGRAM	/usr/include/opencv/cvaux.h	772;"	d
CV_GLCM_OPTIMIZATION_LUT	/usr/include/opencv/cvaux.h	771;"	d
CV_GLCM_OPTIMIZATION_NONE	/usr/include/opencv/cvaux.h	770;"	d
CV_GRAPH	/usr/include/opencv/cxtypes.h	1397;"	d
CV_GRAPH_ALL_ITEMS	/usr/include/opencv/cxcore.h	1211;"	d
CV_GRAPH_ANY_EDGE	/usr/include/opencv/cxcore.h	1206;"	d
CV_GRAPH_BACKTRACKING	/usr/include/opencv/cxcore.h	1208;"	d
CV_GRAPH_BACK_EDGE	/usr/include/opencv/cxcore.h	1203;"	d
CV_GRAPH_CROSS_EDGE	/usr/include/opencv/cxcore.h	1205;"	d
CV_GRAPH_EDGE_FIELDS	/usr/include/opencv/cxtypes.h	1276;"	d
CV_GRAPH_FIELDS	/usr/include/opencv/cxtypes.h	1311;"	d
CV_GRAPH_FLAG_ORIENTED	/usr/include/opencv/cxtypes.h	1395;"	d
CV_GRAPH_FORWARD_EDGE	/usr/include/opencv/cxcore.h	1204;"	d
CV_GRAPH_FORWARD_EDGE_FLAG	/usr/include/opencv/cxcore.h	1220;"	d
CV_GRAPH_ITEM_VISITED_FLAG	/usr/include/opencv/cxcore.h	1214;"	d
CV_GRAPH_NEW_TREE	/usr/include/opencv/cxcore.h	1207;"	d
CV_GRAPH_OVER	/usr/include/opencv/cxcore.h	1209;"	d
CV_GRAPH_SEARCH_TREE_NODE_FLAG	/usr/include/opencv/cxcore.h	1219;"	d
CV_GRAPH_TREE_EDGE	/usr/include/opencv/cxcore.h	1202;"	d
CV_GRAPH_VERTEX	/usr/include/opencv/cxcore.h	1201;"	d
CV_GRAPH_VERTEX_FIELDS	/usr/include/opencv/cxtypes.h	1283;"	d
CV_GRAPH_WEIGHTED_EDGE_FIELDS	/usr/include/opencv/cvaux.h	282;"	d
CV_GRAPH_WEIGHTED_VERTEX_FIELDS	/usr/include/opencv/cvaux.h	279;"	d
CV_GRAY2BGR	/usr/include/opencv/cv.h	180;"	d
CV_GRAY2BGR555	/usr/include/opencv/cv.h	208;"	d
CV_GRAY2BGR565	/usr/include/opencv/cv.h	196;"	d
CV_GRAY2BGRA	/usr/include/opencv/cv.h	182;"	d
CV_GRAY2RGB	/usr/include/opencv/cv.h	181;"	d
CV_GRAY2RGBA	/usr/include/opencv/cv.h	183;"	d
CV_GT	/usr/include/opencv/cxmisc.h	189;"	d
CV_HAAR_DO_CANNY_PRUNING	/usr/include/opencv/cv.h	1057;"	d
CV_HAAR_FEATURE_MAX	/usr/include/opencv/cvtypes.h	325;"	d
CV_HAAR_MAGIC_VAL	/usr/include/opencv/cvtypes.h	318;"	d
CV_HAAR_SCALE_IMAGE	/usr/include/opencv/cv.h	1058;"	d
CV_HIST_ARRAY	/usr/include/opencv/cxtypes.h	795;"	d
CV_HIST_HAS_RANGES	/usr/include/opencv/cxtypes.h	824;"	d
CV_HIST_MAGIC_VAL	/usr/include/opencv/cxtypes.h	789;"	d
CV_HIST_RANGES_FLAG	/usr/include/opencv/cxtypes.h	793;"	d
CV_HIST_SPARSE	/usr/include/opencv/cxtypes.h	796;"	d
CV_HIST_TREE	/usr/include/opencv/cxtypes.h	797;"	d
CV_HIST_UNIFORM	/usr/include/opencv/cxtypes.h	801;"	d
CV_HIST_UNIFORM_FLAG	/usr/include/opencv/cxtypes.h	790;"	d
CV_HLS2BGR	/usr/include/opencv/cv.h	249;"	d
CV_HLS2RGB	/usr/include/opencv/cv.h	250;"	d
CV_HOUGH_GRADIENT	/usr/include/opencv/cv.h	1021;"	d
CV_HOUGH_MULTI_SCALE	/usr/include/opencv/cv.h	1020;"	d
CV_HOUGH_PROBABILISTIC	/usr/include/opencv/cv.h	1019;"	d
CV_HOUGH_STANDARD	/usr/include/opencv/cv.h	1018;"	d
CV_HSV2BGR	/usr/include/opencv/cv.h	242;"	d
CV_HSV2RGB	/usr/include/opencv/cv.h	243;"	d
CV_HeaderIsNull	/usr/include/opencv/cxerror.h	62;"	d
CV_IABS	/usr/include/opencv/cxtypes.h	198;"	d
CV_IABS	/usr/include/opencv/cxtypes.h	200;"	d
CV_ICC	/usr/include/opencv/cxtypes.h	56;"	d
CV_ICC	/usr/include/opencv/cxtypes.h	58;"	d
CV_ICC	/usr/include/opencv/cxtypes.h	60;"	d
CV_ICC	/usr/include/opencv/cxtypes.h	62;"	d
CV_IDP_BIRCHFIELD_PARAM1	/usr/include/opencv/cvaux.h	446;"	d
CV_IDP_BIRCHFIELD_PARAM2	/usr/include/opencv/cvaux.h	447;"	d
CV_IDP_BIRCHFIELD_PARAM3	/usr/include/opencv/cvaux.h	448;"	d
CV_IDP_BIRCHFIELD_PARAM4	/usr/include/opencv/cvaux.h	449;"	d
CV_IDP_BIRCHFIELD_PARAM5	/usr/include/opencv/cvaux.h	450;"	d
CV_IMAGE_ELEM	/usr/include/opencv/cxtypes.h	452;"	d
CV_IMAX	/usr/include/opencv/cxtypes.h	194;"	d
CV_IMIN	/usr/include/opencv/cxtypes.h	192;"	d
CV_IMPL	/usr/include/opencv/cxmisc.h	148;"	d
CV_IMPLEMENT_QSORT	/usr/include/opencv/cxmisc.h	589;"	d
CV_IMPLEMENT_QSORT_EX	/usr/include/opencv/cxmisc.h	425;"	d
CV_INIT_3X3_DELTAS	/usr/include/opencv/cvtypes.h	109;"	d
CV_INIT_PIXEL_POS	/usr/include/opencv/cvcompat.h	950;"	d
CV_INLINE	/usr/include/opencv/cxtypes.h	122;"	d
CV_INLINE	/usr/include/opencv/cxtypes.h	124;"	d
CV_INLINE	/usr/include/opencv/cxtypes.h	126;"	d
CV_INLINE	/usr/include/opencv/highgui.h	82;"	d
CV_INLINE	/usr/include/opencv/highgui.h	84;"	d
CV_INLINE	/usr/include/opencv/highgui.h	86;"	d
CV_INPAINT_NS	/usr/include/opencv/cv.h	138;"	d
CV_INPAINT_TELEA	/usr/include/opencv/cv.h	139;"	d
CV_INPLACE_NOT_SUPPORTED_ERR	/usr/include/opencv/cxmisc.h	/^    CV_INPLACE_NOT_SUPPORTED_ERR= -112,$/;"	e	enum:CvStatus
CV_INTER_AREA	/usr/include/opencv/cv.h	260;"	d
CV_INTER_CUBIC	/usr/include/opencv/cv.h	259;"	d
CV_INTER_LINEAR	/usr/include/opencv/cv.h	258;"	d
CV_INTER_NN	/usr/include/opencv/cv.h	257;"	d
CV_ISOLATED_ROI	/usr/include/opencv/cv.hpp	55;"	d
CV_IS_CONT_MAT	/usr/include/opencv/cxtypes.h	529;"	d
CV_IS_GRAPH	/usr/include/opencv/cxtypes.h	1461;"	d
CV_IS_GRAPH_EDGE_VISITED	/usr/include/opencv/cxcore.h	1217;"	d
CV_IS_GRAPH_ORIENTED	/usr/include/opencv/cxtypes.h	1464;"	d
CV_IS_GRAPH_VERTEX_VISITED	/usr/include/opencv/cxcore.h	1215;"	d
CV_IS_HAAR_CLASSIFIER	/usr/include/opencv/cvtypes.h	321;"	d
CV_IS_HIST	/usr/include/opencv/cxtypes.h	813;"	d
CV_IS_IMAGE	/usr/include/opencv/cxtypes.h	443;"	d
CV_IS_IMAGE_HDR	/usr/include/opencv/cxtypes.h	440;"	d
CV_IS_MASK_ARR	/usr/include/opencv/cxtypes.h	585;"	d
CV_IS_MAT	/usr/include/opencv/cxtypes.h	582;"	d
CV_IS_MATND	/usr/include/opencv/cxtypes.h	727;"	d
CV_IS_MATND_HDR	/usr/include/opencv/cxtypes.h	724;"	d
CV_IS_MAT_CONST	/usr/include/opencv/cxtypes.h	600;"	d
CV_IS_MAT_CONT	/usr/include/opencv/cxtypes.h	528;"	d
CV_IS_MAT_HDR	/usr/include/opencv/cxtypes.h	577;"	d
CV_IS_ROW_SAMPLE	/usr/include/opencv/ml.h	69;"	d
CV_IS_SEQ	/usr/include/opencv/cxtypes.h	1352;"	d
CV_IS_SEQ_CHAIN	/usr/include/opencv/cxtypes.h	1448;"	d
CV_IS_SEQ_CHAIN_CONTOUR	/usr/include/opencv/cxtypes.h	1454;"	d
CV_IS_SEQ_CLOSED	/usr/include/opencv/cxtypes.h	1429;"	d
CV_IS_SEQ_CONTOUR	/usr/include/opencv/cxtypes.h	1451;"	d
CV_IS_SEQ_CONVEX	/usr/include/opencv/cxtypes.h	1430;"	d
CV_IS_SEQ_CURVE	/usr/include/opencv/cxtypes.h	1428;"	d
CV_IS_SEQ_HOLE	/usr/include/opencv/cxtypes.h	1431;"	d
CV_IS_SEQ_INDEX	/usr/include/opencv/cxtypes.h	1425;"	d
CV_IS_SEQ_POINT_SET	/usr/include/opencv/cxtypes.h	1436;"	d
CV_IS_SEQ_POINT_SUBSET	/usr/include/opencv/cxtypes.h	1439;"	d
CV_IS_SEQ_POLYGON	/usr/include/opencv/cxtypes.h	1445;"	d
CV_IS_SEQ_POLYGON_TREE	/usr/include/opencv/cxtypes.h	1457;"	d
CV_IS_SEQ_POLYLINE	/usr/include/opencv/cxtypes.h	1442;"	d
CV_IS_SEQ_SIMPLE	/usr/include/opencv/cxtypes.h	1432;"	d
CV_IS_SET	/usr/include/opencv/cxtypes.h	1356;"	d
CV_IS_SET_ELEM	/usr/include/opencv/cxtypes.h	1257;"	d
CV_IS_SET_ELEM_EXISTS	/usr/include/opencv/cvcompat.h	503;"	d
CV_IS_SPARSE_HIST	/usr/include/opencv/cxtypes.h	821;"	d
CV_IS_SPARSE_MAT	/usr/include/opencv/cxtypes.h	760;"	d
CV_IS_SPARSE_MAT_HDR	/usr/include/opencv/cxtypes.h	756;"	d
CV_IS_STORAGE	/usr/include/opencv/cxtypes.h	1165;"	d
CV_IS_SUBDIV2D	/usr/include/opencv/cxtypes.h	1467;"	d
CV_IS_TEMP_MAT	/usr/include/opencv/cxtypes.h	532;"	d
CV_IS_UNIFORM_HIST	/usr/include/opencv/cxtypes.h	818;"	d
CV_L1	/usr/include/opencv/cxcore.h	839;"	d
CV_L2	/usr/include/opencv/cxcore.h	840;"	d
CV_LAST_VORONOIEDGE2D	/usr/include/opencv/cvaux.h	935;"	d
CV_LE	/usr/include/opencv/cxmisc.h	186;"	d
CV_LEE_AUTO	/usr/include/opencv/cvaux.h	/^    CV_LEE_AUTO = -1,$/;"	e	enum:CvLeeParameters
CV_LEE_DOUBLE	/usr/include/opencv/cvaux.h	/^    CV_LEE_DOUBLE = 2,$/;"	e	enum:CvLeeParameters
CV_LEE_ERODE	/usr/include/opencv/cvaux.h	/^    CV_LEE_ERODE = 0,$/;"	e	enum:CvLeeParameters
CV_LEE_FLOAT	/usr/include/opencv/cvaux.h	/^    CV_LEE_FLOAT = 1,$/;"	e	enum:CvLeeParameters
CV_LEE_INT	/usr/include/opencv/cvaux.h	/^    CV_LEE_INT = 0,$/;"	e	enum:CvLeeParameters
CV_LEE_NON	/usr/include/opencv/cvaux.h	/^    CV_LEE_NON = 2$/;"	e	enum:CvLeeParameters
CV_LEE_ZOOM	/usr/include/opencv/cvaux.h	/^    CV_LEE_ZOOM = 1,$/;"	e	enum:CvLeeParameters
CV_LINK_RUNS	/usr/include/opencv/cvtypes.h	96;"	d
CV_LKFLOW_INITIAL_GUESSES	/usr/include/opencv/cv.h	473;"	d
CV_LKFLOW_PYR_A_READY	/usr/include/opencv/cv.h	471;"	d
CV_LKFLOW_PYR_B_READY	/usr/include/opencv/cv.h	472;"	d
CV_LOAD_IMAGE_ANYCOLOR	/usr/include/opencv/highgui.h	188;"	d
CV_LOAD_IMAGE_ANYDEPTH	/usr/include/opencv/highgui.h	186;"	d
CV_LOAD_IMAGE_COLOR	/usr/include/opencv/highgui.h	184;"	d
CV_LOAD_IMAGE_GRAYSCALE	/usr/include/opencv/highgui.h	182;"	d
CV_LOAD_IMAGE_UNCHANGED	/usr/include/opencv/highgui.h	180;"	d
CV_LOG2	/usr/include/opencv/cxtypes.h	179;"	d
CV_LOG2PI	/usr/include/opencv/ml.h	61;"	d
CV_LT	/usr/include/opencv/cxmisc.h	185;"	d
CV_LU	/usr/include/opencv/cxcore.h	746;"	d
CV_Lab2BGR	/usr/include/opencv/cv.h	245;"	d
CV_Lab2RGB	/usr/include/opencv/cv.h	246;"	d
CV_Luv2BGR	/usr/include/opencv/cv.h	247;"	d
CV_Luv2RGB	/usr/include/opencv/cv.h	248;"	d
CV_MAGIC_MASK	/usr/include/opencv/cxtypes.h	534;"	d
CV_MAJOR_VERSION	/usr/include/opencv/cvver.h	50;"	d
CV_MAKETYPE	/usr/include/opencv/cxtypes.h	472;"	d
CV_MAKE_STR	/usr/include/opencv/cxmisc.h	209;"	d
CV_MAKE_TYPE	/usr/include/opencv/cxtypes.h	473;"	d
CV_MALLOC_ALIGN	/usr/include/opencv/cxmisc.h	84;"	d
CV_MAT32F	/usr/include/opencv/cvcompat.h	81;"	d
CV_MAT3x1_32F	/usr/include/opencv/cvcompat.h	82;"	d
CV_MAT3x1_64D	/usr/include/opencv/cvcompat.h	88;"	d
CV_MAT3x3_32F	/usr/include/opencv/cvcompat.h	84;"	d
CV_MAT3x3_64D	/usr/include/opencv/cvcompat.h	90;"	d
CV_MAT4x1_32F	/usr/include/opencv/cvcompat.h	83;"	d
CV_MAT4x1_64D	/usr/include/opencv/cvcompat.h	89;"	d
CV_MAT4x4_32F	/usr/include/opencv/cvcompat.h	85;"	d
CV_MAT4x4_64D	/usr/include/opencv/cvcompat.h	91;"	d
CV_MAT64D	/usr/include/opencv/cvcompat.h	87;"	d
CV_MATND_MAGIC_VAL	/usr/include/opencv/cxtypes.h	692;"	d
CV_MAT_CN	/usr/include/opencv/cxtypes.h	521;"	d
CV_MAT_CN_MASK	/usr/include/opencv/cxtypes.h	520;"	d
CV_MAT_CONT_FLAG	/usr/include/opencv/cxtypes.h	527;"	d
CV_MAT_CONT_FLAG_SHIFT	/usr/include/opencv/cxtypes.h	526;"	d
CV_MAT_DEPTH	/usr/include/opencv/cxtypes.h	523;"	d
CV_MAT_DEPTH_MASK	/usr/include/opencv/cxtypes.h	522;"	d
CV_MAT_ELEM	/usr/include/opencv/cxtypes.h	641;"	d
CV_MAT_ELEM_PTR	/usr/include/opencv/cxtypes.h	638;"	d
CV_MAT_ELEM_PTR_FAST	/usr/include/opencv/cxtypes.h	633;"	d
CV_MAT_MAGIC_VAL	/usr/include/opencv/cxtypes.h	535;"	d
CV_MAT_TEMP_FLAG	/usr/include/opencv/cxtypes.h	531;"	d
CV_MAT_TEMP_FLAG_SHIFT	/usr/include/opencv/cxtypes.h	530;"	d
CV_MAT_TYPE	/usr/include/opencv/cxtypes.h	525;"	d
CV_MAT_TYPE_MASK	/usr/include/opencv/cxtypes.h	524;"	d
CV_MAX_ALLOC_SIZE	/usr/include/opencv/cxmisc.h	81;"	d
CV_MAX_ARR	/usr/include/opencv/cxcore.h	291;"	d
CV_MAX_DIM	/usr/include/opencv/cxtypes.h	695;"	d
CV_MAX_DIM_HEAP	/usr/include/opencv/cxtypes.h	696;"	d
CV_MAX_INLINE_MAT_OP_SIZE	/usr/include/opencv/cxmisc.h	64;"	d
CV_MAX_LOCAL_MAT_SIZE	/usr/include/opencv/cxmisc.h	67;"	d
CV_MAX_LOCAL_SIZE	/usr/include/opencv/cxmisc.h	70;"	d
CV_MAX_SOBEL_KSIZE	/usr/include/opencv/cv.h	146;"	d
CV_MAX_STRLEN	/usr/include/opencv/cxmisc.h	102;"	d
CV_MAX_THREADS	/usr/include/opencv/cxmisc.h	106;"	d
CV_MAX_THREADS	/usr/include/opencv/cxmisc.h	108;"	d
CV_MEDIAN	/usr/include/opencv/cv.h	77;"	d
CV_MEMCPY_AUTO	/usr/include/opencv/cxmisc.h	318;"	d
CV_MEMCPY_CHAR	/usr/include/opencv/cxmisc.h	294;"	d
CV_MEMCPY_INT	/usr/include/opencv/cxmisc.h	305;"	d
CV_MIDDLE	/usr/include/opencv/cv.hpp	54;"	d
CV_MINMAX	/usr/include/opencv/cxcore.h	844;"	d
CV_MINOR_VERSION	/usr/include/opencv/cvver.h	51;"	d
CV_MOP_BLACKHAT	/usr/include/opencv/cv.h	333;"	d
CV_MOP_CLOSE	/usr/include/opencv/cv.h	330;"	d
CV_MOP_GRADIENT	/usr/include/opencv/cv.h	331;"	d
CV_MOP_OPEN	/usr/include/opencv/cv.h	329;"	d
CV_MOP_TOPHAT	/usr/include/opencv/cv.h	332;"	d
CV_MOVE_DOWN	/usr/include/opencv/cvcompat.h	995;"	d
CV_MOVE_DOWN_WRAP	/usr/include/opencv/cvcompat.h	1031;"	d
CV_MOVE_LD	/usr/include/opencv/cvcompat.h	1005;"	d
CV_MOVE_LD_WRAP	/usr/include/opencv/cvcompat.h	1040;"	d
CV_MOVE_LEFT	/usr/include/opencv/cvcompat.h	983;"	d
CV_MOVE_LEFT_WRAP	/usr/include/opencv/cvcompat.h	1018;"	d
CV_MOVE_LU	/usr/include/opencv/cvcompat.h	999;"	d
CV_MOVE_LU_WRAP	/usr/include/opencv/cvcompat.h	1036;"	d
CV_MOVE_PARAM	/usr/include/opencv/cvcompat.h	1059;"	d
CV_MOVE_PARAM_WRAP	/usr/include/opencv/cvcompat.h	1069;"	d
CV_MOVE_RD	/usr/include/opencv/cvcompat.h	1008;"	d
CV_MOVE_RD_WRAP	/usr/include/opencv/cvcompat.h	1042;"	d
CV_MOVE_RIGHT	/usr/include/opencv/cvcompat.h	987;"	d
CV_MOVE_RIGHT_WRAP	/usr/include/opencv/cvcompat.h	1022;"	d
CV_MOVE_RU	/usr/include/opencv/cvcompat.h	1002;"	d
CV_MOVE_RU_WRAP	/usr/include/opencv/cvcompat.h	1038;"	d
CV_MOVE_TO	/usr/include/opencv/cvcompat.h	968;"	d
CV_MOVE_UP	/usr/include/opencv/cvcompat.h	991;"	d
CV_MOVE_UP_WRAP	/usr/include/opencv/cvcompat.h	1026;"	d
CV_MUL	/usr/include/opencv/cxmisc.h	177;"	d
CV_MULMASK	/usr/include/opencv/cxmisc.h	216;"	d
CV_MULMASK1	/usr/include/opencv/cxmisc.h	219;"	d
CV_MaskIsTiled	/usr/include/opencv/cxerror.h	80;"	d
CV_NE	/usr/include/opencv/cxmisc.h	188;"	d
CV_NEG_INF	/usr/include/opencv/cxmisc.h	168;"	d
CV_NEXT_AROUND_DST	/usr/include/opencv/cvtypes.h	/^    CV_NEXT_AROUND_DST   = 0x22,$/;"	e	enum:CvNextEdgeType
CV_NEXT_AROUND_LEFT	/usr/include/opencv/cvtypes.h	/^    CV_NEXT_AROUND_LEFT  = 0x13,$/;"	e	enum:CvNextEdgeType
CV_NEXT_AROUND_ORG	/usr/include/opencv/cvtypes.h	/^    CV_NEXT_AROUND_ORG   = 0x00,$/;"	e	enum:CvNextEdgeType
CV_NEXT_AROUND_RIGHT	/usr/include/opencv/cvtypes.h	/^    CV_NEXT_AROUND_RIGHT = 0x31,$/;"	e	enum:CvNextEdgeType
CV_NEXT_GRAPH_EDGE	/usr/include/opencv/cxtypes.h	1609;"	d
CV_NEXT_LINE_POINT	/usr/include/opencv/cxcore.h	1339;"	d
CV_NEXT_SEQ_ELEM	/usr/include/opencv/cxtypes.h	1545;"	d
CV_NEXT_VORONOIEDGE2D	/usr/include/opencv/cvaux.h	936;"	d
CV_NEXT_VORONOISITE2D	/usr/include/opencv/cvaux.h	932;"	d
CV_NODE_EMPTY	/usr/include/opencv/cxtypes.h	1666;"	d
CV_NODE_FLOAT	/usr/include/opencv/cxtypes.h	1653;"	d
CV_NODE_FLOW	/usr/include/opencv/cxtypes.h	1664;"	d
CV_NODE_HAS_NAME	/usr/include/opencv/cxtypes.h	1678;"	d
CV_NODE_IDX	/usr/include/opencv/cxtypes.h	781;"	d
CV_NODE_INT	/usr/include/opencv/cxtypes.h	1650;"	d
CV_NODE_INTEGER	/usr/include/opencv/cxtypes.h	1651;"	d
CV_NODE_IS_COLLECTION	/usr/include/opencv/cxtypes.h	1674;"	d
CV_NODE_IS_EMPTY	/usr/include/opencv/cxtypes.h	1676;"	d
CV_NODE_IS_FLOW	/usr/include/opencv/cxtypes.h	1675;"	d
CV_NODE_IS_INT	/usr/include/opencv/cxtypes.h	1669;"	d
CV_NODE_IS_MAP	/usr/include/opencv/cxtypes.h	1673;"	d
CV_NODE_IS_REAL	/usr/include/opencv/cxtypes.h	1670;"	d
CV_NODE_IS_SEQ	/usr/include/opencv/cxtypes.h	1672;"	d
CV_NODE_IS_STRING	/usr/include/opencv/cxtypes.h	1671;"	d
CV_NODE_IS_USER	/usr/include/opencv/cxtypes.h	1677;"	d
CV_NODE_MAP	/usr/include/opencv/cxtypes.h	1658;"	d
CV_NODE_NAMED	/usr/include/opencv/cxtypes.h	1667;"	d
CV_NODE_NONE	/usr/include/opencv/cxtypes.h	1649;"	d
CV_NODE_REAL	/usr/include/opencv/cxtypes.h	1652;"	d
CV_NODE_REF	/usr/include/opencv/cxtypes.h	1656;"	d
CV_NODE_SEQ	/usr/include/opencv/cxtypes.h	1657;"	d
CV_NODE_SEQ_IS_SIMPLE	/usr/include/opencv/cxtypes.h	1681;"	d
CV_NODE_SEQ_SIMPLE	/usr/include/opencv/cxtypes.h	1680;"	d
CV_NODE_STR	/usr/include/opencv/cxtypes.h	1654;"	d
CV_NODE_STRING	/usr/include/opencv/cxtypes.h	1655;"	d
CV_NODE_TYPE	/usr/include/opencv/cxtypes.h	1661;"	d
CV_NODE_TYPE_MASK	/usr/include/opencv/cxtypes.h	1659;"	d
CV_NODE_USER	/usr/include/opencv/cxtypes.h	1665;"	d
CV_NODE_VAL	/usr/include/opencv/cxtypes.h	780;"	d
CV_NOISE_GAUSSIAN	/usr/include/opencv/cvvidsurv.hpp	1211;"	d
CV_NOISE_NONE	/usr/include/opencv/cvvidsurv.hpp	1210;"	d
CV_NOISE_SALT_AND_PEPPER	/usr/include/opencv/cvvidsurv.hpp	1214;"	d
CV_NOISE_SPECKLE	/usr/include/opencv/cvvidsurv.hpp	1213;"	d
CV_NOISE_UNIFORM	/usr/include/opencv/cvvidsurv.hpp	1212;"	d
CV_NONZERO	/usr/include/opencv/cxmisc.h	192;"	d
CV_NONZERO_FLT	/usr/include/opencv/cxmisc.h	193;"	d
CV_NOP	/usr/include/opencv/cxmisc.h	174;"	d
CV_NORM_MASK	/usr/include/opencv/cxcore.h	841;"	d
CV_NOTDEFINED_ERR	/usr/include/opencv/cxmisc.h	/^    CV_NOTDEFINED_ERR  = -48,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_NOTFOUND_ERR	/usr/include/opencv/cxmisc.h	/^    CV_NOTFOUND_ERR             = -110,$/;"	e	enum:CvStatus
CV_NOTHROW	/usr/include/opencv/cxmisc.h	663;"	d
CV_NOT_WEIGHTED	/usr/include/opencv/cvaux.h	/^    CV_NOT_WEIGHTED,$/;"	e	enum:CvGraphWeightType
CV_NO_CN_CHECK	/usr/include/opencv/cxcore.h	306;"	d
CV_NO_DEPTH_CHECK	/usr/include/opencv/cxcore.h	305;"	d
CV_NO_ERR	/usr/include/opencv/cxmisc.h	/^    CV_NO_ERR          =   0,$/;"	e	enum:CvStatus
CV_NO_SIZE_CHECK	/usr/include/opencv/cxcore.h	307;"	d
CV_NULLPTR_ERR	/usr/include/opencv/cxmisc.h	/^    CV_NULLPTR_ERR     =  -2,$/;"	e	enum:CvStatus
CV_NUM_FACE_ELEMENTS	/usr/include/opencv/cvaux.h	821;"	d
CV_OK	/usr/include/opencv/cxmisc.h	/^    CV_OK              =   CV_NO_ERR$/;"	e	enum:CvStatus
CV_OR	/usr/include/opencv/cxmisc.h	179;"	d
CV_ORIENTED_GRAPH	/usr/include/opencv/cxtypes.h	1398;"	d
CV_ORIGIN_BL	/usr/include/opencv/cxmisc.h	164;"	d
CV_ORIGIN_TL	/usr/include/opencv/cxmisc.h	163;"	d
CV_ORN	/usr/include/opencv/cxmisc.h	182;"	d
CV_OUTOFMEM_ERR	/usr/include/opencv/cxmisc.h	/^    CV_OUTOFMEM_ERR    =  -3,$/;"	e	enum:CvStatus
CV_PASTE	/usr/include/opencv/cxmisc.h	206;"	d
CV_PASTE2	/usr/include/opencv/cxmisc.h	205;"	d
CV_PCA_DATA_AS_COL	/usr/include/opencv/cxcore.h	799;"	d
CV_PCA_DATA_AS_ROW	/usr/include/opencv/cxcore.h	798;"	d
CV_PCA_USE_AVG	/usr/include/opencv/cxcore.h	800;"	d
CV_PI	/usr/include/opencv/cxtypes.h	178;"	d
CV_PLUGINS1	/usr/include/opencv/cxmisc.h	659;"	d
CV_PLUGINS2	/usr/include/opencv/cxmisc.h	660;"	d
CV_PLUGINS3	/usr/include/opencv/cxmisc.h	661;"	d
CV_PLUGIN_IPPCC	/usr/include/opencv/cxmisc.h	654;"	d
CV_PLUGIN_IPPCV	/usr/include/opencv/cxmisc.h	650;"	d
CV_PLUGIN_IPPI	/usr/include/opencv/cxmisc.h	651;"	d
CV_PLUGIN_IPPS	/usr/include/opencv/cxmisc.h	652;"	d
CV_PLUGIN_IPPVM	/usr/include/opencv/cxmisc.h	653;"	d
CV_PLUGIN_MAX	/usr/include/opencv/cxmisc.h	657;"	d
CV_PLUGIN_MKL	/usr/include/opencv/cxmisc.h	655;"	d
CV_PLUGIN_NONE	/usr/include/opencv/cxmisc.h	648;"	d
CV_PLUGIN_OPTCV	/usr/include/opencv/cxmisc.h	649;"	d
CV_POLY_APPROX_DP	/usr/include/opencv/cv.h	700;"	d
CV_POS_INF	/usr/include/opencv/cxmisc.h	167;"	d
CV_PRETEND_WINDOWS	/usr/include/opencv/cxcore.h	53;"	d
CV_PREV_AROUND_DST	/usr/include/opencv/cvtypes.h	/^    CV_PREV_AROUND_DST   = 0x33,$/;"	e	enum:CvNextEdgeType
CV_PREV_AROUND_LEFT	/usr/include/opencv/cvtypes.h	/^    CV_PREV_AROUND_LEFT  = 0x20,$/;"	e	enum:CvNextEdgeType
CV_PREV_AROUND_ORG	/usr/include/opencv/cvtypes.h	/^    CV_PREV_AROUND_ORG   = 0x11,$/;"	e	enum:CvNextEdgeType
CV_PREV_AROUND_RIGHT	/usr/include/opencv/cvtypes.h	/^    CV_PREV_AROUND_RIGHT = 0x02$/;"	e	enum:CvNextEdgeType
CV_PREV_INT	/usr/include/opencv/cvaux.h	277;"	d
CV_PREV_POINT	/usr/include/opencv/cxtypes.h	1593;"	d
CV_PREV_SEQ_ELEM	/usr/include/opencv/cxtypes.h	1555;"	d
CV_PREV_VORONOIEDGE2D	/usr/include/opencv/cvaux.h	937;"	d
CV_PREV_VORONOISITE2D	/usr/include/opencv/cvaux.h	933;"	d
CV_PTLOC_ERROR	/usr/include/opencv/cvtypes.h	/^    CV_PTLOC_ERROR = -2,$/;"	e	enum:CvSubdiv2DPointLocation
CV_PTLOC_INSIDE	/usr/include/opencv/cvtypes.h	/^    CV_PTLOC_INSIDE = 0,$/;"	e	enum:CvSubdiv2DPointLocation
CV_PTLOC_ON_EDGE	/usr/include/opencv/cvtypes.h	/^    CV_PTLOC_ON_EDGE = 2$/;"	e	enum:CvSubdiv2DPointLocation
CV_PTLOC_OUTSIDE_RECT	/usr/include/opencv/cvtypes.h	/^    CV_PTLOC_OUTSIDE_RECT = -1,$/;"	e	enum:CvSubdiv2DPointLocation
CV_PTLOC_VERTEX	/usr/include/opencv/cvtypes.h	/^    CV_PTLOC_VERTEX = 1,$/;"	e	enum:CvSubdiv2DPointLocation
CV_QUADEDGE2D_FIELDS	/usr/include/opencv/cvtypes.h	138;"	d
CV_RANDOM_INVERT	/usr/include/opencv/cvhaartraining.h	75;"	d
CV_RAND_NORMAL	/usr/include/opencv/cxcore.h	672;"	d
CV_RAND_UNI	/usr/include/opencv/cxcore.h	671;"	d
CV_READ_CHAIN_POINT	/usr/include/opencv/cxtypes.h	1580;"	d
CV_READ_EDGE	/usr/include/opencv/cxtypes.h	1595;"	d
CV_READ_SEQ_ELEM	/usr/include/opencv/cxtypes.h	1564;"	d
CV_REDUCE_AVG	/usr/include/opencv/cxcore.h	865;"	d
CV_REDUCE_MAX	/usr/include/opencv/cxcore.h	866;"	d
CV_REDUCE_MIN	/usr/include/opencv/cxcore.h	867;"	d
CV_REDUCE_SUM	/usr/include/opencv/cxcore.h	864;"	d
CV_RELATIVE	/usr/include/opencv/cxcore.h	842;"	d
CV_RELATIVE_C	/usr/include/opencv/cxcore.h	849;"	d
CV_RELATIVE_L1	/usr/include/opencv/cxcore.h	850;"	d
CV_RELATIVE_L2	/usr/include/opencv/cxcore.h	851;"	d
CV_RETR_CCOMP	/usr/include/opencv/cvtypes.h	87;"	d
CV_RETR_EXTERNAL	/usr/include/opencv/cvtypes.h	85;"	d
CV_RETR_LIST	/usr/include/opencv/cvtypes.h	86;"	d
CV_RETR_TREE	/usr/include/opencv/cvtypes.h	88;"	d
CV_REV_READ_SEQ_ELEM	/usr/include/opencv/cxtypes.h	1572;"	d
CV_RGB	/usr/include/opencv/cxcore.h	1263;"	d
CV_RGB2BGR	/usr/include/opencv/cv.h	173;"	d
CV_RGB2BGR555	/usr/include/opencv/cv.h	200;"	d
CV_RGB2BGR565	/usr/include/opencv/cv.h	188;"	d
CV_RGB2BGRA	/usr/include/opencv/cv.h	167;"	d
CV_RGB2GRAY	/usr/include/opencv/cv.h	179;"	d
CV_RGB2HLS	/usr/include/opencv/cv.h	240;"	d
CV_RGB2HSV	/usr/include/opencv/cv.h	222;"	d
CV_RGB2Lab	/usr/include/opencv/cv.h	225;"	d
CV_RGB2Luv	/usr/include/opencv/cv.h	238;"	d
CV_RGB2RGBA	/usr/include/opencv/cv.h	161;"	d
CV_RGB2XYZ	/usr/include/opencv/cv.h	212;"	d
CV_RGB2YCrCb	/usr/include/opencv/cv.h	217;"	d
CV_RGBA2BGR	/usr/include/opencv/cv.h	169;"	d
CV_RGBA2BGR555	/usr/include/opencv/cv.h	204;"	d
CV_RGBA2BGR565	/usr/include/opencv/cv.h	192;"	d
CV_RGBA2BGRA	/usr/include/opencv/cv.h	176;"	d
CV_RGBA2GRAY	/usr/include/opencv/cv.h	185;"	d
CV_RGBA2RGB	/usr/include/opencv/cv.h	164;"	d
CV_RODRIGUES_M2V	/usr/include/opencv/cvcompat.h	690;"	d
CV_RODRIGUES_V2M	/usr/include/opencv/cvcompat.h	691;"	d
CV_ROW_SAMPLE	/usr/include/opencv/ml.h	67;"	d
CV_SCHARR	/usr/include/opencv/cv.h	145;"	d
CV_SEQUENCE_FIELDS	/usr/include/opencv/cxtypes.h	1204;"	d
CV_SEQ_CHAIN	/usr/include/opencv/cxtypes.h	1409;"	d
CV_SEQ_CHAIN_CONTOUR	/usr/include/opencv/cxtypes.h	1410;"	d
CV_SEQ_CONNECTED_COMP	/usr/include/opencv/cxtypes.h	1416;"	d
CV_SEQ_CONTOUR	/usr/include/opencv/cxtypes.h	1405;"	d
CV_SEQ_ELEM	/usr/include/opencv/cxtypes.h	1510;"	d
CV_SEQ_ELTYPE	/usr/include/opencv/cxtypes.h	1421;"	d
CV_SEQ_ELTYPE_BITS	/usr/include/opencv/cxtypes.h	1359;"	d
CV_SEQ_ELTYPE_CODE	/usr/include/opencv/cxtypes.h	1363;"	d
CV_SEQ_ELTYPE_CONNECTED_COMP	/usr/include/opencv/cxtypes.h	1371;"	d
CV_SEQ_ELTYPE_GENERIC	/usr/include/opencv/cxtypes.h	1364;"	d
CV_SEQ_ELTYPE_GRAPH_EDGE	/usr/include/opencv/cxtypes.h	1368;"	d
CV_SEQ_ELTYPE_GRAPH_VERTEX	/usr/include/opencv/cxtypes.h	1369;"	d
CV_SEQ_ELTYPE_INDEX	/usr/include/opencv/cxtypes.h	1367;"	d
CV_SEQ_ELTYPE_MASK	/usr/include/opencv/cxtypes.h	1360;"	d
CV_SEQ_ELTYPE_POINT	/usr/include/opencv/cxtypes.h	1362;"	d
CV_SEQ_ELTYPE_POINT3D	/usr/include/opencv/cxtypes.h	1372;"	d
CV_SEQ_ELTYPE_PPOINT	/usr/include/opencv/cxtypes.h	1366;"	d
CV_SEQ_ELTYPE_PTR	/usr/include/opencv/cxtypes.h	1365;"	d
CV_SEQ_ELTYPE_TRIAN_ATR	/usr/include/opencv/cxtypes.h	1370;"	d
CV_SEQ_FLAG_CLOSED	/usr/include/opencv/cxtypes.h	1389;"	d
CV_SEQ_FLAG_CONVEX	/usr/include/opencv/cxtypes.h	1391;"	d
CV_SEQ_FLAG_HOLE	/usr/include/opencv/cxtypes.h	1392;"	d
CV_SEQ_FLAG_SHIFT	/usr/include/opencv/cxtypes.h	1386;"	d
CV_SEQ_FLAG_SIMPLE	/usr/include/opencv/cxtypes.h	1390;"	d
CV_SEQ_INDEX	/usr/include/opencv/cxtypes.h	1419;"	d
CV_SEQ_KIND	/usr/include/opencv/cxtypes.h	1422;"	d
CV_SEQ_KIND_BIN_TREE	/usr/include/opencv/cxtypes.h	1380;"	d
CV_SEQ_KIND_BITS	/usr/include/opencv/cxtypes.h	1374;"	d
CV_SEQ_KIND_CURVE	/usr/include/opencv/cxtypes.h	1379;"	d
CV_SEQ_KIND_GENERIC	/usr/include/opencv/cxtypes.h	1378;"	d
CV_SEQ_KIND_GRAPH	/usr/include/opencv/cxtypes.h	1383;"	d
CV_SEQ_KIND_MASK	/usr/include/opencv/cxtypes.h	1375;"	d
CV_SEQ_KIND_SUBDIV2D	/usr/include/opencv/cxtypes.h	1384;"	d
CV_SEQ_MAGIC_VAL	/usr/include/opencv/cxtypes.h	1350;"	d
CV_SEQ_POINT3D_SET	/usr/include/opencv/cxtypes.h	1402;"	d
CV_SEQ_POINT_SET	/usr/include/opencv/cxtypes.h	1401;"	d
CV_SEQ_POLYGON	/usr/include/opencv/cxtypes.h	1404;"	d
CV_SEQ_POLYGON_TREE	/usr/include/opencv/cxtypes.h	1413;"	d
CV_SEQ_POLYLINE	/usr/include/opencv/cxtypes.h	1403;"	d
CV_SEQ_READER_FIELDS	/usr/include/opencv/cxtypes.h	1489;"	d
CV_SEQ_SIMPLE_POLYGON	/usr/include/opencv/cxtypes.h	1406;"	d
CV_SEQ_WRITER_FIELDS	/usr/include/opencv/cxtypes.h	1474;"	d
CV_SET_ELEM_FIELDS	/usr/include/opencv/cxtypes.h	1231;"	d
CV_SET_ELEM_FREE_FLAG	/usr/include/opencv/cxtypes.h	1254;"	d
CV_SET_ELEM_IDX_MASK	/usr/include/opencv/cxtypes.h	1253;"	d
CV_SET_FIELDS	/usr/include/opencv/cxtypes.h	1241;"	d
CV_SET_IMAGE_IO_FUNCTIONS	/usr/include/opencv/cxcore.hpp	356;"	d
CV_SET_MAGIC_VAL	/usr/include/opencv/cxtypes.h	1355;"	d
CV_SHAPE_CROSS	/usr/include/opencv/cv.h	305;"	d
CV_SHAPE_CUSTOM	/usr/include/opencv/cv.h	307;"	d
CV_SHAPE_ELLIPSE	/usr/include/opencv/cv.h	306;"	d
CV_SHAPE_RECT	/usr/include/opencv/cv.h	304;"	d
CV_SHIFT_DOWN	/usr/include/opencv/cvcompat.h	1049;"	d
CV_SHIFT_LD	/usr/include/opencv/cvcompat.h	1052;"	d
CV_SHIFT_LEFT	/usr/include/opencv/cvcompat.h	1046;"	d
CV_SHIFT_LU	/usr/include/opencv/cvcompat.h	1050;"	d
CV_SHIFT_NONE	/usr/include/opencv/cvcompat.h	1045;"	d
CV_SHIFT_RD	/usr/include/opencv/cvcompat.h	1053;"	d
CV_SHIFT_RIGHT	/usr/include/opencv/cvcompat.h	1047;"	d
CV_SHIFT_RU	/usr/include/opencv/cvcompat.h	1051;"	d
CV_SHIFT_UP	/usr/include/opencv/cvcompat.h	1048;"	d
CV_SIGN	/usr/include/opencv/cxtypes.h	203;"	d
CV_SIZEOF_FLOAT	/usr/include/opencv/cxmisc.h	160;"	d
CV_SIZEOF_SHORT	/usr/include/opencv/cxmisc.h	161;"	d
CV_SPARSE_HASH_RATIO	/usr/include/opencv/cxmisc.h	99;"	d
CV_SPARSE_HASH_SIZE0	/usr/include/opencv/cxmisc.h	96;"	d
CV_SPARSE_MAT_BLOCK	/usr/include/opencv/cxmisc.h	93;"	d
CV_SPARSE_MAT_MAGIC_VAL	/usr/include/opencv/cxtypes.h	735;"	d
CV_SQR	/usr/include/opencv/cxmisc.h	183;"	d
CV_SSE2	/usr/include/opencv/cxtypes.h	68;"	d
CV_SSE2	/usr/include/opencv/cxtypes.h	70;"	d
CV_START	/usr/include/opencv/cv.hpp	52;"	d
CV_STDCALL	/usr/include/opencv/cxtypes.h	96;"	d
CV_STDCALL	/usr/include/opencv/cxtypes.h	99;"	d
CV_STDCALL	/usr/include/opencv/highgui.h	56;"	d
CV_STDCALL	/usr/include/opencv/highgui.h	59;"	d
CV_STORAGE_APPEND	/usr/include/opencv/cxtypes.h	1627;"	d
CV_STORAGE_BLOCK_SIZE	/usr/include/opencv/cxmisc.h	90;"	d
CV_STORAGE_MAGIC_VAL	/usr/include/opencv/cxtypes.h	1152;"	d
CV_STORAGE_READ	/usr/include/opencv/cxtypes.h	1623;"	d
CV_STORAGE_WRITE	/usr/include/opencv/cxtypes.h	1624;"	d
CV_STORAGE_WRITE_BINARY	/usr/include/opencv/cxtypes.h	1626;"	d
CV_STORAGE_WRITE_TEXT	/usr/include/opencv/cxtypes.h	1625;"	d
CV_STRUCT_ALIGN	/usr/include/opencv/cxmisc.h	87;"	d
CV_STUB_STEP	/usr/include/opencv/cxmisc.h	158;"	d
CV_SUB	/usr/include/opencv/cxmisc.h	176;"	d
CV_SUBDIV2D_FIELDS	/usr/include/opencv/cvtypes.h	162;"	d
CV_SUBDIV2D_NEXT_EDGE	/usr/include/opencv/cvtypes.h	201;"	d
CV_SUBDIV2D_POINT_FIELDS	/usr/include/opencv/cvtypes.h	143;"	d
CV_SUBDIV2D_VIRTUAL_POINT_FLAG	/usr/include/opencv/cvtypes.h	148;"	d
CV_SUBMINOR_VERSION	/usr/include/opencv/cvver.h	52;"	d
CV_SVD	/usr/include/opencv/cxcore.h	747;"	d
CV_SVD_MODIFY_A	/usr/include/opencv/cxcore.h	732;"	d
CV_SVD_SYM	/usr/include/opencv/cxcore.h	748;"	d
CV_SVD_U_T	/usr/include/opencv/cxcore.h	733;"	d
CV_SVD_V_T	/usr/include/opencv/cxcore.h	734;"	d
CV_SWAP	/usr/include/opencv/cxtypes.h	181;"	d
CV_StsAutoTrace	/usr/include/opencv/cxerror.h	60;"	d
CV_StsBackTrace	/usr/include/opencv/cxerror.h	53;"	d
CV_StsBadArg	/usr/include/opencv/cxerror.h	57;"	d
CV_StsBadFlag	/usr/include/opencv/cxerror.h	94;"	d
CV_StsBadFunc	/usr/include/opencv/cxerror.h	58;"	d
CV_StsBadMask	/usr/include/opencv/cxerror.h	96;"	d
CV_StsBadMemBlock	/usr/include/opencv/cxerror.h	102;"	d
CV_StsBadPoint	/usr/include/opencv/cxerror.h	95;"	d
CV_StsBadSize	/usr/include/opencv/cxerror.h	89;"	d
CV_StsDivByZero	/usr/include/opencv/cxerror.h	90;"	d
CV_StsError	/usr/include/opencv/cxerror.h	54;"	d
CV_StsFilterOffsetErr	/usr/include/opencv/cxerror.h	86;"	d
CV_StsFilterStructContentErr	/usr/include/opencv/cxerror.h	84;"	d
CV_StsInplaceNotSupported	/usr/include/opencv/cxerror.h	91;"	d
CV_StsInternal	/usr/include/opencv/cxerror.h	55;"	d
CV_StsKernelStructContentErr	/usr/include/opencv/cxerror.h	85;"	d
CV_StsNoConv	/usr/include/opencv/cxerror.h	59;"	d
CV_StsNoMem	/usr/include/opencv/cxerror.h	56;"	d
CV_StsNotImplemented	/usr/include/opencv/cxerror.h	101;"	d
CV_StsNullPtr	/usr/include/opencv/cxerror.h	82;"	d
CV_StsObjectNotFound	/usr/include/opencv/cxerror.h	92;"	d
CV_StsOk	/usr/include/opencv/cxerror.h	52;"	d
CV_StsOutOfRange	/usr/include/opencv/cxerror.h	99;"	d
CV_StsParseError	/usr/include/opencv/cxerror.h	100;"	d
CV_StsUnmatchedFormats	/usr/include/opencv/cxerror.h	93;"	d
CV_StsUnmatchedSizes	/usr/include/opencv/cxerror.h	97;"	d
CV_StsUnsupportedFormat	/usr/include/opencv/cxerror.h	98;"	d
CV_StsVecLengthErr	/usr/include/opencv/cxerror.h	83;"	d
CV_TERMCRIT_EPS	/usr/include/opencv/cxtypes.h	877;"	d
CV_TERMCRIT_ITER	/usr/include/opencv/cxtypes.h	875;"	d
CV_TERMCRIT_NUMBER	/usr/include/opencv/cxtypes.h	876;"	d
CV_THRESH_BINARY	/usr/include/opencv/cv.h	929;"	d
CV_THRESH_BINARY_INV	/usr/include/opencv/cv.h	930;"	d
CV_THRESH_MASK	/usr/include/opencv/cv.h	934;"	d
CV_THRESH_OTSU	/usr/include/opencv/cv.h	936;"	d
CV_THRESH_TOZERO	/usr/include/opencv/cv.h	932;"	d
CV_THRESH_TOZERO_INV	/usr/include/opencv/cv.h	933;"	d
CV_THRESH_TRUNC	/usr/include/opencv/cv.h	931;"	d
CV_TM_CCOEFF	/usr/include/opencv/cv.h	378;"	d
CV_TM_CCOEFF_NORMED	/usr/include/opencv/cv.h	379;"	d
CV_TM_CCORR	/usr/include/opencv/cv.h	376;"	d
CV_TM_CCORR_NORMED	/usr/include/opencv/cv.h	377;"	d
CV_TM_SQDIFF	/usr/include/opencv/cv.h	374;"	d
CV_TM_SQDIFF_NORMED	/usr/include/opencv/cv.h	375;"	d
CV_TOGGLE_DBL	/usr/include/opencv/cxmisc.h	171;"	d
CV_TOGGLE_FLT	/usr/include/opencv/cxmisc.h	170;"	d
CV_TREE_NODE_FIELDS	/usr/include/opencv/cxtypes.h	1192;"	d
CV_TS_CONCENTRIC_SPHERES	/usr/include/opencv/ml.h	1458;"	d
CV_TURN_ON_IPL_COMPATIBILITY	/usr/include/opencv/cxcore.h	1555;"	d
CV_TWIN_VORONOISITE2D	/usr/include/opencv/cvaux.h	940;"	d
CV_TYPE_NAME_GRAPH	/usr/include/opencv/cxtypes.h	1321;"	d
CV_TYPE_NAME_HAAR	/usr/include/opencv/cvtypes.h	319;"	d
CV_TYPE_NAME_IMAGE	/usr/include/opencv/cxtypes.h	438;"	d
CV_TYPE_NAME_MAT	/usr/include/opencv/cxtypes.h	536;"	d
CV_TYPE_NAME_MATND	/usr/include/opencv/cxtypes.h	693;"	d
CV_TYPE_NAME_ML_ANN_MLP	/usr/include/opencv/ml.h	124;"	d
CV_TYPE_NAME_ML_BOOSTING	/usr/include/opencv/ml.h	122;"	d
CV_TYPE_NAME_ML_CNN	/usr/include/opencv/ml.h	125;"	d
CV_TYPE_NAME_ML_EM	/usr/include/opencv/ml.h	121;"	d
CV_TYPE_NAME_ML_KNN	/usr/include/opencv/ml.h	119;"	d
CV_TYPE_NAME_ML_NBAYES	/usr/include/opencv/ml.h	120;"	d
CV_TYPE_NAME_ML_RTREES	/usr/include/opencv/ml.h	126;"	d
CV_TYPE_NAME_ML_SVM	/usr/include/opencv/ml.h	118;"	d
CV_TYPE_NAME_ML_TREE	/usr/include/opencv/ml.h	123;"	d
CV_TYPE_NAME_SEQ	/usr/include/opencv/cxtypes.h	1221;"	d
CV_TYPE_NAME_SEQ_TREE	/usr/include/opencv/cxtypes.h	1222;"	d
CV_TYPE_NAME_SPARSE_MAT	/usr/include/opencv/cxtypes.h	736;"	d
CV_TYZX_COLOR	/usr/include/opencv/highgui.h	238;"	d
CV_TYZX_LEFT	/usr/include/opencv/highgui.h	236;"	d
CV_TYZX_RIGHT	/usr/include/opencv/highgui.h	237;"	d
CV_TYZX_Z	/usr/include/opencv/highgui.h	239;"	d
CV_UNDEF_SC_PARAM	/usr/include/opencv/cvaux.h	444;"	d
CV_UNMATCHED_FORMATS_ERR	/usr/include/opencv/cxmisc.h	/^    CV_UNMATCHED_FORMATS_ERR    = -104,$/;"	e	enum:CvStatus
CV_UNMATCHED_ROI_ERR	/usr/include/opencv/cxmisc.h	/^    CV_UNMATCHED_ROI_ERR        = -111,$/;"	e	enum:CvStatus
CV_UNREFERENCED	/usr/include/opencv/cvcompat.h	/^                                int CV_UNREFERENCED(interpolate) )$/;"	f	signature:(interpolate)
CV_UNREFERENCED	/usr/include/opencv/cvcompat.h	/^CV_INLINE void cvUnDistortInit( const CvArr* CV_UNREFERENCED(src),$/;"	p	signature:(src)
CV_UNREFERENCED	/usr/include/opencv/cvcompat.h	56;"	d
CV_UNREFERENCED	/usr/include/opencv/cvcompat.h	58;"	d
CV_UNSUPPORTED_CHANNELS_ERR	/usr/include/opencv/cxmisc.h	/^    CV_UNSUPPORTED_CHANNELS_ERR = -102,$/;"	e	enum:CvStatus
CV_UNSUPPORTED_COI_ERR	/usr/include/opencv/cxmisc.h	/^    CV_UNSUPPORTED_COI_ERR      = -103,$/;"	e	enum:CvStatus
CV_UNSUPPORTED_DEPTH_ERR	/usr/include/opencv/cxmisc.h	/^    CV_UNSUPPORTED_DEPTH_ERR    = -101,$/;"	e	enum:CvStatus
CV_UNSUPPORTED_FORMAT_ERR	/usr/include/opencv/cxmisc.h	/^    CV_UNSUPPORTED_FORMAT_ERR   = -100,$/;"	e	enum:CvStatus
CV_UN_ENTRY_C1	/usr/include/opencv/cxmisc.h	225;"	d
CV_UN_ENTRY_C2	/usr/include/opencv/cxmisc.h	228;"	d
CV_UN_ENTRY_C3	/usr/include/opencv/cxmisc.h	231;"	d
CV_UN_ENTRY_C4	/usr/include/opencv/cxmisc.h	234;"	d
CV_USRTYPE1	/usr/include/opencv/cxtypes.h	470;"	d
CV_VALUE	/usr/include/opencv/cv.h	902;"	d
CV_VAR_CATEGORICAL	/usr/include/opencv/ml.h	116;"	d
CV_VAR_NUMERICAL	/usr/include/opencv/ml.h	114;"	d
CV_VAR_ORDERED	/usr/include/opencv/ml.h	115;"	d
CV_VERSION	/usr/include/opencv/cvver.h	53;"	d
CV_VERYSMALLDOUBLE	cv_extensions.cpp	2;"	d	file:
CV_VORONOIDIAGRAM2D_FIELDS	/usr/include/opencv/cvaux.h	972;"	d
CV_VORONOIEDGE2D_BEGINNODE	/usr/include/opencv/cvaux.h	938;"	d
CV_VORONOIEDGE2D_ENDNODE	/usr/include/opencv/cvaux.h	939;"	d
CV_VORONOIEDGE2D_FIELDS	/usr/include/opencv/cvaux.h	952;"	d
CV_VORONOINODE2D_FIELDS	/usr/include/opencv/cvaux.h	962;"	d
CV_VORONOISITE2D_FIELDS	/usr/include/opencv/cvaux.h	942;"	d
CV_WARP_FILL_OUTLIERS	/usr/include/opencv/cv.h	262;"	d
CV_WARP_INVERSE_MAP	/usr/include/opencv/cv.h	263;"	d
CV_WARP_TO_CAMERA	/usr/include/opencv/cvaux.h	551;"	d
CV_WEIGHTED_ALL	/usr/include/opencv/cvaux.h	/^    CV_WEIGHTED_ALL$/;"	e	enum:CvGraphWeightType
CV_WEIGHTED_EDGE	/usr/include/opencv/cvaux.h	/^    CV_WEIGHTED_EDGE,$/;"	e	enum:CvGraphWeightType
CV_WEIGHTED_VTX	/usr/include/opencv/cvaux.h	/^    CV_WEIGHTED_VTX,$/;"	e	enum:CvGraphWeightType
CV_WHOLE	/usr/include/opencv/cv.hpp	51;"	d
CV_WHOLE_ARR	/usr/include/opencv/cxtypes.h	518;"	d
CV_WHOLE_SEQ	/usr/include/opencv/cxtypes.h	1100;"	d
CV_WHOLE_SEQ_END_INDEX	/usr/include/opencv/cxtypes.h	1099;"	d
CV_WINDOW_AUTOSIZE	/usr/include/opencv/highgui.h	121;"	d
CV_WRITE_SEQ_ELEM	/usr/include/opencv/cxtypes.h	1531;"	d
CV_WRITE_SEQ_ELEM_VAR	/usr/include/opencv/cxtypes.h	1521;"	d
CV_XOR	/usr/include/opencv/cxmisc.h	180;"	d
CV_XYZ2BGR	/usr/include/opencv/cv.h	213;"	d
CV_XYZ2RGB	/usr/include/opencv/cv.h	214;"	d
CV_YCrCb2BGR	/usr/include/opencv/cv.h	218;"	d
CV_YCrCb2RGB	/usr/include/opencv/cv.h	219;"	d
CV_ZERO_CHAR	/usr/include/opencv/cxmisc.h	342;"	d
CV_ZERO_INT	/usr/include/opencv/cxmisc.h	352;"	d
CV_ZERO_OBJ	/usr/include/opencv/cxmisc.h	221;"	d
C_SVC	/usr/include/opencv/ml.h	/^    enum { C_SVC=100, NU_SVC=101, ONE_CLASS=102, EPS_SVR=103, NU_SVR=104 };$/;"	e	enum:CvSVM::__anon21
Calc	/usr/include/opencv/ml.h	/^    typedef void (CvSVMKernel::*Calc)( int vec_count, int vec_size, const float** vecs,$/;"	t	struct:CvSVMKernel	access:public
CalcRho	/usr/include/opencv/ml.h	/^    typedef void (CvSVMSolver::*CalcRho)( double& rho, double& r );$/;"	t	class:CvSVMSolver	access:public
Calibration	geometry_structures.h	/^struct Calibration$/;"	s
Calibration::Ps	geometry_structures.h	/^	Calibration_Cameras Ps; $/;"	m	struct:Calibration	access:public
Calibration::Xs	geometry_structures.h	/^	Calibration_Vertices Xs;$/;"	m	struct:Calibration	access:public
Calibration::pi_infinity	geometry_structures.h	/^	CvMat * pi_infinity;$/;"	m	struct:Calibration	access:public
Calibration::refined	geometry_structures.h	/^	bool refined;$/;"	m	struct:Calibration	access:public
Calibration::set	geometry_structures.h	/^	bool set; $/;"	m	struct:Calibration	access:public
Calibration_Camera	geometry_structures.h	/^struct Calibration_Camera $/;"	s
Calibration_Camera::Fs	geometry_structures.h	/^	Calibration_Fundamental_Matrices Fs; \/\/ note currently not used \/\/ fundamental matrices transforming points in different shots to lines on this shot$/;"	m	struct:Calibration_Camera	access:public
Calibration_Camera::P	geometry_structures.h	/^	CvMat * P;$/;"	m	struct:Calibration_Camera	access:public
Calibration_Camera::points_meta	geometry_structures.h	/^	Calibration_Points_Meta points_meta;$/;"	m	struct:Calibration_Camera	access:public
Calibration_Camera::set	geometry_structures.h	/^	bool set; $/;"	m	struct:Calibration_Camera	access:public
Calibration_Camera::shot_id	geometry_structures.h	/^	size_t shot_id; \/\/ id of the shot with this calibration $/;"	m	struct:Calibration_Camera	access:public
Calibration_Fundamental_Matrix	geometry_structures.h	/^struct Calibration_Fundamental_Matrix $/;"	s
Calibration_Fundamental_Matrix::F	geometry_structures.h	/^	CvMat * F; $/;"	m	struct:Calibration_Fundamental_Matrix	access:public
Calibration_Fundamental_Matrix::first_shot_id	geometry_structures.h	/^	size_t first_shot_id;$/;"	m	struct:Calibration_Fundamental_Matrix	access:public
Calibration_Fundamental_Matrix::set	geometry_structures.h	/^	bool set; $/;"	m	struct:Calibration_Fundamental_Matrix	access:public
Calibration_Point_Meta	geometry_structures.h	/^struct Calibration_Point_Meta $/;"	s
Calibration_Point_Meta::inlier	geometry_structures.h	/^	signed char inlier; \/\/ determines if this point is inlier (= 1) or outlier (= 0),$/;"	m	struct:Calibration_Point_Meta	access:public
Calibration_Point_Meta::set	geometry_structures.h	/^	bool set;$/;"	m	struct:Calibration_Point_Meta	access:public
Calibration_Vertex	geometry_structures.h	/^struct Calibration_Vertex $/;"	s
Calibration_Vertex::X	geometry_structures.h	/^	CvMat * X;$/;"	m	struct:Calibration_Vertex	access:public
Calibration_Vertex::set	geometry_structures.h	/^	bool set; $/;"	m	struct:Calibration_Vertex	access:public
Calibration_Vertex::vertex_id	geometry_structures.h	/^	size_t vertex_id; \/\/ id of the vertex from the original dataset$/;"	m	struct:Calibration_Vertex	access:public
Clear	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void Clear()$/;"	f	class:CvBlobSeq	access:public	signature:()
Clear	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void Clear()$/;"	f	class:CvBlobTrackSeq	access:public	signature:()
CommentParam	/usr/include/opencv/cvvidsurv.hpp	/^    void CommentParam(char* name, char* pComment)$/;"	f	class:CvVSModule	access:protected	signature:(char* name, char* pComment)
Context_Content	ui_context.h	/^enum Context_Content { UI_CONTEXT_THUMBNAIL, UI_CONTEXT_ZOOM };$/;"	g
Context_Decoration	ui_context.h	/^enum Context_Decoration { UI_CONTEXT_NONE, UI_CONTEXT_CROSSHAIR };$/;"	g
Context_Item	ui_context.h	/^struct Context_Item$/;"	s
Context_Item::content	ui_context.h	/^	Context_Content content;$/;"	m	struct:Context_Item	access:public
Context_Item::decoration	ui_context.h	/^	Context_Decoration decoration;$/;"	m	struct:Context_Item	access:public
Context_Item::height	ui_context.h	/^	double x, y, width, height;$/;"	m	struct:Context_Item	access:public
Context_Item::request	ui_context.h	/^	Image_Loader_Request_Handle request;$/;"	m	struct:Context_Item	access:public
Context_Item::set	ui_context.h	/^	bool set;$/;"	m	struct:Context_Item	access:public
Context_Item::shot_id	ui_context.h	/^	size_t shot_id;$/;"	m	struct:Context_Item	access:public
Context_Item::width	ui_context.h	/^	double x, y, width, height;$/;"	m	struct:Context_Item	access:public
Context_Item::x	ui_context.h	/^	double x, y, width, height;$/;"	m	struct:Context_Item	access:public
Context_Item::y	ui_context.h	/^	double x, y, width, height;$/;"	m	struct:Context_Item	access:public
Context_State	ui_context.h	/^struct Context_State $/;"	s
Context_State::count	ui_context.h	/^	size_t count;$/;"	m	struct:Context_State	access:public
Context_State::delay	ui_context.h	/^	double delay, timer;$/;"	m	struct:Context_State	access:public
Context_State::items	ui_context.h	/^	Context_Items items;$/;"	m	struct:Context_State	access:public
Context_State::positive_x	ui_context.h	/^	bool positive_x, positive_y; \/\/ direction in which the window is shown $/;"	m	struct:Context_State	access:public
Context_State::positive_y	ui_context.h	/^	bool positive_x, positive_y; \/\/ direction in which the window is shown $/;"	m	struct:Context_State	access:public
Context_State::timer	ui_context.h	/^	double delay, timer;$/;"	m	struct:Context_State	access:public
Context_State::visible	ui_context.h	/^	bool visible; $/;"	m	struct:Context_State	access:public
Context_State::x	ui_context.h	/^	double x, y; \/\/ where is the context menu shown $/;"	m	struct:Context_State	access:public
Context_State::y	ui_context.h	/^	double x, y; \/\/ where is the context menu shown $/;"	m	struct:Context_State	access:public
Contour	geometry_structures.h	/^struct Contour {$/;"	s
Contour::color	geometry_structures.h	/^	float color[3];   $/;"	m	struct:Contour	access:public
Contour::selected	geometry_structures.h	/^	bool selected;               \/\/ denotes if this contour is selected$/;"	m	struct:Contour	access:public
Contour::set	geometry_structures.h	/^	bool set; $/;"	m	struct:Contour	access:public
Contour::vertices	geometry_structures.h	/^	Indices vertices;            \/\/ vertices$/;"	m	struct:Contour	access:public
CopyOf	/usr/include/opencv/highgui.h	/^    virtual void  CopyOf( CvvImage& image, int desired_color = -1 );$/;"	p	class:CvvImage	access:public	signature:( CvvImage& image, int desired_color = -1 )
CopyOf	/usr/include/opencv/highgui.h	/^    virtual void  CopyOf( IplImage* img, int desired_color = -1 );$/;"	p	class:CvvImage	access:public	signature:( IplImage* img, int desired_color = -1 )
Core_Axes	core_constants.h	/^enum Core_Axes { X, Y, Z, W };$/;"	g
Core_State	core_state.h	/^struct Core_State $/;"	s
Core_State::error	core_state.h	/^	CORE_ERROR error;$/;"	m	struct:Core_State	access:public
Core_State::keyboard_focus	core_state.h	/^	bool keyboard_focus;$/;"	m	struct:Core_State	access:public
Core_State::last_ticks	core_state.h	/^	Uint32 ticks, last_ticks;$/;"	m	struct:Core_State	access:public
Core_State::mouse_focus	core_state.h	/^	bool mouse_focus;$/;"	m	struct:Core_State	access:public
Core_State::running	core_state.h	/^	bool running;$/;"	m	struct:Core_State	access:public
Core_State::ticks	core_state.h	/^	Uint32 ticks, last_ticks;$/;"	m	struct:Core_State	access:public
Core_State::visible	core_state.h	/^	bool visible;$/;"	m	struct:Core_State	access:public
Create	/usr/include/opencv/highgui.h	/^    virtual bool  Create( int width, int height, int bits_per_pixel, int image_origin = 0 );$/;"	p	class:CvvImage	access:public	signature:( int width, int height, int bits_per_pixel, int image_origin = 0 )
Cv1DObsInfo	/usr/include/opencv/cvaux.h	/^typedef CvImgObsInfo Cv1DObsInfo;$/;"	t
Cv32suf	/usr/include/opencv/cxtypes.h	/^Cv32suf;$/;"	t	typeref:union:Cv32suf
Cv32suf	/usr/include/opencv/cxtypes.h	/^typedef union Cv32suf$/;"	u
Cv32suf::f	/usr/include/opencv/cxtypes.h	/^    float f;$/;"	m	union:Cv32suf	access:public
Cv32suf::i	/usr/include/opencv/cxtypes.h	/^    int i;$/;"	m	union:Cv32suf	access:public
Cv32suf::u	/usr/include/opencv/cxtypes.h	/^    unsigned u;$/;"	m	union:Cv32suf	access:public
Cv3dTracker2dTrackedObject	/usr/include/opencv/cvaux.h	/^} Cv3dTracker2dTrackedObject;$/;"	t	typeref:struct:__anon3
Cv3dTrackerCameraInfo	/usr/include/opencv/cvaux.h	/^} Cv3dTrackerCameraInfo;$/;"	t	typeref:struct:__anon5
Cv3dTrackerCameraIntrinsics	/usr/include/opencv/cvaux.h	/^} Cv3dTrackerCameraIntrinsics;$/;"	t	typeref:struct:__anon6
Cv3dTrackerTrackedObject	/usr/include/opencv/cvaux.h	/^} Cv3dTrackerTrackedObject;$/;"	t	typeref:struct:__anon4
Cv64suf	/usr/include/opencv/cxtypes.h	/^Cv64suf;$/;"	t	typeref:union:Cv64suf
Cv64suf	/usr/include/opencv/cxtypes.h	/^typedef union Cv64suf$/;"	u
Cv64suf::f	/usr/include/opencv/cxtypes.h	/^    double f;$/;"	m	union:Cv64suf	access:public
Cv64suf::i	/usr/include/opencv/cxtypes.h	/^    int64 i;$/;"	m	union:Cv64suf	access:public
Cv64suf::u	/usr/include/opencv/cxtypes.h	/^    uint64 u;$/;"	m	union:Cv64suf	access:public
CvANN_MLP	/usr/include/opencv/ml.h	/^    CvANN_MLP( const CvMat* _layer_sizes,$/;"	p	class:CvANN_MLP	access:public	signature:( const CvMat* _layer_sizes, int _activ_func=SIGMOID_SYM, double _f_param1=0, double _f_param2=0 )
CvANN_MLP	/usr/include/opencv/ml.h	/^    CvANN_MLP();$/;"	p	class:CvANN_MLP	access:public	signature:()
CvANN_MLP	/usr/include/opencv/ml.h	/^class CV_EXPORTS CvANN_MLP : public CvStatModel$/;"	c
CvANN_MLP::CvANN_MLP	/usr/include/opencv/ml.h	/^    CvANN_MLP( const CvMat* _layer_sizes,$/;"	p	class:CvANN_MLP	access:public	signature:( const CvMat* _layer_sizes, int _activ_func=SIGMOID_SYM, double _f_param1=0, double _f_param2=0 )
CvANN_MLP::CvANN_MLP	/usr/include/opencv/ml.h	/^    CvANN_MLP();$/;"	p	class:CvANN_MLP	access:public	signature:()
CvANN_MLP::GAUSSIAN	/usr/include/opencv/ml.h	/^    enum { IDENTITY = 0, SIGMOID_SYM = 1, GAUSSIAN = 2 };$/;"	e	enum:CvANN_MLP::__anon30
CvANN_MLP::IDENTITY	/usr/include/opencv/ml.h	/^    enum { IDENTITY = 0, SIGMOID_SYM = 1, GAUSSIAN = 2 };$/;"	e	enum:CvANN_MLP::__anon30
CvANN_MLP::NO_INPUT_SCALE	/usr/include/opencv/ml.h	/^    enum { UPDATE_WEIGHTS = 1, NO_INPUT_SCALE = 2, NO_OUTPUT_SCALE = 4 };$/;"	e	enum:CvANN_MLP::__anon31
CvANN_MLP::NO_OUTPUT_SCALE	/usr/include/opencv/ml.h	/^    enum { UPDATE_WEIGHTS = 1, NO_INPUT_SCALE = 2, NO_OUTPUT_SCALE = 4 };$/;"	e	enum:CvANN_MLP::__anon31
CvANN_MLP::SIGMOID_SYM	/usr/include/opencv/ml.h	/^    enum { IDENTITY = 0, SIGMOID_SYM = 1, GAUSSIAN = 2 };$/;"	e	enum:CvANN_MLP::__anon30
CvANN_MLP::UPDATE_WEIGHTS	/usr/include/opencv/ml.h	/^    enum { UPDATE_WEIGHTS = 1, NO_INPUT_SCALE = 2, NO_OUTPUT_SCALE = 4 };$/;"	e	enum:CvANN_MLP::__anon31
CvANN_MLP::activ_func	/usr/include/opencv/ml.h	/^    int activ_func;$/;"	m	class:CvANN_MLP	access:protected
CvANN_MLP::calc_activ_func	/usr/include/opencv/ml.h	/^    virtual void calc_activ_func( CvMat* xf, const double* bias ) const;$/;"	p	class:CvANN_MLP	access:protected	signature:( CvMat* xf, const double* bias ) const
CvANN_MLP::calc_activ_func_deriv	/usr/include/opencv/ml.h	/^    virtual void calc_activ_func_deriv( CvMat* xf, CvMat* deriv, const double* bias ) const;$/;"	p	class:CvANN_MLP	access:protected	signature:( CvMat* xf, CvMat* deriv, const double* bias ) const
CvANN_MLP::calc_input_scale	/usr/include/opencv/ml.h	/^    virtual void calc_input_scale( const CvVectors* vecs, int flags );$/;"	p	class:CvANN_MLP	access:protected	signature:( const CvVectors* vecs, int flags )
CvANN_MLP::calc_output_scale	/usr/include/opencv/ml.h	/^    virtual void calc_output_scale( const CvVectors* vecs, int flags );$/;"	p	class:CvANN_MLP	access:protected	signature:( const CvVectors* vecs, int flags )
CvANN_MLP::clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	class:CvANN_MLP	access:public	signature:()
CvANN_MLP::create	/usr/include/opencv/ml.h	/^    virtual void create( const CvMat* _layer_sizes,$/;"	p	class:CvANN_MLP	access:public	signature:( const CvMat* _layer_sizes, int _activ_func=SIGMOID_SYM, double _f_param1=0, double _f_param2=0 )
CvANN_MLP::f_param1	/usr/include/opencv/ml.h	/^    double f_param1, f_param2;$/;"	m	class:CvANN_MLP	access:protected
CvANN_MLP::f_param2	/usr/include/opencv/ml.h	/^    double f_param1, f_param2;$/;"	m	class:CvANN_MLP	access:protected
CvANN_MLP::get_layer_count	/usr/include/opencv/ml.h	/^    int get_layer_count() { return layer_sizes ? layer_sizes->cols : 0; }$/;"	f	class:CvANN_MLP	access:public	signature:()
CvANN_MLP::get_layer_sizes	/usr/include/opencv/ml.h	/^    const CvMat* get_layer_sizes() { return layer_sizes; }$/;"	f	class:CvANN_MLP	access:public	signature:()
CvANN_MLP::get_weights	/usr/include/opencv/ml.h	/^    double* get_weights(int layer)$/;"	f	class:CvANN_MLP	access:public	signature:(int layer)
CvANN_MLP::init_weights	/usr/include/opencv/ml.h	/^    virtual void init_weights();$/;"	p	class:CvANN_MLP	access:protected	signature:()
CvANN_MLP::layer_sizes	/usr/include/opencv/ml.h	/^    CvMat* layer_sizes;$/;"	m	class:CvANN_MLP	access:protected
CvANN_MLP::max_buf_sz	/usr/include/opencv/ml.h	/^    int max_count, max_buf_sz;$/;"	m	class:CvANN_MLP	access:protected
CvANN_MLP::max_count	/usr/include/opencv/ml.h	/^    int max_count, max_buf_sz;$/;"	m	class:CvANN_MLP	access:protected
CvANN_MLP::max_val	/usr/include/opencv/ml.h	/^    double min_val, max_val, min_val1, max_val1;$/;"	m	class:CvANN_MLP	access:protected
CvANN_MLP::max_val1	/usr/include/opencv/ml.h	/^    double min_val, max_val, min_val1, max_val1;$/;"	m	class:CvANN_MLP	access:protected
CvANN_MLP::min_val	/usr/include/opencv/ml.h	/^    double min_val, max_val, min_val1, max_val1;$/;"	m	class:CvANN_MLP	access:protected
CvANN_MLP::min_val1	/usr/include/opencv/ml.h	/^    double min_val, max_val, min_val1, max_val1;$/;"	m	class:CvANN_MLP	access:protected
CvANN_MLP::params	/usr/include/opencv/ml.h	/^    CvANN_MLP_TrainParams params;$/;"	m	class:CvANN_MLP	access:protected
CvANN_MLP::predict	/usr/include/opencv/ml.h	/^    virtual float predict( const CvMat* _inputs,$/;"	p	class:CvANN_MLP	access:public	signature:( const CvMat* _inputs, CvMat* _outputs ) const
CvANN_MLP::prepare_to_train	/usr/include/opencv/ml.h	/^    virtual bool prepare_to_train( const CvMat* _inputs, const CvMat* _outputs,$/;"	p	class:CvANN_MLP	access:protected	signature:( const CvMat* _inputs, const CvMat* _outputs, const CvMat* _sample_weights, const CvMat* _sample_idx, CvVectors* _ivecs, CvVectors* _ovecs, double** _sw, int _flags )
CvANN_MLP::read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* fs, CvFileNode* node );$/;"	p	class:CvANN_MLP	access:public	signature:( CvFileStorage* fs, CvFileNode* node )
CvANN_MLP::read_params	/usr/include/opencv/ml.h	/^    virtual void read_params( CvFileStorage* fs, CvFileNode* node );$/;"	p	class:CvANN_MLP	access:protected	signature:( CvFileStorage* fs, CvFileNode* node )
CvANN_MLP::rng	/usr/include/opencv/ml.h	/^    CvRNG rng;$/;"	m	class:CvANN_MLP	access:protected
CvANN_MLP::sample_weights	/usr/include/opencv/ml.h	/^    CvMat* sample_weights;$/;"	m	class:CvANN_MLP	access:protected
CvANN_MLP::scale_input	/usr/include/opencv/ml.h	/^    virtual void scale_input( const CvMat* _src, CvMat* _dst ) const;$/;"	p	class:CvANN_MLP	access:protected	signature:( const CvMat* _src, CvMat* _dst ) const
CvANN_MLP::scale_output	/usr/include/opencv/ml.h	/^    virtual void scale_output( const CvMat* _src, CvMat* _dst ) const;$/;"	p	class:CvANN_MLP	access:protected	signature:( const CvMat* _src, CvMat* _dst ) const
CvANN_MLP::set_activ_func	/usr/include/opencv/ml.h	/^    virtual void set_activ_func( int _activ_func=SIGMOID_SYM,$/;"	p	class:CvANN_MLP	access:protected	signature:( int _activ_func=SIGMOID_SYM, double _f_param1=0, double _f_param2=0 )
CvANN_MLP::train	/usr/include/opencv/ml.h	/^    virtual int train( const CvMat* _inputs, const CvMat* _outputs,$/;"	p	class:CvANN_MLP	access:public	signature:( const CvMat* _inputs, const CvMat* _outputs, const CvMat* _sample_weights, const CvMat* _sample_idx=0, CvANN_MLP_TrainParams _params = CvANN_MLP_TrainParams(), int flags=0 )
CvANN_MLP::train_backprop	/usr/include/opencv/ml.h	/^    virtual int train_backprop( CvVectors _ivecs, CvVectors _ovecs, const double* _sw );$/;"	p	class:CvANN_MLP	access:protected	signature:( CvVectors _ivecs, CvVectors _ovecs, const double* _sw )
CvANN_MLP::train_rprop	/usr/include/opencv/ml.h	/^    virtual int train_rprop( CvVectors _ivecs, CvVectors _ovecs, const double* _sw );$/;"	p	class:CvANN_MLP	access:protected	signature:( CvVectors _ivecs, CvVectors _ovecs, const double* _sw )
CvANN_MLP::wbuf	/usr/include/opencv/ml.h	/^    CvMat* wbuf;$/;"	m	class:CvANN_MLP	access:protected
CvANN_MLP::weights	/usr/include/opencv/ml.h	/^    double** weights;$/;"	m	class:CvANN_MLP	access:protected
CvANN_MLP::write	/usr/include/opencv/ml.h	/^    virtual void write( CvFileStorage* storage, const char* name );$/;"	p	class:CvANN_MLP	access:public	signature:( CvFileStorage* storage, const char* name )
CvANN_MLP::write_params	/usr/include/opencv/ml.h	/^    virtual void write_params( CvFileStorage* fs );$/;"	p	class:CvANN_MLP	access:protected	signature:( CvFileStorage* fs )
CvANN_MLP::~CvANN_MLP	/usr/include/opencv/ml.h	/^    virtual ~CvANN_MLP();$/;"	p	class:CvANN_MLP	access:public	signature:()
CvANN_MLP_TrainParams	/usr/include/opencv/ml.h	/^    CvANN_MLP_TrainParams( CvTermCriteria term_crit, int train_method,$/;"	p	struct:CvANN_MLP_TrainParams	access:public	signature:( CvTermCriteria term_crit, int train_method, double param1, double param2=0 )
CvANN_MLP_TrainParams	/usr/include/opencv/ml.h	/^    CvANN_MLP_TrainParams();$/;"	p	struct:CvANN_MLP_TrainParams	access:public	signature:()
CvANN_MLP_TrainParams	/usr/include/opencv/ml.h	/^struct CV_EXPORTS CvANN_MLP_TrainParams$/;"	s
CvANN_MLP_TrainParams::BACKPROP	/usr/include/opencv/ml.h	/^    enum { BACKPROP=0, RPROP=1 };$/;"	e	enum:CvANN_MLP_TrainParams::__anon29
CvANN_MLP_TrainParams::CvANN_MLP_TrainParams	/usr/include/opencv/ml.h	/^    CvANN_MLP_TrainParams( CvTermCriteria term_crit, int train_method,$/;"	p	struct:CvANN_MLP_TrainParams	access:public	signature:( CvTermCriteria term_crit, int train_method, double param1, double param2=0 )
CvANN_MLP_TrainParams::CvANN_MLP_TrainParams	/usr/include/opencv/ml.h	/^    CvANN_MLP_TrainParams();$/;"	p	struct:CvANN_MLP_TrainParams	access:public	signature:()
CvANN_MLP_TrainParams::RPROP	/usr/include/opencv/ml.h	/^    enum { BACKPROP=0, RPROP=1 };$/;"	e	enum:CvANN_MLP_TrainParams::__anon29
CvANN_MLP_TrainParams::bp_dw_scale	/usr/include/opencv/ml.h	/^    double bp_dw_scale, bp_moment_scale;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
CvANN_MLP_TrainParams::bp_moment_scale	/usr/include/opencv/ml.h	/^    double bp_dw_scale, bp_moment_scale;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
CvANN_MLP_TrainParams::rp_dw0	/usr/include/opencv/ml.h	/^    double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
CvANN_MLP_TrainParams::rp_dw_max	/usr/include/opencv/ml.h	/^    double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
CvANN_MLP_TrainParams::rp_dw_min	/usr/include/opencv/ml.h	/^    double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
CvANN_MLP_TrainParams::rp_dw_minus	/usr/include/opencv/ml.h	/^    double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
CvANN_MLP_TrainParams::rp_dw_plus	/usr/include/opencv/ml.h	/^    double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
CvANN_MLP_TrainParams::term_crit	/usr/include/opencv/ml.h	/^    CvTermCriteria term_crit;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
CvANN_MLP_TrainParams::train_method	/usr/include/opencv/ml.h	/^    int train_method;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
CvANN_MLP_TrainParams::~CvANN_MLP_TrainParams	/usr/include/opencv/ml.h	/^    ~CvANN_MLP_TrainParams();$/;"	p	struct:CvANN_MLP_TrainParams	access:public	signature:()
CvAdaptiveThreshMethod	/usr/include/opencv/cvcompat.h	66;"	d
CvAllocFunc	/usr/include/opencv/cxcore.h	/^typedef void* (CV_CDECL *CvAllocFunc)(size_t size, void* userdata);$/;"	t
CvArr	/usr/include/opencv/cxtypes.h	/^typedef void CvArr;$/;"	t
CvAttrList	/usr/include/opencv/cxtypes.h	/^CvAttrList;$/;"	t	typeref:struct:CvAttrList
CvAttrList	/usr/include/opencv/cxtypes.h	/^typedef struct CvAttrList$/;"	s
CvAttrList::attr	/usr/include/opencv/cxtypes.h	/^    const char** attr; \/* NULL-terminated array of (attribute_name,attribute_value) pairs *\/$/;"	m	struct:CvAttrList	access:public
CvAttrList::next	/usr/include/opencv/cxtypes.h	/^    struct CvAttrList* next; \/* pointer to next chunk of the attributes list *\/$/;"	m	struct:CvAttrList	typeref:struct:CvAttrList::CvAttrList	access:public
CvAvgComp	/usr/include/opencv/cvtypes.h	/^CvAvgComp;$/;"	t	typeref:struct:CvAvgComp
CvAvgComp	/usr/include/opencv/cvtypes.h	/^typedef struct CvAvgComp$/;"	s
CvAvgComp::neighbors	/usr/include/opencv/cvtypes.h	/^    int neighbors;$/;"	m	struct:CvAvgComp	access:public
CvAvgComp::rect	/usr/include/opencv/cvtypes.h	/^    CvRect rect;$/;"	m	struct:CvAvgComp	access:public
CvBGPixelCCStatTable	/usr/include/opencv/cvaux.h	/^CvBGPixelCCStatTable;$/;"	t	typeref:struct:CvBGPixelCCStatTable
CvBGPixelCCStatTable	/usr/include/opencv/cvaux.h	/^typedef struct CvBGPixelCCStatTable$/;"	s
CvBGPixelCCStatTable::Pv	/usr/include/opencv/cvaux.h	/^    float          Pv, Pvb;$/;"	m	struct:CvBGPixelCCStatTable	access:public
CvBGPixelCCStatTable::Pvb	/usr/include/opencv/cvaux.h	/^    float          Pv, Pvb;$/;"	m	struct:CvBGPixelCCStatTable	access:public
CvBGPixelCCStatTable::v	/usr/include/opencv/cvaux.h	/^    uchar          v[6];$/;"	m	struct:CvBGPixelCCStatTable	access:public
CvBGPixelCStatTable	/usr/include/opencv/cvaux.h	/^CvBGPixelCStatTable;$/;"	t	typeref:struct:CvBGPixelCStatTable
CvBGPixelCStatTable	/usr/include/opencv/cvaux.h	/^typedef struct CvBGPixelCStatTable$/;"	s
CvBGPixelCStatTable::Pv	/usr/include/opencv/cvaux.h	/^    float          Pv, Pvb;$/;"	m	struct:CvBGPixelCStatTable	access:public
CvBGPixelCStatTable::Pvb	/usr/include/opencv/cvaux.h	/^    float          Pv, Pvb;$/;"	m	struct:CvBGPixelCStatTable	access:public
CvBGPixelCStatTable::v	/usr/include/opencv/cvaux.h	/^    uchar          v[3];$/;"	m	struct:CvBGPixelCStatTable	access:public
CvBGPixelStat	/usr/include/opencv/cvaux.h	/^CvBGPixelStat;$/;"	t	typeref:struct:CvBGPixelStat
CvBGPixelStat	/usr/include/opencv/cvaux.h	/^typedef struct CvBGPixelStat$/;"	s
CvBGPixelStat::Pbc	/usr/include/opencv/cvaux.h	/^    float                 Pbc;$/;"	m	struct:CvBGPixelStat	access:public
CvBGPixelStat::Pbcc	/usr/include/opencv/cvaux.h	/^    float                 Pbcc;$/;"	m	struct:CvBGPixelStat	access:public
CvBGPixelStat::cctable	/usr/include/opencv/cvaux.h	/^    CvBGPixelCCStatTable* cctable;$/;"	m	struct:CvBGPixelStat	access:public
CvBGPixelStat::ctable	/usr/include/opencv/cvaux.h	/^    CvBGPixelCStatTable*  ctable;$/;"	m	struct:CvBGPixelStat	access:public
CvBGPixelStat::is_trained_dyn_model	/usr/include/opencv/cvaux.h	/^    uchar                 is_trained_dyn_model;$/;"	m	struct:CvBGPixelStat	access:public
CvBGPixelStat::is_trained_st_model	/usr/include/opencv/cvaux.h	/^    uchar                 is_trained_st_model;$/;"	m	struct:CvBGPixelStat	access:public
CvBGStatModel	/usr/include/opencv/cvaux.h	/^CvBGStatModel;$/;"	t	typeref:struct:CvBGStatModel
CvBGStatModel	/usr/include/opencv/cvaux.h	/^typedef struct CvBGStatModel$/;"	s
CvBGStatModel::CV_BG_STAT_MODEL_FIELDS	/usr/include/opencv/cvaux.h	/^    CV_BG_STAT_MODEL_FIELDS();$/;"	p	struct:CvBGStatModel	access:public	signature:()
CvBaseImageFilter	/usr/include/opencv/cv.hpp	/^    CvBaseImageFilter( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvBaseImageFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, bool _is_separable, CvSize _ksize, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
CvBaseImageFilter	/usr/include/opencv/cv.hpp	/^    CvBaseImageFilter();$/;"	p	class:CvBaseImageFilter	access:public	signature:()
CvBaseImageFilter	/usr/include/opencv/cv.hpp	/^class CV_EXPORTS CvBaseImageFilter$/;"	c
CvBaseImageFilter::ALIGN	/usr/include/opencv/cv.hpp	/^    enum { ALIGN=32 };$/;"	e	enum:CvBaseImageFilter::__anon8
CvBaseImageFilter::CvBaseImageFilter	/usr/include/opencv/cv.hpp	/^    CvBaseImageFilter( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvBaseImageFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, bool _is_separable, CvSize _ksize, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
CvBaseImageFilter::CvBaseImageFilter	/usr/include/opencv/cv.hpp	/^    CvBaseImageFilter();$/;"	p	class:CvBaseImageFilter	access:public	signature:()
CvBaseImageFilter::anchor	/usr/include/opencv/cv.hpp	/^    CvPoint anchor;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::border_mode	/usr/include/opencv/cv.hpp	/^    int max_ky, border_mode;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::border_tab	/usr/include/opencv/cv.hpp	/^    int* border_tab;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::border_tab_sz	/usr/include/opencv/cv.hpp	/^    int border_tab_sz1, border_tab_sz;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::border_tab_sz1	/usr/include/opencv/cv.hpp	/^    int border_tab_sz1, border_tab_sz;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::border_value	/usr/include/opencv/cv.hpp	/^    CvScalar border_value;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::bottom_rows	/usr/include/opencv/cv.hpp	/^    int top_rows, bottom_rows, max_rows;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::buf_count	/usr/include/opencv/cv.hpp	/^    int buf_size, buf_step, buf_count, buf_max_count;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::buf_end	/usr/include/opencv/cv.hpp	/^    uchar *buf_start, *buf_end, *buf_head, *buf_tail;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::buf_head	/usr/include/opencv/cv.hpp	/^    uchar *buf_start, *buf_end, *buf_head, *buf_tail;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::buf_max_count	/usr/include/opencv/cv.hpp	/^    int buf_size, buf_step, buf_count, buf_max_count;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::buf_size	/usr/include/opencv/cv.hpp	/^    int buf_size, buf_step, buf_count, buf_max_count;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::buf_start	/usr/include/opencv/cv.hpp	/^    uchar *buf_start, *buf_end, *buf_head, *buf_tail;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::buf_step	/usr/include/opencv/cv.hpp	/^    int buf_size, buf_step, buf_count, buf_max_count;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::buf_tail	/usr/include/opencv/cv.hpp	/^    uchar *buf_start, *buf_end, *buf_head, *buf_tail;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::buffer	/usr/include/opencv/cv.hpp	/^    uchar* buffer;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::clear	/usr/include/opencv/cv.hpp	/^    virtual void clear();$/;"	p	class:CvBaseImageFilter	access:public	signature:()
CvBaseImageFilter::const_row	/usr/include/opencv/cv.hpp	/^    uchar* const_row;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::dst_type	/usr/include/opencv/cv.hpp	/^    int min_depth, src_type, dst_type, work_type;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::fill_cyclic_buffer	/usr/include/opencv/cv.hpp	/^    virtual int fill_cyclic_buffer( const uchar* src, int src_step,$/;"	p	class:CvBaseImageFilter	access:protected	signature:( const uchar* src, int src_step, int y, int y1, int y2 )
CvBaseImageFilter::get_anchor	/usr/include/opencv/cv.hpp	/^    CvPoint get_anchor() const { return anchor; }$/;"	f	class:CvBaseImageFilter	access:public	signature:() const
CvBaseImageFilter::get_dst_type	/usr/include/opencv/cv.hpp	/^    int get_dst_type() const { return dst_type; }$/;"	f	class:CvBaseImageFilter	access:public	signature:() const
CvBaseImageFilter::get_kernel_size	/usr/include/opencv/cv.hpp	/^    CvSize get_kernel_size() const { return ksize; }$/;"	f	class:CvBaseImageFilter	access:public	signature:() const
CvBaseImageFilter::get_src_type	/usr/include/opencv/cv.hpp	/^    int get_src_type() const { return src_type; }$/;"	f	class:CvBaseImageFilter	access:public	signature:() const
CvBaseImageFilter::get_width	/usr/include/opencv/cv.hpp	/^    int get_width() const { return prev_x_range.end_index - prev_x_range.start_index; }$/;"	f	class:CvBaseImageFilter	access:public	signature:() const
CvBaseImageFilter::get_work_params	/usr/include/opencv/cv.hpp	/^    virtual void get_work_params();$/;"	p	class:CvBaseImageFilter	access:protected	signature:()
CvBaseImageFilter::get_work_type	/usr/include/opencv/cv.hpp	/^    int get_work_type() const { return work_type; }$/;"	f	class:CvBaseImageFilter	access:public	signature:() const
CvBaseImageFilter::get_x_filter_func	/usr/include/opencv/cv.hpp	/^    CvRowFilterFunc get_x_filter_func() const { return x_func; }$/;"	f	class:CvBaseImageFilter	access:public	signature:() const
CvBaseImageFilter::get_y_filter_func	/usr/include/opencv/cv.hpp	/^    CvColumnFilterFunc get_y_filter_func() const { return y_func; }$/;"	f	class:CvBaseImageFilter	access:public	signature:() const
CvBaseImageFilter::init	/usr/include/opencv/cv.hpp	/^    virtual void init( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvBaseImageFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, bool _is_separable, CvSize _ksize, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
CvBaseImageFilter::is_separable	/usr/include/opencv/cv.hpp	/^    bool is_separable;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::ksize	/usr/include/opencv/cv.hpp	/^    CvSize ksize;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::make_y_border	/usr/include/opencv/cv.hpp	/^    virtual void make_y_border( int row_count, int top_rows, int bottom_rows );$/;"	p	class:CvBaseImageFilter	access:protected	signature:( int row_count, int top_rows, int bottom_rows )
CvBaseImageFilter::max_ky	/usr/include/opencv/cv.hpp	/^    int max_ky, border_mode;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::max_rows	/usr/include/opencv/cv.hpp	/^    int top_rows, bottom_rows, max_rows;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::max_width	/usr/include/opencv/cv.hpp	/^    int max_width;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::min_depth	/usr/include/opencv/cv.hpp	/^    int min_depth, src_type, dst_type, work_type;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::prev_width	/usr/include/opencv/cv.hpp	/^    int prev_width;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::prev_x_range	/usr/include/opencv/cv.hpp	/^    CvSlice prev_x_range;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::process	/usr/include/opencv/cv.hpp	/^    virtual int process( const CvMat* _src, CvMat* _dst,$/;"	p	class:CvBaseImageFilter	access:public	signature:( const CvMat* _src, CvMat* _dst, CvRect _src_roi=cvRect(0,0,-1,-1), CvPoint _dst_origin=cvPoint(0,0), int _flags=0 )
CvBaseImageFilter::rows	/usr/include/opencv/cv.hpp	/^    uchar** rows;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::src_type	/usr/include/opencv/cv.hpp	/^    int min_depth, src_type, dst_type, work_type;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::start_process	/usr/include/opencv/cv.hpp	/^    virtual void start_process( CvSlice x_range, int width );$/;"	p	class:CvBaseImageFilter	access:protected	signature:( CvSlice x_range, int width )
CvBaseImageFilter::top_rows	/usr/include/opencv/cv.hpp	/^    int top_rows, bottom_rows, max_rows;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::work_type	/usr/include/opencv/cv.hpp	/^    int min_depth, src_type, dst_type, work_type;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::x_func	/usr/include/opencv/cv.hpp	/^    CvRowFilterFunc x_func;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::y_func	/usr/include/opencv/cv.hpp	/^    CvColumnFilterFunc y_func;$/;"	m	class:CvBaseImageFilter	access:protected
CvBaseImageFilter::~CvBaseImageFilter	/usr/include/opencv/cv.hpp	/^    virtual ~CvBaseImageFilter();$/;"	p	class:CvBaseImageFilter	access:public	signature:()
CvBigFuncTable	/usr/include/opencv/cxmisc.h	/^CvBigFuncTable;$/;"	t	typeref:struct:CvBigFuncTable
CvBigFuncTable	/usr/include/opencv/cxmisc.h	/^typedef struct CvBigFuncTable$/;"	s
CvBigFuncTable::fn_2d	/usr/include/opencv/cxmisc.h	/^    void*   fn_2d[CV_DEPTH_MAX*CV_CN_MAX];$/;"	m	struct:CvBigFuncTable	access:public
CvBlob	/usr/include/opencv/cvvidsurv.hpp	/^struct CvBlob$/;"	s
CvBlob::ID	/usr/include/opencv/cvvidsurv.hpp	/^    int     ID;  \/* blbo ID         *\/     $/;"	m	struct:CvBlob	access:public
CvBlob::h	/usr/include/opencv/cvvidsurv.hpp	/^    float   w,h; \/* blob sizes      *\/$/;"	m	struct:CvBlob	access:public
CvBlob::w	/usr/include/opencv/cvvidsurv.hpp	/^    float   w,h; \/* blob sizes      *\/$/;"	m	struct:CvBlob	access:public
CvBlob::x	/usr/include/opencv/cvvidsurv.hpp	/^    float   x,y; \/* blob position   *\/$/;"	m	struct:CvBlob	access:public
CvBlob::y	/usr/include/opencv/cvvidsurv.hpp	/^    float   x,y; \/* blob position   *\/$/;"	m	struct:CvBlob	access:public
CvBlobDetector	/usr/include/opencv/cvvidsurv.hpp	/^class CV_EXPORTS CvBlobDetector: public CvVSModule$/;"	c
CvBlobDetector::DetectNewBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual int DetectNewBlob(IplImage* pImg, IplImage* pImgFG, CvBlobSeq* pNewBlobList, CvBlobSeq* pOldBlobList) = 0;$/;"	p	class:CvBlobDetector	access:public	signature:(IplImage* pImg, IplImage* pImgFG, CvBlobSeq* pNewBlobList, CvBlobSeq* pOldBlobList)
CvBlobDetector::Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void Release()=0;$/;"	p	class:CvBlobDetector	access:public	signature:()
CvBlobSeq	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobSeq(int BlobSize = sizeof(CvBlob))$/;"	f	class:CvBlobSeq	access:public	signature:(int BlobSize = sizeof(CvBlob))
CvBlobSeq	/usr/include/opencv/cvvidsurv.hpp	/^class CV_EXPORTS CvBlobSeq$/;"	c
CvBlobSeq::AddBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void AddBlob(CvBlob* pB)$/;"	f	class:CvBlobSeq	access:public	signature:(CvBlob* pB)
CvBlobSeq::AddFormat	/usr/include/opencv/cvvidsurv.hpp	/^    void AddFormat(char* str){strcat(m_pElemFormat,str);}$/;"	f	class:CvBlobSeq	access:public	signature:(char* str)
CvBlobSeq::Clear	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void Clear()$/;"	f	class:CvBlobSeq	access:public	signature:()
CvBlobSeq::CvBlobSeq	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobSeq(int BlobSize = sizeof(CvBlob))$/;"	f	class:CvBlobSeq	access:public	signature:(int BlobSize = sizeof(CvBlob))
CvBlobSeq::DelBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void DelBlob(int BlobIndex)$/;"	f	class:CvBlobSeq	access:public	signature:(int BlobIndex)
CvBlobSeq::DelBlobByID	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void DelBlobByID(int BlobID)$/;"	f	class:CvBlobSeq	access:public	signature:(int BlobID)
CvBlobSeq::GetBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob* GetBlob(int BlobIndex)$/;"	f	class:CvBlobSeq	access:public	signature:(int BlobIndex)
CvBlobSeq::GetBlobByID	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob* GetBlobByID(int BlobID)$/;"	f	class:CvBlobSeq	access:public	signature:(int BlobID)
CvBlobSeq::GetBlobNum	/usr/include/opencv/cvvidsurv.hpp	/^    virtual int GetBlobNum()$/;"	f	class:CvBlobSeq	access:public	signature:()
CvBlobSeq::Load	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void Load(CvFileStorage* fs, CvFileNode* node)$/;"	f	class:CvBlobSeq	access:public	signature:(CvFileStorage* fs, CvFileNode* node)
CvBlobSeq::Write	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void Write(CvFileStorage* fs, char* name)$/;"	f	class:CvBlobSeq	access:public	signature:(CvFileStorage* fs, char* name)
CvBlobSeq::m_pElemFormat	/usr/include/opencv/cvvidsurv.hpp	/^    char            m_pElemFormat[1024];$/;"	m	class:CvBlobSeq	access:protected
CvBlobSeq::m_pMem	/usr/include/opencv/cvvidsurv.hpp	/^    CvMemStorage*   m_pMem;$/;"	m	class:CvBlobSeq	access:protected
CvBlobSeq::m_pSeq	/usr/include/opencv/cvvidsurv.hpp	/^    CvSeq*          m_pSeq;$/;"	m	class:CvBlobSeq	access:protected
CvBlobSeq::~CvBlobSeq	/usr/include/opencv/cvvidsurv.hpp	/^    virtual ~CvBlobSeq()$/;"	f	class:CvBlobSeq	access:public	signature:()
CvBlobTrack	/usr/include/opencv/cvvidsurv.hpp	/^struct CvBlobTrack$/;"	s
CvBlobTrack::StartFrame	/usr/include/opencv/cvvidsurv.hpp	/^    int         StartFrame;$/;"	m	struct:CvBlobTrack	access:public
CvBlobTrack::TrackID	/usr/include/opencv/cvvidsurv.hpp	/^    int         TrackID;$/;"	m	struct:CvBlobTrack	access:public
CvBlobTrack::pBlobSeq	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobSeq*  pBlobSeq;$/;"	m	struct:CvBlobTrack	access:public
CvBlobTrackAnalysis	/usr/include/opencv/cvvidsurv.hpp	/^class CV_EXPORTS CvBlobTrackAnalysis: public CvVSModule$/;"	c
CvBlobTrackAnalysis::AddBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    AddBlob(CvBlob* pBlob) = 0;$/;"	p	class:CvBlobTrackAnalysis	access:public	signature:(CvBlob* pBlob)
CvBlobTrackAnalysis::GetState	/usr/include/opencv/cvvidsurv.hpp	/^    virtual float   GetState(int BlobID) = 0;$/;"	p	class:CvBlobTrackAnalysis	access:public	signature:(int BlobID)
CvBlobTrackAnalysis::GetStateDesc	/usr/include/opencv/cvvidsurv.hpp	/^    virtual char*   GetStateDesc(int \/*BlobID*\/){return NULL;};$/;"	f	class:CvBlobTrackAnalysis	access:public	signature:(int )
CvBlobTrackAnalysis::Process	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Process(IplImage* pImg, IplImage* pFG) = 0;$/;"	p	class:CvBlobTrackAnalysis	access:public	signature:(IplImage* pImg, IplImage* pFG)
CvBlobTrackAnalysis::Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Release() = 0;$/;"	p	class:CvBlobTrackAnalysis	access:public	signature:()
CvBlobTrackAnalysis::SetFileName	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    SetFileName(char* \/*DataBaseName*\/){};$/;"	f	class:CvBlobTrackAnalysis	access:public	signature:(char* )
CvBlobTrackAnalysisHeight	/usr/include/opencv/cvvidsurv.hpp	/^class CV_EXPORTS CvBlobTrackAnalysisHeight: public CvBlobTrackAnalysis$/;"	c
CvBlobTrackAnalysisHeight::GetHeight	/usr/include/opencv/cvvidsurv.hpp	/^    virtual double  GetHeight(CvBlob* pB) = 0;$/;"	p	class:CvBlobTrackAnalysisHeight	access:public	signature:(CvBlob* pB)
CvBlobTrackAnalysisOne	/usr/include/opencv/cvvidsurv.hpp	/^class CV_EXPORTS CvBlobTrackAnalysisOne$/;"	c
CvBlobTrackAnalysisOne::Process	/usr/include/opencv/cvvidsurv.hpp	/^    virtual int     Process(CvBlob* pBlob, IplImage* pImg, IplImage* pFG) = 0;$/;"	p	class:CvBlobTrackAnalysisOne	access:public	signature:(CvBlob* pBlob, IplImage* pImg, IplImage* pFG)
CvBlobTrackAnalysisOne::Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Release() = 0;$/;"	p	class:CvBlobTrackAnalysisOne	access:public	signature:()
CvBlobTrackAnalysisOne::~CvBlobTrackAnalysisOne	/usr/include/opencv/cvvidsurv.hpp	/^    virtual ~CvBlobTrackAnalysisOne() {};$/;"	f	class:CvBlobTrackAnalysisOne	access:public	signature:()
CvBlobTrackFVGen	/usr/include/opencv/cvvidsurv.hpp	/^class CV_EXPORTS CvBlobTrackFVGen : public CvVSModule$/;"	c
CvBlobTrackFVGen::AddBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    AddBlob(CvBlob* pBlob) = 0;$/;"	p	class:CvBlobTrackFVGen	access:public	signature:(CvBlob* pBlob)
CvBlobTrackFVGen::GetFV	/usr/include/opencv/cvvidsurv.hpp	/^    virtual float*  GetFV(int index, int* pFVID) = 0; \/* pointer to FV, if return 0 then FV does not created *\/$/;"	p	class:CvBlobTrackFVGen	access:public	signature:(int index, int* pFVID)
CvBlobTrackFVGen::GetFVMax	/usr/include/opencv/cvvidsurv.hpp	/^    virtual float*  GetFVMax() = 0; \/* returned pointer to array of maximal values of FV, if return 0 then FVrange is not exist *\/$/;"	p	class:CvBlobTrackFVGen	access:public	signature:()
CvBlobTrackFVGen::GetFVMin	/usr/include/opencv/cvvidsurv.hpp	/^    virtual float*  GetFVMin() = 0; \/* returned pointer to array of minimal values of FV, if return 0 then FVrange is not exist *\/$/;"	p	class:CvBlobTrackFVGen	access:public	signature:()
CvBlobTrackFVGen::GetFVNum	/usr/include/opencv/cvvidsurv.hpp	/^    virtual int     GetFVNum() = 0;$/;"	p	class:CvBlobTrackFVGen	access:public	signature:()
CvBlobTrackFVGen::GetFVSize	/usr/include/opencv/cvvidsurv.hpp	/^    virtual int     GetFVSize() = 0;$/;"	p	class:CvBlobTrackFVGen	access:public	signature:()
CvBlobTrackFVGen::GetFVVar	/usr/include/opencv/cvvidsurv.hpp	/^    virtual float*  GetFVVar(){return NULL;}; \/* returned pointer to array of variation of values of FV, if return 0 then FVVar is not exist *\/$/;"	f	class:CvBlobTrackFVGen	access:public	signature:()
CvBlobTrackFVGen::Process	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Process(IplImage* pImg, IplImage* pFG) = 0;$/;"	p	class:CvBlobTrackFVGen	access:public	signature:(IplImage* pImg, IplImage* pFG)
CvBlobTrackFVGen::Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Release() = 0;$/;"	p	class:CvBlobTrackFVGen	access:public	signature:()
CvBlobTrackGen	/usr/include/opencv/cvvidsurv.hpp	/^class CV_EXPORTS CvBlobTrackGen: public CvVSModule$/;"	c
CvBlobTrackGen::AddBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    AddBlob(CvBlob* pBlob) = 0;$/;"	p	class:CvBlobTrackGen	access:public	signature:(CvBlob* pBlob)
CvBlobTrackGen::Process	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Process(IplImage* pImg = NULL, IplImage* pFG = NULL) = 0;$/;"	p	class:CvBlobTrackGen	access:public	signature:(IplImage* pImg = NULL, IplImage* pFG = NULL)
CvBlobTrackGen::Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Release() = 0;$/;"	p	class:CvBlobTrackGen	access:public	signature:()
CvBlobTrackGen::SetFileName	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    SetFileName(char* pFileName) = 0;$/;"	p	class:CvBlobTrackGen	access:public	signature:(char* pFileName)
CvBlobTrackPostProc	/usr/include/opencv/cvvidsurv.hpp	/^class CV_EXPORTS CvBlobTrackPostProc: public CvVSModule$/;"	c
CvBlobTrackPostProc::AddBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    AddBlob(CvBlob* pBlob) = 0;$/;"	p	class:CvBlobTrackPostProc	access:public	signature:(CvBlob* pBlob)
CvBlobTrackPostProc::GetBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob* GetBlob(int index) = 0;$/;"	p	class:CvBlobTrackPostProc	access:public	signature:(int index)
CvBlobTrackPostProc::GetBlobByID	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob* GetBlobByID(int BlobID)$/;"	f	class:CvBlobTrackPostProc	access:public	signature:(int BlobID)
CvBlobTrackPostProc::GetBlobNum	/usr/include/opencv/cvvidsurv.hpp	/^    virtual int     GetBlobNum() = 0;$/;"	p	class:CvBlobTrackPostProc	access:public	signature:()
CvBlobTrackPostProc::Process	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Process() = 0;$/;"	p	class:CvBlobTrackPostProc	access:public	signature:()
CvBlobTrackPostProc::Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Release() = 0;$/;"	p	class:CvBlobTrackPostProc	access:public	signature:()
CvBlobTrackPostProcOne	/usr/include/opencv/cvvidsurv.hpp	/^class CV_EXPORTS CvBlobTrackPostProcOne: public CvVSModule$/;"	c
CvBlobTrackPostProcOne::Process	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob* Process(CvBlob* pBlob) = 0;$/;"	p	class:CvBlobTrackPostProcOne	access:public	signature:(CvBlob* pBlob)
CvBlobTrackPostProcOne::Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Release() = 0;$/;"	p	class:CvBlobTrackPostProcOne	access:public	signature:()
CvBlobTrackPredictor	/usr/include/opencv/cvvidsurv.hpp	/^class CvBlobTrackPredictor: public CvVSModule$/;"	c
CvBlobTrackPredictor::Predict	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob* Predict() = 0;$/;"	p	class:CvBlobTrackPredictor	access:public	signature:()
CvBlobTrackPredictor::Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Release() = 0;$/;"	p	class:CvBlobTrackPredictor	access:public	signature:()
CvBlobTrackPredictor::Update	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Update(CvBlob* pBlob) = 0;$/;"	p	class:CvBlobTrackPredictor	access:public	signature:(CvBlob* pBlob)
CvBlobTrackSeq	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobTrackSeq(int TrackSize = sizeof(CvBlobTrack))$/;"	f	class:CvBlobTrackSeq	access:public	signature:(int TrackSize = sizeof(CvBlobTrack))
CvBlobTrackSeq	/usr/include/opencv/cvvidsurv.hpp	/^class CV_EXPORTS CvBlobTrackSeq$/;"	c
CvBlobTrackSeq::AddBlobTrack	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void AddBlobTrack(int TrackID, int StartFrame = 0)$/;"	f	class:CvBlobTrackSeq	access:public	signature:(int TrackID, int StartFrame = 0)
CvBlobTrackSeq::Clear	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void Clear()$/;"	f	class:CvBlobTrackSeq	access:public	signature:()
CvBlobTrackSeq::CvBlobTrackSeq	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobTrackSeq(int TrackSize = sizeof(CvBlobTrack))$/;"	f	class:CvBlobTrackSeq	access:public	signature:(int TrackSize = sizeof(CvBlobTrack))
CvBlobTrackSeq::DelBlobTrack	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void DelBlobTrack(int TrackIndex)$/;"	f	class:CvBlobTrackSeq	access:public	signature:(int TrackIndex)
CvBlobTrackSeq::DelBlobTrackByID	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void DelBlobTrackByID(int TrackID)$/;"	f	class:CvBlobTrackSeq	access:public	signature:(int TrackID)
CvBlobTrackSeq::GetBlobTrack	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlobTrack* GetBlobTrack(int TrackIndex)$/;"	f	class:CvBlobTrackSeq	access:public	signature:(int TrackIndex)
CvBlobTrackSeq::GetBlobTrackByID	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlobTrack* GetBlobTrackByID(int TrackID)$/;"	f	class:CvBlobTrackSeq	access:public	signature:(int TrackID)
CvBlobTrackSeq::GetBlobTrackNum	/usr/include/opencv/cvvidsurv.hpp	/^    virtual int GetBlobTrackNum()$/;"	f	class:CvBlobTrackSeq	access:public	signature:()
CvBlobTrackSeq::m_pMem	/usr/include/opencv/cvvidsurv.hpp	/^    CvMemStorage*   m_pMem;$/;"	m	class:CvBlobTrackSeq	access:protected
CvBlobTrackSeq::m_pSeq	/usr/include/opencv/cvvidsurv.hpp	/^    CvSeq*          m_pSeq;$/;"	m	class:CvBlobTrackSeq	access:protected
CvBlobTrackSeq::~CvBlobTrackSeq	/usr/include/opencv/cvvidsurv.hpp	/^    virtual ~CvBlobTrackSeq()$/;"	f	class:CvBlobTrackSeq	access:public	signature:()
CvBlobTracker	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobTracker(){SetTypeName("BlobTracker");};$/;"	f	class:CvBlobTracker	access:public	signature:()
CvBlobTracker	/usr/include/opencv/cvvidsurv.hpp	/^class CV_EXPORTS CvBlobTracker: public CvVSModule$/;"	c
CvBlobTracker::AddBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob* AddBlob(CvBlob* pBlob, IplImage* pImg, IplImage* pImgFG = NULL ) = 0;$/;"	p	class:CvBlobTracker	access:public	signature:(CvBlob* pBlob, IplImage* pImg, IplImage* pImgFG = NULL )
CvBlobTracker::CvBlobTracker	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobTracker(){SetTypeName("BlobTracker");};$/;"	f	class:CvBlobTracker	access:public	signature:()
CvBlobTracker::DelBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    DelBlob(int BlobIndex) = 0;$/;"	p	class:CvBlobTracker	access:public	signature:(int BlobIndex)
CvBlobTracker::DelBlobByID	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    DelBlobByID(int BlobID){DelBlob(GetBlobIndexByID(BlobID));};$/;"	f	class:CvBlobTracker	access:public	signature:(int BlobID)
CvBlobTracker::GetBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob* GetBlob(int BlobIndex) = 0;$/;"	p	class:CvBlobTracker	access:public	signature:(int BlobIndex)
CvBlobTracker::GetBlobByID	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob* GetBlobByID(int BlobID){return GetBlob(GetBlobIndexByID(BlobID));};$/;"	f	class:CvBlobTracker	access:public	signature:(int BlobID)
CvBlobTracker::GetBlobHyp	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob* GetBlobHyp(int BlobIndex, int \/*hypothesis*\/){return GetBlob(BlobIndex);};$/;"	f	class:CvBlobTracker	access:public	signature:(int BlobIndex, int )
CvBlobTracker::GetBlobHypNum	/usr/include/opencv/cvvidsurv.hpp	/^    virtual int     GetBlobHypNum(int \/*BlobIdx*\/){return 1;};$/;"	f	class:CvBlobTracker	access:public	signature:(int )
CvBlobTracker::GetBlobIndexByID	/usr/include/opencv/cvvidsurv.hpp	/^    virtual int     GetBlobIndexByID(int BlobID)$/;"	f	class:CvBlobTracker	access:public	signature:(int BlobID)
CvBlobTracker::GetBlobNum	/usr/include/opencv/cvvidsurv.hpp	/^    virtual int     GetBlobNum() = 0;$/;"	p	class:CvBlobTracker	access:public	signature:()
CvBlobTracker::GetConfidence	/usr/include/opencv/cvvidsurv.hpp	/^    virtual double  GetConfidence(int \/*BlobIndex*\/, CvBlob* \/*pBlob*\/, IplImage* \/*pImg*\/, IplImage* \/*pImgFG*\/ = NULL)$/;"	f	class:CvBlobTracker	access:public	signature:(int , CvBlob* , IplImage* , IplImage* = NULL)
CvBlobTracker::GetConfidenceList	/usr/include/opencv/cvvidsurv.hpp	/^    virtual double GetConfidenceList(CvBlobSeq* pBlobList, IplImage* pImg, IplImage* pImgFG = NULL)$/;"	f	class:CvBlobTracker	access:public	signature:(CvBlobSeq* pBlobList, IplImage* pImg, IplImage* pImgFG = NULL)
CvBlobTracker::Process	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Process(IplImage* pImg, IplImage* pImgFG = NULL) = 0;$/;"	p	class:CvBlobTracker	access:public	signature:(IplImage* pImg, IplImage* pImgFG = NULL)
CvBlobTracker::ProcessBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void ProcessBlob(int BlobIndex, CvBlob* pBlob, IplImage* \/*pImg*\/, IplImage* \/*pImgFG*\/ = NULL)$/;"	f	class:CvBlobTracker	access:public	signature:(int BlobIndex, CvBlob* pBlob, IplImage* , IplImage* = NULL)
CvBlobTracker::Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Release() = 0;$/;"	p	class:CvBlobTracker	access:public	signature:()
CvBlobTracker::SetBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    SetBlob(int \/*BlobIndex*\/, CvBlob* \/*pBlob*\/){};$/;"	f	class:CvBlobTracker	access:public	signature:(int , CvBlob* )
CvBlobTracker::SetBlobByID	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    SetBlobByID(int BlobID, CvBlob* pBlob)$/;"	f	class:CvBlobTracker	access:public	signature:(int BlobID, CvBlob* pBlob)
CvBlobTracker::SetBlobHyp	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    SetBlobHyp(int \/*BlobIndex*\/, CvBlob* \/*pBlob*\/){};$/;"	f	class:CvBlobTracker	access:public	signature:(int , CvBlob* )
CvBlobTracker::Update	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void Update(IplImage* pImg, IplImage* pImgFG = NULL)$/;"	f	class:CvBlobTracker	access:public	signature:(IplImage* pImg, IplImage* pImgFG = NULL)
CvBlobTracker::UpdateBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void UpdateBlob(int \/*BlobIndex*\/, CvBlob* \/*pBlob*\/, IplImage* \/*pImg*\/, IplImage* \/*pImgFG*\/ = NULL){};$/;"	f	class:CvBlobTracker	access:public	signature:(int , CvBlob* , IplImage* , IplImage* = NULL)
CvBlobTrackerAuto	/usr/include/opencv/cvvidsurv.hpp	/^class CV_EXPORTS CvBlobTrackerAuto: public CvVSModule$/;"	c
CvBlobTrackerAuto::GetBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob*     GetBlob(int index) = 0;$/;"	p	class:CvBlobTrackerAuto	access:public	signature:(int index)
CvBlobTrackerAuto::GetBlobByID	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob*     GetBlobByID(int ID) = 0;$/;"	p	class:CvBlobTrackerAuto	access:public	signature:(int ID)
CvBlobTrackerAuto::GetBlobNum	/usr/include/opencv/cvvidsurv.hpp	/^    virtual int         GetBlobNum() = 0;$/;"	p	class:CvBlobTrackerAuto	access:public	signature:()
CvBlobTrackerAuto::GetFGMask	/usr/include/opencv/cvvidsurv.hpp	/^    virtual IplImage*   GetFGMask(){return NULL;};$/;"	f	class:CvBlobTrackerAuto	access:public	signature:()
CvBlobTrackerAuto::GetState	/usr/include/opencv/cvvidsurv.hpp	/^    virtual float       GetState(int BlobID) = 0;$/;"	p	class:CvBlobTrackerAuto	access:public	signature:(int BlobID)
CvBlobTrackerAuto::GetStateDesc	/usr/include/opencv/cvvidsurv.hpp	/^    virtual char*       GetStateDesc(int BlobID) = 0;$/;"	p	class:CvBlobTrackerAuto	access:public	signature:(int BlobID)
CvBlobTrackerAuto::Process	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void        Process(IplImage* pImg, IplImage* pMask = NULL) = 0;$/;"	p	class:CvBlobTrackerAuto	access:public	signature:(IplImage* pImg, IplImage* pMask = NULL)
CvBlobTrackerAuto::Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Release() = 0;$/;"	p	class:CvBlobTrackerAuto	access:public	signature:()
CvBlobTrackerAutoParam1	/usr/include/opencv/cvvidsurv.hpp	/^struct CvBlobTrackerAutoParam1$/;"	s
CvBlobTrackerAutoParam1::FGTrainFrames	/usr/include/opencv/cvvidsurv.hpp	/^    int                     FGTrainFrames; \/* number of frames are needed for FG detector to train *\/$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
CvBlobTrackerAutoParam1::UsePPData	/usr/include/opencv/cvvidsurv.hpp	/^    int                     UsePPData;$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
CvBlobTrackerAutoParam1::pBD	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobDetector*         pBD; \/* existed blob detector module$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
CvBlobTrackerAutoParam1::pBT	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobTracker*          pBT; \/* existed blob tracking module$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
CvBlobTrackerAutoParam1::pBTA	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobTrackAnalysis*    pBTA; \/* existed blob trajectory analysis module *\/$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
CvBlobTrackerAutoParam1::pBTGen	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobTrackGen*         pBTGen; \/* existed blob trajectory generator,$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
CvBlobTrackerAutoParam1::pBTPP	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobTrackPostProc*    pBTPP; \/* existed blob trajectory postprocessing module$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
CvBlobTrackerAutoParam1::pFG	/usr/include/opencv/cvvidsurv.hpp	/^    CvFGDetector*           pFG; \/* FGDetector module, if this filed is NULL the Process FG mask is used *\/$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
CvBlobTrackerOne	/usr/include/opencv/cvvidsurv.hpp	/^class CV_EXPORTS CvBlobTrackerOne:public CvVSModule$/;"	c
CvBlobTrackerOne::GetConfidence	/usr/include/opencv/cvvidsurv.hpp	/^    virtual double GetConfidence(CvBlob* \/*pBlob*\/, IplImage* \/*pImg*\/,$/;"	f	class:CvBlobTrackerOne	access:public	signature:(CvBlob* , IplImage* , IplImage* = NULL, IplImage* = NULL)
CvBlobTrackerOne::Init	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void Init(CvBlob* pBlobInit, IplImage* pImg, IplImage* pImgFG = NULL) = 0;$/;"	p	class:CvBlobTrackerOne	access:public	signature:(CvBlob* pBlobInit, IplImage* pImg, IplImage* pImgFG = NULL)
CvBlobTrackerOne::Process	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob* Process(CvBlob* pBlobPrev, IplImage* pImg, IplImage* pImgFG = NULL) = 0;$/;"	p	class:CvBlobTrackerOne	access:public	signature:(CvBlob* pBlobPrev, IplImage* pImg, IplImage* pImgFG = NULL)
CvBlobTrackerOne::Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void Release() =  0;$/;"	p	class:CvBlobTrackerOne	access:public	signature:()
CvBlobTrackerOne::SetCollision	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void SetCollision(int \/*CollisionFlag*\/){}; \/* call in case of blob collision situation*\/$/;"	f	class:CvBlobTrackerOne	access:public	signature:(int )
CvBlobTrackerOne::SkipProcess	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void SkipProcess(CvBlob* \/*pBlobPrev*\/, IplImage* \/*pImg*\/, IplImage* \/*pImgFG*\/ = NULL){};$/;"	f	class:CvBlobTrackerOne	access:public	signature:(CvBlob* , IplImage* , IplImage* = NULL)
CvBlobTrackerOne::Update	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void Update(CvBlob* \/*pBlob*\/, IplImage* \/*pImg*\/, IplImage* \/*pImgFG*\/ = NULL){};$/;"	f	class:CvBlobTrackerOne	access:public	signature:(CvBlob* , IplImage* , IplImage* = NULL)
CvBlobTrackerParamLH	/usr/include/opencv/cvvidsurv.hpp	/^struct CvBlobTrackerParamLH$/;"	s
CvBlobTrackerParamLH::HistType	/usr/include/opencv/cvvidsurv.hpp	/^    int     HistType; \/* see Prob.h *\/$/;"	m	struct:CvBlobTrackerParamLH	access:public
CvBlobTrackerParamLH::ScaleAfter	/usr/include/opencv/cvvidsurv.hpp	/^    int     ScaleAfter;$/;"	m	struct:CvBlobTrackerParamLH	access:public
CvBlobTrackerParamMS	/usr/include/opencv/cvvidsurv.hpp	/^struct CvBlobTrackerParamMS$/;"	s
CvBlobTrackerParamMS::appearance_profile	/usr/include/opencv/cvvidsurv.hpp	/^    int     appearance_profile;$/;"	m	struct:CvBlobTrackerParamMS	access:public
CvBlobTrackerParamMS::meanshift_profile	/usr/include/opencv/cvvidsurv.hpp	/^    int     meanshift_profile;$/;"	m	struct:CvBlobTrackerParamMS	access:public
CvBlobTrackerParamMS::noOfSigBits	/usr/include/opencv/cvvidsurv.hpp	/^    int     noOfSigBits;$/;"	m	struct:CvBlobTrackerParamMS	access:public
CvBlobTrackerParamMS::sigma	/usr/include/opencv/cvvidsurv.hpp	/^    float   sigma;$/;"	m	struct:CvBlobTrackerParamMS	access:public
CvBool	/usr/include/opencv/cvaux.h	/^typedef unsigned char CvBool;$/;"	t
CvBoost	/usr/include/opencv/ml.h	/^    CvBoost( const CvMat* _train_data, int _tflag,$/;"	p	class:CvBoost	access:public	signature:( const CvMat* _train_data, int _tflag, const CvMat* _responses, const CvMat* _var_idx=0, const CvMat* _sample_idx=0, const CvMat* _var_type=0, const CvMat* _missing_mask=0, CvBoostParams params=CvBoostParams() )
CvBoost	/usr/include/opencv/ml.h	/^    CvBoost();$/;"	p	class:CvBoost	access:public	signature:()
CvBoost	/usr/include/opencv/ml.h	/^class CV_EXPORTS CvBoost : public CvStatModel$/;"	c
CvBoost::CvBoost	/usr/include/opencv/ml.h	/^    CvBoost( const CvMat* _train_data, int _tflag,$/;"	p	class:CvBoost	access:public	signature:( const CvMat* _train_data, int _tflag, const CvMat* _responses, const CvMat* _var_idx=0, const CvMat* _sample_idx=0, const CvMat* _var_type=0, const CvMat* _missing_mask=0, CvBoostParams params=CvBoostParams() )
CvBoost::CvBoost	/usr/include/opencv/ml.h	/^    CvBoost();$/;"	p	class:CvBoost	access:public	signature:()
CvBoost::DEFAULT	/usr/include/opencv/ml.h	/^    enum { DEFAULT=0, GINI=1, MISCLASS=3, SQERR=4 };$/;"	e	enum:CvBoost::__anon28
CvBoost::DISCRETE	/usr/include/opencv/ml.h	/^    enum { DISCRETE=0, REAL=1, LOGIT=2, GENTLE=3 };$/;"	e	enum:CvBoost::__anon27
CvBoost::GENTLE	/usr/include/opencv/ml.h	/^    enum { DISCRETE=0, REAL=1, LOGIT=2, GENTLE=3 };$/;"	e	enum:CvBoost::__anon27
CvBoost::GINI	/usr/include/opencv/ml.h	/^    enum { DEFAULT=0, GINI=1, MISCLASS=3, SQERR=4 };$/;"	e	enum:CvBoost::__anon28
CvBoost::LOGIT	/usr/include/opencv/ml.h	/^    enum { DISCRETE=0, REAL=1, LOGIT=2, GENTLE=3 };$/;"	e	enum:CvBoost::__anon27
CvBoost::MISCLASS	/usr/include/opencv/ml.h	/^    enum { DEFAULT=0, GINI=1, MISCLASS=3, SQERR=4 };$/;"	e	enum:CvBoost::__anon28
CvBoost::REAL	/usr/include/opencv/ml.h	/^    enum { DISCRETE=0, REAL=1, LOGIT=2, GENTLE=3 };$/;"	e	enum:CvBoost::__anon27
CvBoost::SQERR	/usr/include/opencv/ml.h	/^    enum { DEFAULT=0, GINI=1, MISCLASS=3, SQERR=4 };$/;"	e	enum:CvBoost::__anon28
CvBoost::clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	class:CvBoost	access:public	signature:()
CvBoost::data	/usr/include/opencv/ml.h	/^    CvDTreeTrainData* data;$/;"	m	class:CvBoost	access:protected
CvBoost::get_params	/usr/include/opencv/ml.h	/^    const CvBoostParams& get_params() const;$/;"	p	class:CvBoost	access:public	signature:() const
CvBoost::get_subtree_weights	/usr/include/opencv/ml.h	/^    CvMat* get_subtree_weights();$/;"	p	class:CvBoost	access:public	signature:()
CvBoost::get_weak_predictors	/usr/include/opencv/ml.h	/^    CvSeq* get_weak_predictors();$/;"	p	class:CvBoost	access:public	signature:()
CvBoost::get_weak_response	/usr/include/opencv/ml.h	/^    CvMat* get_weak_response();$/;"	p	class:CvBoost	access:public	signature:()
CvBoost::get_weights	/usr/include/opencv/ml.h	/^    CvMat* get_weights();$/;"	p	class:CvBoost	access:public	signature:()
CvBoost::have_subsample	/usr/include/opencv/ml.h	/^    bool have_subsample;$/;"	m	class:CvBoost	access:protected
CvBoost::orig_response	/usr/include/opencv/ml.h	/^    CvMat* orig_response;$/;"	m	class:CvBoost	access:protected
CvBoost::params	/usr/include/opencv/ml.h	/^    CvBoostParams params;    $/;"	m	class:CvBoost	access:protected
CvBoost::predict	/usr/include/opencv/ml.h	/^    virtual float predict( const CvMat* _sample, const CvMat* _missing=0,$/;"	p	class:CvBoost	access:public	signature:( const CvMat* _sample, const CvMat* _missing=0, CvMat* weak_responses=0, CvSlice slice=CV_WHOLE_SEQ, bool raw_mode=false ) const
CvBoost::prune	/usr/include/opencv/ml.h	/^    virtual void prune( CvSlice slice );$/;"	p	class:CvBoost	access:public	signature:( CvSlice slice )
CvBoost::read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* storage, CvFileNode* node );$/;"	p	class:CvBoost	access:public	signature:( CvFileStorage* storage, CvFileNode* node )
CvBoost::read_params	/usr/include/opencv/ml.h	/^    virtual void read_params( CvFileStorage* fs, CvFileNode* node );$/;"	p	class:CvBoost	access:protected	signature:( CvFileStorage* fs, CvFileNode* node )
CvBoost::set_params	/usr/include/opencv/ml.h	/^    virtual bool set_params( const CvBoostParams& _params );$/;"	p	class:CvBoost	access:protected	signature:( const CvBoostParams& _params )
CvBoost::subsample_mask	/usr/include/opencv/ml.h	/^    CvMat* subsample_mask;$/;"	m	class:CvBoost	access:protected
CvBoost::subtree_weights	/usr/include/opencv/ml.h	/^    CvMat* subtree_weights;$/;"	m	class:CvBoost	access:protected
CvBoost::sum_response	/usr/include/opencv/ml.h	/^    CvMat* sum_response;$/;"	m	class:CvBoost	access:protected
CvBoost::train	/usr/include/opencv/ml.h	/^    virtual bool train( const CvMat* _train_data, int _tflag,$/;"	p	class:CvBoost	access:public	signature:( const CvMat* _train_data, int _tflag, const CvMat* _responses, const CvMat* _var_idx=0, const CvMat* _sample_idx=0, const CvMat* _var_type=0, const CvMat* _missing_mask=0, CvBoostParams params=CvBoostParams(), bool update=false )
CvBoost::trim_weights	/usr/include/opencv/ml.h	/^    virtual void trim_weights();$/;"	p	class:CvBoost	access:protected	signature:()
CvBoost::update_weights	/usr/include/opencv/ml.h	/^    virtual void update_weights( CvBoostTree* tree );$/;"	p	class:CvBoost	access:protected	signature:( CvBoostTree* tree )
CvBoost::weak	/usr/include/opencv/ml.h	/^    CvSeq* weak;$/;"	m	class:CvBoost	access:protected
CvBoost::weak_eval	/usr/include/opencv/ml.h	/^    CvMat* weak_eval;$/;"	m	class:CvBoost	access:protected
CvBoost::weights	/usr/include/opencv/ml.h	/^    CvMat* weights;$/;"	m	class:CvBoost	access:protected
CvBoost::write	/usr/include/opencv/ml.h	/^    virtual void write( CvFileStorage* storage, const char* name );$/;"	p	class:CvBoost	access:public	signature:( CvFileStorage* storage, const char* name )
CvBoost::write_params	/usr/include/opencv/ml.h	/^    virtual void write_params( CvFileStorage* fs );$/;"	p	class:CvBoost	access:protected	signature:( CvFileStorage* fs )
CvBoost::~CvBoost	/usr/include/opencv/ml.h	/^    virtual ~CvBoost();$/;"	p	class:CvBoost	access:public	signature:()
CvBoostParams	/usr/include/opencv/ml.h	/^    CvBoostParams( int boost_type, int weak_count, double weight_trim_rate,$/;"	p	struct:CvBoostParams	access:public	signature:( int boost_type, int weak_count, double weight_trim_rate, int max_depth, bool use_surrogates, const float* priors )
CvBoostParams	/usr/include/opencv/ml.h	/^    CvBoostParams();$/;"	p	struct:CvBoostParams	access:public	signature:()
CvBoostParams	/usr/include/opencv/ml.h	/^struct CV_EXPORTS CvBoostParams : public CvDTreeParams$/;"	s
CvBoostParams::CvBoostParams	/usr/include/opencv/ml.h	/^    CvBoostParams( int boost_type, int weak_count, double weight_trim_rate,$/;"	p	struct:CvBoostParams	access:public	signature:( int boost_type, int weak_count, double weight_trim_rate, int max_depth, bool use_surrogates, const float* priors )
CvBoostParams::CvBoostParams	/usr/include/opencv/ml.h	/^    CvBoostParams();$/;"	p	struct:CvBoostParams	access:public	signature:()
CvBoostParams::boost_type	/usr/include/opencv/ml.h	/^    int boost_type;$/;"	m	struct:CvBoostParams	access:public
CvBoostParams::split_criteria	/usr/include/opencv/ml.h	/^    int split_criteria;$/;"	m	struct:CvBoostParams	access:public
CvBoostParams::weak_count	/usr/include/opencv/ml.h	/^    int weak_count;$/;"	m	struct:CvBoostParams	access:public
CvBoostParams::weight_trim_rate	/usr/include/opencv/ml.h	/^    double weight_trim_rate;$/;"	m	struct:CvBoostParams	access:public
CvBoostTree	/usr/include/opencv/ml.h	/^    CvBoostTree();$/;"	p	class:CvBoostTree	access:public	signature:()
CvBoostTree	/usr/include/opencv/ml.h	/^class CV_EXPORTS CvBoostTree: public CvDTree$/;"	c
CvBoostTree::CvBoostTree	/usr/include/opencv/ml.h	/^    CvBoostTree();$/;"	p	class:CvBoostTree	access:public	signature:()
CvBoostTree::calc_node_dir	/usr/include/opencv/ml.h	/^    virtual double calc_node_dir( CvDTreeNode* n );$/;"	p	class:CvBoostTree	access:protected	signature:( CvDTreeNode* n )
CvBoostTree::calc_node_value	/usr/include/opencv/ml.h	/^    virtual void calc_node_value( CvDTreeNode* n );$/;"	p	class:CvBoostTree	access:protected	signature:( CvDTreeNode* n )
CvBoostTree::clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	class:CvBoostTree	access:public	signature:()
CvBoostTree::ensemble	/usr/include/opencv/ml.h	/^    CvBoost* ensemble;$/;"	m	class:CvBoostTree	access:protected
CvBoostTree::find_split_cat_class	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_split_cat_class( CvDTreeNode* n, int vi );$/;"	p	class:CvBoostTree	access:protected	signature:( CvDTreeNode* n, int vi )
CvBoostTree::find_split_cat_reg	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_split_cat_reg( CvDTreeNode* n, int vi );$/;"	p	class:CvBoostTree	access:protected	signature:( CvDTreeNode* n, int vi )
CvBoostTree::find_split_ord_class	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_split_ord_class( CvDTreeNode* n, int vi );$/;"	p	class:CvBoostTree	access:protected	signature:( CvDTreeNode* n, int vi )
CvBoostTree::find_split_ord_reg	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_split_ord_reg( CvDTreeNode* n, int vi );$/;"	p	class:CvBoostTree	access:protected	signature:( CvDTreeNode* n, int vi )
CvBoostTree::find_surrogate_split_cat	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_surrogate_split_cat( CvDTreeNode* n, int vi );$/;"	p	class:CvBoostTree	access:protected	signature:( CvDTreeNode* n, int vi )
CvBoostTree::find_surrogate_split_ord	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_surrogate_split_ord( CvDTreeNode* n, int vi );$/;"	p	class:CvBoostTree	access:protected	signature:( CvDTreeNode* n, int vi )
CvBoostTree::read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* fs, CvFileNode* node );$/;"	p	class:CvBoostTree	access:public	signature:( CvFileStorage* fs, CvFileNode* node )
CvBoostTree::read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* fs, CvFileNode* node,$/;"	p	class:CvBoostTree	access:public	signature:( CvFileStorage* fs, CvFileNode* node, CvBoost* ensemble, CvDTreeTrainData* _data )
CvBoostTree::read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* fs, CvFileNode* node,$/;"	p	class:CvBoostTree	access:public	signature:( CvFileStorage* fs, CvFileNode* node, CvDTreeTrainData* data )
CvBoostTree::scale	/usr/include/opencv/ml.h	/^    virtual void scale( double s );$/;"	p	class:CvBoostTree	access:public	signature:( double s )
CvBoostTree::train	/usr/include/opencv/ml.h	/^    virtual bool train( CvDTreeTrainData* _train_data, const CvMat* _subsample_idx );$/;"	p	class:CvBoostTree	access:public	signature:( CvDTreeTrainData* _train_data, const CvMat* _subsample_idx )
CvBoostTree::train	/usr/include/opencv/ml.h	/^    virtual bool train( CvDTreeTrainData* _train_data,$/;"	p	class:CvBoostTree	access:public	signature:( CvDTreeTrainData* _train_data, const CvMat* subsample_idx, CvBoost* ensemble )
CvBoostTree::train	/usr/include/opencv/ml.h	/^    virtual bool train( const CvMat* _train_data, int _tflag,$/;"	p	class:CvBoostTree	access:public	signature:( const CvMat* _train_data, int _tflag, const CvMat* _responses, const CvMat* _var_idx=0, const CvMat* _sample_idx=0, const CvMat* _var_type=0, const CvMat* _missing_mask=0, CvDTreeParams params=CvDTreeParams() )
CvBoostTree::try_split_node	/usr/include/opencv/ml.h	/^    virtual void try_split_node( CvDTreeNode* n );$/;"	p	class:CvBoostTree	access:protected	signature:( CvDTreeNode* n )
CvBoostTree::~CvBoostTree	/usr/include/opencv/ml.h	/^    virtual ~CvBoostTree();$/;"	p	class:CvBoostTree	access:public	signature:()
CvBox2D	/usr/include/opencv/cxtypes.h	/^CvBox2D;$/;"	t	typeref:struct:CvBox2D
CvBox2D	/usr/include/opencv/cxtypes.h	/^typedef struct CvBox2D$/;"	s
CvBox2D32f	/usr/include/opencv/cvcompat.h	94;"	d
CvBox2D::angle	/usr/include/opencv/cxtypes.h	/^    float angle;          \/* angle between the horizontal axis$/;"	m	struct:CvBox2D	access:public
CvBox2D::center	/usr/include/opencv/cxtypes.h	/^    CvPoint2D32f center;  \/* center of the box *\/$/;"	m	struct:CvBox2D	access:public
CvBox2D::size	/usr/include/opencv/cxtypes.h	/^    CvSize2D32f  size;    \/* box width and length *\/$/;"	m	struct:CvBox2D	access:public
CvBoxFilter	/usr/include/opencv/cv.hpp	/^    CvBoxFilter( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvBoxFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, bool _normalized, CvSize _ksize, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
CvBoxFilter	/usr/include/opencv/cv.hpp	/^    CvBoxFilter();$/;"	p	class:CvBoxFilter	access:public	signature:()
CvBoxFilter	/usr/include/opencv/cv.hpp	/^class CV_EXPORTS CvBoxFilter : public CvBaseImageFilter$/;"	c
CvBoxFilter::CvBoxFilter	/usr/include/opencv/cv.hpp	/^    CvBoxFilter( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvBoxFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, bool _normalized, CvSize _ksize, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
CvBoxFilter::CvBoxFilter	/usr/include/opencv/cv.hpp	/^    CvBoxFilter();$/;"	p	class:CvBoxFilter	access:public	signature:()
CvBoxFilter::get_scale	/usr/include/opencv/cv.hpp	/^    double get_scale() const { return scale; }$/;"	f	class:CvBoxFilter	access:public	signature:() const
CvBoxFilter::get_sum_buf	/usr/include/opencv/cv.hpp	/^    uchar* get_sum_buf() { return sum; }$/;"	f	class:CvBoxFilter	access:public	signature:()
CvBoxFilter::get_sum_count_ptr	/usr/include/opencv/cv.hpp	/^    int* get_sum_count_ptr() { return &sum_count; }$/;"	f	class:CvBoxFilter	access:public	signature:()
CvBoxFilter::init	/usr/include/opencv/cv.hpp	/^    virtual void init( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvBoxFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, bool _normalized, CvSize _ksize, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
CvBoxFilter::is_normalized	/usr/include/opencv/cv.hpp	/^    bool is_normalized() const { return normalized; }$/;"	f	class:CvBoxFilter	access:public	signature:() const
CvBoxFilter::normalized	/usr/include/opencv/cv.hpp	/^    bool normalized;$/;"	m	class:CvBoxFilter	access:protected
CvBoxFilter::scale	/usr/include/opencv/cv.hpp	/^    double scale;$/;"	m	class:CvBoxFilter	access:protected
CvBoxFilter::start_process	/usr/include/opencv/cv.hpp	/^    virtual void start_process( CvSlice x_range, int width );$/;"	p	class:CvBoxFilter	access:protected	signature:( CvSlice x_range, int width )
CvBoxFilter::sum	/usr/include/opencv/cv.hpp	/^    uchar* sum;$/;"	m	class:CvBoxFilter	access:protected
CvBoxFilter::sum_count	/usr/include/opencv/cv.hpp	/^    int sum_count;$/;"	m	class:CvBoxFilter	access:protected
CvBoxFilter::~CvBoxFilter	/usr/include/opencv/cv.hpp	/^    virtual ~CvBoxFilter();$/;"	p	class:CvBoxFilter	access:public	signature:()
CvBtFuncTable	/usr/include/opencv/cxmisc.h	/^CvBtFuncTable;$/;"	t	typeref:struct:CvBtFuncTable
CvBtFuncTable	/usr/include/opencv/cxmisc.h	/^typedef struct CvBtFuncTable$/;"	s
CvBtFuncTable::fn_2d	/usr/include/opencv/cxmisc.h	/^    void*   fn_2d[33];$/;"	m	struct:CvBtFuncTable	access:public
CvCalibEtalonType	/usr/include/opencv/cvaux.h	/^CvCalibEtalonType;$/;"	t	typeref:enum:CvCalibEtalonType
CvCalibEtalonType	/usr/include/opencv/cvaux.h	/^typedef enum CvCalibEtalonType$/;"	g
CvCalibFilter	/usr/include/opencv/cvaux.h	/^    CvCalibFilter();$/;"	p	class:CvCalibFilter	access:public	signature:()
CvCalibFilter	/usr/include/opencv/cvaux.h	/^class CV_EXPORTS CvCalibFilter$/;"	c
CvCalibFilter::CvCalibFilter	/usr/include/opencv/cvaux.h	/^    CvCalibFilter();$/;"	p	class:CvCalibFilter	access:public	signature:()
CvCalibFilter::DrawPoints	/usr/include/opencv/cvaux.h	/^    virtual void DrawPoints( CvMat** dst );$/;"	p	class:CvCalibFilter	access:public	signature:( CvMat** dst )
CvCalibFilter::DrawPoints	/usr/include/opencv/cvaux.h	/^    virtual void DrawPoints( IplImage** dst );$/;"	p	class:CvCalibFilter	access:public	signature:( IplImage** dst )
CvCalibFilter::FindEtalon	/usr/include/opencv/cvaux.h	/^    virtual bool FindEtalon( CvMat** imgs );$/;"	p	class:CvCalibFilter	access:public	signature:( CvMat** imgs )
CvCalibFilter::FindEtalon	/usr/include/opencv/cvaux.h	/^    virtual bool FindEtalon( IplImage** imgs );$/;"	p	class:CvCalibFilter	access:public	signature:( IplImage** imgs )
CvCalibFilter::GetCameraCount	/usr/include/opencv/cvaux.h	/^    int GetCameraCount() const { return cameraCount; }$/;"	f	class:CvCalibFilter	access:public	signature:() const
CvCalibFilter::GetCameraParams	/usr/include/opencv/cvaux.h	/^    virtual const CvCamera* GetCameraParams( int idx = 0 ) const;$/;"	p	class:CvCalibFilter	access:public	signature:( int idx = 0 ) const
CvCalibFilter::GetEtalon	/usr/include/opencv/cvaux.h	/^        GetEtalon( int* paramCount = 0, const double** etalonParams = 0,$/;"	p	class:CvCalibFilter	access:public	signature:( int* paramCount = 0, const double** etalonParams = 0, int* pointCount = 0, const CvPoint2D32f** etalonPoints = 0 ) const
CvCalibFilter::GetFrameCount	/usr/include/opencv/cvaux.h	/^    virtual int GetFrameCount( int* framesTotal = 0 ) const;$/;"	p	class:CvCalibFilter	access:public	signature:( int* framesTotal = 0 ) const
CvCalibFilter::GetLatestPoints	/usr/include/opencv/cvaux.h	/^    virtual bool GetLatestPoints( int idx, CvPoint2D32f** pts,$/;"	p	class:CvCalibFilter	access:public	signature:( int idx, CvPoint2D32f** pts, int* count, bool* found )
CvCalibFilter::GetStereoParams	/usr/include/opencv/cvaux.h	/^    virtual const CvStereoCamera* GetStereoParams() const;$/;"	p	class:CvCalibFilter	access:public	signature:() const
CvCalibFilter::IsCalibrated	/usr/include/opencv/cvaux.h	/^    bool IsCalibrated() const { return isCalibrated; }$/;"	f	class:CvCalibFilter	access:public	signature:() const
CvCalibFilter::LoadCameraParams	/usr/include/opencv/cvaux.h	/^    virtual bool LoadCameraParams( const char* filename );$/;"	p	class:CvCalibFilter	access:public	signature:( const char* filename )
CvCalibFilter::MAX_CAMERAS	/usr/include/opencv/cvaux.h	/^    enum { MAX_CAMERAS = 3 };$/;"	e	enum:CvCalibFilter::__anon7
CvCalibFilter::Push	/usr/include/opencv/cvaux.h	/^    virtual bool Push( const CvPoint2D32f** points = 0 );$/;"	p	class:CvCalibFilter	access:public	signature:( const CvPoint2D32f** points = 0 )
CvCalibFilter::Rectify	/usr/include/opencv/cvaux.h	/^    virtual bool Rectify( CvMat** srcarr, CvMat** dstarr );$/;"	p	class:CvCalibFilter	access:public	signature:( CvMat** srcarr, CvMat** dstarr )
CvCalibFilter::Rectify	/usr/include/opencv/cvaux.h	/^    virtual bool Rectify( IplImage** srcarr, IplImage** dstarr );$/;"	p	class:CvCalibFilter	access:public	signature:( IplImage** srcarr, IplImage** dstarr )
CvCalibFilter::SaveCameraParams	/usr/include/opencv/cvaux.h	/^    virtual bool SaveCameraParams( const char* filename );$/;"	p	class:CvCalibFilter	access:public	signature:( const char* filename )
CvCalibFilter::SetCameraCount	/usr/include/opencv/cvaux.h	/^    virtual void SetCameraCount( int cameraCount );$/;"	p	class:CvCalibFilter	access:public	signature:( int cameraCount )
CvCalibFilter::SetCameraParams	/usr/include/opencv/cvaux.h	/^    virtual bool SetCameraParams( CvCamera* params );$/;"	p	class:CvCalibFilter	access:public	signature:( CvCamera* params )
CvCalibFilter::SetEtalon	/usr/include/opencv/cvaux.h	/^        SetEtalon( CvCalibEtalonType etalonType, double* etalonParams,$/;"	p	class:CvCalibFilter	access:public	signature:( CvCalibEtalonType etalonType, double* etalonParams, int pointCount = 0, CvPoint2D32f* points = 0 )
CvCalibFilter::SetFrames	/usr/include/opencv/cvaux.h	/^    virtual bool SetFrames( int totalFrames );$/;"	p	class:CvCalibFilter	access:public	signature:( int totalFrames )
CvCalibFilter::Stop	/usr/include/opencv/cvaux.h	/^    virtual void Stop( bool calibrate = false );$/;"	p	class:CvCalibFilter	access:public	signature:( bool calibrate = false )
CvCalibFilter::Undistort	/usr/include/opencv/cvaux.h	/^    virtual bool Undistort( CvMat** src, CvMat** dst );$/;"	p	class:CvCalibFilter	access:public	signature:( CvMat** src, CvMat** dst )
CvCalibFilter::Undistort	/usr/include/opencv/cvaux.h	/^    virtual bool Undistort( IplImage** src, IplImage** dst );$/;"	p	class:CvCalibFilter	access:public	signature:( IplImage** src, IplImage** dst )
CvCalibFilter::cameraCount	/usr/include/opencv/cvaux.h	/^    int     cameraCount;$/;"	m	class:CvCalibFilter	access:protected
CvCalibFilter::cameraParams	/usr/include/opencv/cvaux.h	/^    CvCamera cameraParams[MAX_CAMERAS];$/;"	m	class:CvCalibFilter	access:protected
CvCalibFilter::etalonParamCount	/usr/include/opencv/cvaux.h	/^    int     etalonParamCount;$/;"	m	class:CvCalibFilter	access:protected
CvCalibFilter::etalonParams	/usr/include/opencv/cvaux.h	/^    double* etalonParams;$/;"	m	class:CvCalibFilter	access:protected
CvCalibFilter::etalonPointCount	/usr/include/opencv/cvaux.h	/^    int     etalonPointCount;$/;"	m	class:CvCalibFilter	access:protected
CvCalibFilter::etalonPoints	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f* etalonPoints;$/;"	m	class:CvCalibFilter	access:protected
CvCalibFilter::etalonType	/usr/include/opencv/cvaux.h	/^    CvCalibEtalonType  etalonType;$/;"	m	class:CvCalibFilter	access:protected
CvCalibFilter::framesAccepted	/usr/include/opencv/cvaux.h	/^    int     framesAccepted;$/;"	m	class:CvCalibFilter	access:protected
CvCalibFilter::framesTotal	/usr/include/opencv/cvaux.h	/^    int     framesTotal;$/;"	m	class:CvCalibFilter	access:protected
CvCalibFilter::grayImg	/usr/include/opencv/cvaux.h	/^    CvMat*  grayImg;$/;"	m	class:CvCalibFilter	access:protected
CvCalibFilter::imgSize	/usr/include/opencv/cvaux.h	/^    CvSize  imgSize;$/;"	m	class:CvCalibFilter	access:protected
CvCalibFilter::isCalibrated	/usr/include/opencv/cvaux.h	/^    bool    isCalibrated;$/;"	m	class:CvCalibFilter	access:protected
CvCalibFilter::latestCounts	/usr/include/opencv/cvaux.h	/^    int     latestCounts[MAX_CAMERAS];$/;"	m	class:CvCalibFilter	access:protected
CvCalibFilter::latestPoints	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f* latestPoints[MAX_CAMERAS];$/;"	m	class:CvCalibFilter	access:protected
CvCalibFilter::maxPoints	/usr/include/opencv/cvaux.h	/^    int     maxPoints;$/;"	m	class:CvCalibFilter	access:protected
CvCalibFilter::points	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f* points[MAX_CAMERAS];$/;"	m	class:CvCalibFilter	access:protected
CvCalibFilter::rectMap	/usr/include/opencv/cvaux.h	/^    CvMat*  rectMap[MAX_CAMERAS][2];$/;"	m	class:CvCalibFilter	access:protected
CvCalibFilter::stereo	/usr/include/opencv/cvaux.h	/^    CvStereoCamera stereo;$/;"	m	class:CvCalibFilter	access:protected
CvCalibFilter::storage	/usr/include/opencv/cvaux.h	/^    CvMemStorage* storage;$/;"	m	class:CvCalibFilter	access:protected
CvCalibFilter::tempImg	/usr/include/opencv/cvaux.h	/^    CvMat*  tempImg;$/;"	m	class:CvCalibFilter	access:protected
CvCalibFilter::undistImg	/usr/include/opencv/cvaux.h	/^    CvMat*  undistImg;$/;"	m	class:CvCalibFilter	access:protected
CvCalibFilter::undistMap	/usr/include/opencv/cvaux.h	/^    CvMat*  undistMap[MAX_CAMERAS][2];$/;"	m	class:CvCalibFilter	access:protected
CvCalibFilter::~CvCalibFilter	/usr/include/opencv/cvaux.h	/^    virtual ~CvCalibFilter();$/;"	p	class:CvCalibFilter	access:public	signature:()
CvCallback	/usr/include/opencv/cvaux.h	/^typedef int (CV_CDECL * CvCallback)(int index, void* buffer, void* user_data);$/;"	t
CvCamShiftTracker	/usr/include/opencv/cvaux.hpp	/^    CvCamShiftTracker();$/;"	p	class:CvCamShiftTracker	access:public	signature:()
CvCamShiftTracker	/usr/include/opencv/cvaux.hpp	/^class CV_EXPORTS CvCamShiftTracker$/;"	c
CvCamShiftTracker::CvCamShiftTracker	/usr/include/opencv/cvaux.hpp	/^    CvCamShiftTracker();$/;"	p	class:CvCamShiftTracker	access:public	signature:()
CvCamShiftTracker::color_transform	/usr/include/opencv/cvaux.hpp	/^    virtual void color_transform( const IplImage* img ); $/;"	p	class:CvCamShiftTracker	access:protected	signature:( const IplImage* img )
CvCamShiftTracker::get_back_project	/usr/include/opencv/cvaux.hpp	/^    virtual IplImage* get_back_project()$/;"	f	class:CvCamShiftTracker	access:public	signature:()
CvCamShiftTracker::get_center	/usr/include/opencv/cvaux.hpp	/^    CvPoint2D32f get_center() const \/\/ center of the object$/;"	f	class:CvCamShiftTracker	access:public	signature:() const
CvCamShiftTracker::get_hist_dims	/usr/include/opencv/cvaux.hpp	/^    int     get_hist_dims( int* dims = 0 ) const \/\/ returns number of histogram dimensions and sets$/;"	f	class:CvCamShiftTracker	access:public	signature:( int* dims = 0 ) const
CvCamShiftTracker::get_length	/usr/include/opencv/cvaux.hpp	/^    float   get_length() const \/\/ the larger linear size of the object$/;"	f	class:CvCamShiftTracker	access:public	signature:() const
CvCamShiftTracker::get_max_ch_val	/usr/include/opencv/cvaux.hpp	/^    int     get_max_ch_val( int channel ) const \/\/ get the maximum allowed value of the specified channel$/;"	f	class:CvCamShiftTracker	access:public	signature:( int channel ) const
CvCamShiftTracker::get_min_ch_val	/usr/include/opencv/cvaux.hpp	/^    int     get_min_ch_val( int channel ) const \/\/ get the minimum allowed value of the specified channel$/;"	f	class:CvCamShiftTracker	access:public	signature:( int channel ) const
CvCamShiftTracker::get_orientation	/usr/include/opencv/cvaux.hpp	/^    float   get_orientation() const \/\/ orientation of the object in degrees $/;"	f	class:CvCamShiftTracker	access:public	signature:() const
CvCamShiftTracker::get_threshold	/usr/include/opencv/cvaux.hpp	/^    int     get_threshold() const \/\/ thresholding value that applied to back project$/;"	f	class:CvCamShiftTracker	access:public	signature:() const
CvCamShiftTracker::get_width	/usr/include/opencv/cvaux.hpp	/^    float   get_width() const \/\/ the smaller linear size of the object$/;"	f	class:CvCamShiftTracker	access:public	signature:() const
CvCamShiftTracker::get_window	/usr/include/opencv/cvaux.hpp	/^    CvRect get_window() const \/\/ bounding rectangle for the object$/;"	f	class:CvCamShiftTracker	access:public	signature:() const
CvCamShiftTracker::m_back_project	/usr/include/opencv/cvaux.hpp	/^    IplImage*  m_back_project;$/;"	m	class:CvCamShiftTracker	access:protected
CvCamShiftTracker::m_box	/usr/include/opencv/cvaux.hpp	/^    CvBox2D    m_box;$/;"	m	class:CvCamShiftTracker	access:protected
CvCamShiftTracker::m_color_planes	/usr/include/opencv/cvaux.hpp	/^    IplImage*  m_color_planes[CV_MAX_DIM];$/;"	m	class:CvCamShiftTracker	access:protected
CvCamShiftTracker::m_comp	/usr/include/opencv/cvaux.hpp	/^    CvConnectedComp m_comp;$/;"	m	class:CvCamShiftTracker	access:protected
CvCamShiftTracker::m_hist	/usr/include/opencv/cvaux.hpp	/^    CvHistogram* m_hist;$/;"	m	class:CvCamShiftTracker	access:protected
CvCamShiftTracker::m_hist_ranges	/usr/include/opencv/cvaux.hpp	/^    float*     m_hist_ranges[CV_MAX_DIM];$/;"	m	class:CvCamShiftTracker	access:protected
CvCamShiftTracker::m_hist_ranges_data	/usr/include/opencv/cvaux.hpp	/^    float      m_hist_ranges_data[CV_MAX_DIM][2];$/;"	m	class:CvCamShiftTracker	access:protected
CvCamShiftTracker::m_mask	/usr/include/opencv/cvaux.hpp	/^    IplImage*  m_mask;$/;"	m	class:CvCamShiftTracker	access:protected
CvCamShiftTracker::m_max_ch_val	/usr/include/opencv/cvaux.hpp	/^    int        m_max_ch_val[CV_MAX_DIM];$/;"	m	class:CvCamShiftTracker	access:protected
CvCamShiftTracker::m_min_ch_val	/usr/include/opencv/cvaux.hpp	/^    int        m_min_ch_val[CV_MAX_DIM];$/;"	m	class:CvCamShiftTracker	access:protected
CvCamShiftTracker::m_temp	/usr/include/opencv/cvaux.hpp	/^    IplImage*  m_temp;$/;"	m	class:CvCamShiftTracker	access:protected
CvCamShiftTracker::m_threshold	/usr/include/opencv/cvaux.hpp	/^    int        m_threshold;$/;"	m	class:CvCamShiftTracker	access:protected
CvCamShiftTracker::query	/usr/include/opencv/cvaux.hpp	/^    float query( int* bin ) const$/;"	f	class:CvCamShiftTracker	access:public	signature:( int* bin ) const
CvCamShiftTracker::reset_histogram	/usr/include/opencv/cvaux.hpp	/^    virtual void  reset_histogram();$/;"	p	class:CvCamShiftTracker	access:public	signature:()
CvCamShiftTracker::set_hist_bin_range	/usr/include/opencv/cvaux.hpp	/^    bool    set_hist_bin_range( int dim, int min_val, int max_val );$/;"	p	class:CvCamShiftTracker	access:public	signature:( int dim, int min_val, int max_val )
CvCamShiftTracker::set_hist_dims	/usr/include/opencv/cvaux.hpp	/^    bool    set_hist_dims( int c_dims, int* dims );\/\/ set the histogram parameters$/;"	p	class:CvCamShiftTracker	access:public	signature:( int c_dims, int* dims )
CvCamShiftTracker::set_max_ch_val	/usr/include/opencv/cvaux.hpp	/^    bool    set_max_ch_val( int channel, int val ) \/\/ set the maximum allowed value of the specified channel$/;"	f	class:CvCamShiftTracker	access:public	signature:( int channel, int val )
CvCamShiftTracker::set_min_ch_val	/usr/include/opencv/cvaux.hpp	/^    bool    set_min_ch_val( int channel, int val ) \/\/ set the minimum allowed value of the specified channel$/;"	f	class:CvCamShiftTracker	access:public	signature:( int channel, int val )
CvCamShiftTracker::set_threshold	/usr/include/opencv/cvaux.hpp	/^    bool    set_threshold( int threshold ) \/\/ threshold applied to the histogram bins$/;"	f	class:CvCamShiftTracker	access:public	signature:( int threshold )
CvCamShiftTracker::set_window	/usr/include/opencv/cvaux.hpp	/^    bool    set_window( CvRect window)$/;"	f	class:CvCamShiftTracker	access:public	signature:( CvRect window)
CvCamShiftTracker::track_object	/usr/include/opencv/cvaux.hpp	/^    virtual bool  track_object( const IplImage* cur_frame );$/;"	p	class:CvCamShiftTracker	access:public	signature:( const IplImage* cur_frame )
CvCamShiftTracker::update_histogram	/usr/include/opencv/cvaux.hpp	/^    virtual bool  update_histogram( const IplImage* cur_frame );$/;"	p	class:CvCamShiftTracker	access:public	signature:( const IplImage* cur_frame )
CvCamShiftTracker::~CvCamShiftTracker	/usr/include/opencv/cvaux.hpp	/^    virtual ~CvCamShiftTracker();$/;"	p	class:CvCamShiftTracker	access:public	signature:()
CvCamera	/usr/include/opencv/cvaux.h	/^CvCamera;$/;"	t	typeref:struct:CvCamera
CvCamera	/usr/include/opencv/cvaux.h	/^typedef struct CvCamera$/;"	s
CvCamera::distortion	/usr/include/opencv/cvaux.h	/^    float   distortion[4]; \/* distortion coefficients - two coefficients for radial distortion$/;"	m	struct:CvCamera	access:public
CvCamera::imgSize	/usr/include/opencv/cvaux.h	/^    float   imgSize[2]; \/* size of the camera view, used during calibration *\/$/;"	m	struct:CvCamera	access:public
CvCamera::matrix	/usr/include/opencv/cvaux.h	/^    float   matrix[9]; \/* intinsic camera parameters:  [ fx 0 cx; 0 fy cy; 0 0 1 ] *\/$/;"	m	struct:CvCamera	access:public
CvCamera::rotMatr	/usr/include/opencv/cvaux.h	/^    float   rotMatr[9];$/;"	m	struct:CvCamera	access:public
CvCamera::transVect	/usr/include/opencv/cvaux.h	/^    float   transVect[3]; \/* rotation matrix and transition vector relatively$/;"	m	struct:CvCamera	access:public
CvCapture	/usr/include/opencv/highgui.h	/^typedef struct CvCapture CvCapture;$/;"	t	typeref:struct:CvCapture
CvChain	/usr/include/opencv/cxtypes.h	/^CvChain;$/;"	t	typeref:struct:CvChain
CvChain	/usr/include/opencv/cxtypes.h	/^typedef struct CvChain$/;"	s
CvChain::origin	/usr/include/opencv/cxtypes.h	/^    CvPoint  origin;$/;"	m	struct:CvChain	access:public
CvChainApproxMethod	/usr/include/opencv/cvcompat.h	/^typedef int CvChainApproxMethod;$/;"	t
CvChainPtReader	/usr/include/opencv/cvtypes.h	/^CvChainPtReader;$/;"	t	typeref:struct:CvChainPtReader
CvChainPtReader	/usr/include/opencv/cvtypes.h	/^typedef struct CvChainPtReader$/;"	s
CvChainPtReader::code	/usr/include/opencv/cvtypes.h	/^    char      code;$/;"	m	struct:CvChainPtReader	access:public
CvChainPtReader::deltas	/usr/include/opencv/cvtypes.h	/^    char      deltas[8][2];$/;"	m	struct:CvChainPtReader	access:public
CvChainPtReader::pt	/usr/include/opencv/cvtypes.h	/^    CvPoint   pt;$/;"	m	struct:CvChainPtReader	access:public
CvCliqueFinder	/usr/include/opencv/cvaux.h	/^typedef struct CvCliqueFinder$/;"	s
CvCliqueFinder	/usr/include/opencv/cvaux.h	/^} CvCliqueFinder;$/;"	t	typeref:struct:CvCliqueFinder
CvCliqueFinder::All	/usr/include/opencv/cvaux.h	/^    int** All;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::N	/usr/include/opencv/cvaux.h	/^    int N; \/\/graph size$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::adj_matr	/usr/include/opencv/cvaux.h	/^    int**    adj_matr;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::best_score	/usr/include/opencv/cvaux.h	/^    int best_score;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::best_weight	/usr/include/opencv/cvaux.h	/^    float best_weight;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::cand_weight	/usr/include/opencv/cvaux.h	/^    float* cand_weight;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::ce	/usr/include/opencv/cvaux.h	/^    int* ce;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::cur_weight	/usr/include/opencv/cvaux.h	/^    float* cur_weight;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::current_comp	/usr/include/opencv/cvaux.h	/^    int* current_comp;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::edge_weights	/usr/include/opencv/cvaux.h	/^    float* edge_weights;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::fixp	/usr/include/opencv/cvaux.h	/^    int* fixp; \/\/node with minimal disconnections$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::graph	/usr/include/opencv/cvaux.h	/^    CvGraph* graph;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::k	/usr/include/opencv/cvaux.h	/^    int k; \/\/stack size$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::ne	/usr/include/opencv/cvaux.h	/^    int* ne;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::nod	/usr/include/opencv/cvaux.h	/^    int* nod;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::s	/usr/include/opencv/cvaux.h	/^    int* s; \/\/for selected candidate$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::status	/usr/include/opencv/cvaux.h	/^    int status;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::vertex_weights	/usr/include/opencv/cvaux.h	/^    float* vertex_weights;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::weighted	/usr/include/opencv/cvaux.h	/^    int weighted;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::weighted_edges	/usr/include/opencv/cvaux.h	/^    int weighted_edges;    $/;"	m	struct:CvCliqueFinder	access:public
CvCloneFunc	/usr/include/opencv/cxtypes.h	/^typedef void* (CV_CDECL *CvCloneFunc)( const void* struct_ptr );$/;"	t
CvCmpFunc	/usr/include/opencv/cxcore.h	/^typedef int (CV_CDECL* CvCmpFunc)(const void* a, const void* b, void* userdata );$/;"	t
CvCmpOp	/usr/include/opencv/cxmisc.h	/^typedef enum CvCmpOp {$/;"	g
CvCmpOp	/usr/include/opencv/cxmisc.h	/^} CvCmpOp;$/;"	t	typeref:enum:CvCmpOp
CvCoeffType	/usr/include/opencv/cvcompat.h	72;"	d
CvColumnFilterFunc	/usr/include/opencv/cv.hpp	/^typedef void (*CvColumnFilterFunc)( uchar** src, uchar* dst, int dst_step, int count, void* params );$/;"	t
CvCompareMethod	/usr/include/opencv/cvcompat.h	67;"	d
CvConDensation	/usr/include/opencv/cvtypes.h	/^CvConDensation;$/;"	t	typeref:struct:CvConDensation
CvConDensation	/usr/include/opencv/cvtypes.h	/^typedef struct CvConDensation$/;"	s
CvConDensation::DP	/usr/include/opencv/cvtypes.h	/^    int DP;$/;"	m	struct:CvConDensation	access:public
CvConDensation::DynamMatr	/usr/include/opencv/cvtypes.h	/^    float* DynamMatr;       \/* Matrix of the linear Dynamics system  *\/$/;"	m	struct:CvConDensation	access:public
CvConDensation::MP	/usr/include/opencv/cvtypes.h	/^    int MP;$/;"	m	struct:CvConDensation	access:public
CvConDensation::RandS	/usr/include/opencv/cvtypes.h	/^    struct CvRandState* RandS; \/* Array of structures to generate random vectors *\/$/;"	m	struct:CvConDensation	typeref:struct:CvConDensation::CvRandState	access:public
CvConDensation::RandomSample	/usr/include/opencv/cvtypes.h	/^    float* RandomSample;    \/* RandomVector to update sample set     *\/$/;"	m	struct:CvConDensation	access:public
CvConDensation::SamplesNum	/usr/include/opencv/cvtypes.h	/^    int SamplesNum;         \/* Number of the Samples                 *\/$/;"	m	struct:CvConDensation	access:public
CvConDensation::State	/usr/include/opencv/cvtypes.h	/^    float* State;           \/* Vector of State                       *\/$/;"	m	struct:CvConDensation	access:public
CvConDensation::Temp	/usr/include/opencv/cvtypes.h	/^    float* Temp;            \/* Temporary vector                      *\/$/;"	m	struct:CvConDensation	access:public
CvConDensation::flConfidence	/usr/include/opencv/cvtypes.h	/^    float* flConfidence;    \/* Confidence for each Sample            *\/$/;"	m	struct:CvConDensation	access:public
CvConDensation::flCumulative	/usr/include/opencv/cvtypes.h	/^    float* flCumulative;    \/* Cumulative confidence                 *\/$/;"	m	struct:CvConDensation	access:public
CvConDensation::flNewSamples	/usr/include/opencv/cvtypes.h	/^    float** flNewSamples;   \/* temporary array of the Sample Vectors *\/$/;"	m	struct:CvConDensation	access:public
CvConDensation::flSamples	/usr/include/opencv/cvtypes.h	/^    float** flSamples;      \/* arr of the Sample Vectors             *\/$/;"	m	struct:CvConDensation	access:public
CvConnectedComp	/usr/include/opencv/cvtypes.h	/^CvConnectedComp;$/;"	t	typeref:struct:CvConnectedComp
CvConnectedComp	/usr/include/opencv/cvtypes.h	/^typedef struct CvConnectedComp$/;"	s
CvConnectedComp::area	/usr/include/opencv/cvtypes.h	/^    double area;    \/* area of the connected component  *\/$/;"	m	struct:CvConnectedComp	access:public
CvConnectedComp::contour	/usr/include/opencv/cvtypes.h	/^    CvSeq* contour; \/* optional component boundary$/;"	m	struct:CvConnectedComp	access:public
CvConnectedComp::rect	/usr/include/opencv/cvtypes.h	/^    CvRect rect;    \/* ROI of the component  *\/$/;"	m	struct:CvConnectedComp	access:public
CvConnectedComp::value	/usr/include/opencv/cvtypes.h	/^    CvScalar value; \/* average color of the connected component *\/$/;"	m	struct:CvConnectedComp	access:public
CvContour	/usr/include/opencv/cxtypes.h	/^CvContour;$/;"	t	typeref:struct:CvContour
CvContour	/usr/include/opencv/cxtypes.h	/^typedef struct CvContour$/;"	s
CvContourOrientation	/usr/include/opencv/cvaux.h	/^typedef struct CvContourOrientation$/;"	s
CvContourOrientation	/usr/include/opencv/cvaux.h	/^} CvContourOrientation;$/;"	t	typeref:struct:CvContourOrientation
CvContourOrientation::egvals	/usr/include/opencv/cvaux.h	/^    float egvals[2];$/;"	m	struct:CvContourOrientation	access:public
CvContourOrientation::egvects	/usr/include/opencv/cvaux.h	/^    float egvects[4];$/;"	m	struct:CvContourOrientation	access:public
CvContourOrientation::imax	/usr/include/opencv/cvaux.h	/^    int imax, imin;$/;"	m	struct:CvContourOrientation	access:public
CvContourOrientation::imin	/usr/include/opencv/cvaux.h	/^    int imax, imin;$/;"	m	struct:CvContourOrientation	access:public
CvContourOrientation::max	/usr/include/opencv/cvaux.h	/^    float max, min; \/\/ minimum and maximum projections$/;"	m	struct:CvContourOrientation	access:public
CvContourOrientation::min	/usr/include/opencv/cvaux.h	/^    float max, min; \/\/ minimum and maximum projections$/;"	m	struct:CvContourOrientation	access:public
CvContourRetrievalMode	/usr/include/opencv/cvcompat.h	/^typedef int CvContourRetrievalMode;$/;"	t
CvContourScanner	/usr/include/opencv/cvtypes.h	/^typedef struct _CvContourScanner* CvContourScanner;$/;"	t	typeref:struct:_CvContourScanner
CvContourTree	/usr/include/opencv/cvtypes.h	/^CvContourTree;$/;"	t	typeref:struct:CvContourTree
CvContourTree	/usr/include/opencv/cvtypes.h	/^typedef struct CvContourTree$/;"	s
CvContourTree::p1	/usr/include/opencv/cvtypes.h	/^    CvPoint p1;            \/* the first point of the binary tree root segment *\/$/;"	m	struct:CvContourTree	access:public
CvContourTree::p2	/usr/include/opencv/cvtypes.h	/^    CvPoint p2;            \/* the last point of the binary tree root segment *\/$/;"	m	struct:CvContourTree	access:public
CvContourTreesMatchMethod	/usr/include/opencv/cvcompat.h	71;"	d
CvContoursMatchMethod	/usr/include/opencv/cvcompat.h	70;"	d
CvConvexityDefect	/usr/include/opencv/cvtypes.h	/^CvConvexityDefect;$/;"	t	typeref:struct:CvConvexityDefect
CvConvexityDefect	/usr/include/opencv/cvtypes.h	/^typedef struct CvConvexityDefect$/;"	s
CvConvexityDefect::depth	/usr/include/opencv/cvtypes.h	/^    float depth; \/* distance between the farthest point and the convex hull *\/$/;"	m	struct:CvConvexityDefect	access:public
CvConvexityDefect::depth_point	/usr/include/opencv/cvtypes.h	/^    CvPoint* depth_point; \/* the farthest from the convex hull point within the defect *\/$/;"	m	struct:CvConvexityDefect	access:public
CvConvexityDefect::end	/usr/include/opencv/cvtypes.h	/^    CvPoint* end; \/* point of the contour where the defect ends *\/$/;"	m	struct:CvConvexityDefect	access:public
CvConvexityDefect::start	/usr/include/opencv/cvtypes.h	/^    CvPoint* start; \/* point of the contour where the defect begins *\/$/;"	m	struct:CvConvexityDefect	access:public
CvDTree	/usr/include/opencv/ml.h	/^    CvDTree();$/;"	p	class:CvDTree	access:public	signature:()
CvDTree	/usr/include/opencv/ml.h	/^class CV_EXPORTS CvDTree : public CvStatModel$/;"	c
CvDTree::CvDTree	/usr/include/opencv/ml.h	/^    CvDTree();$/;"	p	class:CvDTree	access:public	signature:()
CvDTree::calc_node_dir	/usr/include/opencv/ml.h	/^    virtual double calc_node_dir( CvDTreeNode* node );$/;"	p	class:CvDTree	access:protected	signature:( CvDTreeNode* node )
CvDTree::calc_node_value	/usr/include/opencv/ml.h	/^    virtual void calc_node_value( CvDTreeNode* node );$/;"	p	class:CvDTree	access:protected	signature:( CvDTreeNode* node )
CvDTree::clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	class:CvDTree	access:public	signature:()
CvDTree::cluster_categories	/usr/include/opencv/ml.h	/^    virtual void cluster_categories( const int* vectors, int vector_count,$/;"	p	class:CvDTree	access:protected	signature:( const int* vectors, int vector_count, int var_count, int* sums, int k, int* cluster_labels )
CvDTree::complete_node_dir	/usr/include/opencv/ml.h	/^    virtual void complete_node_dir( CvDTreeNode* node );$/;"	p	class:CvDTree	access:protected	signature:( CvDTreeNode* node )
CvDTree::cut_tree	/usr/include/opencv/ml.h	/^    virtual int cut_tree( int T, int fold, double min_alpha );$/;"	p	class:CvDTree	access:protected	signature:( int T, int fold, double min_alpha )
CvDTree::data	/usr/include/opencv/ml.h	/^    CvDTreeTrainData* data;$/;"	m	class:CvDTree	access:protected
CvDTree::do_train	/usr/include/opencv/ml.h	/^    virtual bool do_train( const CvMat* _subsample_idx );$/;"	p	class:CvDTree	access:protected	signature:( const CvMat* _subsample_idx )
CvDTree::find_best_split	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_best_split( CvDTreeNode* n );$/;"	p	class:CvDTree	access:protected	signature:( CvDTreeNode* n )
CvDTree::find_split_cat_class	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_split_cat_class( CvDTreeNode* n, int vi );$/;"	p	class:CvDTree	access:protected	signature:( CvDTreeNode* n, int vi )
CvDTree::find_split_cat_reg	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_split_cat_reg( CvDTreeNode* n, int vi );$/;"	p	class:CvDTree	access:protected	signature:( CvDTreeNode* n, int vi )
CvDTree::find_split_ord_class	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_split_ord_class( CvDTreeNode* n, int vi );$/;"	p	class:CvDTree	access:protected	signature:( CvDTreeNode* n, int vi )
CvDTree::find_split_ord_reg	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_split_ord_reg( CvDTreeNode* n, int vi );$/;"	p	class:CvDTree	access:protected	signature:( CvDTreeNode* n, int vi )
CvDTree::find_surrogate_split_cat	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_surrogate_split_cat( CvDTreeNode* n, int vi );$/;"	p	class:CvDTree	access:protected	signature:( CvDTreeNode* n, int vi )
CvDTree::find_surrogate_split_ord	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_surrogate_split_ord( CvDTreeNode* n, int vi );$/;"	p	class:CvDTree	access:protected	signature:( CvDTreeNode* n, int vi )
CvDTree::free_prune_data	/usr/include/opencv/ml.h	/^    virtual void free_prune_data(bool cut_tree);$/;"	p	class:CvDTree	access:protected	signature:(bool cut_tree)
CvDTree::free_tree	/usr/include/opencv/ml.h	/^    virtual void free_tree();$/;"	p	class:CvDTree	access:protected	signature:()
CvDTree::get_data	/usr/include/opencv/ml.h	/^    CvDTreeTrainData* get_data();$/;"	p	class:CvDTree	access:public	signature:()
CvDTree::get_pruned_tree_idx	/usr/include/opencv/ml.h	/^    int get_pruned_tree_idx() const;$/;"	p	class:CvDTree	access:public	signature:() const
CvDTree::get_root	/usr/include/opencv/ml.h	/^    const CvDTreeNode* get_root() const;$/;"	p	class:CvDTree	access:public	signature:() const
CvDTree::get_var_importance	/usr/include/opencv/ml.h	/^    virtual const CvMat* get_var_importance();$/;"	p	class:CvDTree	access:public	signature:()
CvDTree::predict	/usr/include/opencv/ml.h	/^    virtual CvDTreeNode* predict( const CvMat* _sample, const CvMat* _missing_data_mask=0,$/;"	p	class:CvDTree	access:public	signature:( const CvMat* _sample, const CvMat* _missing_data_mask=0, bool preprocessed_input=false ) const
CvDTree::prune_cv	/usr/include/opencv/ml.h	/^    virtual void prune_cv();$/;"	p	class:CvDTree	access:protected	signature:()
CvDTree::pruned_tree_idx	/usr/include/opencv/ml.h	/^    int pruned_tree_idx;$/;"	m	class:CvDTree	access:protected
CvDTree::read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* fs, CvFileNode* node );$/;"	p	class:CvDTree	access:public	signature:( CvFileStorage* fs, CvFileNode* node )
CvDTree::read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* fs, CvFileNode* node,$/;"	p	class:CvDTree	access:public	signature:( CvFileStorage* fs, CvFileNode* node, CvDTreeTrainData* data )
CvDTree::read_node	/usr/include/opencv/ml.h	/^    virtual CvDTreeNode* read_node( CvFileStorage* fs, CvFileNode* node, CvDTreeNode* parent );$/;"	p	class:CvDTree	access:protected	signature:( CvFileStorage* fs, CvFileNode* node, CvDTreeNode* parent )
CvDTree::read_split	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* read_split( CvFileStorage* fs, CvFileNode* node );$/;"	p	class:CvDTree	access:protected	signature:( CvFileStorage* fs, CvFileNode* node )
CvDTree::read_tree_nodes	/usr/include/opencv/ml.h	/^    virtual void read_tree_nodes( CvFileStorage* fs, CvFileNode* node );$/;"	p	class:CvDTree	access:protected	signature:( CvFileStorage* fs, CvFileNode* node )
CvDTree::root	/usr/include/opencv/ml.h	/^    CvDTreeNode* root;$/;"	m	class:CvDTree	access:protected
CvDTree::split_node_data	/usr/include/opencv/ml.h	/^    virtual void split_node_data( CvDTreeNode* n );$/;"	p	class:CvDTree	access:protected	signature:( CvDTreeNode* n )
CvDTree::train	/usr/include/opencv/ml.h	/^    virtual bool train( CvDTreeTrainData* _train_data, const CvMat* _subsample_idx );$/;"	p	class:CvDTree	access:public	signature:( CvDTreeTrainData* _train_data, const CvMat* _subsample_idx )
CvDTree::train	/usr/include/opencv/ml.h	/^    virtual bool train( const CvMat* _train_data, int _tflag,$/;"	p	class:CvDTree	access:public	signature:( const CvMat* _train_data, int _tflag, const CvMat* _responses, const CvMat* _var_idx=0, const CvMat* _sample_idx=0, const CvMat* _var_type=0, const CvMat* _missing_mask=0, CvDTreeParams params=CvDTreeParams() )
CvDTree::try_split_node	/usr/include/opencv/ml.h	/^    virtual void try_split_node( CvDTreeNode* n );$/;"	p	class:CvDTree	access:protected	signature:( CvDTreeNode* n )
CvDTree::update_tree_rnc	/usr/include/opencv/ml.h	/^    virtual double update_tree_rnc( int T, int fold );$/;"	p	class:CvDTree	access:protected	signature:( int T, int fold )
CvDTree::var_importance	/usr/include/opencv/ml.h	/^    CvMat* var_importance;$/;"	m	class:CvDTree	access:protected
CvDTree::write	/usr/include/opencv/ml.h	/^    virtual void write( CvFileStorage* fs );$/;"	p	class:CvDTree	access:public	signature:( CvFileStorage* fs )
CvDTree::write	/usr/include/opencv/ml.h	/^    virtual void write( CvFileStorage* fs, const char* name );$/;"	p	class:CvDTree	access:public	signature:( CvFileStorage* fs, const char* name )
CvDTree::write_node	/usr/include/opencv/ml.h	/^    virtual void write_node( CvFileStorage* fs, CvDTreeNode* node );$/;"	p	class:CvDTree	access:protected	signature:( CvFileStorage* fs, CvDTreeNode* node )
CvDTree::write_split	/usr/include/opencv/ml.h	/^    virtual void write_split( CvFileStorage* fs, CvDTreeSplit* split );$/;"	p	class:CvDTree	access:protected	signature:( CvFileStorage* fs, CvDTreeSplit* split )
CvDTree::write_tree_nodes	/usr/include/opencv/ml.h	/^    virtual void write_tree_nodes( CvFileStorage* fs );$/;"	p	class:CvDTree	access:protected	signature:( CvFileStorage* fs )
CvDTree::~CvDTree	/usr/include/opencv/ml.h	/^    virtual ~CvDTree();$/;"	p	class:CvDTree	access:public	signature:()
CvDTreeNode	/usr/include/opencv/ml.h	/^struct CvDTreeNode$/;"	s
CvDTreeNode::Tn	/usr/include/opencv/ml.h	/^    int Tn;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::alpha	/usr/include/opencv/ml.h	/^    double alpha;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::buf_idx	/usr/include/opencv/ml.h	/^    int buf_idx;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::class_idx	/usr/include/opencv/ml.h	/^    int class_idx;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::complexity	/usr/include/opencv/ml.h	/^    int complexity;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::cv_Tn	/usr/include/opencv/ml.h	/^    int* cv_Tn;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::cv_node_error	/usr/include/opencv/ml.h	/^    double* cv_node_error;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::cv_node_risk	/usr/include/opencv/ml.h	/^    double* cv_node_risk;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::depth	/usr/include/opencv/ml.h	/^    int depth;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::get_num_valid	/usr/include/opencv/ml.h	/^    int get_num_valid(int vi) { return num_valid ? num_valid[vi] : sample_count; }$/;"	f	struct:CvDTreeNode	access:public	signature:(int vi)
CvDTreeNode::left	/usr/include/opencv/ml.h	/^    CvDTreeNode* left;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::maxlr	/usr/include/opencv/ml.h	/^    double maxlr;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::node_risk	/usr/include/opencv/ml.h	/^    double node_risk, tree_risk, tree_error;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::num_valid	/usr/include/opencv/ml.h	/^    int* num_valid;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::offset	/usr/include/opencv/ml.h	/^    int offset;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::parent	/usr/include/opencv/ml.h	/^    CvDTreeNode* parent;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::right	/usr/include/opencv/ml.h	/^    CvDTreeNode* right;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::sample_count	/usr/include/opencv/ml.h	/^    int sample_count;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::set_num_valid	/usr/include/opencv/ml.h	/^    void set_num_valid(int vi, int n) { if( num_valid ) num_valid[vi] = n; }$/;"	f	struct:CvDTreeNode	access:public	signature:(int vi, int n)
CvDTreeNode::split	/usr/include/opencv/ml.h	/^    CvDTreeSplit* split;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::tree_error	/usr/include/opencv/ml.h	/^    double node_risk, tree_risk, tree_error;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::tree_risk	/usr/include/opencv/ml.h	/^    double node_risk, tree_risk, tree_error;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::value	/usr/include/opencv/ml.h	/^    double value;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeParams	/usr/include/opencv/ml.h	/^    CvDTreeParams( int _max_depth, int _min_sample_count,$/;"	f	struct:CvDTreeParams	access:public	signature:( int _max_depth, int _min_sample_count, float _regression_accuracy, bool _use_surrogates, int _max_categories, int _cv_folds, bool _use_1se_rule, bool _truncate_pruned_tree, const float* _priors )
CvDTreeParams	/usr/include/opencv/ml.h	/^    CvDTreeParams() : max_categories(10), max_depth(INT_MAX), min_sample_count(10),$/;"	f	struct:CvDTreeParams	access:public	signature:()
CvDTreeParams	/usr/include/opencv/ml.h	/^struct CV_EXPORTS CvDTreeParams$/;"	s
CvDTreeParams::CvDTreeParams	/usr/include/opencv/ml.h	/^    CvDTreeParams( int _max_depth, int _min_sample_count,$/;"	f	struct:CvDTreeParams	access:public	signature:( int _max_depth, int _min_sample_count, float _regression_accuracy, bool _use_surrogates, int _max_categories, int _cv_folds, bool _use_1se_rule, bool _truncate_pruned_tree, const float* _priors )
CvDTreeParams::CvDTreeParams	/usr/include/opencv/ml.h	/^    CvDTreeParams() : max_categories(10), max_depth(INT_MAX), min_sample_count(10),$/;"	f	struct:CvDTreeParams	access:public	signature:()
CvDTreeParams::cv_folds	/usr/include/opencv/ml.h	/^    int   cv_folds;$/;"	m	struct:CvDTreeParams	access:public
CvDTreeParams::max_categories	/usr/include/opencv/ml.h	/^    int   max_categories;$/;"	m	struct:CvDTreeParams	access:public
CvDTreeParams::max_depth	/usr/include/opencv/ml.h	/^    int   max_depth;$/;"	m	struct:CvDTreeParams	access:public
CvDTreeParams::min_sample_count	/usr/include/opencv/ml.h	/^    int   min_sample_count;$/;"	m	struct:CvDTreeParams	access:public
CvDTreeParams::priors	/usr/include/opencv/ml.h	/^    const float* priors;$/;"	m	struct:CvDTreeParams	access:public
CvDTreeParams::regression_accuracy	/usr/include/opencv/ml.h	/^    float regression_accuracy;$/;"	m	struct:CvDTreeParams	access:public
CvDTreeParams::truncate_pruned_tree	/usr/include/opencv/ml.h	/^    bool  truncate_pruned_tree;$/;"	m	struct:CvDTreeParams	access:public
CvDTreeParams::use_1se_rule	/usr/include/opencv/ml.h	/^    bool  use_1se_rule;$/;"	m	struct:CvDTreeParams	access:public
CvDTreeParams::use_surrogates	/usr/include/opencv/ml.h	/^    bool  use_surrogates;$/;"	m	struct:CvDTreeParams	access:public
CvDTreeSplit	/usr/include/opencv/ml.h	/^struct CvDTreeSplit$/;"	s
CvDTreeSplit::__anon25::__anon26::c	/usr/include/opencv/ml.h	/^            float c;$/;"	m	struct:CvDTreeSplit::__anon25::__anon26	access:public
CvDTreeSplit::__anon25::__anon26::split_point	/usr/include/opencv/ml.h	/^            int split_point;$/;"	m	struct:CvDTreeSplit::__anon25::__anon26	access:public
CvDTreeSplit::__anon25::ord	/usr/include/opencv/ml.h	/^        ord;$/;"	m	union:CvDTreeSplit::__anon25	typeref:struct:CvDTreeSplit::__anon25::__anon26	access:public
CvDTreeSplit::__anon25::subset	/usr/include/opencv/ml.h	/^        int subset[2];$/;"	m	union:CvDTreeSplit::__anon25	access:public
CvDTreeSplit::inversed	/usr/include/opencv/ml.h	/^    int inversed;$/;"	m	struct:CvDTreeSplit	access:public
CvDTreeSplit::next	/usr/include/opencv/ml.h	/^    CvDTreeSplit* next;$/;"	m	struct:CvDTreeSplit	access:public
CvDTreeSplit::quality	/usr/include/opencv/ml.h	/^    float quality;$/;"	m	struct:CvDTreeSplit	access:public
CvDTreeSplit::var_idx	/usr/include/opencv/ml.h	/^    int var_idx;$/;"	m	struct:CvDTreeSplit	access:public
CvDTreeTrainData	/usr/include/opencv/ml.h	/^    CvDTreeTrainData( const CvMat* _train_data, int _tflag,$/;"	p	struct:CvDTreeTrainData	access:public	signature:( const CvMat* _train_data, int _tflag, const CvMat* _responses, const CvMat* _var_idx=0, const CvMat* _sample_idx=0, const CvMat* _var_type=0, const CvMat* _missing_mask=0, const CvDTreeParams& _params=CvDTreeParams(), bool _shared=false, bool _add_labels=false )
CvDTreeTrainData	/usr/include/opencv/ml.h	/^    CvDTreeTrainData();$/;"	p	struct:CvDTreeTrainData	access:public	signature:()
CvDTreeTrainData	/usr/include/opencv/ml.h	/^struct CV_EXPORTS CvDTreeTrainData$/;"	s
CvDTreeTrainData::CvDTreeTrainData	/usr/include/opencv/ml.h	/^    CvDTreeTrainData( const CvMat* _train_data, int _tflag,$/;"	p	struct:CvDTreeTrainData	access:public	signature:( const CvMat* _train_data, int _tflag, const CvMat* _responses, const CvMat* _var_idx=0, const CvMat* _sample_idx=0, const CvMat* _var_type=0, const CvMat* _missing_mask=0, const CvDTreeParams& _params=CvDTreeParams(), bool _shared=false, bool _add_labels=false )
CvDTreeTrainData::CvDTreeTrainData	/usr/include/opencv/ml.h	/^    CvDTreeTrainData();$/;"	p	struct:CvDTreeTrainData	access:public	signature:()
CvDTreeTrainData::buf	/usr/include/opencv/ml.h	/^    CvMat* buf;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::buf_count	/usr/include/opencv/ml.h	/^    int buf_count, buf_size;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::buf_size	/usr/include/opencv/ml.h	/^    int buf_count, buf_size;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::cat_count	/usr/include/opencv/ml.h	/^    CvMat* cat_count;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::cat_map	/usr/include/opencv/ml.h	/^    CvMat* cat_map;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::cat_ofs	/usr/include/opencv/ml.h	/^    CvMat* cat_ofs;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::cat_var_count	/usr/include/opencv/ml.h	/^    int ord_var_count, cat_var_count;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	struct:CvDTreeTrainData	access:public	signature:()
CvDTreeTrainData::counts	/usr/include/opencv/ml.h	/^    CvMat* counts;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::cv_heap	/usr/include/opencv/ml.h	/^    CvSet* cv_heap;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::data_root	/usr/include/opencv/ml.h	/^    CvDTreeNode* data_root;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::direction	/usr/include/opencv/ml.h	/^    CvMat* direction;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::free_node	/usr/include/opencv/ml.h	/^    virtual void free_node( CvDTreeNode* node );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( CvDTreeNode* node )
CvDTreeTrainData::free_node_data	/usr/include/opencv/ml.h	/^    virtual void free_node_data( CvDTreeNode* node );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( CvDTreeNode* node )
CvDTreeTrainData::free_train_data	/usr/include/opencv/ml.h	/^    virtual void free_train_data();$/;"	p	struct:CvDTreeTrainData	access:public	signature:()
CvDTreeTrainData::get_cat_var_data	/usr/include/opencv/ml.h	/^    virtual int* get_cat_var_data( CvDTreeNode* n, int vi );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( CvDTreeNode* n, int vi )
CvDTreeTrainData::get_child_buf_idx	/usr/include/opencv/ml.h	/^    virtual int get_child_buf_idx( CvDTreeNode* n );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( CvDTreeNode* n )
CvDTreeTrainData::get_class_labels	/usr/include/opencv/ml.h	/^    virtual int* get_class_labels( CvDTreeNode* n );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( CvDTreeNode* n )
CvDTreeTrainData::get_labels	/usr/include/opencv/ml.h	/^    virtual int* get_labels( CvDTreeNode* n );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( CvDTreeNode* n )
CvDTreeTrainData::get_num_classes	/usr/include/opencv/ml.h	/^    int get_num_classes() const;$/;"	p	struct:CvDTreeTrainData	access:public	signature:() const
CvDTreeTrainData::get_ord_responses	/usr/include/opencv/ml.h	/^    virtual float* get_ord_responses( CvDTreeNode* n );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( CvDTreeNode* n )
CvDTreeTrainData::get_ord_var_data	/usr/include/opencv/ml.h	/^    virtual CvPair32s32f* get_ord_var_data( CvDTreeNode* n, int vi );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( CvDTreeNode* n, int vi )
CvDTreeTrainData::get_var_type	/usr/include/opencv/ml.h	/^    int get_var_type(int vi) const;$/;"	p	struct:CvDTreeTrainData	access:public	signature:(int vi) const
CvDTreeTrainData::get_vectors	/usr/include/opencv/ml.h	/^    virtual void get_vectors( const CvMat* _subsample_idx,$/;"	p	struct:CvDTreeTrainData	access:public	signature:( const CvMat* _subsample_idx, float* values, uchar* missing, float* responses, bool get_class_idx=false )
CvDTreeTrainData::get_work_var_count	/usr/include/opencv/ml.h	/^    int get_work_var_count() const;$/;"	p	struct:CvDTreeTrainData	access:public	signature:() const
CvDTreeTrainData::have_labels	/usr/include/opencv/ml.h	/^    bool have_labels, have_priors;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::have_priors	/usr/include/opencv/ml.h	/^    bool have_labels, have_priors;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::is_classifier	/usr/include/opencv/ml.h	/^    bool is_classifier;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::max_c_count	/usr/include/opencv/ml.h	/^    int sample_count, var_all, var_count, max_c_count;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::new_node	/usr/include/opencv/ml.h	/^    virtual CvDTreeNode* new_node( CvDTreeNode* parent, int count,$/;"	p	struct:CvDTreeTrainData	access:public	signature:( CvDTreeNode* parent, int count, int storage_idx, int offset )
CvDTreeTrainData::new_split_cat	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* new_split_cat( int vi, float quality );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( int vi, float quality )
CvDTreeTrainData::new_split_ord	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* new_split_ord( int vi, float cmp_val,$/;"	p	struct:CvDTreeTrainData	access:public	signature:( int vi, float cmp_val, int split_point, int inversed, float quality )
CvDTreeTrainData::node_heap	/usr/include/opencv/ml.h	/^    CvSet* node_heap;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::nv_heap	/usr/include/opencv/ml.h	/^    CvSet* nv_heap;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::ord_var_count	/usr/include/opencv/ml.h	/^    int ord_var_count, cat_var_count;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::params	/usr/include/opencv/ml.h	/^    CvDTreeParams params;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::priors	/usr/include/opencv/ml.h	/^    CvMat* priors;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::priors_mult	/usr/include/opencv/ml.h	/^    CvMat* priors_mult;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::read_params	/usr/include/opencv/ml.h	/^    virtual void read_params( CvFileStorage* fs, CvFileNode* node );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( CvFileStorage* fs, CvFileNode* node )
CvDTreeTrainData::rng	/usr/include/opencv/ml.h	/^    CvRNG rng;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::sample_count	/usr/include/opencv/ml.h	/^    int sample_count, var_all, var_count, max_c_count;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::set_data	/usr/include/opencv/ml.h	/^    virtual void set_data( const CvMat* _train_data, int _tflag,$/;"	p	struct:CvDTreeTrainData	access:public	signature:( const CvMat* _train_data, int _tflag, const CvMat* _responses, const CvMat* _var_idx=0, const CvMat* _sample_idx=0, const CvMat* _var_type=0, const CvMat* _missing_mask=0, const CvDTreeParams& _params=CvDTreeParams(), bool _shared=false, bool _add_labels=false, bool _update_data=false )
CvDTreeTrainData::set_params	/usr/include/opencv/ml.h	/^    virtual bool set_params( const CvDTreeParams& params );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( const CvDTreeParams& params )
CvDTreeTrainData::shared	/usr/include/opencv/ml.h	/^    bool shared;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::split_buf	/usr/include/opencv/ml.h	/^    CvMat* split_buf;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::split_heap	/usr/include/opencv/ml.h	/^    CvSet* split_heap;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::subsample_data	/usr/include/opencv/ml.h	/^    virtual CvDTreeNode* subsample_data( const CvMat* _subsample_idx );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( const CvMat* _subsample_idx )
CvDTreeTrainData::temp_storage	/usr/include/opencv/ml.h	/^    CvMemStorage* temp_storage;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::tree_storage	/usr/include/opencv/ml.h	/^    CvMemStorage* tree_storage;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::var_all	/usr/include/opencv/ml.h	/^    int sample_count, var_all, var_count, max_c_count;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::var_count	/usr/include/opencv/ml.h	/^    int sample_count, var_all, var_count, max_c_count;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::var_idx	/usr/include/opencv/ml.h	/^    CvMat* var_idx;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::var_type	/usr/include/opencv/ml.h	/^    CvMat* var_type; \/\/ i-th element =$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::write_params	/usr/include/opencv/ml.h	/^    virtual void write_params( CvFileStorage* fs );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( CvFileStorage* fs )
CvDTreeTrainData::~CvDTreeTrainData	/usr/include/opencv/ml.h	/^    virtual ~CvDTreeTrainData();$/;"	p	struct:CvDTreeTrainData	access:public	signature:()
CvDataType	/usr/include/opencv/cxmisc.h	/^typedef enum CvDataType {$/;"	g
CvDataType	/usr/include/opencv/cxmisc.h	/^} CvDataType;$/;"	t	typeref:enum:CvDataType
CvDefParam	/usr/include/opencv/cvvidsurv.hpp	/^struct CvDefParam$/;"	s
CvDefParam::Double	/usr/include/opencv/cvvidsurv.hpp	/^    double              Double;$/;"	m	struct:CvDefParam	access:public
CvDefParam::Float	/usr/include/opencv/cvvidsurv.hpp	/^    float               Float;$/;"	m	struct:CvDefParam	access:public
CvDefParam::Int	/usr/include/opencv/cvvidsurv.hpp	/^    int                 Int;$/;"	m	struct:CvDefParam	access:public
CvDefParam::Str	/usr/include/opencv/cvvidsurv.hpp	/^    char*               Str;$/;"	m	struct:CvDefParam	access:public
CvDefParam::next	/usr/include/opencv/cvvidsurv.hpp	/^    struct CvDefParam*    next;$/;"	m	struct:CvDefParam	typeref:struct:CvDefParam::CvDefParam	access:public
CvDefParam::pComment	/usr/include/opencv/cvvidsurv.hpp	/^    char*               pComment;$/;"	m	struct:CvDefParam	access:public
CvDefParam::pDouble	/usr/include/opencv/cvvidsurv.hpp	/^    double*             pDouble;$/;"	m	struct:CvDefParam	access:public
CvDefParam::pFloat	/usr/include/opencv/cvvidsurv.hpp	/^    float*              pFloat;$/;"	m	struct:CvDefParam	access:public
CvDefParam::pInt	/usr/include/opencv/cvvidsurv.hpp	/^    int*                pInt;$/;"	m	struct:CvDefParam	access:public
CvDefParam::pName	/usr/include/opencv/cvvidsurv.hpp	/^    char*               pName;$/;"	m	struct:CvDefParam	access:public
CvDefParam::pStr	/usr/include/opencv/cvvidsurv.hpp	/^    char**              pStr;$/;"	m	struct:CvDefParam	access:public
CvDetectedBlob	/usr/include/opencv/cvvidsurv.hpp	/^struct CV_EXPORTS CvDetectedBlob : public CvBlob$/;"	s
CvDetectedBlob::response	/usr/include/opencv/cvvidsurv.hpp	/^    float response;$/;"	m	struct:CvDetectedBlob	access:public
CvDisMaskType	/usr/include/opencv/cvcompat.h	62;"	d
CvDisType	/usr/include/opencv/cvcompat.h	/^typedef int CvDisType;$/;"	t
CvDistanceFunction	/usr/include/opencv/cvtypes.h	/^typedef float (CV_CDECL * CvDistanceFunction)( const float* a, const float* b, void* user_param );$/;"	t
CvDrawShape	/usr/include/opencv/cvvidsurv.hpp	/^struct CvDrawShape$/;"	s
CvDrawShape::ELLIPSE	/usr/include/opencv/cvvidsurv.hpp	/^    enum {RECT, ELLIPSE} shape;$/;"	e	enum:CvDrawShape::__anon33
CvDrawShape::RECT	/usr/include/opencv/cvvidsurv.hpp	/^    enum {RECT, ELLIPSE} shape;$/;"	e	enum:CvDrawShape::__anon33
CvDrawShape::color	/usr/include/opencv/cvvidsurv.hpp	/^    CvScalar color;$/;"	m	struct:CvDrawShape	access:public
CvDrawShape::shape	/usr/include/opencv/cvvidsurv.hpp	/^    enum {RECT, ELLIPSE} shape;$/;"	m	struct:CvDrawShape	typeref:enum:CvDrawShape::__anon33	access:public
CvEHMM	/usr/include/opencv/cvaux.h	/^CvEHMM;$/;"	t	typeref:struct:CvEHMM
CvEHMM	/usr/include/opencv/cvaux.h	/^typedef struct CvEHMM$/;"	s
CvEHMM::__anon2::ehmm	/usr/include/opencv/cvaux.h	/^        struct CvEHMM* ehmm; \/* pointer to an embedded model or NULL, if it is a leaf *\/$/;"	m	union:CvEHMM::__anon2	typeref:struct:CvEHMM::__anon2::CvEHMM	access:public
CvEHMM::__anon2::state	/usr/include/opencv/cvaux.h	/^        CvEHMMState* state; \/* if level == 0 points to real states array,$/;"	m	union:CvEHMM::__anon2	access:public
CvEHMM::level	/usr/include/opencv/cvaux.h	/^    int level; \/* 0 - lowest(i.e its states are real states), ..... *\/$/;"	m	struct:CvEHMM	access:public
CvEHMM::num_states	/usr/include/opencv/cvaux.h	/^    int num_states; \/* number of HMM states *\/$/;"	m	struct:CvEHMM	access:public
CvEHMM::obsProb	/usr/include/opencv/cvaux.h	/^    float** obsProb; \/* if level == 0 - array of brob matrices corresponding to hmm$/;"	m	struct:CvEHMM	access:public
CvEHMM::transP	/usr/include/opencv/cvaux.h	/^    float*  transP;\/*transition probab. matrices for states *\/$/;"	m	struct:CvEHMM	access:public
CvEHMM::u	/usr/include/opencv/cvaux.h	/^    } u;$/;"	m	struct:CvEHMM	typeref:union:CvEHMM::__anon2	access:public
CvEHMMState	/usr/include/opencv/cvaux.h	/^CvEHMMState;$/;"	t	typeref:struct:CvEHMMState
CvEHMMState	/usr/include/opencv/cvaux.h	/^typedef struct CvEHMMState$/;"	s
CvEHMMState::inv_var	/usr/include/opencv/cvaux.h	/^    float* inv_var;     \/* square root of inversed variances corresp. to each mixture*\/$/;"	m	struct:CvEHMMState	access:public
CvEHMMState::log_var_val	/usr/include/opencv/cvaux.h	/^    float* log_var_val; \/* sum of 0.5 (LN2PI + ln(variance[i]) ) for i=1,n *\/$/;"	m	struct:CvEHMMState	access:public
CvEHMMState::mu	/usr/include/opencv/cvaux.h	/^    float* mu;          \/*mean vectors corresponding to each mixture*\/$/;"	m	struct:CvEHMMState	access:public
CvEHMMState::num_mix	/usr/include/opencv/cvaux.h	/^    int num_mix;        \/*number of mixtures in this state*\/$/;"	m	struct:CvEHMMState	access:public
CvEHMMState::weight	/usr/include/opencv/cvaux.h	/^    float* weight;      \/*array of mixture weights. Summ of all weights in state is 1. *\/$/;"	m	struct:CvEHMMState	access:public
CvEM	/usr/include/opencv/ml.h	/^    CvEM( const CvMat* samples, const CvMat* sample_idx=0,$/;"	p	class:CvEM	access:public	signature:( const CvMat* samples, const CvMat* sample_idx=0, CvEMParams params=CvEMParams(), CvMat* labels=0 )
CvEM	/usr/include/opencv/ml.h	/^    CvEM();$/;"	p	class:CvEM	access:public	signature:()
CvEM	/usr/include/opencv/ml.h	/^class CV_EXPORTS CvEM : public CvStatModel$/;"	c
CvEM::COV_MAT_DIAGONAL	/usr/include/opencv/ml.h	/^    enum { COV_MAT_SPHERICAL=0, COV_MAT_DIAGONAL=1, COV_MAT_GENERIC=2 };$/;"	e	enum:CvEM::__anon23
CvEM::COV_MAT_GENERIC	/usr/include/opencv/ml.h	/^    enum { COV_MAT_SPHERICAL=0, COV_MAT_DIAGONAL=1, COV_MAT_GENERIC=2 };$/;"	e	enum:CvEM::__anon23
CvEM::COV_MAT_SPHERICAL	/usr/include/opencv/ml.h	/^    enum { COV_MAT_SPHERICAL=0, COV_MAT_DIAGONAL=1, COV_MAT_GENERIC=2 };$/;"	e	enum:CvEM::__anon23
CvEM::CvEM	/usr/include/opencv/ml.h	/^    CvEM( const CvMat* samples, const CvMat* sample_idx=0,$/;"	p	class:CvEM	access:public	signature:( const CvMat* samples, const CvMat* sample_idx=0, CvEMParams params=CvEMParams(), CvMat* labels=0 )
CvEM::CvEM	/usr/include/opencv/ml.h	/^    CvEM();$/;"	p	class:CvEM	access:public	signature:()
CvEM::START_AUTO_STEP	/usr/include/opencv/ml.h	/^    enum { START_E_STEP=1, START_M_STEP=2, START_AUTO_STEP=0 };$/;"	e	enum:CvEM::__anon24
CvEM::START_E_STEP	/usr/include/opencv/ml.h	/^    enum { START_E_STEP=1, START_M_STEP=2, START_AUTO_STEP=0 };$/;"	e	enum:CvEM::__anon24
CvEM::START_M_STEP	/usr/include/opencv/ml.h	/^    enum { START_E_STEP=1, START_M_STEP=2, START_AUTO_STEP=0 };$/;"	e	enum:CvEM::__anon24
CvEM::clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	class:CvEM	access:public	signature:()
CvEM::cov_rotate_mats	/usr/include/opencv/ml.h	/^    CvMat** cov_rotate_mats;$/;"	m	class:CvEM	access:protected
CvEM::covs	/usr/include/opencv/ml.h	/^    CvMat** covs;$/;"	m	class:CvEM	access:protected
CvEM::get_covs	/usr/include/opencv/ml.h	/^    const CvMat** get_covs() const;$/;"	p	class:CvEM	access:public	signature:() const
CvEM::get_means	/usr/include/opencv/ml.h	/^    const CvMat* get_means() const;$/;"	p	class:CvEM	access:public	signature:() const
CvEM::get_nclusters	/usr/include/opencv/ml.h	/^    int get_nclusters() const;$/;"	p	class:CvEM	access:public	signature:() const
CvEM::get_probs	/usr/include/opencv/ml.h	/^    const CvMat* get_probs() const;$/;"	p	class:CvEM	access:public	signature:() const
CvEM::get_weights	/usr/include/opencv/ml.h	/^    const CvMat* get_weights() const;$/;"	p	class:CvEM	access:public	signature:() const
CvEM::init_auto	/usr/include/opencv/ml.h	/^    virtual void init_auto( const CvVectors& samples );$/;"	p	class:CvEM	access:protected	signature:( const CvVectors& samples )
CvEM::init_em	/usr/include/opencv/ml.h	/^    virtual void init_em( const CvVectors& train_data );$/;"	p	class:CvEM	access:protected	signature:( const CvVectors& train_data )
CvEM::inv_eigen_values	/usr/include/opencv/ml.h	/^    CvMat* inv_eigen_values;$/;"	m	class:CvEM	access:protected
CvEM::kmeans	/usr/include/opencv/ml.h	/^    virtual void kmeans( const CvVectors& train_data, int nclusters,$/;"	p	class:CvEM	access:protected	signature:( const CvVectors& train_data, int nclusters, CvMat* labels, CvTermCriteria criteria, const CvMat* means )
CvEM::log_likelihood	/usr/include/opencv/ml.h	/^    double log_likelihood;$/;"	m	class:CvEM	access:protected
CvEM::log_weight_div_det	/usr/include/opencv/ml.h	/^    CvMat* log_weight_div_det;$/;"	m	class:CvEM	access:protected
CvEM::means	/usr/include/opencv/ml.h	/^    CvMat* means;$/;"	m	class:CvEM	access:protected
CvEM::params	/usr/include/opencv/ml.h	/^    CvEMParams params;$/;"	m	class:CvEM	access:protected
CvEM::predict	/usr/include/opencv/ml.h	/^    virtual float predict( const CvMat* sample, CvMat* probs ) const;$/;"	p	class:CvEM	access:public	signature:( const CvMat* sample, CvMat* probs ) const
CvEM::probs	/usr/include/opencv/ml.h	/^    CvMat* probs;$/;"	m	class:CvEM	access:protected
CvEM::run_em	/usr/include/opencv/ml.h	/^    virtual double run_em( const CvVectors& train_data );$/;"	p	class:CvEM	access:protected	signature:( const CvVectors& train_data )
CvEM::set_params	/usr/include/opencv/ml.h	/^    virtual void set_params( const CvEMParams& params,$/;"	p	class:CvEM	access:protected	signature:( const CvEMParams& params, const CvVectors& train_data )
CvEM::train	/usr/include/opencv/ml.h	/^    virtual bool train( const CvMat* samples, const CvMat* sample_idx=0,$/;"	p	class:CvEM	access:public	signature:( const CvMat* samples, const CvMat* sample_idx=0, CvEMParams params=CvEMParams(), CvMat* labels=0 )
CvEM::weights	/usr/include/opencv/ml.h	/^    CvMat* weights;$/;"	m	class:CvEM	access:protected
CvEM::~CvEM	/usr/include/opencv/ml.h	/^    virtual ~CvEM();$/;"	p	class:CvEM	access:public	signature:()
CvEMParams	/usr/include/opencv/ml.h	/^    CvEMParams( int _nclusters, int _cov_mat_type=1\/*CvEM::COV_MAT_DIAGONAL*\/,$/;"	f	struct:CvEMParams	access:public	signature:( int _nclusters, int _cov_mat_type=1 , int _start_step=0 , CvTermCriteria _term_crit=cvTermCriteria(CV_TERMCRIT_ITER+CV_TERMCRIT_EPS, 100, FLT_EPSILON), const CvMat* _probs=0, const CvMat* _weights=0, const CvMat* _means=0, const CvMat** _covs=0 )
CvEMParams	/usr/include/opencv/ml.h	/^    CvEMParams() : nclusters(10), cov_mat_type(1\/*CvEM::COV_MAT_DIAGONAL*\/),$/;"	f	struct:CvEMParams	access:public	signature:()
CvEMParams	/usr/include/opencv/ml.h	/^struct CV_EXPORTS CvEMParams$/;"	s
CvEMParams::CvEMParams	/usr/include/opencv/ml.h	/^    CvEMParams( int _nclusters, int _cov_mat_type=1\/*CvEM::COV_MAT_DIAGONAL*\/,$/;"	f	struct:CvEMParams	access:public	signature:( int _nclusters, int _cov_mat_type=1 , int _start_step=0 , CvTermCriteria _term_crit=cvTermCriteria(CV_TERMCRIT_ITER+CV_TERMCRIT_EPS, 100, FLT_EPSILON), const CvMat* _probs=0, const CvMat* _weights=0, const CvMat* _means=0, const CvMat** _covs=0 )
CvEMParams::CvEMParams	/usr/include/opencv/ml.h	/^    CvEMParams() : nclusters(10), cov_mat_type(1\/*CvEM::COV_MAT_DIAGONAL*\/),$/;"	f	struct:CvEMParams	access:public	signature:()
CvEMParams::cov_mat_type	/usr/include/opencv/ml.h	/^    int cov_mat_type;$/;"	m	struct:CvEMParams	access:public
CvEMParams::covs	/usr/include/opencv/ml.h	/^    const CvMat** covs;$/;"	m	struct:CvEMParams	access:public
CvEMParams::means	/usr/include/opencv/ml.h	/^    const CvMat* means;$/;"	m	struct:CvEMParams	access:public
CvEMParams::nclusters	/usr/include/opencv/ml.h	/^    int nclusters;$/;"	m	struct:CvEMParams	access:public
CvEMParams::probs	/usr/include/opencv/ml.h	/^    const CvMat* probs;$/;"	m	struct:CvEMParams	access:public
CvEMParams::start_step	/usr/include/opencv/ml.h	/^    int start_step;$/;"	m	struct:CvEMParams	access:public
CvEMParams::term_crit	/usr/include/opencv/ml.h	/^    CvTermCriteria term_crit;$/;"	m	struct:CvEMParams	access:public
CvEMParams::weights	/usr/include/opencv/ml.h	/^    const CvMat* weights;$/;"	m	struct:CvEMParams	access:public
CvElementShape	/usr/include/opencv/cvcompat.h	74;"	d
CvErrorCallback	/usr/include/opencv/cxcore.h	/^typedef int (CV_CDECL *CvErrorCallback)( int status, const char* func_name,$/;"	t
CvFGDStatModel	/usr/include/opencv/cvaux.h	/^CvFGDStatModel;$/;"	t	typeref:struct:CvFGDStatModel
CvFGDStatModel	/usr/include/opencv/cvaux.h	/^typedef struct CvFGDStatModel$/;"	s
CvFGDStatModel::CV_BG_STAT_MODEL_FIELDS	/usr/include/opencv/cvaux.h	/^    CV_BG_STAT_MODEL_FIELDS();$/;"	p	struct:CvFGDStatModel	access:public	signature:()
CvFGDStatModel::Fbd	/usr/include/opencv/cvaux.h	/^    IplImage*              Fbd;$/;"	m	struct:CvFGDStatModel	access:public
CvFGDStatModel::Ftd	/usr/include/opencv/cvaux.h	/^    IplImage*              Ftd;$/;"	m	struct:CvFGDStatModel	access:public
CvFGDStatModel::params	/usr/include/opencv/cvaux.h	/^    CvFGDStatModelParams   params;$/;"	m	struct:CvFGDStatModel	access:public
CvFGDStatModel::pixel_stat	/usr/include/opencv/cvaux.h	/^    CvBGPixelStat*         pixel_stat;$/;"	m	struct:CvFGDStatModel	access:public
CvFGDStatModel::prev_frame	/usr/include/opencv/cvaux.h	/^    IplImage*              prev_frame;$/;"	m	struct:CvFGDStatModel	access:public
CvFGDStatModelParams	/usr/include/opencv/cvaux.h	/^CvFGDStatModelParams;$/;"	t	typeref:struct:CvFGDStatModelParams
CvFGDStatModelParams	/usr/include/opencv/cvaux.h	/^typedef struct CvFGDStatModelParams$/;"	s
CvFGDStatModelParams::Lc	/usr/include/opencv/cvaux.h	/^    int           Lc, N1c, N2c, Lcc, N1cc, N2cc, is_obj_without_holes, perform_morphing;$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::Lcc	/usr/include/opencv/cvaux.h	/^    int           Lc, N1c, N2c, Lcc, N1cc, N2cc, is_obj_without_holes, perform_morphing;$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::N1c	/usr/include/opencv/cvaux.h	/^    int           Lc, N1c, N2c, Lcc, N1cc, N2cc, is_obj_without_holes, perform_morphing;$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::N1cc	/usr/include/opencv/cvaux.h	/^    int           Lc, N1c, N2c, Lcc, N1cc, N2cc, is_obj_without_holes, perform_morphing;$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::N2c	/usr/include/opencv/cvaux.h	/^    int           Lc, N1c, N2c, Lcc, N1cc, N2cc, is_obj_without_holes, perform_morphing;$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::N2cc	/usr/include/opencv/cvaux.h	/^    int           Lc, N1c, N2c, Lcc, N1cc, N2cc, is_obj_without_holes, perform_morphing;$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::T	/usr/include/opencv/cvaux.h	/^    float         alpha1, alpha2, alpha3, delta, T, minArea;$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::alpha1	/usr/include/opencv/cvaux.h	/^    float         alpha1, alpha2, alpha3, delta, T, minArea;$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::alpha2	/usr/include/opencv/cvaux.h	/^    float         alpha1, alpha2, alpha3, delta, T, minArea;$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::alpha3	/usr/include/opencv/cvaux.h	/^    float         alpha1, alpha2, alpha3, delta, T, minArea;$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::delta	/usr/include/opencv/cvaux.h	/^    float         alpha1, alpha2, alpha3, delta, T, minArea;$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::is_obj_without_holes	/usr/include/opencv/cvaux.h	/^    int           Lc, N1c, N2c, Lcc, N1cc, N2cc, is_obj_without_holes, perform_morphing;$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::minArea	/usr/include/opencv/cvaux.h	/^    float         alpha1, alpha2, alpha3, delta, T, minArea;$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::perform_morphing	/usr/include/opencv/cvaux.h	/^    int           Lc, N1c, N2c, Lcc, N1cc, N2cc, is_obj_without_holes, perform_morphing;$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDetector	/usr/include/opencv/cvvidsurv.hpp	/^class CV_EXPORTS CvFGDetector: public CvVSModule$/;"	c
CvFGDetector::GetMask	/usr/include/opencv/cvvidsurv.hpp	/^    virtual IplImage* GetMask() = 0;$/;"	p	class:CvFGDetector	access:public	signature:()
CvFGDetector::Process	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Process(IplImage* pImg) = 0;$/;"	p	class:CvFGDetector	access:public	signature:(IplImage* pImg)
CvFGDetector::Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Release() = 0;$/;"	p	class:CvFGDetector	access:public	signature:()
CvFace	/usr/include/opencv/cvaux.h	/^typedef struct CvFace$/;"	s
CvFace::LeftEyeRect	/usr/include/opencv/cvaux.h	/^    CvRect LeftEyeRect;$/;"	m	struct:CvFace	access:public
CvFace::MouthRect	/usr/include/opencv/cvaux.h	/^    CvRect MouthRect;$/;"	m	struct:CvFace	access:public
CvFace::RightEyeRect	/usr/include/opencv/cvaux.h	/^    CvRect RightEyeRect;$/;"	m	struct:CvFace	access:public
CvFaceData	/usr/include/opencv/cvaux.h	/^} CvFaceData;$/;"	t	typeref:struct:CvFace
CvFaceTracker	/usr/include/opencv/cvaux.h	/^typedef struct CvFaceTracker CvFaceTracker;$/;"	t	typeref:struct:CvFaceTracker
CvFileNode	/usr/include/opencv/cxtypes.h	/^CvFileNode;$/;"	t	typeref:struct:CvFileNode
CvFileNode	/usr/include/opencv/cxtypes.h	/^typedef struct CvFileNode$/;"	s
CvFileNode::__anon19::f	/usr/include/opencv/cxtypes.h	/^        double f; \/* scalar floating-point number *\/$/;"	m	union:CvFileNode::__anon19	access:public
CvFileNode::__anon19::i	/usr/include/opencv/cxtypes.h	/^        int i;    \/* scalar integer number *\/$/;"	m	union:CvFileNode::__anon19	access:public
CvFileNode::__anon19::map	/usr/include/opencv/cxtypes.h	/^        CvFileNodeHash* map; \/* map (collection of named file nodes) *\/$/;"	m	union:CvFileNode::__anon19	access:public
CvFileNode::__anon19::seq	/usr/include/opencv/cxtypes.h	/^        CvSeq* seq; \/* sequence (ordered collection of file nodes) *\/$/;"	m	union:CvFileNode::__anon19	access:public
CvFileNode::__anon19::str	/usr/include/opencv/cxtypes.h	/^        CvString str; \/* text string *\/$/;"	m	union:CvFileNode::__anon19	access:public
CvFileNode::data	/usr/include/opencv/cxtypes.h	/^    } data;$/;"	m	struct:CvFileNode	typeref:union:CvFileNode::__anon19	access:public
CvFileNode::info	/usr/include/opencv/cxtypes.h	/^    struct CvTypeInfo* info; \/* type information$/;"	m	struct:CvFileNode	typeref:struct:CvFileNode::CvTypeInfo	access:public
CvFileNode::tag	/usr/include/opencv/cxtypes.h	/^    int tag;$/;"	m	struct:CvFileNode	access:public
CvFileNodeHash	/usr/include/opencv/cxtypes.h	/^typedef struct CvGenericHash CvFileNodeHash;$/;"	t	typeref:struct:CvGenericHash
CvFileStorage	/usr/include/opencv/cxtypes.h	/^typedef struct CvFileStorage CvFileStorage;$/;"	t	typeref:struct:CvFileStorage
CvFilter	/usr/include/opencv/cvtypes.h	/^CvFilter;$/;"	t	typeref:enum:CvFilter
CvFilter	/usr/include/opencv/cvtypes.h	/^typedef enum CvFilter$/;"	g
CvFont	/usr/include/opencv/cxcore.h	/^CvFont;$/;"	t	typeref:struct:CvFont
CvFont	/usr/include/opencv/cxcore.h	/^typedef struct CvFont$/;"	s
CvFont::ascii	/usr/include/opencv/cxcore.h	/^    const int*  ascii; \/* font data and metrics *\/$/;"	m	struct:CvFont	access:public
CvFont::cyrillic	/usr/include/opencv/cxcore.h	/^    const int*  cyrillic;$/;"	m	struct:CvFont	access:public
CvFont::dx	/usr/include/opencv/cxcore.h	/^    float       dx; \/* horizontal interval between letters *\/$/;"	m	struct:CvFont	access:public
CvFont::font_face	/usr/include/opencv/cxcore.h	/^    int         font_face; \/* =CV_FONT_* *\/$/;"	m	struct:CvFont	access:public
CvFont::greek	/usr/include/opencv/cxcore.h	/^    const int*  greek;$/;"	m	struct:CvFont	access:public
CvFont::hscale	/usr/include/opencv/cxcore.h	/^    float       hscale, vscale;$/;"	m	struct:CvFont	access:public
CvFont::line_type	/usr/include/opencv/cxcore.h	/^    int         line_type;$/;"	m	struct:CvFont	access:public
CvFont::shear	/usr/include/opencv/cxcore.h	/^    float       shear; \/* slope coefficient: 0 - normal, >0 - italic *\/$/;"	m	struct:CvFont	access:public
CvFont::thickness	/usr/include/opencv/cxcore.h	/^    int         thickness; \/* letters thickness *\/$/;"	m	struct:CvFont	access:public
CvFont::vscale	/usr/include/opencv/cxcore.h	/^    float       hscale, vscale;$/;"	m	struct:CvFont	access:public
CvFontFace	/usr/include/opencv/cvcompat.h	68;"	d
CvForestTree	/usr/include/opencv/ml.h	/^    CvForestTree();$/;"	p	class:CvForestTree	access:public	signature:()
CvForestTree	/usr/include/opencv/ml.h	/^class CV_EXPORTS CvForestTree: public CvDTree$/;"	c
CvForestTree::CvForestTree	/usr/include/opencv/ml.h	/^    CvForestTree();$/;"	p	class:CvForestTree	access:public	signature:()
CvForestTree::find_best_split	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_best_split( CvDTreeNode* n );$/;"	p	class:CvForestTree	access:protected	signature:( CvDTreeNode* n )
CvForestTree::forest	/usr/include/opencv/ml.h	/^    CvRTrees* forest;$/;"	m	class:CvForestTree	access:protected
CvForestTree::get_var_count	/usr/include/opencv/ml.h	/^    virtual int get_var_count() const {return data ? data->var_count : 0;}$/;"	f	class:CvForestTree	access:public	signature:() const
CvForestTree::read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* fs, CvFileNode* node );$/;"	p	class:CvForestTree	access:public	signature:( CvFileStorage* fs, CvFileNode* node )
CvForestTree::read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* fs, CvFileNode* node, CvRTrees* forest, CvDTreeTrainData* _data );$/;"	p	class:CvForestTree	access:public	signature:( CvFileStorage* fs, CvFileNode* node, CvRTrees* forest, CvDTreeTrainData* _data )
CvForestTree::read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* fs, CvFileNode* node,$/;"	p	class:CvForestTree	access:public	signature:( CvFileStorage* fs, CvFileNode* node, CvDTreeTrainData* data )
CvForestTree::train	/usr/include/opencv/ml.h	/^    virtual bool train( CvDTreeTrainData* _train_data, const CvMat* _subsample_idx );$/;"	p	class:CvForestTree	access:public	signature:( CvDTreeTrainData* _train_data, const CvMat* _subsample_idx )
CvForestTree::train	/usr/include/opencv/ml.h	/^    virtual bool train( CvDTreeTrainData* _train_data, const CvMat* _subsample_idx, CvRTrees* forest );$/;"	p	class:CvForestTree	access:public	signature:( CvDTreeTrainData* _train_data, const CvMat* _subsample_idx, CvRTrees* forest )
CvForestTree::train	/usr/include/opencv/ml.h	/^    virtual bool train( const CvMat* _train_data, int _tflag,$/;"	p	class:CvForestTree	access:public	signature:( const CvMat* _train_data, int _tflag, const CvMat* _responses, const CvMat* _var_idx=0, const CvMat* _sample_idx=0, const CvMat* _var_type=0, const CvMat* _missing_mask=0, CvDTreeParams params=CvDTreeParams() )
CvForestTree::~CvForestTree	/usr/include/opencv/ml.h	/^    virtual ~CvForestTree();$/;"	p	class:CvForestTree	access:public	signature:()
CvFreeFunc	/usr/include/opencv/cxcore.h	/^typedef int (CV_CDECL *CvFreeFunc)(void* pptr, void* userdata);$/;"	t
CvFunc0D	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc0D)( const void* src, void* dst, int param );$/;"	t
CvFunc2D_1A	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_1A)(void* arr, int step, CvSize size);$/;"	t
CvFunc2D_1A1P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_1A1P)(void* arr, int step, CvSize size, void* param);$/;"	t
CvFunc2D_1A1P1I	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_1A1P1I)(void* arr, int step, CvSize size,$/;"	t
CvFunc2D_1A2P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_1A2P)( void* arr, int step, CvSize size,$/;"	t
CvFunc2D_1A4P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_1A4P)( void* arr, int step, CvSize size,$/;"	t
CvFunc2D_2A	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_2A)( void* arr0, int step0,$/;"	t
CvFunc2D_2A1P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_2A1P)( void* arr0, int step0,$/;"	t
CvFunc2D_2A1P1I	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_2A1P1I)( void* arr0, int step0,$/;"	t
CvFunc2D_2A2P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_2A2P)( void* arr0, int step0,$/;"	t
CvFunc2D_2A4P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_2A4P)( void* arr0, int step0,$/;"	t
CvFunc2D_3A	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_3A)( void* arr0, int step0,$/;"	t
CvFunc2D_3A1I	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_3A1I)( void* arr0, int step0,$/;"	t
CvFunc2D_3A1P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_3A1P)( void* arr0, int step0,$/;"	t
CvFunc2D_4A	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_4A)( void* arr0, int step0,$/;"	t
CvFunc2DnC_1A1P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2DnC_1A1P)( void* arr, int step, CvSize size,$/;"	t
CvFunc2DnC_1A2P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2DnC_1A2P)( void* arr, int step,$/;"	t
CvFunc2DnC_1A4P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2DnC_1A4P)( void* arr, int step,$/;"	t
CvFunc2DnC_2A1P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2DnC_2A1P)( void* arr0, int step0,$/;"	t
CvFunc2DnC_2A2P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2DnC_2A2P)( void* arr0, int step0,$/;"	t
CvFunc2DnC_2A4P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2DnC_2A4P)( void* arr0, int step0,$/;"	t
CvFunc2DnC_3A1P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2DnC_3A1P)( void* arr0, int step0,$/;"	t
CvFuncTable	/usr/include/opencv/cxmisc.h	/^CvFuncTable;$/;"	t	typeref:struct:CvFuncTable
CvFuncTable	/usr/include/opencv/cxmisc.h	/^typedef struct CvFuncTable$/;"	s
CvFuncTable::fn_2d	/usr/include/opencv/cxmisc.h	/^    void*   fn_2d[CV_DEPTH_MAX];$/;"	m	struct:CvFuncTable	access:public
CvGLCM	/usr/include/opencv/cvaux.h	/^typedef struct CvGLCM CvGLCM;$/;"	t	typeref:struct:CvGLCM
CvGaussBGModel	/usr/include/opencv/cvaux.h	/^CvGaussBGModel;$/;"	t	typeref:struct:CvGaussBGModel
CvGaussBGModel	/usr/include/opencv/cvaux.h	/^typedef struct CvGaussBGModel$/;"	s
CvGaussBGModel::CV_BG_STAT_MODEL_FIELDS	/usr/include/opencv/cvaux.h	/^    CV_BG_STAT_MODEL_FIELDS();$/;"	p	struct:CvGaussBGModel	access:public	signature:()
CvGaussBGModel::countFrames	/usr/include/opencv/cvaux.h	/^    int                        countFrames;$/;"	m	struct:CvGaussBGModel	access:public
CvGaussBGModel::g_point	/usr/include/opencv/cvaux.h	/^    CvGaussBGPoint*            g_point;    $/;"	m	struct:CvGaussBGModel	access:public
CvGaussBGModel::params	/usr/include/opencv/cvaux.h	/^    CvGaussBGStatModelParams   params;    $/;"	m	struct:CvGaussBGModel	access:public
CvGaussBGPoint	/usr/include/opencv/cvaux.h	/^CvGaussBGPoint;$/;"	t	typeref:struct:CvGaussBGPoint
CvGaussBGPoint	/usr/include/opencv/cvaux.h	/^typedef struct CvGaussBGPoint$/;"	s
CvGaussBGPoint::g_values	/usr/include/opencv/cvaux.h	/^    CvGaussBGValues* g_values;$/;"	m	struct:CvGaussBGPoint	access:public
CvGaussBGStatModelParams	/usr/include/opencv/cvaux.h	/^typedef struct CvGaussBGStatModelParams$/;"	s
CvGaussBGStatModelParams	/usr/include/opencv/cvaux.h	/^}CvGaussBGStatModelParams;$/;"	t	typeref:struct:CvGaussBGStatModelParams
CvGaussBGStatModelParams::bg_threshold	/usr/include/opencv/cvaux.h	/^    double  bg_threshold, std_threshold, minArea;$/;"	m	struct:CvGaussBGStatModelParams	access:public
CvGaussBGStatModelParams::minArea	/usr/include/opencv/cvaux.h	/^    double  bg_threshold, std_threshold, minArea;$/;"	m	struct:CvGaussBGStatModelParams	access:public
CvGaussBGStatModelParams::n_gauss	/usr/include/opencv/cvaux.h	/^    int     n_gauss;$/;"	m	struct:CvGaussBGStatModelParams	access:public
CvGaussBGStatModelParams::std_threshold	/usr/include/opencv/cvaux.h	/^    double  bg_threshold, std_threshold, minArea;$/;"	m	struct:CvGaussBGStatModelParams	access:public
CvGaussBGStatModelParams::variance_init	/usr/include/opencv/cvaux.h	/^    double  weight_init, variance_init;$/;"	m	struct:CvGaussBGStatModelParams	access:public
CvGaussBGStatModelParams::weight_init	/usr/include/opencv/cvaux.h	/^    double  weight_init, variance_init;$/;"	m	struct:CvGaussBGStatModelParams	access:public
CvGaussBGStatModelParams::win_size	/usr/include/opencv/cvaux.h	/^    int     win_size;               \/* = 1\/alpha *\/$/;"	m	struct:CvGaussBGStatModelParams	access:public
CvGaussBGValues	/usr/include/opencv/cvaux.h	/^CvGaussBGValues;$/;"	t	typeref:struct:CvGaussBGValues
CvGaussBGValues	/usr/include/opencv/cvaux.h	/^typedef struct CvGaussBGValues$/;"	s
CvGaussBGValues::match_sum	/usr/include/opencv/cvaux.h	/^    int         match_sum;$/;"	m	struct:CvGaussBGValues	access:public
CvGaussBGValues::mean	/usr/include/opencv/cvaux.h	/^    double      mean[CV_BGFG_MOG_NCOLORS];$/;"	m	struct:CvGaussBGValues	access:public
CvGaussBGValues::variance	/usr/include/opencv/cvaux.h	/^    double      variance[CV_BGFG_MOG_NCOLORS];$/;"	m	struct:CvGaussBGValues	access:public
CvGaussBGValues::weight	/usr/include/opencv/cvaux.h	/^    double      weight;$/;"	m	struct:CvGaussBGValues	access:public
CvGraph	/usr/include/opencv/cxtypes.h	/^CvGraph;$/;"	t	typeref:struct:CvGraph
CvGraph	/usr/include/opencv/cxtypes.h	/^typedef struct CvGraph$/;"	s
CvGraphEdge	/usr/include/opencv/cxtypes.h	/^CvGraphEdge;$/;"	t	typeref:struct:CvGraphEdge
CvGraphEdge	/usr/include/opencv/cxtypes.h	/^typedef struct CvGraphEdge$/;"	s
CvGraphScanner	/usr/include/opencv/cxcore.h	/^CvGraphScanner;$/;"	t	typeref:struct:CvGraphScanner
CvGraphScanner	/usr/include/opencv/cxcore.h	/^typedef struct CvGraphScanner$/;"	s
CvGraphScanner::dst	/usr/include/opencv/cxcore.h	/^    CvGraphVtx* dst;       \/* current graph edge destination vertex *\/$/;"	m	struct:CvGraphScanner	access:public
CvGraphScanner::edge	/usr/include/opencv/cxcore.h	/^    CvGraphEdge* edge;     \/* current edge *\/$/;"	m	struct:CvGraphScanner	access:public
CvGraphScanner::graph	/usr/include/opencv/cxcore.h	/^    CvGraph* graph;        \/* the graph *\/$/;"	m	struct:CvGraphScanner	access:public
CvGraphScanner::index	/usr/include/opencv/cxcore.h	/^    int      index;        \/* the lower bound of certainly visited vertices *\/$/;"	m	struct:CvGraphScanner	access:public
CvGraphScanner::mask	/usr/include/opencv/cxcore.h	/^    int      mask;         \/* event mask *\/$/;"	m	struct:CvGraphScanner	access:public
CvGraphScanner::stack	/usr/include/opencv/cxcore.h	/^    CvSeq*   stack;        \/* the graph vertex stack *\/$/;"	m	struct:CvGraphScanner	access:public
CvGraphScanner::vtx	/usr/include/opencv/cxcore.h	/^    CvGraphVtx* vtx;       \/* current graph vertex (or current edge origin) *\/$/;"	m	struct:CvGraphScanner	access:public
CvGraphVtx	/usr/include/opencv/cxtypes.h	/^CvGraphVtx;$/;"	t	typeref:struct:CvGraphVtx
CvGraphVtx	/usr/include/opencv/cxtypes.h	/^typedef struct CvGraphVtx$/;"	s
CvGraphVtx2D	/usr/include/opencv/cxtypes.h	/^CvGraphVtx2D;$/;"	t	typeref:struct:CvGraphVtx2D
CvGraphVtx2D	/usr/include/opencv/cxtypes.h	/^typedef struct CvGraphVtx2D$/;"	s
CvGraphVtx2D::ptr	/usr/include/opencv/cxtypes.h	/^    CvPoint2D32f* ptr;$/;"	m	struct:CvGraphVtx2D	access:public
CvGraphWeightType	/usr/include/opencv/cvaux.h	/^typedef enum CvGraphWeightType$/;"	g
CvGraphWeightType	/usr/include/opencv/cvaux.h	/^} CvGraphWeightType;$/;"	t	typeref:enum:CvGraphWeightType
CvGraphWeightedEdge	/usr/include/opencv/cvaux.h	/^CvGraphWeightedEdge;$/;"	t	typeref:struct:CvGraphWeightedEdge
CvGraphWeightedEdge	/usr/include/opencv/cvaux.h	/^typedef struct CvGraphWeightedEdge$/;"	s
CvGraphWeightedVtx	/usr/include/opencv/cvaux.h	/^CvGraphWeightedVtx;$/;"	t	typeref:struct:CvGraphWeightedVtx
CvGraphWeightedVtx	/usr/include/opencv/cvaux.h	/^typedef struct CvGraphWeightedVtx$/;"	s
CvHaarClassifier	/usr/include/opencv/cvtypes.h	/^CvHaarClassifier;$/;"	t	typeref:struct:CvHaarClassifier
CvHaarClassifier	/usr/include/opencv/cvtypes.h	/^typedef struct CvHaarClassifier$/;"	s
CvHaarClassifier::alpha	/usr/include/opencv/cvtypes.h	/^    float* alpha;$/;"	m	struct:CvHaarClassifier	access:public
CvHaarClassifier::count	/usr/include/opencv/cvtypes.h	/^    int count;$/;"	m	struct:CvHaarClassifier	access:public
CvHaarClassifier::haar_feature	/usr/include/opencv/cvtypes.h	/^    CvHaarFeature* haar_feature;$/;"	m	struct:CvHaarClassifier	access:public
CvHaarClassifier::left	/usr/include/opencv/cvtypes.h	/^    int* left;$/;"	m	struct:CvHaarClassifier	access:public
CvHaarClassifier::right	/usr/include/opencv/cvtypes.h	/^    int* right;$/;"	m	struct:CvHaarClassifier	access:public
CvHaarClassifier::threshold	/usr/include/opencv/cvtypes.h	/^    float* threshold;$/;"	m	struct:CvHaarClassifier	access:public
CvHaarClassifierCascade	/usr/include/opencv/cvtypes.h	/^CvHaarClassifierCascade;$/;"	t	typeref:struct:CvHaarClassifierCascade
CvHaarClassifierCascade	/usr/include/opencv/cvtypes.h	/^typedef struct CvHaarClassifierCascade$/;"	s
CvHaarClassifierCascade::count	/usr/include/opencv/cvtypes.h	/^    int  count;$/;"	m	struct:CvHaarClassifierCascade	access:public
CvHaarClassifierCascade::flags	/usr/include/opencv/cvtypes.h	/^    int  flags;$/;"	m	struct:CvHaarClassifierCascade	access:public
CvHaarClassifierCascade::hid_cascade	/usr/include/opencv/cvtypes.h	/^    CvHidHaarClassifierCascade* hid_cascade;$/;"	m	struct:CvHaarClassifierCascade	access:public
CvHaarClassifierCascade::orig_window_size	/usr/include/opencv/cvtypes.h	/^    CvSize orig_window_size;$/;"	m	struct:CvHaarClassifierCascade	access:public
CvHaarClassifierCascade::real_window_size	/usr/include/opencv/cvtypes.h	/^    CvSize real_window_size;$/;"	m	struct:CvHaarClassifierCascade	access:public
CvHaarClassifierCascade::scale	/usr/include/opencv/cvtypes.h	/^    double scale;$/;"	m	struct:CvHaarClassifierCascade	access:public
CvHaarClassifierCascade::stage_classifier	/usr/include/opencv/cvtypes.h	/^    CvHaarStageClassifier* stage_classifier;$/;"	m	struct:CvHaarClassifierCascade	access:public
CvHaarFeature	/usr/include/opencv/cvtypes.h	/^CvHaarFeature;$/;"	t	typeref:struct:CvHaarFeature
CvHaarFeature	/usr/include/opencv/cvtypes.h	/^typedef struct CvHaarFeature$/;"	s
CvHaarFeature::__anon32::r	/usr/include/opencv/cvtypes.h	/^        CvRect r;$/;"	m	struct:CvHaarFeature::__anon32	access:public
CvHaarFeature::__anon32::weight	/usr/include/opencv/cvtypes.h	/^        float weight;$/;"	m	struct:CvHaarFeature::__anon32	access:public
CvHaarFeature::rect	/usr/include/opencv/cvtypes.h	/^    } rect[CV_HAAR_FEATURE_MAX];$/;"	m	struct:CvHaarFeature	typeref:struct:CvHaarFeature::__anon32	access:public
CvHaarFeature::tilted	/usr/include/opencv/cvtypes.h	/^    int  tilted;$/;"	m	struct:CvHaarFeature	access:public
CvHaarStageClassifier	/usr/include/opencv/cvtypes.h	/^CvHaarStageClassifier;$/;"	t	typeref:struct:CvHaarStageClassifier
CvHaarStageClassifier	/usr/include/opencv/cvtypes.h	/^typedef struct CvHaarStageClassifier$/;"	s
CvHaarStageClassifier::child	/usr/include/opencv/cvtypes.h	/^    int child;$/;"	m	struct:CvHaarStageClassifier	access:public
CvHaarStageClassifier::classifier	/usr/include/opencv/cvtypes.h	/^    CvHaarClassifier* classifier;$/;"	m	struct:CvHaarStageClassifier	access:public
CvHaarStageClassifier::count	/usr/include/opencv/cvtypes.h	/^    int  count;$/;"	m	struct:CvHaarStageClassifier	access:public
CvHaarStageClassifier::next	/usr/include/opencv/cvtypes.h	/^    int next;$/;"	m	struct:CvHaarStageClassifier	access:public
CvHaarStageClassifier::parent	/usr/include/opencv/cvtypes.h	/^    int parent;$/;"	m	struct:CvHaarStageClassifier	access:public
CvHaarStageClassifier::threshold	/usr/include/opencv/cvtypes.h	/^    float threshold;$/;"	m	struct:CvHaarStageClassifier	access:public
CvHidHaarClassifierCascade	/usr/include/opencv/cvtypes.h	/^typedef struct CvHidHaarClassifierCascade CvHidHaarClassifierCascade;$/;"	t	typeref:struct:CvHidHaarClassifierCascade
CvHintAlgorithm	/usr/include/opencv/cxmisc.h	/^typedef enum CvHintAlgorithm {$/;"	g
CvHintAlgorithm	/usr/include/opencv/cxmisc.h	/^} CvHintAlgorithm;$/;"	t	typeref:enum:CvHintAlgorithm
CvHistType	/usr/include/opencv/cxtypes.h	/^typedef int CvHistType;$/;"	t
CvHistogram	/usr/include/opencv/cxtypes.h	/^CvHistogram;$/;"	t	typeref:struct:CvHistogram
CvHistogram	/usr/include/opencv/cxtypes.h	/^typedef struct CvHistogram$/;"	s
CvHistogram::bins	/usr/include/opencv/cxtypes.h	/^    CvArr*  bins;$/;"	m	struct:CvHistogram	access:public
CvHistogram::mat	/usr/include/opencv/cxtypes.h	/^    CvMatND mat; \/* embedded matrix header for array histograms *\/$/;"	m	struct:CvHistogram	access:public
CvHistogram::thresh	/usr/include/opencv/cxtypes.h	/^    float   thresh[CV_MAX_DIM][2]; \/* for uniform histograms *\/$/;"	m	struct:CvHistogram	access:public
CvHistogram::thresh2	/usr/include/opencv/cxtypes.h	/^    float** thresh2; \/* for non-uniform histograms *\/$/;"	m	struct:CvHistogram	access:public
CvHistogram::type	/usr/include/opencv/cxtypes.h	/^    int     type;$/;"	m	struct:CvHistogram	access:public
CvHuMoments	/usr/include/opencv/cvtypes.h	/^CvHuMoments;$/;"	t	typeref:struct:CvHuMoments
CvHuMoments	/usr/include/opencv/cvtypes.h	/^typedef struct CvHuMoments$/;"	s
CvHuMoments::hu1	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
CvHuMoments::hu2	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
CvHuMoments::hu3	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
CvHuMoments::hu4	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
CvHuMoments::hu5	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
CvHuMoments::hu6	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
CvHuMoments::hu7	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
CvImage	/usr/include/opencv/cxcore.hpp	/^    CvImage( CvFileStorage* fs, const char* mapname, const char* imgname ) : image(0), refcount(0)$/;"	f	class:CvImage	access:public	signature:( CvFileStorage* fs, const char* mapname, const char* imgname )
CvImage	/usr/include/opencv/cxcore.hpp	/^    CvImage( CvFileStorage* fs, const char* seqname, int idx ) : image(0), refcount(0)$/;"	f	class:CvImage	access:public	signature:( CvFileStorage* fs, const char* seqname, int idx )
CvImage	/usr/include/opencv/cxcore.hpp	/^    CvImage( CvSize size, int depth, int channels )$/;"	f	class:CvImage	access:public	signature:( CvSize size, int depth, int channels )
CvImage	/usr/include/opencv/cxcore.hpp	/^    CvImage( IplImage* img ) : image(img)$/;"	f	class:CvImage	access:public	signature:( IplImage* img )
CvImage	/usr/include/opencv/cxcore.hpp	/^    CvImage( const CvImage& img ) : image(img.image), refcount(img.refcount)$/;"	f	class:CvImage	access:public	signature:( const CvImage& img )
CvImage	/usr/include/opencv/cxcore.hpp	/^    CvImage( const char* filename, const char* imgname=0, int color=-1 ) : image(0), refcount(0)$/;"	f	class:CvImage	access:public	signature:( const char* filename, const char* imgname=0, int color=-1 )
CvImage	/usr/include/opencv/cxcore.hpp	/^    CvImage() : image(0), refcount(0) {}$/;"	f	class:CvImage	access:public	signature:()
CvImage	/usr/include/opencv/cxcore.hpp	/^class CV_EXPORTS CvImage$/;"	c
CvImage::CvImage	/usr/include/opencv/cxcore.hpp	/^    CvImage( CvFileStorage* fs, const char* mapname, const char* imgname ) : image(0), refcount(0)$/;"	f	class:CvImage	access:public	signature:( CvFileStorage* fs, const char* mapname, const char* imgname )
CvImage::CvImage	/usr/include/opencv/cxcore.hpp	/^    CvImage( CvFileStorage* fs, const char* seqname, int idx ) : image(0), refcount(0)$/;"	f	class:CvImage	access:public	signature:( CvFileStorage* fs, const char* seqname, int idx )
CvImage::CvImage	/usr/include/opencv/cxcore.hpp	/^    CvImage( CvSize size, int depth, int channels )$/;"	f	class:CvImage	access:public	signature:( CvSize size, int depth, int channels )
CvImage::CvImage	/usr/include/opencv/cxcore.hpp	/^    CvImage( IplImage* img ) : image(img)$/;"	f	class:CvImage	access:public	signature:( IplImage* img )
CvImage::CvImage	/usr/include/opencv/cxcore.hpp	/^    CvImage( const CvImage& img ) : image(img.image), refcount(img.refcount)$/;"	f	class:CvImage	access:public	signature:( const CvImage& img )
CvImage::CvImage	/usr/include/opencv/cxcore.hpp	/^    CvImage( const char* filename, const char* imgname=0, int color=-1 ) : image(0), refcount(0)$/;"	f	class:CvImage	access:public	signature:( const char* filename, const char* imgname=0, int color=-1 )
CvImage::CvImage	/usr/include/opencv/cxcore.hpp	/^    CvImage() : image(0), refcount(0) {}$/;"	f	class:CvImage	access:public	signature:()
CvImage::attach	/usr/include/opencv/cxcore.hpp	/^    void attach( IplImage* img, bool use_refcount=true )$/;"	f	class:CvImage	access:public	signature:( IplImage* img, bool use_refcount=true )
CvImage::channels	/usr/include/opencv/cxcore.hpp	/^    int channels() const { return image ? image->nChannels : 0; }$/;"	f	class:CvImage	access:public	signature:() const
CvImage::clear	/usr/include/opencv/cxcore.hpp	/^    void clear() { detach(); }$/;"	f	class:CvImage	access:public	signature:()
CvImage::clone	/usr/include/opencv/cxcore.hpp	/^    CvImage clone() { return CvImage(image ? cvCloneImage(image) : 0); }$/;"	f	class:CvImage	access:public	signature:()
CvImage::coi	/usr/include/opencv/cxcore.hpp	/^    int coi() const { return !image || !image->roi ? 0 : image->roi->coi; }$/;"	f	class:CvImage	access:public	signature:() const
CvImage::create	/usr/include/opencv/cxcore.hpp	/^    void create( CvSize size, int depth, int channels )$/;"	f	class:CvImage	access:public	signature:( CvSize size, int depth, int channels )
CvImage::data	/usr/include/opencv/cxcore.hpp	/^    const uchar* data() const { return image ? (const uchar*)image->imageData : 0; }$/;"	f	class:CvImage	access:public	signature:() const
CvImage::data	/usr/include/opencv/cxcore.hpp	/^    uchar* data() { return image ? (uchar*)image->imageData : 0; }$/;"	f	class:CvImage	access:public	signature:()
CvImage::depth	/usr/include/opencv/cxcore.hpp	/^    int depth() const { return image ? image->depth : 0; }$/;"	f	class:CvImage	access:public	signature:() const
CvImage::detach	/usr/include/opencv/cxcore.hpp	/^    void detach()$/;"	f	class:CvImage	access:public	signature:()
CvImage::height	/usr/include/opencv/cxcore.hpp	/^    int height() const { return image ? image->height : 0; }$/;"	f	class:CvImage	access:public	signature:() const
CvImage::image	/usr/include/opencv/cxcore.hpp	/^    IplImage* image;$/;"	m	class:CvImage	access:protected
CvImage::is_valid	/usr/include/opencv/cxcore.hpp	/^    bool is_valid() { return image != 0; }$/;"	f	class:CvImage	access:public	signature:()
CvImage::load	/usr/include/opencv/cxcore.hpp	/^    bool load( const char* filename, const char* imgname=0, int color=-1 );$/;"	p	class:CvImage	access:public	signature:( const char* filename, const char* imgname=0, int color=-1 )
CvImage::operator =	/usr/include/opencv/cxcore.hpp	/^    CvImage& operator = (const CvImage& img)$/;"	f	class:CvImage	access:public	signature:(const CvImage& img)
CvImage::operator IplImage*	/usr/include/opencv/cxcore.hpp	/^    operator IplImage* () { return image; }$/;"	f	class:CvImage	access:public	signature:()
CvImage::operator const IplImage*	/usr/include/opencv/cxcore.hpp	/^    operator const IplImage* () const { return image; }$/;"	f	class:CvImage	access:public	signature:() const
CvImage::origin	/usr/include/opencv/cxcore.hpp	/^    int origin() const { return image ? image->origin : 0; }$/;"	f	class:CvImage	access:public	signature:() const
CvImage::pix_size	/usr/include/opencv/cxcore.hpp	/^    int pix_size() const { return image ? ((image->depth & 255)>>3)*image->nChannels : 0; }$/;"	f	class:CvImage	access:public	signature:() const
CvImage::read	/usr/include/opencv/cxcore.hpp	/^    bool read( CvFileStorage* fs, const char* mapname, const char* imgname );$/;"	p	class:CvImage	access:public	signature:( CvFileStorage* fs, const char* mapname, const char* imgname )
CvImage::read	/usr/include/opencv/cxcore.hpp	/^    bool read( CvFileStorage* fs, const char* seqname, int idx );$/;"	p	class:CvImage	access:public	signature:( CvFileStorage* fs, const char* seqname, int idx )
CvImage::refcount	/usr/include/opencv/cxcore.hpp	/^    int* refcount;$/;"	m	class:CvImage	access:protected
CvImage::release	/usr/include/opencv/cxcore.hpp	/^    void release() { detach(); }$/;"	f	class:CvImage	access:public	signature:()
CvImage::reset_roi	/usr/include/opencv/cxcore.hpp	/^    void reset_roi() { cvResetImageROI(image); }$/;"	f	class:CvImage	access:public	signature:()
CvImage::roi	/usr/include/opencv/cxcore.hpp	/^    CvRect roi() const$/;"	f	class:CvImage	access:public	signature:() const
CvImage::roi_row	/usr/include/opencv/cxcore.hpp	/^    const uchar* roi_row(int y) const$/;"	f	class:CvImage	access:public	signature:(int y) const
CvImage::roi_row	/usr/include/opencv/cxcore.hpp	/^    uchar* roi_row(int y)$/;"	f	class:CvImage	access:public	signature:(int y)
CvImage::roi_size	/usr/include/opencv/cxcore.hpp	/^    CvSize roi_size() const$/;"	f	class:CvImage	access:public	signature:() const
CvImage::save	/usr/include/opencv/cxcore.hpp	/^    void save( const char* filename, const char* imgname );$/;"	p	class:CvImage	access:public	signature:( const char* filename, const char* imgname )
CvImage::set_coi	/usr/include/opencv/cxcore.hpp	/^    void set_coi(int coi) { cvSetImageCOI(image,coi); }$/;"	f	class:CvImage	access:public	signature:(int coi)
CvImage::set_roi	/usr/include/opencv/cxcore.hpp	/^    void set_roi(CvRect roi) { cvSetImageROI(image,roi); }$/;"	f	class:CvImage	access:public	signature:(CvRect roi)
CvImage::show	/usr/include/opencv/cxcore.hpp	/^    void show( const char* window_name );$/;"	p	class:CvImage	access:public	signature:( const char* window_name )
CvImage::size	/usr/include/opencv/cxcore.hpp	/^    CvSize size() const { return image ? cvSize(image->width, image->height) : cvSize(0,0); }$/;"	f	class:CvImage	access:public	signature:() const
CvImage::step	/usr/include/opencv/cxcore.hpp	/^    int step() const { return image ? image->widthStep : 0; }$/;"	f	class:CvImage	access:public	signature:() const
CvImage::width	/usr/include/opencv/cxcore.hpp	/^    int width() const { return image ? image->width : 0; }$/;"	f	class:CvImage	access:public	signature:() const
CvImage::write	/usr/include/opencv/cxcore.hpp	/^    void write( CvFileStorage* fs, const char* imgname );$/;"	p	class:CvImage	access:public	signature:( CvFileStorage* fs, const char* imgname )
CvImage::~CvImage	/usr/include/opencv/cxcore.hpp	/^    ~CvImage()$/;"	f	class:CvImage	access:public	signature:()
CvImageDrawer	/usr/include/opencv/cvvidsurv.hpp	/^    CvImageDrawer() : m_image(0) {}$/;"	f	class:CvImageDrawer	access:public	signature:()
CvImageDrawer	/usr/include/opencv/cvvidsurv.hpp	/^class CV_EXPORTS CvImageDrawer$/;"	c
CvImageDrawer::CvImageDrawer	/usr/include/opencv/cvvidsurv.hpp	/^    CvImageDrawer() : m_image(0) {}$/;"	f	class:CvImageDrawer	access:public	signature:()
CvImageDrawer::Draw	/usr/include/opencv/cvvidsurv.hpp	/^    IplImage* Draw( const CvArr* src, CvBlobSeq* blob_seq = 0, const CvSeq* roi_seq = 0 );$/;"	p	class:CvImageDrawer	access:public	signature:( const CvArr* src, CvBlobSeq* blob_seq = 0, const CvSeq* roi_seq = 0 )
CvImageDrawer::GetImage	/usr/include/opencv/cvvidsurv.hpp	/^    IplImage* GetImage() { return m_image; }$/;"	f	class:CvImageDrawer	access:public	signature:()
CvImageDrawer::SetShapes	/usr/include/opencv/cvvidsurv.hpp	/^    void SetShapes( const CvDrawShape* shapes, int num );$/;"	p	class:CvImageDrawer	access:public	signature:( const CvDrawShape* shapes, int num )
CvImageDrawer::m_image	/usr/include/opencv/cvvidsurv.hpp	/^    IplImage* m_image;    $/;"	m	class:CvImageDrawer	access:protected
CvImageDrawer::m_shape	/usr/include/opencv/cvvidsurv.hpp	/^    CvDrawShape m_shape[16];$/;"	m	class:CvImageDrawer	access:protected
CvImageDrawer::~CvImageDrawer	/usr/include/opencv/cvvidsurv.hpp	/^    ~CvImageDrawer() { cvReleaseImage( &m_image ); }$/;"	f	class:CvImageDrawer	access:public	signature:()
CvImgObsInfo	/usr/include/opencv/cvaux.h	/^CvImgObsInfo;\/*struct for 1 image*\/$/;"	t	typeref:struct:CvImgObsInfo
CvImgObsInfo	/usr/include/opencv/cvaux.h	/^typedef struct CvImgObsInfo$/;"	s
CvImgObsInfo::mix	/usr/include/opencv/cvaux.h	/^    int* mix;  \/* number of mixture to which observation belong *\/$/;"	m	struct:CvImgObsInfo	access:public
CvImgObsInfo::obs	/usr/include/opencv/cvaux.h	/^    float* obs;\/\/consequtive observations$/;"	m	struct:CvImgObsInfo	access:public
CvImgObsInfo::obs_size	/usr/include/opencv/cvaux.h	/^    int obs_size;$/;"	m	struct:CvImgObsInfo	access:public
CvImgObsInfo::obs_x	/usr/include/opencv/cvaux.h	/^    int obs_x;$/;"	m	struct:CvImgObsInfo	access:public
CvImgObsInfo::obs_y	/usr/include/opencv/cvaux.h	/^    int obs_y;$/;"	m	struct:CvImgObsInfo	access:public
CvImgObsInfo::state	/usr/include/opencv/cvaux.h	/^    int* state;\/* arr of pairs superstate\/state to which observation belong *\/$/;"	m	struct:CvImgObsInfo	access:public
CvInput	/usr/include/opencv/cvaux.h	/^CvInput;$/;"	t	typeref:union:__anon1
CvIsInstanceFunc	/usr/include/opencv/cxtypes.h	/^typedef int (CV_CDECL *CvIsInstanceFunc)( const void* struct_ptr );$/;"	t
CvKNearest	/usr/include/opencv/ml.h	/^    CvKNearest( const CvMat* _train_data, const CvMat* _responses,$/;"	p	class:CvKNearest	access:public	signature:( const CvMat* _train_data, const CvMat* _responses, const CvMat* _sample_idx=0, bool _is_regression=false, int max_k=32 )
CvKNearest	/usr/include/opencv/ml.h	/^    CvKNearest();$/;"	p	class:CvKNearest	access:public	signature:()
CvKNearest	/usr/include/opencv/ml.h	/^class CV_EXPORTS CvKNearest : public CvStatModel$/;"	c
CvKNearest::CvKNearest	/usr/include/opencv/ml.h	/^    CvKNearest( const CvMat* _train_data, const CvMat* _responses,$/;"	p	class:CvKNearest	access:public	signature:( const CvMat* _train_data, const CvMat* _responses, const CvMat* _sample_idx=0, bool _is_regression=false, int max_k=32 )
CvKNearest::CvKNearest	/usr/include/opencv/ml.h	/^    CvKNearest();$/;"	p	class:CvKNearest	access:public	signature:()
CvKNearest::clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	class:CvKNearest	access:public	signature:()
CvKNearest::find_nearest	/usr/include/opencv/ml.h	/^    virtual float find_nearest( const CvMat* _samples, int k, CvMat* results=0,$/;"	p	class:CvKNearest	access:public	signature:( const CvMat* _samples, int k, CvMat* results=0, const float** neighbors=0, CvMat* neighbor_responses=0, CvMat* dist=0 ) const
CvKNearest::find_neighbors_direct	/usr/include/opencv/ml.h	/^    virtual void find_neighbors_direct( const CvMat* _samples, int k, int start, int end,$/;"	p	class:CvKNearest	access:protected	signature:( const CvMat* _samples, int k, int start, int end, float* neighbor_responses, const float** neighbors, float* dist ) const
CvKNearest::get_max_k	/usr/include/opencv/ml.h	/^    int get_max_k() const;$/;"	p	class:CvKNearest	access:public	signature:() const
CvKNearest::get_sample_count	/usr/include/opencv/ml.h	/^    int get_sample_count() const;$/;"	p	class:CvKNearest	access:public	signature:() const
CvKNearest::get_var_count	/usr/include/opencv/ml.h	/^    int get_var_count() const;$/;"	p	class:CvKNearest	access:public	signature:() const
CvKNearest::is_regression	/usr/include/opencv/ml.h	/^    bool is_regression() const;$/;"	p	class:CvKNearest	access:public	signature:() const
CvKNearest::max_k	/usr/include/opencv/ml.h	/^    int max_k, var_count;$/;"	m	class:CvKNearest	access:protected
CvKNearest::regression	/usr/include/opencv/ml.h	/^    bool regression;$/;"	m	class:CvKNearest	access:protected
CvKNearest::samples	/usr/include/opencv/ml.h	/^    CvVectors* samples;$/;"	m	class:CvKNearest	access:protected
CvKNearest::total	/usr/include/opencv/ml.h	/^    int total;$/;"	m	class:CvKNearest	access:protected
CvKNearest::train	/usr/include/opencv/ml.h	/^    virtual bool train( const CvMat* _train_data, const CvMat* _responses,$/;"	p	class:CvKNearest	access:public	signature:( const CvMat* _train_data, const CvMat* _responses, const CvMat* _sample_idx=0, bool is_regression=false, int _max_k=32, bool _update_base=false )
CvKNearest::var_count	/usr/include/opencv/ml.h	/^    int max_k, var_count;$/;"	m	class:CvKNearest	access:protected
CvKNearest::write_results	/usr/include/opencv/ml.h	/^    virtual float write_results( int k, int k1, int start, int end,$/;"	p	class:CvKNearest	access:protected	signature:( int k, int k1, int start, int end, const float* neighbor_responses, const float* dist, CvMat* _results, CvMat* _neighbor_responses, CvMat* _dist, Cv32suf* sort_buf ) const
CvKNearest::~CvKNearest	/usr/include/opencv/ml.h	/^    virtual ~CvKNearest();$/;"	p	class:CvKNearest	access:public	signature:()
CvKalman	/usr/include/opencv/cvtypes.h	/^CvKalman;$/;"	t	typeref:struct:CvKalman
CvKalman	/usr/include/opencv/cvtypes.h	/^typedef struct CvKalman$/;"	s
CvKalman::CP	/usr/include/opencv/cvtypes.h	/^    int CP;                     \/* number of control vector dimensions *\/$/;"	m	struct:CvKalman	access:public
CvKalman::DP	/usr/include/opencv/cvtypes.h	/^    int DP;                     \/* number of state vector dimensions *\/$/;"	m	struct:CvKalman	access:public
CvKalman::DynamMatr	/usr/include/opencv/cvtypes.h	/^    float* DynamMatr;           \/* =transition_matrix->data.fl *\/$/;"	m	struct:CvKalman	access:public
CvKalman::KalmGainMatr	/usr/include/opencv/cvtypes.h	/^    float* KalmGainMatr;        \/* =gain->data.fl *\/$/;"	m	struct:CvKalman	access:public
CvKalman::MNCovariance	/usr/include/opencv/cvtypes.h	/^    float* MNCovariance;        \/* =measurement_noise_cov->data.fl *\/$/;"	m	struct:CvKalman	access:public
CvKalman::MP	/usr/include/opencv/cvtypes.h	/^    int MP;                     \/* number of measurement vector dimensions *\/$/;"	m	struct:CvKalman	access:public
CvKalman::MeasurementMatr	/usr/include/opencv/cvtypes.h	/^    float* MeasurementMatr;     \/* =measurement_matrix->data.fl *\/$/;"	m	struct:CvKalman	access:public
CvKalman::PNCovariance	/usr/include/opencv/cvtypes.h	/^    float* PNCovariance;        \/* =process_noise_cov->data.fl *\/$/;"	m	struct:CvKalman	access:public
CvKalman::PosterErrorCovariance	/usr/include/opencv/cvtypes.h	/^    float* PosterErrorCovariance;\/* =error_cov_post->data.fl *\/$/;"	m	struct:CvKalman	access:public
CvKalman::PosterState	/usr/include/opencv/cvtypes.h	/^    float* PosterState;         \/* =state_pre->data.fl *\/$/;"	m	struct:CvKalman	access:public
CvKalman::PriorErrorCovariance	/usr/include/opencv/cvtypes.h	/^    float* PriorErrorCovariance;\/* =error_cov_pre->data.fl *\/$/;"	m	struct:CvKalman	access:public
CvKalman::PriorState	/usr/include/opencv/cvtypes.h	/^    float* PriorState;          \/* =state_post->data.fl *\/$/;"	m	struct:CvKalman	access:public
CvKalman::Temp1	/usr/include/opencv/cvtypes.h	/^    float* Temp1;               \/* temp1->data.fl *\/$/;"	m	struct:CvKalman	access:public
CvKalman::Temp2	/usr/include/opencv/cvtypes.h	/^    float* Temp2;               \/* temp2->data.fl *\/$/;"	m	struct:CvKalman	access:public
CvKalman::control_matrix	/usr/include/opencv/cvtypes.h	/^    CvMat* control_matrix;      \/* control matrix (B)$/;"	m	struct:CvKalman	access:public
CvKalman::error_cov_post	/usr/include/opencv/cvtypes.h	/^    CvMat* error_cov_post;      \/* posteriori error estimate covariance matrix (P(k)):$/;"	m	struct:CvKalman	access:public
CvKalman::error_cov_pre	/usr/include/opencv/cvtypes.h	/^    CvMat* error_cov_pre;       \/* priori error estimate covariance matrix (P'(k)):$/;"	m	struct:CvKalman	access:public
CvKalman::gain	/usr/include/opencv/cvtypes.h	/^    CvMat* gain;                \/* Kalman gain matrix (K(k)):$/;"	m	struct:CvKalman	access:public
CvKalman::measurement_matrix	/usr/include/opencv/cvtypes.h	/^    CvMat* measurement_matrix;  \/* measurement matrix (H) *\/$/;"	m	struct:CvKalman	access:public
CvKalman::measurement_noise_cov	/usr/include/opencv/cvtypes.h	/^    CvMat* measurement_noise_cov; \/* measurement noise covariance matrix (R) *\/$/;"	m	struct:CvKalman	access:public
CvKalman::process_noise_cov	/usr/include/opencv/cvtypes.h	/^    CvMat* process_noise_cov;   \/* process noise covariance matrix (Q) *\/$/;"	m	struct:CvKalman	access:public
CvKalman::state_post	/usr/include/opencv/cvtypes.h	/^    CvMat* state_post;          \/* corrected state (x(k)):$/;"	m	struct:CvKalman	access:public
CvKalman::state_pre	/usr/include/opencv/cvtypes.h	/^    CvMat* state_pre;           \/* predicted state (x'(k)):$/;"	m	struct:CvKalman	access:public
CvKalman::temp1	/usr/include/opencv/cvtypes.h	/^    CvMat* temp1;               \/* temporary matrices *\/$/;"	m	struct:CvKalman	access:public
CvKalman::temp2	/usr/include/opencv/cvtypes.h	/^    CvMat* temp2;$/;"	m	struct:CvKalman	access:public
CvKalman::temp3	/usr/include/opencv/cvtypes.h	/^    CvMat* temp3;$/;"	m	struct:CvKalman	access:public
CvKalman::temp4	/usr/include/opencv/cvtypes.h	/^    CvMat* temp4;$/;"	m	struct:CvKalman	access:public
CvKalman::temp5	/usr/include/opencv/cvtypes.h	/^    CvMat* temp5;$/;"	m	struct:CvKalman	access:public
CvKalman::transition_matrix	/usr/include/opencv/cvtypes.h	/^    CvMat* transition_matrix;   \/* state transition matrix (A) *\/$/;"	m	struct:CvKalman	access:public
CvLCMEdge	/usr/include/opencv/cvaux.h	/^typedef struct CvLCMEdge$/;"	s
CvLCMEdge	/usr/include/opencv/cvaux.h	/^} CvLCMEdge;$/;"	t	typeref:struct:CvLCMEdge
CvLCMEdge::chain	/usr/include/opencv/cvaux.h	/^    CvSeq* chain;$/;"	m	struct:CvLCMEdge	access:public
CvLCMEdge::index1	/usr/include/opencv/cvaux.h	/^    int index1;$/;"	m	struct:CvLCMEdge	access:public
CvLCMEdge::index2	/usr/include/opencv/cvaux.h	/^    int index2;$/;"	m	struct:CvLCMEdge	access:public
CvLCMEdge::width	/usr/include/opencv/cvaux.h	/^    float width;$/;"	m	struct:CvLCMEdge	access:public
CvLCMNode	/usr/include/opencv/cvaux.h	/^typedef struct CvLCMNode$/;"	s
CvLCMNode	/usr/include/opencv/cvaux.h	/^} CvLCMNode;$/;"	t	typeref:struct:CvLCMNode
CvLCMNode::contour	/usr/include/opencv/cvaux.h	/^    CvContour* contour; $/;"	m	struct:CvLCMNode	access:public
CvLaplaceFilter	/usr/include/opencv/cv.hpp	/^    CvLaplaceFilter( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvLaplaceFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, bool _normalized, int _ksize, int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
CvLaplaceFilter	/usr/include/opencv/cv.hpp	/^    CvLaplaceFilter();$/;"	p	class:CvLaplaceFilter	access:public	signature:()
CvLaplaceFilter	/usr/include/opencv/cv.hpp	/^class CV_EXPORTS CvLaplaceFilter : public CvSepFilter$/;"	c
CvLaplaceFilter::CvLaplaceFilter	/usr/include/opencv/cv.hpp	/^    CvLaplaceFilter( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvLaplaceFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, bool _normalized, int _ksize, int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
CvLaplaceFilter::CvLaplaceFilter	/usr/include/opencv/cv.hpp	/^    CvLaplaceFilter();$/;"	p	class:CvLaplaceFilter	access:public	signature:()
CvLaplaceFilter::basic_laplacian	/usr/include/opencv/cv.hpp	/^    bool basic_laplacian;$/;"	m	class:CvLaplaceFilter	access:protected
CvLaplaceFilter::get_work_params	/usr/include/opencv/cv.hpp	/^    void get_work_params();$/;"	p	class:CvLaplaceFilter	access:protected	signature:()
CvLaplaceFilter::init	/usr/include/opencv/cv.hpp	/^    virtual void init( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvLaplaceFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, bool _is_separable, CvSize _ksize, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
CvLaplaceFilter::init	/usr/include/opencv/cv.hpp	/^    virtual void init( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvLaplaceFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, bool _normalized, int _ksize, int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
CvLaplaceFilter::init	/usr/include/opencv/cv.hpp	/^    virtual void init( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvLaplaceFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, const CvMat* _kx, const CvMat* _ky, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
CvLaplaceFilter::is_basic_laplacian	/usr/include/opencv/cv.hpp	/^    bool is_basic_laplacian() const { return basic_laplacian; }$/;"	f	class:CvLaplaceFilter	access:public	signature:() const
CvLaplaceFilter::is_normalized	/usr/include/opencv/cv.hpp	/^    bool is_normalized() const { return normalized; }$/;"	f	class:CvLaplaceFilter	access:public	signature:() const
CvLaplaceFilter::normalized	/usr/include/opencv/cv.hpp	/^    bool normalized;$/;"	m	class:CvLaplaceFilter	access:protected
CvLaplaceFilter::~CvLaplaceFilter	/usr/include/opencv/cv.hpp	/^    virtual ~CvLaplaceFilter();$/;"	p	class:CvLaplaceFilter	access:public	signature:()
CvLeeParameters	/usr/include/opencv/cvaux.h	/^typedef enum CvLeeParameters$/;"	g
CvLeeParameters	/usr/include/opencv/cvaux.h	/^} CvLeeParameters;$/;"	t	typeref:enum:CvLeeParameters
CvLineIterator	/usr/include/opencv/cxtypes.h	/^CvLineIterator;$/;"	t	typeref:struct:CvLineIterator
CvLineIterator	/usr/include/opencv/cxtypes.h	/^typedef struct CvLineIterator$/;"	s
CvLineIterator::err	/usr/include/opencv/cxtypes.h	/^    int  err;$/;"	m	struct:CvLineIterator	access:public
CvLineIterator::minus_delta	/usr/include/opencv/cxtypes.h	/^    int  minus_delta;$/;"	m	struct:CvLineIterator	access:public
CvLineIterator::minus_step	/usr/include/opencv/cxtypes.h	/^    int  minus_step;$/;"	m	struct:CvLineIterator	access:public
CvLineIterator::plus_delta	/usr/include/opencv/cxtypes.h	/^    int  plus_delta;$/;"	m	struct:CvLineIterator	access:public
CvLineIterator::plus_step	/usr/include/opencv/cxtypes.h	/^    int  plus_step;$/;"	m	struct:CvLineIterator	access:public
CvLineIterator::ptr	/usr/include/opencv/cxtypes.h	/^    uchar* ptr;$/;"	m	struct:CvLineIterator	access:public
CvLinearFilter	/usr/include/opencv/cv.hpp	/^    CvLinearFilter( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvLinearFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, const CvMat* _kernel, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
CvLinearFilter	/usr/include/opencv/cv.hpp	/^    CvLinearFilter();$/;"	p	class:CvLinearFilter	access:public	signature:()
CvLinearFilter	/usr/include/opencv/cv.hpp	/^class CV_EXPORTS CvLinearFilter : public CvBaseImageFilter$/;"	c
CvLinearFilter::CvLinearFilter	/usr/include/opencv/cv.hpp	/^    CvLinearFilter( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvLinearFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, const CvMat* _kernel, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
CvLinearFilter::CvLinearFilter	/usr/include/opencv/cv.hpp	/^    CvLinearFilter();$/;"	p	class:CvLinearFilter	access:public	signature:()
CvLinearFilter::clear	/usr/include/opencv/cv.hpp	/^    virtual void clear();$/;"	p	class:CvLinearFilter	access:public	signature:()
CvLinearFilter::get_kernel	/usr/include/opencv/cv.hpp	/^    const CvMat* get_kernel() const { return kernel; }$/;"	f	class:CvLinearFilter	access:public	signature:() const
CvLinearFilter::get_kernel_sparse_buf	/usr/include/opencv/cv.hpp	/^    uchar* get_kernel_sparse_buf() { return k_sparse; }$/;"	f	class:CvLinearFilter	access:public	signature:()
CvLinearFilter::get_kernel_sparse_count	/usr/include/opencv/cv.hpp	/^    int get_kernel_sparse_count() const { return k_sparse_count; }$/;"	f	class:CvLinearFilter	access:public	signature:() const
CvLinearFilter::init	/usr/include/opencv/cv.hpp	/^    virtual void init( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvLinearFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, bool _is_separable, CvSize _ksize, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
CvLinearFilter::init	/usr/include/opencv/cv.hpp	/^    virtual void init( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvLinearFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, const CvMat* _kernel, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
CvLinearFilter::k_sparse	/usr/include/opencv/cv.hpp	/^    uchar* k_sparse;$/;"	m	class:CvLinearFilter	access:protected
CvLinearFilter::k_sparse_count	/usr/include/opencv/cv.hpp	/^    int k_sparse_count;$/;"	m	class:CvLinearFilter	access:protected
CvLinearFilter::kernel	/usr/include/opencv/cv.hpp	/^    CvMat *kernel;$/;"	m	class:CvLinearFilter	access:protected
CvLinearFilter::~CvLinearFilter	/usr/include/opencv/cv.hpp	/^    virtual ~CvLinearFilter();$/;"	p	class:CvLinearFilter	access:public	signature:()
CvLoadImageFunc	/usr/include/opencv/cxcore.hpp	/^typedef IplImage* (CV_CDECL * CvLoadImageFunc)( const char* filename, int colorness );$/;"	t
CvLoadImageMFunc	/usr/include/opencv/cxcore.hpp	/^typedef CvMat* (CV_CDECL * CvLoadImageMFunc)( const char* filename, int colorness );$/;"	t
CvMat	/usr/include/opencv/cxtypes.h	/^CvMat;$/;"	t	typeref:struct:CvMat
CvMat	/usr/include/opencv/cxtypes.h	/^typedef struct CvMat$/;"	s
CvMat::__anon13::db	/usr/include/opencv/cxtypes.h	/^        double* db;$/;"	m	union:CvMat::__anon13	access:public
CvMat::__anon13::fl	/usr/include/opencv/cxtypes.h	/^        float* fl;$/;"	m	union:CvMat::__anon13	access:public
CvMat::__anon13::i	/usr/include/opencv/cxtypes.h	/^        int* i;$/;"	m	union:CvMat::__anon13	access:public
CvMat::__anon13::ptr	/usr/include/opencv/cxtypes.h	/^        uchar* ptr;$/;"	m	union:CvMat::__anon13	access:public
CvMat::__anon13::s	/usr/include/opencv/cxtypes.h	/^        short* s;$/;"	m	union:CvMat::__anon13	access:public
CvMat::__anon14::height	/usr/include/opencv/cxtypes.h	/^        int height;$/;"	m	union:CvMat::__anon14	access:public
CvMat::__anon14::rows	/usr/include/opencv/cxtypes.h	/^        int rows;$/;"	m	union:CvMat::__anon14	access:public
CvMat::__anon15::cols	/usr/include/opencv/cxtypes.h	/^        int cols;$/;"	m	union:CvMat::__anon15	access:public
CvMat::__anon15::width	/usr/include/opencv/cxtypes.h	/^        int width;$/;"	m	union:CvMat::__anon15	access:public
CvMat::cols	/usr/include/opencv/cxtypes.h	/^    int cols;$/;"	m	struct:CvMat	access:public
CvMat::data	/usr/include/opencv/cxtypes.h	/^    } data;$/;"	m	struct:CvMat	typeref:union:CvMat::__anon13	access:public
CvMat::hdr_refcount	/usr/include/opencv/cxtypes.h	/^    int hdr_refcount;$/;"	m	struct:CvMat	access:public
CvMat::refcount	/usr/include/opencv/cxtypes.h	/^    int* refcount;$/;"	m	struct:CvMat	access:public
CvMat::rows	/usr/include/opencv/cxtypes.h	/^    int rows;$/;"	m	struct:CvMat	access:public
CvMat::step	/usr/include/opencv/cxtypes.h	/^    int step;$/;"	m	struct:CvMat	access:public
CvMat::type	/usr/include/opencv/cxtypes.h	/^    int type;$/;"	m	struct:CvMat	access:public
CvMatArray	/usr/include/opencv/cvcompat.h	63;"	d
CvMatND	/usr/include/opencv/cxtypes.h	/^CvMatND;$/;"	t	typeref:struct:CvMatND
CvMatND	/usr/include/opencv/cxtypes.h	/^typedef struct CvMatND$/;"	s
CvMatND::__anon16::db	/usr/include/opencv/cxtypes.h	/^        double* db;$/;"	m	union:CvMatND::__anon16	access:public
CvMatND::__anon16::fl	/usr/include/opencv/cxtypes.h	/^        float* fl;$/;"	m	union:CvMatND::__anon16	access:public
CvMatND::__anon16::i	/usr/include/opencv/cxtypes.h	/^        int* i;$/;"	m	union:CvMatND::__anon16	access:public
CvMatND::__anon16::ptr	/usr/include/opencv/cxtypes.h	/^        uchar* ptr;$/;"	m	union:CvMatND::__anon16	access:public
CvMatND::__anon16::s	/usr/include/opencv/cxtypes.h	/^        short* s;$/;"	m	union:CvMatND::__anon16	access:public
CvMatND::__anon17::size	/usr/include/opencv/cxtypes.h	/^        int size;$/;"	m	struct:CvMatND::__anon17	access:public
CvMatND::__anon17::step	/usr/include/opencv/cxtypes.h	/^        int step;$/;"	m	struct:CvMatND::__anon17	access:public
CvMatND::data	/usr/include/opencv/cxtypes.h	/^    } data;$/;"	m	struct:CvMatND	typeref:union:CvMatND::__anon16	access:public
CvMatND::dim	/usr/include/opencv/cxtypes.h	/^    dim[CV_MAX_DIM];$/;"	m	struct:CvMatND	typeref:struct:CvMatND::__anon17	access:public
CvMatND::dims	/usr/include/opencv/cxtypes.h	/^    int dims;$/;"	m	struct:CvMatND	access:public
CvMatND::hdr_refcount	/usr/include/opencv/cxtypes.h	/^    int hdr_refcount;$/;"	m	struct:CvMatND	access:public
CvMatND::refcount	/usr/include/opencv/cxtypes.h	/^    int* refcount;$/;"	m	struct:CvMatND	access:public
CvMatND::type	/usr/include/opencv/cxtypes.h	/^    int type;$/;"	m	struct:CvMatND	access:public
CvMatType	/usr/include/opencv/cvcompat.h	61;"	d
CvMatr32f	/usr/include/opencv/cvtypes.h	/^typedef float*   CvMatr32f;$/;"	t
CvMatr64d	/usr/include/opencv/cvtypes.h	/^typedef double*  CvMatr64d;$/;"	t
CvMatrix	/usr/include/opencv/cxcore.hpp	/^    CvMatrix( CvFileStorage* fs, const char* mapname, const char* matname ) : matrix(0)$/;"	f	class:CvMatrix	access:public	signature:( CvFileStorage* fs, const char* mapname, const char* matname )
CvMatrix	/usr/include/opencv/cxcore.hpp	/^    CvMatrix( CvFileStorage* fs, const char* seqname, int idx ) : matrix(0)$/;"	f	class:CvMatrix	access:public	signature:( CvFileStorage* fs, const char* seqname, int idx )
CvMatrix	/usr/include/opencv/cxcore.hpp	/^    CvMatrix( CvMat* m )$/;"	f	class:CvMatrix	access:public	signature:( CvMat* m )
CvMatrix	/usr/include/opencv/cxcore.hpp	/^    CvMatrix( const CvMatrix& m )$/;"	f	class:CvMatrix	access:public	signature:( const CvMatrix& m )
CvMatrix	/usr/include/opencv/cxcore.hpp	/^    CvMatrix( const char* filename, const char* matname=0, int color=-1 ) : matrix(0)$/;"	f	class:CvMatrix	access:public	signature:( const char* filename, const char* matname=0, int color=-1 )
CvMatrix	/usr/include/opencv/cxcore.hpp	/^    CvMatrix( int rows, int cols, int type )$/;"	f	class:CvMatrix	access:public	signature:( int rows, int cols, int type )
CvMatrix	/usr/include/opencv/cxcore.hpp	/^    CvMatrix( int rows, int cols, int type, CvMat* hdr,$/;"	f	class:CvMatrix	access:public	signature:( int rows, int cols, int type, CvMat* hdr, void* data=0, int step=CV_AUTOSTEP )
CvMatrix	/usr/include/opencv/cxcore.hpp	/^    CvMatrix( int rows, int cols, int type, CvMemStorage* storage, bool alloc_data=true );$/;"	p	class:CvMatrix	access:public	signature:( int rows, int cols, int type, CvMemStorage* storage, bool alloc_data=true )
CvMatrix	/usr/include/opencv/cxcore.hpp	/^    CvMatrix( int rows, int cols, int type, void* data, int step=CV_AUTOSTEP )$/;"	f	class:CvMatrix	access:public	signature:( int rows, int cols, int type, void* data, int step=CV_AUTOSTEP )
CvMatrix	/usr/include/opencv/cxcore.hpp	/^    CvMatrix() : matrix(0) {}$/;"	f	class:CvMatrix	access:public	signature:()
CvMatrix	/usr/include/opencv/cxcore.hpp	/^class CV_EXPORTS CvMatrix$/;"	c
CvMatrix3	/usr/include/opencv/cvtypes.h	/^CvMatrix3;$/;"	t	typeref:struct:CvMatrix3
CvMatrix3	/usr/include/opencv/cvtypes.h	/^typedef struct CvMatrix3$/;"	s
CvMatrix3::m	/usr/include/opencv/cvtypes.h	/^    float m[3][3];$/;"	m	struct:CvMatrix3	access:public
CvMatrix::CvMatrix	/usr/include/opencv/cxcore.hpp	/^    CvMatrix( CvFileStorage* fs, const char* mapname, const char* matname ) : matrix(0)$/;"	f	class:CvMatrix	access:public	signature:( CvFileStorage* fs, const char* mapname, const char* matname )
CvMatrix::CvMatrix	/usr/include/opencv/cxcore.hpp	/^    CvMatrix( CvFileStorage* fs, const char* seqname, int idx ) : matrix(0)$/;"	f	class:CvMatrix	access:public	signature:( CvFileStorage* fs, const char* seqname, int idx )
CvMatrix::CvMatrix	/usr/include/opencv/cxcore.hpp	/^    CvMatrix( CvMat* m )$/;"	f	class:CvMatrix	access:public	signature:( CvMat* m )
CvMatrix::CvMatrix	/usr/include/opencv/cxcore.hpp	/^    CvMatrix( const CvMatrix& m )$/;"	f	class:CvMatrix	access:public	signature:( const CvMatrix& m )
CvMatrix::CvMatrix	/usr/include/opencv/cxcore.hpp	/^    CvMatrix( const char* filename, const char* matname=0, int color=-1 ) : matrix(0)$/;"	f	class:CvMatrix	access:public	signature:( const char* filename, const char* matname=0, int color=-1 )
CvMatrix::CvMatrix	/usr/include/opencv/cxcore.hpp	/^    CvMatrix( int rows, int cols, int type )$/;"	f	class:CvMatrix	access:public	signature:( int rows, int cols, int type )
CvMatrix::CvMatrix	/usr/include/opencv/cxcore.hpp	/^    CvMatrix( int rows, int cols, int type, CvMat* hdr,$/;"	f	class:CvMatrix	access:public	signature:( int rows, int cols, int type, CvMat* hdr, void* data=0, int step=CV_AUTOSTEP )
CvMatrix::CvMatrix	/usr/include/opencv/cxcore.hpp	/^    CvMatrix( int rows, int cols, int type, CvMemStorage* storage, bool alloc_data=true );$/;"	p	class:CvMatrix	access:public	signature:( int rows, int cols, int type, CvMemStorage* storage, bool alloc_data=true )
CvMatrix::CvMatrix	/usr/include/opencv/cxcore.hpp	/^    CvMatrix( int rows, int cols, int type, void* data, int step=CV_AUTOSTEP )$/;"	f	class:CvMatrix	access:public	signature:( int rows, int cols, int type, void* data, int step=CV_AUTOSTEP )
CvMatrix::CvMatrix	/usr/include/opencv/cxcore.hpp	/^    CvMatrix() : matrix(0) {}$/;"	f	class:CvMatrix	access:public	signature:()
CvMatrix::addref	/usr/include/opencv/cxcore.hpp	/^    void addref() const$/;"	f	class:CvMatrix	access:public	signature:() const
CvMatrix::channels	/usr/include/opencv/cxcore.hpp	/^    int channels() const { return matrix ? CV_MAT_CN(matrix->type) : 0; }$/;"	f	class:CvMatrix	access:public	signature:() const
CvMatrix::clear	/usr/include/opencv/cxcore.hpp	/^    void clear()$/;"	f	class:CvMatrix	access:public	signature:()
CvMatrix::clone	/usr/include/opencv/cxcore.hpp	/^    CvMatrix clone() { return CvMatrix(matrix ? cvCloneMat(matrix) : 0); }$/;"	f	class:CvMatrix	access:public	signature:()
CvMatrix::cols	/usr/include/opencv/cxcore.hpp	/^    int cols() const { return matrix ? matrix->cols : 0; }$/;"	f	class:CvMatrix	access:public	signature:() const
CvMatrix::create	/usr/include/opencv/cxcore.hpp	/^    void create( int rows, int cols, int type )$/;"	f	class:CvMatrix	access:public	signature:( int rows, int cols, int type )
CvMatrix::data	/usr/include/opencv/cxcore.hpp	/^    const uchar* data() const { return matrix ? matrix->data.ptr : 0; }$/;"	f	class:CvMatrix	access:public	signature:() const
CvMatrix::data	/usr/include/opencv/cxcore.hpp	/^    uchar* data() { return matrix ? matrix->data.ptr : 0; }$/;"	f	class:CvMatrix	access:public	signature:()
CvMatrix::depth	/usr/include/opencv/cxcore.hpp	/^    int depth() const { return matrix ? CV_MAT_DEPTH(matrix->type) : 0; }$/;"	f	class:CvMatrix	access:public	signature:() const
CvMatrix::is_valid	/usr/include/opencv/cxcore.hpp	/^    bool is_valid() { return matrix != 0; }$/;"	f	class:CvMatrix	access:public	signature:()
CvMatrix::load	/usr/include/opencv/cxcore.hpp	/^    bool load( const char* filename, const char* matname=0, int color=-1 );$/;"	p	class:CvMatrix	access:public	signature:( const char* filename, const char* matname=0, int color=-1 )
CvMatrix::matrix	/usr/include/opencv/cxcore.hpp	/^    CvMat* matrix;$/;"	m	class:CvMatrix	access:protected
CvMatrix::operator =	/usr/include/opencv/cxcore.hpp	/^    CvMatrix& operator = (const CvMatrix& _m)$/;"	f	class:CvMatrix	access:public	signature:(const CvMatrix& _m)
CvMatrix::operator CvMat*	/usr/include/opencv/cxcore.hpp	/^    operator CvMat* () { return matrix; }$/;"	f	class:CvMatrix	access:public	signature:()
CvMatrix::operator const CvMat*	/usr/include/opencv/cxcore.hpp	/^    operator const CvMat* () const { return matrix; }$/;"	f	class:CvMatrix	access:public	signature:() const
CvMatrix::pix_size	/usr/include/opencv/cxcore.hpp	/^    int pix_size() const { return matrix ? CV_ELEM_SIZE(matrix->type) : 0; }$/;"	f	class:CvMatrix	access:public	signature:() const
CvMatrix::read	/usr/include/opencv/cxcore.hpp	/^    bool read( CvFileStorage* fs, const char* mapname, const char* matname );$/;"	p	class:CvMatrix	access:public	signature:( CvFileStorage* fs, const char* mapname, const char* matname )
CvMatrix::read	/usr/include/opencv/cxcore.hpp	/^    bool read( CvFileStorage* fs, const char* seqname, int idx );$/;"	p	class:CvMatrix	access:public	signature:( CvFileStorage* fs, const char* seqname, int idx )
CvMatrix::release	/usr/include/opencv/cxcore.hpp	/^    void release()$/;"	f	class:CvMatrix	access:public	signature:()
CvMatrix::row	/usr/include/opencv/cxcore.hpp	/^    const uchar* row(int i) const$/;"	f	class:CvMatrix	access:public	signature:(int i) const
CvMatrix::row	/usr/include/opencv/cxcore.hpp	/^    uchar* row(int i) { return !matrix ? 0 : matrix->data.ptr + i*matrix->step; }$/;"	f	class:CvMatrix	access:public	signature:(int i)
CvMatrix::rows	/usr/include/opencv/cxcore.hpp	/^    int rows() const { return matrix ? matrix->rows : 0; }$/;"	f	class:CvMatrix	access:public	signature:() const
CvMatrix::save	/usr/include/opencv/cxcore.hpp	/^    void save( const char* filename, const char* matname );$/;"	p	class:CvMatrix	access:public	signature:( const char* filename, const char* matname )
CvMatrix::set	/usr/include/opencv/cxcore.hpp	/^    void set( CvMat* m, bool add_ref )$/;"	f	class:CvMatrix	access:public	signature:( CvMat* m, bool add_ref )
CvMatrix::set_data	/usr/include/opencv/cxcore.hpp	/^    void set_data( void* data, int step=CV_AUTOSTEP )$/;"	f	class:CvMatrix	access:public	signature:( void* data, int step=CV_AUTOSTEP )
CvMatrix::show	/usr/include/opencv/cxcore.hpp	/^    void show( const char* window_name );$/;"	p	class:CvMatrix	access:public	signature:( const char* window_name )
CvMatrix::size	/usr/include/opencv/cxcore.hpp	/^    CvSize size() const$/;"	f	class:CvMatrix	access:public	signature:() const
CvMatrix::step	/usr/include/opencv/cxcore.hpp	/^    int step() const { return matrix ? matrix->step : 0; }$/;"	f	class:CvMatrix	access:public	signature:() const
CvMatrix::type	/usr/include/opencv/cxcore.hpp	/^    int type() const { return matrix ? CV_MAT_TYPE(matrix->type) : 0; }$/;"	f	class:CvMatrix	access:public	signature:() const
CvMatrix::write	/usr/include/opencv/cxcore.hpp	/^    void write( CvFileStorage* fs, const char* matname );$/;"	p	class:CvMatrix	access:public	signature:( CvFileStorage* fs, const char* matname )
CvMatrix::~CvMatrix	/usr/include/opencv/cxcore.hpp	/^    ~CvMatrix()$/;"	f	class:CvMatrix	access:public	signature:()
CvMemBlock	/usr/include/opencv/cxtypes.h	/^CvMemBlock;$/;"	t	typeref:struct:CvMemBlock
CvMemBlock	/usr/include/opencv/cxtypes.h	/^typedef struct CvMemBlock$/;"	s
CvMemBlock::next	/usr/include/opencv/cxtypes.h	/^    struct CvMemBlock*  next;$/;"	m	struct:CvMemBlock	typeref:struct:CvMemBlock::CvMemBlock	access:public
CvMemBlock::prev	/usr/include/opencv/cxtypes.h	/^    struct CvMemBlock*  prev;$/;"	m	struct:CvMemBlock	typeref:struct:CvMemBlock::CvMemBlock	access:public
CvMemStorage	/usr/include/opencv/cxtypes.h	/^CvMemStorage;$/;"	t	typeref:struct:CvMemStorage
CvMemStorage	/usr/include/opencv/cxtypes.h	/^typedef struct CvMemStorage$/;"	s
CvMemStorage::block_size	/usr/include/opencv/cxtypes.h	/^    int block_size;  \/* block size *\/$/;"	m	struct:CvMemStorage	access:public
CvMemStorage::bottom	/usr/include/opencv/cxtypes.h	/^    CvMemBlock* bottom;\/* first allocated block *\/$/;"	m	struct:CvMemStorage	access:public
CvMemStorage::free_space	/usr/include/opencv/cxtypes.h	/^    int free_space;  \/* free space in the current block *\/$/;"	m	struct:CvMemStorage	access:public
CvMemStorage::parent	/usr/include/opencv/cxtypes.h	/^    struct  CvMemStorage* parent; \/* borrows new blocks from *\/$/;"	m	struct:CvMemStorage	typeref:struct:CvMemStorage::CvMemStorage	access:public
CvMemStorage::signature	/usr/include/opencv/cxtypes.h	/^    int signature;$/;"	m	struct:CvMemStorage	access:public
CvMemStorage::top	/usr/include/opencv/cxtypes.h	/^    CvMemBlock* top;   \/* current memory block - top of the stack *\/$/;"	m	struct:CvMemStorage	access:public
CvMemStoragePos	/usr/include/opencv/cxtypes.h	/^CvMemStoragePos;$/;"	t	typeref:struct:CvMemStoragePos
CvMemStoragePos	/usr/include/opencv/cxtypes.h	/^typedef struct CvMemStoragePos$/;"	s
CvMemStoragePos::free_space	/usr/include/opencv/cxtypes.h	/^    int free_space;$/;"	m	struct:CvMemStoragePos	access:public
CvMemStoragePos::top	/usr/include/opencv/cxtypes.h	/^    CvMemBlock* top;$/;"	m	struct:CvMemStoragePos	access:public
CvModule	/usr/include/opencv/cxcore.hpp	/^    CvModule( CvModuleInfo* _info );$/;"	p	struct:CvModule	access:public	signature:( CvModuleInfo* _info )
CvModule	/usr/include/opencv/cxcore.hpp	/^struct CV_EXPORTS CvModule$/;"	s
CvModule::CvModule	/usr/include/opencv/cxcore.hpp	/^    CvModule( CvModuleInfo* _info );$/;"	p	struct:CvModule	access:public	signature:( CvModuleInfo* _info )
CvModule::first	/usr/include/opencv/cxcore.hpp	/^    static CvModuleInfo* first;$/;"	m	struct:CvModule	access:public
CvModule::info	/usr/include/opencv/cxcore.hpp	/^    CvModuleInfo* info;$/;"	m	struct:CvModule	access:public
CvModule::last	/usr/include/opencv/cxcore.hpp	/^    static CvModuleInfo* last;$/;"	m	struct:CvModule	access:public
CvModule::~CvModule	/usr/include/opencv/cxcore.hpp	/^    ~CvModule();$/;"	p	struct:CvModule	access:public	signature:()
CvModuleInfo	/usr/include/opencv/cxtypes.h	/^CvModuleInfo;$/;"	t	typeref:struct:CvModuleInfo
CvModuleInfo	/usr/include/opencv/cxtypes.h	/^typedef struct CvModuleInfo$/;"	s
CvModuleInfo::func_tab	/usr/include/opencv/cxtypes.h	/^    CvPluginFuncInfo* func_tab;$/;"	m	struct:CvModuleInfo	access:public
CvModuleInfo::name	/usr/include/opencv/cxtypes.h	/^    const char* name;$/;"	m	struct:CvModuleInfo	access:public
CvModuleInfo::next	/usr/include/opencv/cxtypes.h	/^    struct CvModuleInfo* next;$/;"	m	struct:CvModuleInfo	typeref:struct:CvModuleInfo::CvModuleInfo	access:public
CvModuleInfo::version	/usr/include/opencv/cxtypes.h	/^    const char* version;$/;"	m	struct:CvModuleInfo	access:public
CvMoments	/usr/include/opencv/cvtypes.h	/^CvMoments;$/;"	t	typeref:struct:CvMoments
CvMoments	/usr/include/opencv/cvtypes.h	/^typedef struct CvMoments$/;"	s
CvMoments::inv_sqrt_m00	/usr/include/opencv/cvtypes.h	/^    double  inv_sqrt_m00; \/* m00 != 0 ? 1\/sqrt(m00) : 0 *\/$/;"	m	struct:CvMoments	access:public
CvMoments::m00	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::m01	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::m02	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::m03	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::m10	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::m11	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::m12	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::m20	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::m21	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::m30	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::mu02	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::mu03	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::mu11	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::mu12	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::mu20	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::mu21	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::mu30	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
CvMorphOp	/usr/include/opencv/cvcompat.h	75;"	d
CvMorphology	/usr/include/opencv/cv.hpp	/^    CvMorphology( int _operation, int _max_width, int _src_dst_type,$/;"	p	class:CvMorphology	access:public	signature:( int _operation, int _max_width, int _src_dst_type, int _element_shape, CvMat* _element, CvSize _ksize=cvSize(0,0), CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
CvMorphology	/usr/include/opencv/cv.hpp	/^    CvMorphology();$/;"	p	class:CvMorphology	access:public	signature:()
CvMorphology	/usr/include/opencv/cv.hpp	/^class CV_EXPORTS CvMorphology : public CvBaseImageFilter$/;"	c
CvMorphology::BINARY	/usr/include/opencv/cv.hpp	/^    enum { RECT=0, CROSS=1, ELLIPSE=2, CUSTOM=100, BINARY = 0, GRAYSCALE=256 };$/;"	e	enum:CvMorphology::__anon11
CvMorphology::CROSS	/usr/include/opencv/cv.hpp	/^    enum { RECT=0, CROSS=1, ELLIPSE=2, CUSTOM=100, BINARY = 0, GRAYSCALE=256 };$/;"	e	enum:CvMorphology::__anon11
CvMorphology::CUSTOM	/usr/include/opencv/cv.hpp	/^    enum { RECT=0, CROSS=1, ELLIPSE=2, CUSTOM=100, BINARY = 0, GRAYSCALE=256 };$/;"	e	enum:CvMorphology::__anon11
CvMorphology::CvMorphology	/usr/include/opencv/cv.hpp	/^    CvMorphology( int _operation, int _max_width, int _src_dst_type,$/;"	p	class:CvMorphology	access:public	signature:( int _operation, int _max_width, int _src_dst_type, int _element_shape, CvMat* _element, CvSize _ksize=cvSize(0,0), CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
CvMorphology::CvMorphology	/usr/include/opencv/cv.hpp	/^    CvMorphology();$/;"	p	class:CvMorphology	access:public	signature:()
CvMorphology::DILATE	/usr/include/opencv/cv.hpp	/^    enum { ERODE=0, DILATE=1 };$/;"	e	enum:CvMorphology::__anon12
CvMorphology::ELLIPSE	/usr/include/opencv/cv.hpp	/^    enum { RECT=0, CROSS=1, ELLIPSE=2, CUSTOM=100, BINARY = 0, GRAYSCALE=256 };$/;"	e	enum:CvMorphology::__anon11
CvMorphology::ERODE	/usr/include/opencv/cv.hpp	/^    enum { ERODE=0, DILATE=1 };$/;"	e	enum:CvMorphology::__anon12
CvMorphology::GRAYSCALE	/usr/include/opencv/cv.hpp	/^    enum { RECT=0, CROSS=1, ELLIPSE=2, CUSTOM=100, BINARY = 0, GRAYSCALE=256 };$/;"	e	enum:CvMorphology::__anon11
CvMorphology::RECT	/usr/include/opencv/cv.hpp	/^    enum { RECT=0, CROSS=1, ELLIPSE=2, CUSTOM=100, BINARY = 0, GRAYSCALE=256 };$/;"	e	enum:CvMorphology::__anon11
CvMorphology::clear	/usr/include/opencv/cv.hpp	/^    virtual void clear();$/;"	p	class:CvMorphology	access:public	signature:()
CvMorphology::el_shape	/usr/include/opencv/cv.hpp	/^    int el_shape;$/;"	m	class:CvMorphology	access:protected
CvMorphology::el_sparse	/usr/include/opencv/cv.hpp	/^    uchar* el_sparse;$/;"	m	class:CvMorphology	access:protected
CvMorphology::el_sparse_count	/usr/include/opencv/cv.hpp	/^    int el_sparse_count;$/;"	m	class:CvMorphology	access:protected
CvMorphology::element	/usr/include/opencv/cv.hpp	/^    CvMat *element;$/;"	m	class:CvMorphology	access:protected
CvMorphology::fill_cyclic_buffer	/usr/include/opencv/cv.hpp	/^    int fill_cyclic_buffer( const uchar* src, int src_step,$/;"	p	class:CvMorphology	access:protected	signature:( const uchar* src, int src_step, int y0, int y1, int y2 )
CvMorphology::get_element	/usr/include/opencv/cv.hpp	/^    const CvMat* get_element() const { return element; }$/;"	f	class:CvMorphology	access:public	signature:() const
CvMorphology::get_element_shape	/usr/include/opencv/cv.hpp	/^    int get_element_shape() const { return el_shape; }$/;"	f	class:CvMorphology	access:public	signature:() const
CvMorphology::get_element_sparse_buf	/usr/include/opencv/cv.hpp	/^    uchar* get_element_sparse_buf() { return el_sparse; }$/;"	f	class:CvMorphology	access:public	signature:()
CvMorphology::get_element_sparse_count	/usr/include/opencv/cv.hpp	/^    int get_element_sparse_count() const { return el_sparse_count; }$/;"	f	class:CvMorphology	access:public	signature:() const
CvMorphology::get_operation	/usr/include/opencv/cv.hpp	/^    int get_operation() const { return operation; }$/;"	f	class:CvMorphology	access:public	signature:() const
CvMorphology::init	/usr/include/opencv/cv.hpp	/^    virtual void init( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvMorphology	access:public	signature:( int _max_width, int _src_type, int _dst_type, bool _is_separable, CvSize _ksize, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
CvMorphology::init	/usr/include/opencv/cv.hpp	/^    virtual void init( int _operation, int _max_width, int _src_dst_type,$/;"	p	class:CvMorphology	access:public	signature:( int _operation, int _max_width, int _src_dst_type, int _element_shape, CvMat* _element, CvSize _ksize=cvSize(0,0), CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
CvMorphology::init_binary_element	/usr/include/opencv/cv.hpp	/^    static void init_binary_element( CvMat* _element, int _element_shape,$/;"	p	class:CvMorphology	access:public	signature:( CvMat* _element, int _element_shape, CvPoint _anchor=cvPoint(-1,-1) )
CvMorphology::operation	/usr/include/opencv/cv.hpp	/^    int operation;$/;"	m	class:CvMorphology	access:protected
CvMorphology::start_process	/usr/include/opencv/cv.hpp	/^    void start_process( CvSlice x_range, int width );$/;"	p	class:CvMorphology	access:protected	signature:( CvSlice x_range, int width )
CvMorphology::~CvMorphology	/usr/include/opencv/cv.hpp	/^    virtual ~CvMorphology();$/;"	p	class:CvMorphology	access:public	signature:()
CvMouseCallback	/usr/include/opencv/highgui.h	/^typedef void (CV_CDECL *CvMouseCallback )(int event, int x, int y, int flags, void* param);$/;"	t
CvNArrayIterator	/usr/include/opencv/cxcore.h	/^CvNArrayIterator;$/;"	t	typeref:struct:CvNArrayIterator
CvNArrayIterator	/usr/include/opencv/cxcore.h	/^typedef struct CvNArrayIterator$/;"	s
CvNArrayIterator::count	/usr/include/opencv/cxcore.h	/^    int count; \/* number of arrays *\/$/;"	m	struct:CvNArrayIterator	access:public
CvNArrayIterator::dims	/usr/include/opencv/cxcore.h	/^    int dims; \/* number of dimensions to iterate *\/$/;"	m	struct:CvNArrayIterator	access:public
CvNArrayIterator::hdr	/usr/include/opencv/cxcore.h	/^    CvMatND* hdr[CV_MAX_ARR]; \/* pointers to the headers of the$/;"	m	struct:CvNArrayIterator	access:public
CvNArrayIterator::ptr	/usr/include/opencv/cxcore.h	/^    uchar* ptr[CV_MAX_ARR]; \/* pointers to the array slices *\/$/;"	m	struct:CvNArrayIterator	access:public
CvNArrayIterator::size	/usr/include/opencv/cxcore.h	/^    CvSize size; \/* maximal common linear size: { width = size, height = 1 } *\/$/;"	m	struct:CvNArrayIterator	access:public
CvNArrayIterator::stack	/usr/include/opencv/cxcore.h	/^    int stack[CV_MAX_DIM]; \/* for internal use *\/$/;"	m	struct:CvNArrayIterator	access:public
CvNextEdgeType	/usr/include/opencv/cvtypes.h	/^CvNextEdgeType;$/;"	t	typeref:enum:CvNextEdgeType
CvNextEdgeType	/usr/include/opencv/cvtypes.h	/^typedef enum CvNextEdgeType$/;"	g
CvNormalBayesClassifier	/usr/include/opencv/ml.h	/^    CvNormalBayesClassifier( const CvMat* _train_data, const CvMat* _responses,$/;"	p	class:CvNormalBayesClassifier	access:public	signature:( const CvMat* _train_data, const CvMat* _responses, const CvMat* _var_idx=0, const CvMat* _sample_idx=0 )
CvNormalBayesClassifier	/usr/include/opencv/ml.h	/^    CvNormalBayesClassifier();$/;"	p	class:CvNormalBayesClassifier	access:public	signature:()
CvNormalBayesClassifier	/usr/include/opencv/ml.h	/^class CV_EXPORTS CvNormalBayesClassifier : public CvStatModel$/;"	c
CvNormalBayesClassifier::CvNormalBayesClassifier	/usr/include/opencv/ml.h	/^    CvNormalBayesClassifier( const CvMat* _train_data, const CvMat* _responses,$/;"	p	class:CvNormalBayesClassifier	access:public	signature:( const CvMat* _train_data, const CvMat* _responses, const CvMat* _var_idx=0, const CvMat* _sample_idx=0 )
CvNormalBayesClassifier::CvNormalBayesClassifier	/usr/include/opencv/ml.h	/^    CvNormalBayesClassifier();$/;"	p	class:CvNormalBayesClassifier	access:public	signature:()
CvNormalBayesClassifier::avg	/usr/include/opencv/ml.h	/^    CvMat** avg;$/;"	m	class:CvNormalBayesClassifier	access:protected
CvNormalBayesClassifier::c	/usr/include/opencv/ml.h	/^    CvMat*  c;$/;"	m	class:CvNormalBayesClassifier	access:protected
CvNormalBayesClassifier::clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	class:CvNormalBayesClassifier	access:public	signature:()
CvNormalBayesClassifier::cls_labels	/usr/include/opencv/ml.h	/^    CvMat*  cls_labels;$/;"	m	class:CvNormalBayesClassifier	access:protected
CvNormalBayesClassifier::count	/usr/include/opencv/ml.h	/^    CvMat** count;$/;"	m	class:CvNormalBayesClassifier	access:protected
CvNormalBayesClassifier::cov_rotate_mats	/usr/include/opencv/ml.h	/^    CvMat** cov_rotate_mats;$/;"	m	class:CvNormalBayesClassifier	access:protected
CvNormalBayesClassifier::inv_eigen_values	/usr/include/opencv/ml.h	/^    CvMat** inv_eigen_values;$/;"	m	class:CvNormalBayesClassifier	access:protected
CvNormalBayesClassifier::predict	/usr/include/opencv/ml.h	/^    virtual float predict( const CvMat* _samples, CvMat* results=0 ) const;$/;"	p	class:CvNormalBayesClassifier	access:public	signature:( const CvMat* _samples, CvMat* results=0 ) const
CvNormalBayesClassifier::productsum	/usr/include/opencv/ml.h	/^    CvMat** productsum;$/;"	m	class:CvNormalBayesClassifier	access:protected
CvNormalBayesClassifier::read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* storage, CvFileNode* node );$/;"	p	class:CvNormalBayesClassifier	access:public	signature:( CvFileStorage* storage, CvFileNode* node )
CvNormalBayesClassifier::sum	/usr/include/opencv/ml.h	/^    CvMat** sum;$/;"	m	class:CvNormalBayesClassifier	access:protected
CvNormalBayesClassifier::train	/usr/include/opencv/ml.h	/^    virtual bool train( const CvMat* _train_data, const CvMat* _responses,$/;"	p	class:CvNormalBayesClassifier	access:public	signature:( const CvMat* _train_data, const CvMat* _responses, const CvMat* _var_idx = 0, const CvMat* _sample_idx=0, bool update=false )
CvNormalBayesClassifier::var_all	/usr/include/opencv/ml.h	/^    int     var_count, var_all;$/;"	m	class:CvNormalBayesClassifier	access:protected
CvNormalBayesClassifier::var_count	/usr/include/opencv/ml.h	/^    int     var_count, var_all;$/;"	m	class:CvNormalBayesClassifier	access:protected
CvNormalBayesClassifier::var_idx	/usr/include/opencv/ml.h	/^    CvMat*  var_idx;$/;"	m	class:CvNormalBayesClassifier	access:protected
CvNormalBayesClassifier::write	/usr/include/opencv/ml.h	/^    virtual void write( CvFileStorage* storage, const char* name );$/;"	p	class:CvNormalBayesClassifier	access:public	signature:( CvFileStorage* storage, const char* name )
CvNormalBayesClassifier::~CvNormalBayesClassifier	/usr/include/opencv/ml.h	/^    virtual ~CvNormalBayesClassifier();$/;"	p	class:CvNormalBayesClassifier	access:public	signature:()
CvObjectDetector	/usr/include/opencv/cvvidsurv.hpp	/^    CvObjectDetector( const char* \/*detector_file_name*\/ = 0 ) {};$/;"	f	class:CvObjectDetector	access:public	signature:( const char* = 0 )
CvObjectDetector	/usr/include/opencv/cvvidsurv.hpp	/^class CV_EXPORTS CvObjectDetector$/;"	c
CvObjectDetector::CvObjectDetector	/usr/include/opencv/cvvidsurv.hpp	/^    CvObjectDetector( const char* \/*detector_file_name*\/ = 0 ) {};$/;"	f	class:CvObjectDetector	access:public	signature:( const char* = 0 )
CvObjectDetector::Detect	/usr/include/opencv/cvvidsurv.hpp	/^    void Detect( const CvArr* \/*img*\/, \/* out *\/ CvBlobSeq* \/*detected_blob_seq*\/ = 0 ) {};$/;"	f	class:CvObjectDetector	access:public	signature:( const CvArr* , CvBlobSeq* = 0 )
CvObjectDetector::GetMaxBorderSize	/usr/include/opencv/cvvidsurv.hpp	/^    int GetMaxBorderSize() const { return 0; }$/;"	f	class:CvObjectDetector	access:public	signature:() const
CvObjectDetector::GetMinWindowSize	/usr/include/opencv/cvvidsurv.hpp	/^    CvSize GetMinWindowSize() const { return cvSize(0,0); }$/;"	f	class:CvObjectDetector	access:public	signature:() const
CvObjectDetector::Load	/usr/include/opencv/cvvidsurv.hpp	/^    bool Load( const char* \/*detector_file_name*\/ = 0 ) { return false; }$/;"	f	class:CvObjectDetector	access:public	signature:( const char* = 0 )
CvObjectDetector::impl	/usr/include/opencv/cvvidsurv.hpp	/^    class CvObjectDetectorImpl* impl;$/;"	m	class:CvObjectDetector	typeref:class:CvObjectDetector::CvObjectDetectorImpl	access:protected
CvObjectDetector::~CvObjectDetector	/usr/include/opencv/cvvidsurv.hpp	/^    ~CvObjectDetector() {};$/;"	f	class:CvObjectDetector	access:public	signature:()
CvPOSITObject	/usr/include/opencv/cv.h	/^typedef struct CvPOSITObject CvPOSITObject;$/;"	t	typeref:struct:CvPOSITObject
CvPair32s32f	/usr/include/opencv/ml.h	/^struct CvPair32s32f$/;"	s
CvPair32s32f::i	/usr/include/opencv/ml.h	/^    int i;$/;"	m	struct:CvPair32s32f	access:public
CvPair32s32f::val	/usr/include/opencv/ml.h	/^    float val;$/;"	m	struct:CvPair32s32f	access:public
CvPixelPosition32f	/usr/include/opencv/cvcompat.h	/^} CvPixelPosition32f;$/;"	t	typeref:struct:_CvPixelPosition32f
CvPixelPosition8s	/usr/include/opencv/cvcompat.h	/^} CvPixelPosition8s;$/;"	t	typeref:struct:_CvPixelPosition8s
CvPixelPosition8u	/usr/include/opencv/cvcompat.h	/^} CvPixelPosition8u;$/;"	t	typeref:struct:_CvPixelPosition8u
CvPluginFuncInfo	/usr/include/opencv/cxtypes.h	/^CvPluginFuncInfo;$/;"	t	typeref:struct:CvPluginFuncInfo
CvPluginFuncInfo	/usr/include/opencv/cxtypes.h	/^typedef struct CvPluginFuncInfo$/;"	s
CvPluginFuncInfo::default_func_addr	/usr/include/opencv/cxtypes.h	/^    void* default_func_addr;$/;"	m	struct:CvPluginFuncInfo	access:public
CvPluginFuncInfo::func_addr	/usr/include/opencv/cxtypes.h	/^    void** func_addr;$/;"	m	struct:CvPluginFuncInfo	access:public
CvPluginFuncInfo::func_names	/usr/include/opencv/cxtypes.h	/^    const char* func_names;$/;"	m	struct:CvPluginFuncInfo	access:public
CvPluginFuncInfo::loaded_from	/usr/include/opencv/cxtypes.h	/^    int loaded_from;$/;"	m	struct:CvPluginFuncInfo	access:public
CvPluginFuncInfo::search_modules	/usr/include/opencv/cxtypes.h	/^    int search_modules;$/;"	m	struct:CvPluginFuncInfo	access:public
CvPoint	/usr/include/opencv/cxtypes.h	/^CvPoint;$/;"	t	typeref:struct:CvPoint
CvPoint	/usr/include/opencv/cxtypes.h	/^typedef struct CvPoint$/;"	s
CvPoint2D32f	/usr/include/opencv/cxtypes.h	/^CvPoint2D32f;$/;"	t	typeref:struct:CvPoint2D32f
CvPoint2D32f	/usr/include/opencv/cxtypes.h	/^typedef struct CvPoint2D32f$/;"	s
CvPoint2D32f::x	/usr/include/opencv/cxtypes.h	/^    float x;$/;"	m	struct:CvPoint2D32f	access:public
CvPoint2D32f::y	/usr/include/opencv/cxtypes.h	/^    float y;$/;"	m	struct:CvPoint2D32f	access:public
CvPoint2D64d	/usr/include/opencv/cvcompat.h	78;"	d
CvPoint2D64f	/usr/include/opencv/cxtypes.h	/^CvPoint2D64f;$/;"	t	typeref:struct:CvPoint2D64f
CvPoint2D64f	/usr/include/opencv/cxtypes.h	/^typedef struct CvPoint2D64f$/;"	s
CvPoint2D64f::x	/usr/include/opencv/cxtypes.h	/^    double x;$/;"	m	struct:CvPoint2D64f	access:public
CvPoint2D64f::y	/usr/include/opencv/cxtypes.h	/^    double y;$/;"	m	struct:CvPoint2D64f	access:public
CvPoint2DSeq	/usr/include/opencv/cxtypes.h	/^typedef CvContour CvPoint2DSeq;$/;"	t
CvPoint3D32f	/usr/include/opencv/cxtypes.h	/^CvPoint3D32f;$/;"	t	typeref:struct:CvPoint3D32f
CvPoint3D32f	/usr/include/opencv/cxtypes.h	/^typedef struct CvPoint3D32f$/;"	s
CvPoint3D32f::x	/usr/include/opencv/cxtypes.h	/^    float x;$/;"	m	struct:CvPoint3D32f	access:public
CvPoint3D32f::y	/usr/include/opencv/cxtypes.h	/^    float y;$/;"	m	struct:CvPoint3D32f	access:public
CvPoint3D32f::z	/usr/include/opencv/cxtypes.h	/^    float z;$/;"	m	struct:CvPoint3D32f	access:public
CvPoint3D64d	/usr/include/opencv/cvcompat.h	79;"	d
CvPoint3D64f	/usr/include/opencv/cxtypes.h	/^CvPoint3D64f;$/;"	t	typeref:struct:CvPoint3D64f
CvPoint3D64f	/usr/include/opencv/cxtypes.h	/^typedef struct CvPoint3D64f$/;"	s
CvPoint3D64f::x	/usr/include/opencv/cxtypes.h	/^    double x;$/;"	m	struct:CvPoint3D64f	access:public
CvPoint3D64f::y	/usr/include/opencv/cxtypes.h	/^    double y;$/;"	m	struct:CvPoint3D64f	access:public
CvPoint3D64f::z	/usr/include/opencv/cxtypes.h	/^    double z;$/;"	m	struct:CvPoint3D64f	access:public
CvPoint::x	/usr/include/opencv/cxtypes.h	/^    int x;$/;"	m	struct:CvPoint	access:public
CvPoint::y	/usr/include/opencv/cxtypes.h	/^    int y;$/;"	m	struct:CvPoint	access:public
CvPolyApproxMethod	/usr/include/opencv/cvcompat.h	69;"	d
CvProb	/usr/include/opencv/cvvidsurv.hpp	/^class CV_EXPORTS CvProb$/;"	c
CvProb::AddFeature	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void AddFeature(float W, int* comps, int x =0, int y = 0) = 0;$/;"	p	class:CvProb	access:public	signature:(float W, int* comps, int x =0, int y = 0)
CvProb::Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void Release() = 0;$/;"	p	class:CvProb	access:public	signature:()
CvProb::Scale	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void Scale(float factor = 0, int x = -1, int y = -1) = 0;$/;"	p	class:CvProb	access:public	signature:(float factor = 0, int x = -1, int y = -1)
CvProb::Value	/usr/include/opencv/cvvidsurv.hpp	/^    virtual double Value(int* \/*comp*\/, int \/*x*\/ = 0, int \/*y*\/ = 0){return -1;};$/;"	f	class:CvProb	access:public	signature:(int* , int = 0, int = 0)
CvProb::~CvProb	/usr/include/opencv/cvvidsurv.hpp	/^    virtual ~CvProb() {};$/;"	f	class:CvProb	access:public	signature:()
CvQuadEdge2D	/usr/include/opencv/cvtypes.h	/^CvQuadEdge2D;$/;"	t	typeref:struct:CvQuadEdge2D
CvQuadEdge2D	/usr/include/opencv/cvtypes.h	/^typedef struct CvQuadEdge2D$/;"	s
CvRNG	/usr/include/opencv/cxtypes.h	/^typedef uint64 CvRNG;$/;"	t
CvRTParams	/usr/include/opencv/ml.h	/^    CvRTParams( int _max_depth, int _min_sample_count,$/;"	f	struct:CvRTParams	access:public	signature:( int _max_depth, int _min_sample_count, float _regression_accuracy, bool _use_surrogates, int _max_categories, const float* _priors, bool _calc_var_importance, int _nactive_vars, int max_num_of_trees_in_the_forest, float forest_accuracy, int termcrit_type )
CvRTParams	/usr/include/opencv/ml.h	/^    CvRTParams() : CvDTreeParams( 5, 10, 0, false, 10, 0, false, false, 0 ),$/;"	f	struct:CvRTParams	access:public	signature:()
CvRTParams	/usr/include/opencv/ml.h	/^struct CV_EXPORTS CvRTParams : public CvDTreeParams$/;"	s
CvRTParams::CvRTParams	/usr/include/opencv/ml.h	/^    CvRTParams( int _max_depth, int _min_sample_count,$/;"	f	struct:CvRTParams	access:public	signature:( int _max_depth, int _min_sample_count, float _regression_accuracy, bool _use_surrogates, int _max_categories, const float* _priors, bool _calc_var_importance, int _nactive_vars, int max_num_of_trees_in_the_forest, float forest_accuracy, int termcrit_type )
CvRTParams::CvRTParams	/usr/include/opencv/ml.h	/^    CvRTParams() : CvDTreeParams( 5, 10, 0, false, 10, 0, false, false, 0 ),$/;"	f	struct:CvRTParams	access:public	signature:()
CvRTParams::calc_var_importance	/usr/include/opencv/ml.h	/^    bool calc_var_importance; \/\/ true <=> RF processes variable importance$/;"	m	struct:CvRTParams	access:public
CvRTParams::nactive_vars	/usr/include/opencv/ml.h	/^    int nactive_vars;$/;"	m	struct:CvRTParams	access:public
CvRTParams::term_crit	/usr/include/opencv/ml.h	/^    CvTermCriteria term_crit;$/;"	m	struct:CvRTParams	access:public
CvRTrees	/usr/include/opencv/ml.h	/^    CvRTrees();$/;"	p	class:CvRTrees	access:public	signature:()
CvRTrees	/usr/include/opencv/ml.h	/^class CV_EXPORTS CvRTrees : public CvStatModel$/;"	c
CvRTrees::CvRTrees	/usr/include/opencv/ml.h	/^    CvRTrees();$/;"	p	class:CvRTrees	access:public	signature:()
CvRTrees::active_var_mask	/usr/include/opencv/ml.h	/^    CvMat* active_var_mask;$/;"	m	class:CvRTrees	access:protected
CvRTrees::clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	class:CvRTrees	access:public	signature:()
CvRTrees::data	/usr/include/opencv/ml.h	/^    CvDTreeTrainData* data;$/;"	m	class:CvRTrees	access:protected
CvRTrees::get_active_var_mask	/usr/include/opencv/ml.h	/^    CvMat* get_active_var_mask();$/;"	p	class:CvRTrees	access:public	signature:()
CvRTrees::get_proximity	/usr/include/opencv/ml.h	/^    virtual float get_proximity( const CvMat* sample1, const CvMat* sample2,$/;"	p	class:CvRTrees	access:public	signature:( const CvMat* sample1, const CvMat* sample2, const CvMat* missing1 = 0, const CvMat* missing2 = 0 ) const
CvRTrees::get_rng	/usr/include/opencv/ml.h	/^    CvRNG* get_rng();$/;"	p	class:CvRTrees	access:public	signature:()
CvRTrees::get_tree	/usr/include/opencv/ml.h	/^    CvForestTree* get_tree(int i) const;$/;"	p	class:CvRTrees	access:public	signature:(int i) const
CvRTrees::get_tree_count	/usr/include/opencv/ml.h	/^    int get_tree_count() const;$/;"	p	class:CvRTrees	access:public	signature:() const
CvRTrees::get_var_importance	/usr/include/opencv/ml.h	/^    virtual const CvMat* get_var_importance();$/;"	p	class:CvRTrees	access:public	signature:()
CvRTrees::grow_forest	/usr/include/opencv/ml.h	/^    bool grow_forest( const CvTermCriteria term_crit );$/;"	p	class:CvRTrees	access:protected	signature:( const CvTermCriteria term_crit )
CvRTrees::nclasses	/usr/include/opencv/ml.h	/^    int nclasses;$/;"	m	class:CvRTrees	access:protected
CvRTrees::nsamples	/usr/include/opencv/ml.h	/^    int nsamples;$/;"	m	class:CvRTrees	access:protected
CvRTrees::ntrees	/usr/include/opencv/ml.h	/^    int ntrees;$/;"	m	class:CvRTrees	access:protected
CvRTrees::oob_error	/usr/include/opencv/ml.h	/^    double oob_error;$/;"	m	class:CvRTrees	access:protected
CvRTrees::predict	/usr/include/opencv/ml.h	/^    virtual float predict( const CvMat* sample, const CvMat* missing = 0 ) const;$/;"	p	class:CvRTrees	access:public	signature:( const CvMat* sample, const CvMat* missing = 0 ) const
CvRTrees::read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* fs, CvFileNode* node );$/;"	p	class:CvRTrees	access:public	signature:( CvFileStorage* fs, CvFileNode* node )
CvRTrees::rng	/usr/include/opencv/ml.h	/^    CvRNG rng;$/;"	m	class:CvRTrees	access:protected
CvRTrees::train	/usr/include/opencv/ml.h	/^    virtual bool train( const CvMat* _train_data, int _tflag,$/;"	p	class:CvRTrees	access:public	signature:( const CvMat* _train_data, int _tflag, const CvMat* _responses, const CvMat* _var_idx=0, const CvMat* _sample_idx=0, const CvMat* _var_type=0, const CvMat* _missing_mask=0, CvRTParams params=CvRTParams() )
CvRTrees::trees	/usr/include/opencv/ml.h	/^    CvForestTree** trees;$/;"	m	class:CvRTrees	access:protected
CvRTrees::var_importance	/usr/include/opencv/ml.h	/^    CvMat* var_importance;$/;"	m	class:CvRTrees	access:protected
CvRTrees::write	/usr/include/opencv/ml.h	/^    virtual void write( CvFileStorage* fs, const char* name );$/;"	p	class:CvRTrees	access:public	signature:( CvFileStorage* fs, const char* name )
CvRTrees::~CvRTrees	/usr/include/opencv/ml.h	/^    virtual ~CvRTrees();$/;"	p	class:CvRTrees	access:public	signature:()
CvRandState	/usr/include/opencv/cvcompat.h	/^CvRandState;$/;"	t	typeref:struct:CvRandState
CvRandState	/usr/include/opencv/cvcompat.h	/^typedef struct CvRandState$/;"	s
CvRandState::disttype	/usr/include/opencv/cvcompat.h	/^    int       disttype; \/* distribution type *\/$/;"	m	struct:CvRandState	access:public
CvRandState::param	/usr/include/opencv/cvcompat.h	/^    CvScalar  param[2]; \/* parameters of RNG *\/$/;"	m	struct:CvRandState	access:public
CvRandState::state	/usr/include/opencv/cvcompat.h	/^    CvRNG     state;    \/* RNG state (the current seed and carry)*\/$/;"	m	struct:CvRandState	access:public
CvReadFunc	/usr/include/opencv/cxtypes.h	/^typedef void* (CV_CDECL *CvReadFunc)( CvFileStorage* storage, CvFileNode* node );$/;"	t
CvRect	/usr/include/opencv/cxtypes.h	/^CvRect;$/;"	t	typeref:struct:CvRect
CvRect	/usr/include/opencv/cxtypes.h	/^typedef struct CvRect$/;"	s
CvRect::height	/usr/include/opencv/cxtypes.h	/^    int height;$/;"	m	struct:CvRect	access:public
CvRect::width	/usr/include/opencv/cxtypes.h	/^    int width;$/;"	m	struct:CvRect	access:public
CvRect::x	/usr/include/opencv/cxtypes.h	/^    int x;$/;"	m	struct:CvRect	access:public
CvRect::y	/usr/include/opencv/cxtypes.h	/^    int y;$/;"	m	struct:CvRect	access:public
CvRectToRect	/usr/include/opencv/highgui.h	/^CV_INLINE RECT CvRectToRect( CvRect sr )$/;"	f	signature:( CvRect sr )
CvRectToRect	/usr/include/opencv/highgui.h	/^CV_INLINE RECT CvRectToRect( CvRect sr );$/;"	p	signature:( CvRect sr )
CvReleaseBGStatModel	/usr/include/opencv/cvaux.h	/^typedef void (CV_CDECL * CvReleaseBGStatModel)( struct CvBGStatModel** bg_model );$/;"	t
CvReleaseFunc	/usr/include/opencv/cxtypes.h	/^typedef void (CV_CDECL *CvReleaseFunc)( void** struct_dblptr );$/;"	t
CvRodriguesType	/usr/include/opencv/cvcompat.h	73;"	d
CvRowFilterFunc	/usr/include/opencv/cv.hpp	/^typedef void (*CvRowFilterFunc)( const uchar* src, uchar* dst, void* params );$/;"	t
CvSVM	/usr/include/opencv/ml.h	/^    CvSVM( const CvMat* _train_data, const CvMat* _responses,$/;"	p	class:CvSVM	access:public	signature:( const CvMat* _train_data, const CvMat* _responses, const CvMat* _var_idx=0, const CvMat* _sample_idx=0, CvSVMParams _params=CvSVMParams() )
CvSVM	/usr/include/opencv/ml.h	/^    CvSVM();$/;"	p	class:CvSVM	access:public	signature:()
CvSVM	/usr/include/opencv/ml.h	/^class CV_EXPORTS CvSVM : public CvStatModel$/;"	c
CvSVM::C_SVC	/usr/include/opencv/ml.h	/^    enum { C_SVC=100, NU_SVC=101, ONE_CLASS=102, EPS_SVR=103, NU_SVR=104 };$/;"	e	enum:CvSVM::__anon21
CvSVM::CvSVM	/usr/include/opencv/ml.h	/^    CvSVM( const CvMat* _train_data, const CvMat* _responses,$/;"	p	class:CvSVM	access:public	signature:( const CvMat* _train_data, const CvMat* _responses, const CvMat* _var_idx=0, const CvMat* _sample_idx=0, CvSVMParams _params=CvSVMParams() )
CvSVM::CvSVM	/usr/include/opencv/ml.h	/^    CvSVM();$/;"	p	class:CvSVM	access:public	signature:()
CvSVM::EPS_SVR	/usr/include/opencv/ml.h	/^    enum { C_SVC=100, NU_SVC=101, ONE_CLASS=102, EPS_SVR=103, NU_SVR=104 };$/;"	e	enum:CvSVM::__anon21
CvSVM::LINEAR	/usr/include/opencv/ml.h	/^    enum { LINEAR=0, POLY=1, RBF=2, SIGMOID=3 };$/;"	e	enum:CvSVM::__anon22
CvSVM::NU_SVC	/usr/include/opencv/ml.h	/^    enum { C_SVC=100, NU_SVC=101, ONE_CLASS=102, EPS_SVR=103, NU_SVR=104 };$/;"	e	enum:CvSVM::__anon21
CvSVM::NU_SVR	/usr/include/opencv/ml.h	/^    enum { C_SVC=100, NU_SVC=101, ONE_CLASS=102, EPS_SVR=103, NU_SVR=104 };$/;"	e	enum:CvSVM::__anon21
CvSVM::ONE_CLASS	/usr/include/opencv/ml.h	/^    enum { C_SVC=100, NU_SVC=101, ONE_CLASS=102, EPS_SVR=103, NU_SVR=104 };$/;"	e	enum:CvSVM::__anon21
CvSVM::POLY	/usr/include/opencv/ml.h	/^    enum { LINEAR=0, POLY=1, RBF=2, SIGMOID=3 };$/;"	e	enum:CvSVM::__anon22
CvSVM::RBF	/usr/include/opencv/ml.h	/^    enum { LINEAR=0, POLY=1, RBF=2, SIGMOID=3 };$/;"	e	enum:CvSVM::__anon22
CvSVM::SIGMOID	/usr/include/opencv/ml.h	/^    enum { LINEAR=0, POLY=1, RBF=2, SIGMOID=3 };$/;"	e	enum:CvSVM::__anon22
CvSVM::class_labels	/usr/include/opencv/ml.h	/^    CvMat* class_labels;$/;"	m	class:CvSVM	access:protected
CvSVM::class_weights	/usr/include/opencv/ml.h	/^    CvMat* class_weights;$/;"	m	class:CvSVM	access:protected
CvSVM::clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	class:CvSVM	access:public	signature:()
CvSVM::create_kernel	/usr/include/opencv/ml.h	/^    virtual void create_kernel();$/;"	p	class:CvSVM	access:protected	signature:()
CvSVM::create_solver	/usr/include/opencv/ml.h	/^    virtual void create_solver();$/;"	p	class:CvSVM	access:protected	signature:()
CvSVM::decision_func	/usr/include/opencv/ml.h	/^    CvSVMDecisionFunc* decision_func;$/;"	m	class:CvSVM	access:protected
CvSVM::get_support_vector	/usr/include/opencv/ml.h	/^    virtual const float* get_support_vector(int i) const;$/;"	p	class:CvSVM	access:public	signature:(int i) const
CvSVM::get_support_vector_count	/usr/include/opencv/ml.h	/^    virtual int get_support_vector_count() const;$/;"	p	class:CvSVM	access:public	signature:() const
CvSVM::get_var_count	/usr/include/opencv/ml.h	/^    int get_var_count() const { return var_idx ? var_idx->cols : var_all; }$/;"	f	class:CvSVM	access:public	signature:() const
CvSVM::kernel	/usr/include/opencv/ml.h	/^    CvSVMKernel* kernel;$/;"	m	class:CvSVM	access:protected
CvSVM::params	/usr/include/opencv/ml.h	/^    CvSVMParams params;$/;"	m	class:CvSVM	access:protected
CvSVM::predict	/usr/include/opencv/ml.h	/^    virtual float predict( const CvMat* _sample ) const;$/;"	p	class:CvSVM	access:public	signature:( const CvMat* _sample ) const
CvSVM::read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* storage, CvFileNode* node );$/;"	p	class:CvSVM	access:public	signature:( CvFileStorage* storage, CvFileNode* node )
CvSVM::read_params	/usr/include/opencv/ml.h	/^    virtual void read_params( CvFileStorage* fs, CvFileNode* node );$/;"	p	class:CvSVM	access:protected	signature:( CvFileStorage* fs, CvFileNode* node )
CvSVM::set_params	/usr/include/opencv/ml.h	/^    virtual bool set_params( const CvSVMParams& _params );$/;"	p	class:CvSVM	access:protected	signature:( const CvSVMParams& _params )
CvSVM::solver	/usr/include/opencv/ml.h	/^    CvSVMSolver* solver;$/;"	m	class:CvSVM	access:protected
CvSVM::storage	/usr/include/opencv/ml.h	/^    CvMemStorage* storage;$/;"	m	class:CvSVM	access:protected
CvSVM::sv	/usr/include/opencv/ml.h	/^    float** sv;$/;"	m	class:CvSVM	access:protected
CvSVM::sv_total	/usr/include/opencv/ml.h	/^    int sv_total;$/;"	m	class:CvSVM	access:protected
CvSVM::train	/usr/include/opencv/ml.h	/^    virtual bool train( const CvMat* _train_data, const CvMat* _responses,$/;"	p	class:CvSVM	access:public	signature:( const CvMat* _train_data, const CvMat* _responses, const CvMat* _var_idx=0, const CvMat* _sample_idx=0, CvSVMParams _params=CvSVMParams() )
CvSVM::train1	/usr/include/opencv/ml.h	/^    virtual bool train1( int sample_count, int var_count, const float** samples,$/;"	p	class:CvSVM	access:protected	signature:( int sample_count, int var_count, const float** samples, const void* _responses, double Cp, double Cn, CvMemStorage* _storage, double* alpha, double& rho )
CvSVM::var_all	/usr/include/opencv/ml.h	/^    int var_all;$/;"	m	class:CvSVM	access:protected
CvSVM::var_idx	/usr/include/opencv/ml.h	/^    CvMat* var_idx;$/;"	m	class:CvSVM	access:protected
CvSVM::write	/usr/include/opencv/ml.h	/^    virtual void write( CvFileStorage* storage, const char* name );$/;"	p	class:CvSVM	access:public	signature:( CvFileStorage* storage, const char* name )
CvSVM::write_params	/usr/include/opencv/ml.h	/^    virtual void write_params( CvFileStorage* fs );$/;"	p	class:CvSVM	access:protected	signature:( CvFileStorage* fs )
CvSVM::~CvSVM	/usr/include/opencv/ml.h	/^    virtual ~CvSVM();$/;"	p	class:CvSVM	access:public	signature:()
CvSVMDecisionFunc	/usr/include/opencv/ml.h	/^struct CvSVMDecisionFunc$/;"	s
CvSVMDecisionFunc::alpha	/usr/include/opencv/ml.h	/^    double* alpha;$/;"	m	struct:CvSVMDecisionFunc	access:public
CvSVMDecisionFunc::rho	/usr/include/opencv/ml.h	/^    double rho;$/;"	m	struct:CvSVMDecisionFunc	access:public
CvSVMDecisionFunc::sv_count	/usr/include/opencv/ml.h	/^    int sv_count;$/;"	m	struct:CvSVMDecisionFunc	access:public
CvSVMDecisionFunc::sv_index	/usr/include/opencv/ml.h	/^    int* sv_index;$/;"	m	struct:CvSVMDecisionFunc	access:public
CvSVMKernel	/usr/include/opencv/ml.h	/^    CvSVMKernel( const CvSVMParams* _params, Calc _calc_func );$/;"	p	struct:CvSVMKernel	access:public	signature:( const CvSVMParams* _params, Calc _calc_func )
CvSVMKernel	/usr/include/opencv/ml.h	/^    CvSVMKernel();$/;"	p	struct:CvSVMKernel	access:public	signature:()
CvSVMKernel	/usr/include/opencv/ml.h	/^struct CV_EXPORTS CvSVMKernel$/;"	s
CvSVMKernel::Calc	/usr/include/opencv/ml.h	/^    typedef void (CvSVMKernel::*Calc)( int vec_count, int vec_size, const float** vecs,$/;"	t	struct:CvSVMKernel	access:public
CvSVMKernel::CvSVMKernel	/usr/include/opencv/ml.h	/^    CvSVMKernel( const CvSVMParams* _params, Calc _calc_func );$/;"	p	struct:CvSVMKernel	access:public	signature:( const CvSVMParams* _params, Calc _calc_func )
CvSVMKernel::CvSVMKernel	/usr/include/opencv/ml.h	/^    CvSVMKernel();$/;"	p	struct:CvSVMKernel	access:public	signature:()
CvSVMKernel::calc	/usr/include/opencv/ml.h	/^    virtual void calc( int vcount, int n, const float** vecs, const float* another, float* results );$/;"	p	struct:CvSVMKernel	access:public	signature:( int vcount, int n, const float** vecs, const float* another, float* results )
CvSVMKernel::calc_func	/usr/include/opencv/ml.h	/^    Calc calc_func;$/;"	m	struct:CvSVMKernel	access:public
CvSVMKernel::calc_linear	/usr/include/opencv/ml.h	/^    virtual void calc_linear( int vec_count, int vec_size, const float** vecs,$/;"	p	struct:CvSVMKernel	access:public	signature:( int vec_count, int vec_size, const float** vecs, const float* another, float* results )
CvSVMKernel::calc_non_rbf_base	/usr/include/opencv/ml.h	/^    virtual void calc_non_rbf_base( int vec_count, int vec_size, const float** vecs,$/;"	p	struct:CvSVMKernel	access:public	signature:( int vec_count, int vec_size, const float** vecs, const float* another, float* results, double alpha, double beta )
CvSVMKernel::calc_poly	/usr/include/opencv/ml.h	/^    virtual void calc_poly( int vec_count, int vec_size, const float** vecs,$/;"	p	struct:CvSVMKernel	access:public	signature:( int vec_count, int vec_size, const float** vecs, const float* another, float* results )
CvSVMKernel::calc_rbf	/usr/include/opencv/ml.h	/^    virtual void calc_rbf( int vec_count, int vec_size, const float** vecs,$/;"	p	struct:CvSVMKernel	access:public	signature:( int vec_count, int vec_size, const float** vecs, const float* another, float* results )
CvSVMKernel::calc_sigmoid	/usr/include/opencv/ml.h	/^    virtual void calc_sigmoid( int vec_count, int vec_size, const float** vecs,$/;"	p	struct:CvSVMKernel	access:public	signature:( int vec_count, int vec_size, const float** vecs, const float* another, float* results )
CvSVMKernel::clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	struct:CvSVMKernel	access:public	signature:()
CvSVMKernel::create	/usr/include/opencv/ml.h	/^    virtual bool create( const CvSVMParams* _params, Calc _calc_func );$/;"	p	struct:CvSVMKernel	access:public	signature:( const CvSVMParams* _params, Calc _calc_func )
CvSVMKernel::params	/usr/include/opencv/ml.h	/^    const CvSVMParams* params;$/;"	m	struct:CvSVMKernel	access:public
CvSVMKernel::~CvSVMKernel	/usr/include/opencv/ml.h	/^    virtual ~CvSVMKernel();$/;"	p	struct:CvSVMKernel	access:public	signature:()
CvSVMKernelRow	/usr/include/opencv/ml.h	/^struct CvSVMKernelRow$/;"	s
CvSVMKernelRow::data	/usr/include/opencv/ml.h	/^    float* data;$/;"	m	struct:CvSVMKernelRow	access:public
CvSVMKernelRow::next	/usr/include/opencv/ml.h	/^    CvSVMKernelRow* next;$/;"	m	struct:CvSVMKernelRow	access:public
CvSVMKernelRow::prev	/usr/include/opencv/ml.h	/^    CvSVMKernelRow* prev;$/;"	m	struct:CvSVMKernelRow	access:public
CvSVMParams	/usr/include/opencv/ml.h	/^    CvSVMParams( int _svm_type, int _kernel_type,$/;"	p	struct:CvSVMParams	access:public	signature:( int _svm_type, int _kernel_type, double _degree, double _gamma, double _coef0, double _C, double _nu, double _p, CvMat* _class_weights, CvTermCriteria _term_crit )
CvSVMParams	/usr/include/opencv/ml.h	/^    CvSVMParams();$/;"	p	struct:CvSVMParams	access:public	signature:()
CvSVMParams	/usr/include/opencv/ml.h	/^struct CV_EXPORTS CvSVMParams$/;"	s
CvSVMParams::C	/usr/include/opencv/ml.h	/^    double      C;  \/\/ for CV_SVM_C_SVC, CV_SVM_EPS_SVR and CV_SVM_NU_SVR$/;"	m	struct:CvSVMParams	access:public
CvSVMParams::CvSVMParams	/usr/include/opencv/ml.h	/^    CvSVMParams( int _svm_type, int _kernel_type,$/;"	p	struct:CvSVMParams	access:public	signature:( int _svm_type, int _kernel_type, double _degree, double _gamma, double _coef0, double _C, double _nu, double _p, CvMat* _class_weights, CvTermCriteria _term_crit )
CvSVMParams::CvSVMParams	/usr/include/opencv/ml.h	/^    CvSVMParams();$/;"	p	struct:CvSVMParams	access:public	signature:()
CvSVMParams::class_weights	/usr/include/opencv/ml.h	/^    CvMat*      class_weights; \/\/ for CV_SVM_C_SVC$/;"	m	struct:CvSVMParams	access:public
CvSVMParams::coef0	/usr/include/opencv/ml.h	/^    double      coef0;  \/\/ for poly\/sigmoid$/;"	m	struct:CvSVMParams	access:public
CvSVMParams::degree	/usr/include/opencv/ml.h	/^    double      degree; \/\/ for poly$/;"	m	struct:CvSVMParams	access:public
CvSVMParams::gamma	/usr/include/opencv/ml.h	/^    double      gamma;  \/\/ for poly\/rbf\/sigmoid$/;"	m	struct:CvSVMParams	access:public
CvSVMParams::kernel_type	/usr/include/opencv/ml.h	/^    int         kernel_type;$/;"	m	struct:CvSVMParams	access:public
CvSVMParams::nu	/usr/include/opencv/ml.h	/^    double      nu; \/\/ for CV_SVM_NU_SVC, CV_SVM_ONE_CLASS, and CV_SVM_NU_SVR$/;"	m	struct:CvSVMParams	access:public
CvSVMParams::p	/usr/include/opencv/ml.h	/^    double      p; \/\/ for CV_SVM_EPS_SVR$/;"	m	struct:CvSVMParams	access:public
CvSVMParams::svm_type	/usr/include/opencv/ml.h	/^    int         svm_type;$/;"	m	struct:CvSVMParams	access:public
CvSVMParams::term_crit	/usr/include/opencv/ml.h	/^    CvTermCriteria term_crit; \/\/ termination criteria$/;"	m	struct:CvSVMParams	access:public
CvSVMSolutionInfo	/usr/include/opencv/ml.h	/^struct CvSVMSolutionInfo$/;"	s
CvSVMSolutionInfo::obj	/usr/include/opencv/ml.h	/^    double obj;$/;"	m	struct:CvSVMSolutionInfo	access:public
CvSVMSolutionInfo::r	/usr/include/opencv/ml.h	/^    double r;   \/\/ for Solver_NU$/;"	m	struct:CvSVMSolutionInfo	access:public
CvSVMSolutionInfo::rho	/usr/include/opencv/ml.h	/^    double rho;$/;"	m	struct:CvSVMSolutionInfo	access:public
CvSVMSolutionInfo::upper_bound_n	/usr/include/opencv/ml.h	/^    double upper_bound_n;$/;"	m	struct:CvSVMSolutionInfo	access:public
CvSVMSolutionInfo::upper_bound_p	/usr/include/opencv/ml.h	/^    double upper_bound_p;$/;"	m	struct:CvSVMSolutionInfo	access:public
CvSVMSolver	/usr/include/opencv/ml.h	/^    CvSVMSolver( int count, int var_count, const float** samples, char* y,$/;"	p	class:CvSVMSolver	access:public	signature:( int count, int var_count, const float** samples, char* y, int alpha_count, double* alpha, double Cp, double Cn, CvMemStorage* storage, CvSVMKernel* kernel, GetRow get_row, SelectWorkingSet select_working_set, CalcRho calc_rho )
CvSVMSolver	/usr/include/opencv/ml.h	/^    CvSVMSolver();$/;"	p	class:CvSVMSolver	access:public	signature:()
CvSVMSolver	/usr/include/opencv/ml.h	/^class CV_EXPORTS CvSVMSolver$/;"	c
CvSVMSolver::C	/usr/include/opencv/ml.h	/^    double C[2];  \/\/ C[0] == Cn, C[1] == Cp$/;"	m	class:CvSVMSolver	access:public
CvSVMSolver::CalcRho	/usr/include/opencv/ml.h	/^    typedef void (CvSVMSolver::*CalcRho)( double& rho, double& r );$/;"	t	class:CvSVMSolver	access:public
CvSVMSolver::CvSVMSolver	/usr/include/opencv/ml.h	/^    CvSVMSolver( int count, int var_count, const float** samples, char* y,$/;"	p	class:CvSVMSolver	access:public	signature:( int count, int var_count, const float** samples, char* y, int alpha_count, double* alpha, double Cp, double Cn, CvMemStorage* storage, CvSVMKernel* kernel, GetRow get_row, SelectWorkingSet select_working_set, CalcRho calc_rho )
CvSVMSolver::CvSVMSolver	/usr/include/opencv/ml.h	/^    CvSVMSolver();$/;"	p	class:CvSVMSolver	access:public	signature:()
CvSVMSolver::G	/usr/include/opencv/ml.h	/^    double* G;$/;"	m	class:CvSVMSolver	access:public
CvSVMSolver::GetRow	/usr/include/opencv/ml.h	/^    typedef float* (CvSVMSolver::*GetRow)( int i, float* row, float* dst, bool existed );$/;"	t	class:CvSVMSolver	access:public
CvSVMSolver::SelectWorkingSet	/usr/include/opencv/ml.h	/^    typedef bool (CvSVMSolver::*SelectWorkingSet)( int& i, int& j );$/;"	t	class:CvSVMSolver	access:public
CvSVMSolver::alpha	/usr/include/opencv/ml.h	/^    double* alpha;$/;"	m	class:CvSVMSolver	access:public
CvSVMSolver::alpha_count	/usr/include/opencv/ml.h	/^    int alpha_count;$/;"	m	class:CvSVMSolver	access:public
CvSVMSolver::alpha_status	/usr/include/opencv/ml.h	/^    char* alpha_status;$/;"	m	class:CvSVMSolver	access:public
CvSVMSolver::b	/usr/include/opencv/ml.h	/^    double* b;$/;"	m	class:CvSVMSolver	access:public
CvSVMSolver::buf	/usr/include/opencv/ml.h	/^    float* buf[2];$/;"	m	class:CvSVMSolver	access:public
CvSVMSolver::cache_line_size	/usr/include/opencv/ml.h	/^    int cache_line_size;$/;"	m	class:CvSVMSolver	access:public
CvSVMSolver::cache_size	/usr/include/opencv/ml.h	/^    int cache_size;$/;"	m	class:CvSVMSolver	access:public
CvSVMSolver::calc_rho	/usr/include/opencv/ml.h	/^    virtual void calc_rho( double& rho, double& r );$/;"	p	class:CvSVMSolver	access:public	signature:( double& rho, double& r )
CvSVMSolver::calc_rho_func	/usr/include/opencv/ml.h	/^    CalcRho calc_rho_func;$/;"	m	class:CvSVMSolver	access:public
CvSVMSolver::calc_rho_nu_svm	/usr/include/opencv/ml.h	/^    virtual void calc_rho_nu_svm( double& rho, double& r );$/;"	p	class:CvSVMSolver	access:public	signature:( double& rho, double& r )
CvSVMSolver::clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	class:CvSVMSolver	access:public	signature:()
CvSVMSolver::create	/usr/include/opencv/ml.h	/^    virtual bool create( int count, int var_count, const float** samples, char* y,$/;"	p	class:CvSVMSolver	access:public	signature:( int count, int var_count, const float** samples, char* y, int alpha_count, double* alpha, double Cp, double Cn, CvMemStorage* storage, CvSVMKernel* kernel, GetRow get_row, SelectWorkingSet select_working_set, CalcRho calc_rho )
CvSVMSolver::eps	/usr/include/opencv/ml.h	/^    double eps;$/;"	m	class:CvSVMSolver	access:public
CvSVMSolver::get_row	/usr/include/opencv/ml.h	/^    virtual float* get_row( int i, float* dst );$/;"	p	class:CvSVMSolver	access:public	signature:( int i, float* dst )
CvSVMSolver::get_row_base	/usr/include/opencv/ml.h	/^    virtual float* get_row_base( int i, bool* _existed );$/;"	p	class:CvSVMSolver	access:public	signature:( int i, bool* _existed )
CvSVMSolver::get_row_func	/usr/include/opencv/ml.h	/^    GetRow get_row_func;$/;"	m	class:CvSVMSolver	access:public
CvSVMSolver::get_row_one_class	/usr/include/opencv/ml.h	/^    virtual float* get_row_one_class( int i, float* row, float* dst, bool existed );$/;"	p	class:CvSVMSolver	access:public	signature:( int i, float* row, float* dst, bool existed )
CvSVMSolver::get_row_svc	/usr/include/opencv/ml.h	/^    virtual float* get_row_svc( int i, float* row, float* dst, bool existed );$/;"	p	class:CvSVMSolver	access:public	signature:( int i, float* row, float* dst, bool existed )
CvSVMSolver::get_row_svr	/usr/include/opencv/ml.h	/^    virtual float* get_row_svr( int i, float* row, float* dst, bool existed );$/;"	p	class:CvSVMSolver	access:public	signature:( int i, float* row, float* dst, bool existed )
CvSVMSolver::kernel	/usr/include/opencv/ml.h	/^    CvSVMKernel* kernel;$/;"	m	class:CvSVMSolver	access:public
CvSVMSolver::lru_list	/usr/include/opencv/ml.h	/^    CvSVMKernelRow lru_list;$/;"	m	class:CvSVMSolver	access:public
CvSVMSolver::max_iter	/usr/include/opencv/ml.h	/^    int max_iter;$/;"	m	class:CvSVMSolver	access:public
CvSVMSolver::params	/usr/include/opencv/ml.h	/^    const CvSVMParams* params;$/;"	m	class:CvSVMSolver	access:public
CvSVMSolver::rows	/usr/include/opencv/ml.h	/^    CvSVMKernelRow* rows;$/;"	m	class:CvSVMSolver	access:public
CvSVMSolver::sample_count	/usr/include/opencv/ml.h	/^    int sample_count;$/;"	m	class:CvSVMSolver	access:public
CvSVMSolver::samples	/usr/include/opencv/ml.h	/^    const float** samples;$/;"	m	class:CvSVMSolver	access:public
CvSVMSolver::select_working_set	/usr/include/opencv/ml.h	/^    virtual bool select_working_set( int& i, int& j );$/;"	p	class:CvSVMSolver	access:public	signature:( int& i, int& j )
CvSVMSolver::select_working_set_func	/usr/include/opencv/ml.h	/^    SelectWorkingSet select_working_set_func;$/;"	m	class:CvSVMSolver	access:public
CvSVMSolver::select_working_set_nu_svm	/usr/include/opencv/ml.h	/^    virtual bool select_working_set_nu_svm( int& i, int& j );$/;"	p	class:CvSVMSolver	access:public	signature:( int& i, int& j )
CvSVMSolver::solve_c_svc	/usr/include/opencv/ml.h	/^    virtual bool solve_c_svc( int count, int var_count, const float** samples, char* y,$/;"	p	class:CvSVMSolver	access:public	signature:( int count, int var_count, const float** samples, char* y, double Cp, double Cn, CvMemStorage* storage, CvSVMKernel* kernel, double* alpha, CvSVMSolutionInfo& si )
CvSVMSolver::solve_eps_svr	/usr/include/opencv/ml.h	/^    virtual bool solve_eps_svr( int count, int var_count, const float** samples, const float* y,$/;"	p	class:CvSVMSolver	access:public	signature:( int count, int var_count, const float** samples, const float* y, CvMemStorage* storage, CvSVMKernel* kernel, double* alpha, CvSVMSolutionInfo& si )
CvSVMSolver::solve_generic	/usr/include/opencv/ml.h	/^    virtual bool solve_generic( CvSVMSolutionInfo& si );$/;"	p	class:CvSVMSolver	access:public	signature:( CvSVMSolutionInfo& si )
CvSVMSolver::solve_nu_svc	/usr/include/opencv/ml.h	/^    virtual bool solve_nu_svc( int count, int var_count, const float** samples, char* y,$/;"	p	class:CvSVMSolver	access:public	signature:( int count, int var_count, const float** samples, char* y, CvMemStorage* storage, CvSVMKernel* kernel, double* alpha, CvSVMSolutionInfo& si )
CvSVMSolver::solve_nu_svr	/usr/include/opencv/ml.h	/^    virtual bool solve_nu_svr( int count, int var_count, const float** samples, const float* y,$/;"	p	class:CvSVMSolver	access:public	signature:( int count, int var_count, const float** samples, const float* y, CvMemStorage* storage, CvSVMKernel* kernel, double* alpha, CvSVMSolutionInfo& si )
CvSVMSolver::solve_one_class	/usr/include/opencv/ml.h	/^    virtual bool solve_one_class( int count, int var_count, const float** samples,$/;"	p	class:CvSVMSolver	access:public	signature:( int count, int var_count, const float** samples, CvMemStorage* storage, CvSVMKernel* kernel, double* alpha, CvSVMSolutionInfo& si )
CvSVMSolver::storage	/usr/include/opencv/ml.h	/^    CvMemStorage* storage;$/;"	m	class:CvSVMSolver	access:public
CvSVMSolver::var_count	/usr/include/opencv/ml.h	/^    int var_count;$/;"	m	class:CvSVMSolver	access:public
CvSVMSolver::y	/usr/include/opencv/ml.h	/^    char* y;$/;"	m	class:CvSVMSolver	access:public
CvSVMSolver::~CvSVMSolver	/usr/include/opencv/ml.h	/^    virtual ~CvSVMSolver();$/;"	p	class:CvSVMSolver	access:public	signature:()
CvSaveImageFunc	/usr/include/opencv/cxcore.hpp	/^typedef int (CV_CDECL * CvSaveImageFunc)( const char* filename, const CvArr* image );$/;"	t
CvScalar	/usr/include/opencv/cxtypes.h	/^CvScalar;$/;"	t	typeref:struct:CvScalar
CvScalar	/usr/include/opencv/cxtypes.h	/^typedef struct CvScalar$/;"	s
CvScalar::val	/usr/include/opencv/cxtypes.h	/^    double val[4];$/;"	m	struct:CvScalar	access:public
CvSepFilter	/usr/include/opencv/cv.hpp	/^    CvSepFilter( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvSepFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, const CvMat* _kx, const CvMat* _ky, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
CvSepFilter	/usr/include/opencv/cv.hpp	/^    CvSepFilter();$/;"	p	class:CvSepFilter	access:public	signature:()
CvSepFilter	/usr/include/opencv/cv.hpp	/^class CV_EXPORTS CvSepFilter : public CvBaseImageFilter$/;"	c
CvSepFilter::ASYMMETRICAL	/usr/include/opencv/cv.hpp	/^    enum { GENERIC=0, ASYMMETRICAL=1, SYMMETRICAL=2, POSITIVE=4, SUM_TO_1=8, INTEGER=16 };$/;"	e	enum:CvSepFilter::__anon9
CvSepFilter::CvSepFilter	/usr/include/opencv/cv.hpp	/^    CvSepFilter( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvSepFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, const CvMat* _kx, const CvMat* _ky, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
CvSepFilter::CvSepFilter	/usr/include/opencv/cv.hpp	/^    CvSepFilter();$/;"	p	class:CvSepFilter	access:public	signature:()
CvSepFilter::FLIP_KERNEL	/usr/include/opencv/cv.hpp	/^    enum { NORMALIZE_KERNEL=1, FLIP_KERNEL=2 };$/;"	e	enum:CvSepFilter::__anon10
CvSepFilter::GENERIC	/usr/include/opencv/cv.hpp	/^    enum { GENERIC=0, ASYMMETRICAL=1, SYMMETRICAL=2, POSITIVE=4, SUM_TO_1=8, INTEGER=16 };$/;"	e	enum:CvSepFilter::__anon9
CvSepFilter::INTEGER	/usr/include/opencv/cv.hpp	/^    enum { GENERIC=0, ASYMMETRICAL=1, SYMMETRICAL=2, POSITIVE=4, SUM_TO_1=8, INTEGER=16 };$/;"	e	enum:CvSepFilter::__anon9
CvSepFilter::NORMALIZE_KERNEL	/usr/include/opencv/cv.hpp	/^    enum { NORMALIZE_KERNEL=1, FLIP_KERNEL=2 };$/;"	e	enum:CvSepFilter::__anon10
CvSepFilter::POSITIVE	/usr/include/opencv/cv.hpp	/^    enum { GENERIC=0, ASYMMETRICAL=1, SYMMETRICAL=2, POSITIVE=4, SUM_TO_1=8, INTEGER=16 };$/;"	e	enum:CvSepFilter::__anon9
CvSepFilter::SUM_TO_1	/usr/include/opencv/cv.hpp	/^    enum { GENERIC=0, ASYMMETRICAL=1, SYMMETRICAL=2, POSITIVE=4, SUM_TO_1=8, INTEGER=16 };$/;"	e	enum:CvSepFilter::__anon9
CvSepFilter::SYMMETRICAL	/usr/include/opencv/cv.hpp	/^    enum { GENERIC=0, ASYMMETRICAL=1, SYMMETRICAL=2, POSITIVE=4, SUM_TO_1=8, INTEGER=16 };$/;"	e	enum:CvSepFilter::__anon9
CvSepFilter::clear	/usr/include/opencv/cv.hpp	/^    virtual void clear();$/;"	p	class:CvSepFilter	access:public	signature:()
CvSepFilter::get_x_kernel	/usr/include/opencv/cv.hpp	/^    const CvMat* get_x_kernel() const { return kx; }$/;"	f	class:CvSepFilter	access:public	signature:() const
CvSepFilter::get_x_kernel_flags	/usr/include/opencv/cv.hpp	/^    int get_x_kernel_flags() const { return kx_flags; }$/;"	f	class:CvSepFilter	access:public	signature:() const
CvSepFilter::get_y_kernel	/usr/include/opencv/cv.hpp	/^    const CvMat* get_y_kernel() const { return ky; }$/;"	f	class:CvSepFilter	access:public	signature:() const
CvSepFilter::get_y_kernel_flags	/usr/include/opencv/cv.hpp	/^    int get_y_kernel_flags() const { return ky_flags; }$/;"	f	class:CvSepFilter	access:public	signature:() const
CvSepFilter::init	/usr/include/opencv/cv.hpp	/^    virtual void init( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvSepFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, bool _is_separable, CvSize _ksize, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
CvSepFilter::init	/usr/include/opencv/cv.hpp	/^    virtual void init( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvSepFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, const CvMat* _kx, const CvMat* _ky, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
CvSepFilter::init_deriv	/usr/include/opencv/cv.hpp	/^    virtual void init_deriv( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvSepFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, int dx, int dy, int aperture_size, int flags=0 )
CvSepFilter::init_gaussian	/usr/include/opencv/cv.hpp	/^    virtual void init_gaussian( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvSepFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, int gaussian_size, double sigma )
CvSepFilter::init_gaussian_kernel	/usr/include/opencv/cv.hpp	/^    static void init_gaussian_kernel( CvMat* kernel, double sigma=-1 );$/;"	p	class:CvSepFilter	access:public	signature:( CvMat* kernel, double sigma=-1 )
CvSepFilter::init_scharr_kernel	/usr/include/opencv/cv.hpp	/^    static void init_scharr_kernel( CvMat* _kx, CvMat* _ky, int dx, int dy, int flags=0 );$/;"	p	class:CvSepFilter	access:public	signature:( CvMat* _kx, CvMat* _ky, int dx, int dy, int flags=0 )
CvSepFilter::init_sobel_kernel	/usr/include/opencv/cv.hpp	/^    static void init_sobel_kernel( CvMat* _kx, CvMat* _ky, int dx, int dy, int flags=0 );$/;"	p	class:CvSepFilter	access:public	signature:( CvMat* _kx, CvMat* _ky, int dx, int dy, int flags=0 )
CvSepFilter::kx	/usr/include/opencv/cv.hpp	/^    CvMat *kx, *ky;$/;"	m	class:CvSepFilter	access:protected
CvSepFilter::kx_flags	/usr/include/opencv/cv.hpp	/^    int kx_flags, ky_flags;$/;"	m	class:CvSepFilter	access:protected
CvSepFilter::ky	/usr/include/opencv/cv.hpp	/^    CvMat *kx, *ky;$/;"	m	class:CvSepFilter	access:protected
CvSepFilter::ky_flags	/usr/include/opencv/cv.hpp	/^    int kx_flags, ky_flags;$/;"	m	class:CvSepFilter	access:protected
CvSepFilter::~CvSepFilter	/usr/include/opencv/cv.hpp	/^    virtual ~CvSepFilter();$/;"	p	class:CvSepFilter	access:public	signature:()
CvSeq	/usr/include/opencv/cxtypes.h	/^CvSeq;$/;"	t	typeref:struct:CvSeq
CvSeq	/usr/include/opencv/cxtypes.h	/^typedef struct CvSeq$/;"	s
CvSeqBlock	/usr/include/opencv/cxtypes.h	/^CvSeqBlock;$/;"	t	typeref:struct:CvSeqBlock
CvSeqBlock	/usr/include/opencv/cxtypes.h	/^typedef struct CvSeqBlock$/;"	s
CvSeqBlock::count	/usr/include/opencv/cxtypes.h	/^    int    count;             \/* number of elements in the block *\/$/;"	m	struct:CvSeqBlock	access:public
CvSeqBlock::data	/usr/include/opencv/cxtypes.h	/^    char*  data;              \/* pointer to the first element of the block *\/$/;"	m	struct:CvSeqBlock	access:public
CvSeqBlock::next	/usr/include/opencv/cxtypes.h	/^    struct CvSeqBlock*  next; \/* next sequence block *\/$/;"	m	struct:CvSeqBlock	typeref:struct:CvSeqBlock::CvSeqBlock	access:public
CvSeqBlock::prev	/usr/include/opencv/cxtypes.h	/^    struct CvSeqBlock*  prev; \/* previous sequence block *\/$/;"	m	struct:CvSeqBlock	typeref:struct:CvSeqBlock::CvSeqBlock	access:public
CvSeqBlock::start_index	/usr/include/opencv/cxtypes.h	/^    int    start_index;       \/* index of the first element in the block +$/;"	m	struct:CvSeqBlock	access:public
CvSeqReader	/usr/include/opencv/cxtypes.h	/^CvSeqReader;$/;"	t	typeref:struct:CvSeqReader
CvSeqReader	/usr/include/opencv/cxtypes.h	/^typedef struct CvSeqReader$/;"	s
CvSeqWriter	/usr/include/opencv/cxtypes.h	/^CvSeqWriter;$/;"	t	typeref:struct:CvSeqWriter
CvSeqWriter	/usr/include/opencv/cxtypes.h	/^typedef struct CvSeqWriter$/;"	s
CvSet	/usr/include/opencv/cxtypes.h	/^CvSet;$/;"	t	typeref:struct:CvSet
CvSet	/usr/include/opencv/cxtypes.h	/^typedef struct CvSet$/;"	s
CvSetElem	/usr/include/opencv/cxtypes.h	/^CvSetElem;$/;"	t	typeref:struct:CvSetElem
CvSetElem	/usr/include/opencv/cxtypes.h	/^typedef struct CvSetElem$/;"	s
CvShowImageFunc	/usr/include/opencv/cxcore.hpp	/^typedef void (CV_CDECL * CvShowImageFunc)( const char* windowname, const CvArr* image );$/;"	t
CvSize	/usr/include/opencv/cxtypes.h	/^CvSize;$/;"	t	typeref:struct:__anon18
CvSize2D32f	/usr/include/opencv/cxtypes.h	/^CvSize2D32f;$/;"	t	typeref:struct:CvSize2D32f
CvSize2D32f	/usr/include/opencv/cxtypes.h	/^typedef struct CvSize2D32f$/;"	s
CvSize2D32f::height	/usr/include/opencv/cxtypes.h	/^    float height;$/;"	m	struct:CvSize2D32f	access:public
CvSize2D32f::width	/usr/include/opencv/cxtypes.h	/^    float width;$/;"	m	struct:CvSize2D32f	access:public
CvSlice	/usr/include/opencv/cxtypes.h	/^CvSlice;$/;"	t	typeref:struct:CvSlice
CvSlice	/usr/include/opencv/cxtypes.h	/^typedef struct CvSlice$/;"	s
CvSlice::end_index	/usr/include/opencv/cxtypes.h	/^    int  start_index, end_index;$/;"	m	struct:CvSlice	access:public
CvSlice::start_index	/usr/include/opencv/cxtypes.h	/^    int  start_index, end_index;$/;"	m	struct:CvSlice	access:public
CvSparseMat	/usr/include/opencv/cxtypes.h	/^CvSparseMat;$/;"	t	typeref:struct:CvSparseMat
CvSparseMat	/usr/include/opencv/cxtypes.h	/^typedef struct CvSparseMat$/;"	s
CvSparseMat::dims	/usr/include/opencv/cxtypes.h	/^    int dims;$/;"	m	struct:CvSparseMat	access:public
CvSparseMat::hashsize	/usr/include/opencv/cxtypes.h	/^    int hashsize;$/;"	m	struct:CvSparseMat	access:public
CvSparseMat::hashtable	/usr/include/opencv/cxtypes.h	/^    void** hashtable;$/;"	m	struct:CvSparseMat	access:public
CvSparseMat::hdr_refcount	/usr/include/opencv/cxtypes.h	/^    int hdr_refcount;$/;"	m	struct:CvSparseMat	access:public
CvSparseMat::heap	/usr/include/opencv/cxtypes.h	/^    struct CvSet* heap;$/;"	m	struct:CvSparseMat	typeref:struct:CvSparseMat::CvSet	access:public
CvSparseMat::idxoffset	/usr/include/opencv/cxtypes.h	/^    int idxoffset;$/;"	m	struct:CvSparseMat	access:public
CvSparseMat::refcount	/usr/include/opencv/cxtypes.h	/^    int* refcount;$/;"	m	struct:CvSparseMat	access:public
CvSparseMat::size	/usr/include/opencv/cxtypes.h	/^    int size[CV_MAX_DIM];$/;"	m	struct:CvSparseMat	access:public
CvSparseMat::type	/usr/include/opencv/cxtypes.h	/^    int type;$/;"	m	struct:CvSparseMat	access:public
CvSparseMat::valoffset	/usr/include/opencv/cxtypes.h	/^    int valoffset;$/;"	m	struct:CvSparseMat	access:public
CvSparseMatIterator	/usr/include/opencv/cxtypes.h	/^CvSparseMatIterator;$/;"	t	typeref:struct:CvSparseMatIterator
CvSparseMatIterator	/usr/include/opencv/cxtypes.h	/^typedef struct CvSparseMatIterator$/;"	s
CvSparseMatIterator::curidx	/usr/include/opencv/cxtypes.h	/^    int curidx;$/;"	m	struct:CvSparseMatIterator	access:public
CvSparseMatIterator::mat	/usr/include/opencv/cxtypes.h	/^    CvSparseMat* mat;$/;"	m	struct:CvSparseMatIterator	access:public
CvSparseMatIterator::node	/usr/include/opencv/cxtypes.h	/^    CvSparseNode* node;$/;"	m	struct:CvSparseMatIterator	access:public
CvSparseNode	/usr/include/opencv/cxtypes.h	/^CvSparseNode;$/;"	t	typeref:struct:CvSparseNode
CvSparseNode	/usr/include/opencv/cxtypes.h	/^typedef struct CvSparseNode$/;"	s
CvSparseNode::hashval	/usr/include/opencv/cxtypes.h	/^    unsigned hashval;$/;"	m	struct:CvSparseNode	access:public
CvSparseNode::next	/usr/include/opencv/cxtypes.h	/^    struct CvSparseNode* next;$/;"	m	struct:CvSparseNode	typeref:struct:CvSparseNode::CvSparseNode	access:public
CvStatModel	/usr/include/opencv/ml.h	/^    CvStatModel();$/;"	p	class:CvStatModel	access:public	signature:()
CvStatModel	/usr/include/opencv/ml.h	/^class CV_EXPORTS CvStatModel$/;"	c
CvStatModel::CvStatModel	/usr/include/opencv/ml.h	/^    CvStatModel();$/;"	p	class:CvStatModel	access:public	signature:()
CvStatModel::clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	class:CvStatModel	access:public	signature:()
CvStatModel::default_model_name	/usr/include/opencv/ml.h	/^    const char* default_model_name;$/;"	m	class:CvStatModel	access:protected
CvStatModel::load	/usr/include/opencv/ml.h	/^    virtual void load( const char* filename, const char* name=0 );$/;"	p	class:CvStatModel	access:public	signature:( const char* filename, const char* name=0 )
CvStatModel::read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* storage, CvFileNode* node );$/;"	p	class:CvStatModel	access:public	signature:( CvFileStorage* storage, CvFileNode* node )
CvStatModel::save	/usr/include/opencv/ml.h	/^    virtual void save( const char* filename, const char* name=0 );$/;"	p	class:CvStatModel	access:public	signature:( const char* filename, const char* name=0 )
CvStatModel::write	/usr/include/opencv/ml.h	/^    virtual void write( CvFileStorage* storage, const char* name );$/;"	p	class:CvStatModel	access:public	signature:( CvFileStorage* storage, const char* name )
CvStatModel::~CvStatModel	/usr/include/opencv/ml.h	/^    virtual ~CvStatModel();$/;"	p	class:CvStatModel	access:public	signature:()
CvStatus	/usr/include/opencv/cxmisc.h	/^CvStatus;$/;"	t	typeref:enum:CvStatus
CvStatus	/usr/include/opencv/cxmisc.h	/^typedef enum CvStatus$/;"	g
CvStereoCamera	/usr/include/opencv/cvaux.h	/^CvStereoCamera;$/;"	t	typeref:struct:CvStereoCamera
CvStereoCamera	/usr/include/opencv/cvaux.h	/^typedef struct CvStereoCamera$/;"	s
CvStereoCamera::border	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f border[2][4];$/;"	m	struct:CvStereoCamera	access:public
CvStereoCamera::camera	/usr/include/opencv/cvaux.h	/^    CvCamera* camera[2]; \/* two individual camera parameters *\/$/;"	m	struct:CvStereoCamera	access:public
CvStereoCamera::coeffs	/usr/include/opencv/cvaux.h	/^    double coeffs[2][3][3];\/* coefficients for transformation *\/$/;"	m	struct:CvStereoCamera	access:public
CvStereoCamera::epipole	/usr/include/opencv/cvaux.h	/^    CvPoint3D32f epipole[2];$/;"	m	struct:CvStereoCamera	access:public
CvStereoCamera::fundMatr	/usr/include/opencv/cvaux.h	/^    float fundMatr[9]; \/* fundamental matrix *\/$/;"	m	struct:CvStereoCamera	access:public
CvStereoCamera::lineCoeffs	/usr/include/opencv/cvaux.h	/^    CvStereoLineCoeff* lineCoeffs;$/;"	m	struct:CvStereoCamera	access:public
CvStereoCamera::needSwapCameras	/usr/include/opencv/cvaux.h	/^    int needSwapCameras;\/* flag set to 1 if need to swap cameras for good reconstruction *\/$/;"	m	struct:CvStereoCamera	access:public
CvStereoCamera::quad	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f quad[2][4]; \/* coordinates of destination quadrangle after$/;"	m	struct:CvStereoCamera	access:public
CvStereoCamera::rotMatrix	/usr/include/opencv/cvaux.h	/^    float rotMatrix[9];$/;"	m	struct:CvStereoCamera	access:public
CvStereoCamera::transVector	/usr/include/opencv/cvaux.h	/^    float transVector[3];$/;"	m	struct:CvStereoCamera	access:public
CvStereoCamera::warpSize	/usr/include/opencv/cvaux.h	/^    CvSize warpSize;$/;"	m	struct:CvStereoCamera	access:public
CvStereoLineCoeff	/usr/include/opencv/cvaux.h	/^typedef struct CvStereoLineCoeff$/;"	s
CvStereoLineCoeff	/usr/include/opencv/cvaux.h	/^}CvStereoLineCoeff;$/;"	t	typeref:struct:CvStereoLineCoeff
CvStereoLineCoeff::Xcoef	/usr/include/opencv/cvaux.h	/^    double Xcoef;$/;"	m	struct:CvStereoLineCoeff	access:public
CvStereoLineCoeff::XcoefA	/usr/include/opencv/cvaux.h	/^    double XcoefA;$/;"	m	struct:CvStereoLineCoeff	access:public
CvStereoLineCoeff::XcoefAB	/usr/include/opencv/cvaux.h	/^    double XcoefAB;$/;"	m	struct:CvStereoLineCoeff	access:public
CvStereoLineCoeff::XcoefB	/usr/include/opencv/cvaux.h	/^    double XcoefB;$/;"	m	struct:CvStereoLineCoeff	access:public
CvStereoLineCoeff::Ycoef	/usr/include/opencv/cvaux.h	/^    double Ycoef;$/;"	m	struct:CvStereoLineCoeff	access:public
CvStereoLineCoeff::YcoefA	/usr/include/opencv/cvaux.h	/^    double YcoefA;$/;"	m	struct:CvStereoLineCoeff	access:public
CvStereoLineCoeff::YcoefAB	/usr/include/opencv/cvaux.h	/^    double YcoefAB;$/;"	m	struct:CvStereoLineCoeff	access:public
CvStereoLineCoeff::YcoefB	/usr/include/opencv/cvaux.h	/^    double YcoefB;$/;"	m	struct:CvStereoLineCoeff	access:public
CvStereoLineCoeff::Zcoef	/usr/include/opencv/cvaux.h	/^    double Zcoef;$/;"	m	struct:CvStereoLineCoeff	access:public
CvStereoLineCoeff::ZcoefA	/usr/include/opencv/cvaux.h	/^    double ZcoefA;$/;"	m	struct:CvStereoLineCoeff	access:public
CvStereoLineCoeff::ZcoefAB	/usr/include/opencv/cvaux.h	/^    double ZcoefAB;$/;"	m	struct:CvStereoLineCoeff	access:public
CvStereoLineCoeff::ZcoefB	/usr/include/opencv/cvaux.h	/^    double ZcoefB;$/;"	m	struct:CvStereoLineCoeff	access:public
CvString	/usr/include/opencv/cxtypes.h	/^CvString;$/;"	t	typeref:struct:CvString
CvString	/usr/include/opencv/cxtypes.h	/^typedef struct CvString$/;"	s
CvString::len	/usr/include/opencv/cxtypes.h	/^    int len;$/;"	m	struct:CvString	access:public
CvString::ptr	/usr/include/opencv/cxtypes.h	/^    char* ptr;$/;"	m	struct:CvString	access:public
CvStringHashNode	/usr/include/opencv/cxtypes.h	/^CvStringHashNode;$/;"	t	typeref:struct:CvStringHashNode
CvStringHashNode	/usr/include/opencv/cxtypes.h	/^typedef struct CvStringHashNode$/;"	s
CvStringHashNode::hashval	/usr/include/opencv/cxtypes.h	/^    unsigned hashval;$/;"	m	struct:CvStringHashNode	access:public
CvStringHashNode::next	/usr/include/opencv/cxtypes.h	/^    struct CvStringHashNode* next;$/;"	m	struct:CvStringHashNode	typeref:struct:CvStringHashNode::CvStringHashNode	access:public
CvStringHashNode::str	/usr/include/opencv/cxtypes.h	/^    CvString str;$/;"	m	struct:CvStringHashNode	access:public
CvSubdiv2D	/usr/include/opencv/cvtypes.h	/^CvSubdiv2D;$/;"	t	typeref:struct:CvSubdiv2D
CvSubdiv2D	/usr/include/opencv/cvtypes.h	/^typedef struct CvSubdiv2D$/;"	s
CvSubdiv2DEdge	/usr/include/opencv/cvtypes.h	/^typedef size_t CvSubdiv2DEdge;$/;"	t
CvSubdiv2DPoint	/usr/include/opencv/cvtypes.h	/^CvSubdiv2DPoint;$/;"	t	typeref:struct:CvSubdiv2DPoint
CvSubdiv2DPoint	/usr/include/opencv/cvtypes.h	/^typedef struct CvSubdiv2DPoint$/;"	s
CvSubdiv2DPointLocation	/usr/include/opencv/cvtypes.h	/^CvSubdiv2DPointLocation;$/;"	t	typeref:enum:CvSubdiv2DPointLocation
CvSubdiv2DPointLocation	/usr/include/opencv/cvtypes.h	/^typedef enum CvSubdiv2DPointLocation$/;"	g
CvTemplMatchMethod	/usr/include/opencv/cvcompat.h	76;"	d
CvTermCriteria	/usr/include/opencv/cxtypes.h	/^CvTermCriteria;$/;"	t	typeref:struct:CvTermCriteria
CvTermCriteria	/usr/include/opencv/cxtypes.h	/^typedef struct CvTermCriteria$/;"	s
CvTermCriteria::epsilon	/usr/include/opencv/cxtypes.h	/^    double epsilon;$/;"	m	struct:CvTermCriteria	access:public
CvTermCriteria::max_iter	/usr/include/opencv/cxtypes.h	/^    int    max_iter;$/;"	m	struct:CvTermCriteria	access:public
CvTermCriteria::type	/usr/include/opencv/cxtypes.h	/^    int    type;  \/* may be combination of$/;"	m	struct:CvTermCriteria	access:public
CvTestSeq	/usr/include/opencv/cvvidsurv.hpp	/^typedef void CvTestSeq;$/;"	t
CvThreshType	/usr/include/opencv/cvcompat.h	65;"	d
CvTrackbarCallback	/usr/include/opencv/highgui.h	/^typedef void (CV_CDECL *CvTrackbarCallback)(int pos);$/;"	t
CvTracksTimePos	/usr/include/opencv/cvvidsurv.hpp	/^struct CvTracksTimePos$/;"	s
CvTracksTimePos::beg1	/usr/include/opencv/cvvidsurv.hpp	/^    int beg1,beg2;$/;"	m	struct:CvTracksTimePos	access:public
CvTracksTimePos::beg2	/usr/include/opencv/cvvidsurv.hpp	/^    int beg1,beg2;$/;"	m	struct:CvTracksTimePos	access:public
CvTracksTimePos::comLen	/usr/include/opencv/cvvidsurv.hpp	/^    int comLen; \/\/common length for two tracks$/;"	m	struct:CvTracksTimePos	access:public
CvTracksTimePos::end1	/usr/include/opencv/cvvidsurv.hpp	/^    int end1,end2;$/;"	m	struct:CvTracksTimePos	access:public
CvTracksTimePos::end2	/usr/include/opencv/cvvidsurv.hpp	/^    int end1,end2;$/;"	m	struct:CvTracksTimePos	access:public
CvTracksTimePos::len1	/usr/include/opencv/cvvidsurv.hpp	/^    int len1,len2;$/;"	m	struct:CvTracksTimePos	access:public
CvTracksTimePos::len2	/usr/include/opencv/cvvidsurv.hpp	/^    int len1,len2;$/;"	m	struct:CvTracksTimePos	access:public
CvTracksTimePos::shift1	/usr/include/opencv/cvvidsurv.hpp	/^    int shift1,shift2;$/;"	m	struct:CvTracksTimePos	access:public
CvTracksTimePos::shift2	/usr/include/opencv/cvvidsurv.hpp	/^    int shift1,shift2;$/;"	m	struct:CvTracksTimePos	access:public
CvTreeNodeIterator	/usr/include/opencv/cxcore.h	/^CvTreeNodeIterator;$/;"	t	typeref:struct:CvTreeNodeIterator
CvTreeNodeIterator	/usr/include/opencv/cxcore.h	/^typedef struct CvTreeNodeIterator$/;"	s
CvTreeNodeIterator::level	/usr/include/opencv/cxcore.h	/^    int level;$/;"	m	struct:CvTreeNodeIterator	access:public
CvTreeNodeIterator::max_level	/usr/include/opencv/cxcore.h	/^    int max_level;$/;"	m	struct:CvTreeNodeIterator	access:public
CvTreeNodeIterator::node	/usr/include/opencv/cxcore.h	/^    const void* node;$/;"	m	struct:CvTreeNodeIterator	access:public
CvType	/usr/include/opencv/cxcore.hpp	/^    CvType( const char* type_name,$/;"	p	struct:CvType	access:public	signature:( const char* type_name, CvIsInstanceFunc is_instance, CvReleaseFunc release=0, CvReadFunc read=0, CvWriteFunc write=0, CvCloneFunc clone=0 )
CvType	/usr/include/opencv/cxcore.hpp	/^struct CV_EXPORTS CvType$/;"	s
CvType::CvType	/usr/include/opencv/cxcore.hpp	/^    CvType( const char* type_name,$/;"	p	struct:CvType	access:public	signature:( const char* type_name, CvIsInstanceFunc is_instance, CvReleaseFunc release=0, CvReadFunc read=0, CvWriteFunc write=0, CvCloneFunc clone=0 )
CvType::first	/usr/include/opencv/cxcore.hpp	/^    static CvTypeInfo* first;$/;"	m	struct:CvType	access:public
CvType::info	/usr/include/opencv/cxcore.hpp	/^    CvTypeInfo* info;$/;"	m	struct:CvType	access:public
CvType::last	/usr/include/opencv/cxcore.hpp	/^    static CvTypeInfo* last;$/;"	m	struct:CvType	access:public
CvType::~CvType	/usr/include/opencv/cxcore.hpp	/^    ~CvType();$/;"	p	struct:CvType	access:public	signature:()
CvTypeInfo	/usr/include/opencv/cxtypes.h	/^CvTypeInfo;$/;"	t	typeref:struct:CvTypeInfo
CvTypeInfo	/usr/include/opencv/cxtypes.h	/^typedef struct CvTypeInfo$/;"	s
CvTypeInfo::clone	/usr/include/opencv/cxtypes.h	/^    CvCloneFunc clone;$/;"	m	struct:CvTypeInfo	access:public
CvTypeInfo::flags	/usr/include/opencv/cxtypes.h	/^    int flags;$/;"	m	struct:CvTypeInfo	access:public
CvTypeInfo::header_size	/usr/include/opencv/cxtypes.h	/^    int header_size;$/;"	m	struct:CvTypeInfo	access:public
CvTypeInfo::is_instance	/usr/include/opencv/cxtypes.h	/^    CvIsInstanceFunc is_instance;$/;"	m	struct:CvTypeInfo	access:public
CvTypeInfo::next	/usr/include/opencv/cxtypes.h	/^    struct CvTypeInfo* next;$/;"	m	struct:CvTypeInfo	typeref:struct:CvTypeInfo::CvTypeInfo	access:public
CvTypeInfo::prev	/usr/include/opencv/cxtypes.h	/^    struct CvTypeInfo* prev;$/;"	m	struct:CvTypeInfo	typeref:struct:CvTypeInfo::CvTypeInfo	access:public
CvTypeInfo::read	/usr/include/opencv/cxtypes.h	/^    CvReadFunc read;$/;"	m	struct:CvTypeInfo	access:public
CvTypeInfo::release	/usr/include/opencv/cxtypes.h	/^    CvReleaseFunc release;$/;"	m	struct:CvTypeInfo	access:public
CvTypeInfo::type_name	/usr/include/opencv/cxtypes.h	/^    const char* type_name;$/;"	m	struct:CvTypeInfo	access:public
CvTypeInfo::write	/usr/include/opencv/cxtypes.h	/^    CvWriteFunc write;$/;"	m	struct:CvTypeInfo	access:public
CvUpdateBGStatModel	/usr/include/opencv/cvaux.h	/^typedef int (CV_CDECL * CvUpdateBGStatModel)( IplImage* curr_frame, struct CvBGStatModel* bg_model );$/;"	t
CvVSModule	/usr/include/opencv/cvvidsurv.hpp	/^    CvVSModule()$/;"	f	class:CvVSModule	access:public	signature:()
CvVSModule	/usr/include/opencv/cvvidsurv.hpp	/^class CV_EXPORTS CvVSModule$/;"	c
CvVSModule::AddParam	/usr/include/opencv/cvvidsurv.hpp	/^    void AddParam(char* name)$/;"	f	class:CvVSModule	access:protected	signature:(char* name)
CvVSModule::AddParam	/usr/include/opencv/cvvidsurv.hpp	/^    void AddParam(char* name, char** pAddr)$/;"	f	class:CvVSModule	access:protected	signature:(char* name, char** pAddr)
CvVSModule::AddParam	/usr/include/opencv/cvvidsurv.hpp	/^    void AddParam(char* name, double* pAddr)$/;"	f	class:CvVSModule	access:protected	signature:(char* name, double* pAddr)
CvVSModule::AddParam	/usr/include/opencv/cvvidsurv.hpp	/^    void AddParam(char* name, float* pAddr)$/;"	f	class:CvVSModule	access:protected	signature:(char* name, float* pAddr)
CvVSModule::AddParam	/usr/include/opencv/cvvidsurv.hpp	/^    void AddParam(char* name, int* pAddr)$/;"	f	class:CvVSModule	access:protected	signature:(char* name, int* pAddr)
CvVSModule::CommentParam	/usr/include/opencv/cvvidsurv.hpp	/^    void CommentParam(char* name, char* pComment)$/;"	f	class:CvVSModule	access:protected	signature:(char* name, char* pComment)
CvVSModule::CvVSModule	/usr/include/opencv/cvvidsurv.hpp	/^    CvVSModule()$/;"	f	class:CvVSModule	access:public	signature:()
CvVSModule::DelParam	/usr/include/opencv/cvvidsurv.hpp	/^    void DelParam(char* name)$/;"	f	class:CvVSModule	access:protected	signature:(char* name)
CvVSModule::FreeParam	/usr/include/opencv/cvvidsurv.hpp	/^    void    FreeParam(CvDefParam** pp)$/;"	f	class:CvVSModule	access:private	signature:(CvDefParam** pp)
CvVSModule::GetModuleName	/usr/include/opencv/cvvidsurv.hpp	/^    char*   GetModuleName()$/;"	f	class:CvVSModule	access:public	signature:()
CvVSModule::GetNickName	/usr/include/opencv/cvvidsurv.hpp	/^    char* GetNickName()$/;"	f	class:CvVSModule	access:public	signature:()
CvVSModule::GetParam	/usr/include/opencv/cvvidsurv.hpp	/^    double GetParam(char* name)$/;"	f	class:CvVSModule	access:public	signature:(char* name)
CvVSModule::GetParamComment	/usr/include/opencv/cvvidsurv.hpp	/^    char* GetParamComment(char* name)$/;"	f	class:CvVSModule	access:public	signature:(char* name)
CvVSModule::GetParamName	/usr/include/opencv/cvvidsurv.hpp	/^    char* GetParamName(int index)$/;"	f	class:CvVSModule	access:public	signature:(int index)
CvVSModule::GetParamPtr	/usr/include/opencv/cvvidsurv.hpp	/^    CvDefParam* GetParamPtr(char* name)$/;"	f	class:CvVSModule	access:private	signature:(char* name)
CvVSModule::GetParamPtr	/usr/include/opencv/cvvidsurv.hpp	/^    CvDefParam* GetParamPtr(int index)$/;"	f	class:CvVSModule	access:private	signature:(int index)
CvVSModule::GetParamStr	/usr/include/opencv/cvvidsurv.hpp	/^    char* GetParamStr(char* name)$/;"	f	class:CvVSModule	access:public	signature:(char* name)
CvVSModule::GetTypeName	/usr/include/opencv/cvvidsurv.hpp	/^    char*   GetTypeName()$/;"	f	class:CvVSModule	access:public	signature:()
CvVSModule::IsModuleName	/usr/include/opencv/cvvidsurv.hpp	/^    int     IsModuleName(char* name)$/;"	f	class:CvVSModule	access:public	signature:(char* name)
CvVSModule::IsModuleTypeName	/usr/include/opencv/cvvidsurv.hpp	/^    int     IsModuleTypeName(char* name)$/;"	f	class:CvVSModule	access:public	signature:(char* name)
CvVSModule::IsParam	/usr/include/opencv/cvvidsurv.hpp	/^    int  IsParam(char* name)$/;"	f	class:CvVSModule	access:protected	signature:(char* name)
CvVSModule::LoadState	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void LoadState(CvFileStorage*, CvFileNode*){};$/;"	f	class:CvVSModule	access:public	signature:(CvFileStorage*, CvFileNode*)
CvVSModule::NewParam	/usr/include/opencv/cvvidsurv.hpp	/^    CvDefParam* NewParam(char* name)$/;"	f	class:CvVSModule	access:private	signature:(char* name)
CvVSModule::ParamUpdate	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void ParamUpdate(){};$/;"	f	class:CvVSModule	access:public	signature:()
CvVSModule::Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void Release() = 0;$/;"	p	class:CvVSModule	access:public	signature:()
CvVSModule::SaveState	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void SaveState(CvFileStorage*){};$/;"	f	class:CvVSModule	access:public	signature:(CvFileStorage*)
CvVSModule::SetModuleName	/usr/include/opencv/cvvidsurv.hpp	/^    void SetModuleName(char* name){m_pModuleName = strdup(name);}$/;"	f	class:CvVSModule	access:protected	signature:(char* name)
CvVSModule::SetNickName	/usr/include/opencv/cvvidsurv.hpp	/^    void SetNickName(char* pStr)$/;"	f	class:CvVSModule	access:public	signature:(char* pStr)
CvVSModule::SetParam	/usr/include/opencv/cvvidsurv.hpp	/^    void   SetParam(char* name, double val)$/;"	f	class:CvVSModule	access:public	signature:(char* name, double val)
CvVSModule::SetParamStr	/usr/include/opencv/cvvidsurv.hpp	/^    void   SetParamStr(char* name, char* str)$/;"	f	class:CvVSModule	access:public	signature:(char* name, char* str)
CvVSModule::SetTypeName	/usr/include/opencv/cvvidsurv.hpp	/^    void SetTypeName(char* name){m_pModuleTypeName = strdup(name);}$/;"	f	class:CvVSModule	access:protected	signature:(char* name)
CvVSModule::TransferParamsFromChild	/usr/include/opencv/cvvidsurv.hpp	/^    void TransferParamsFromChild(CvVSModule* pM, char* prefix = NULL)$/;"	f	class:CvVSModule	access:public	signature:(CvVSModule* pM, char* prefix = NULL)
CvVSModule::TransferParamsToChild	/usr/include/opencv/cvvidsurv.hpp	/^    void TransferParamsToChild(CvVSModule* pM, char* prefix = NULL)$/;"	f	class:CvVSModule	access:public	signature:(CvVSModule* pM, char* prefix = NULL)
CvVSModule::m_Wnd	/usr/include/opencv/cvvidsurv.hpp	/^    int         m_Wnd;$/;"	m	class:CvVSModule	access:protected
CvVSModule::m_pModuleName	/usr/include/opencv/cvvidsurv.hpp	/^    char*       m_pModuleName;$/;"	m	class:CvVSModule	access:private
CvVSModule::m_pModuleTypeName	/usr/include/opencv/cvvidsurv.hpp	/^    char*       m_pModuleTypeName;$/;"	m	class:CvVSModule	access:private
CvVSModule::m_pNickName	/usr/include/opencv/cvvidsurv.hpp	/^    char*       m_pNickName;$/;"	m	class:CvVSModule	access:private
CvVSModule::m_pParamList	/usr/include/opencv/cvvidsurv.hpp	/^    CvDefParam*   m_pParamList;$/;"	m	class:CvVSModule	access:private
CvVSModule::~CvVSModule	/usr/include/opencv/cvvidsurv.hpp	/^    virtual ~CvVSModule()$/;"	f	class:CvVSModule	access:public	signature:()
CvVect32f	/usr/include/opencv/cvtypes.h	/^typedef float*   CvVect32f;$/;"	t
CvVect64d	/usr/include/opencv/cvtypes.h	/^typedef double*  CvVect64d;$/;"	t
CvVectors	/usr/include/opencv/ml.h	/^struct CvVectors$/;"	s
CvVectors::__anon20::db	/usr/include/opencv/ml.h	/^        double** db;$/;"	m	union:CvVectors::__anon20	access:public
CvVectors::__anon20::fl	/usr/include/opencv/ml.h	/^        float** fl;$/;"	m	union:CvVectors::__anon20	access:public
CvVectors::__anon20::ptr	/usr/include/opencv/ml.h	/^        uchar** ptr;$/;"	m	union:CvVectors::__anon20	access:public
CvVectors::count	/usr/include/opencv/ml.h	/^    int dims, count;$/;"	m	struct:CvVectors	access:public
CvVectors::data	/usr/include/opencv/ml.h	/^    } data;$/;"	m	struct:CvVectors	typeref:union:CvVectors::__anon20	access:public
CvVectors::dims	/usr/include/opencv/ml.h	/^    int dims, count;$/;"	m	struct:CvVectors	access:public
CvVectors::next	/usr/include/opencv/ml.h	/^    CvVectors* next;$/;"	m	struct:CvVectors	access:public
CvVectors::type	/usr/include/opencv/ml.h	/^    int type;$/;"	m	struct:CvVectors	access:public
CvVideoWriter	/usr/include/opencv/highgui.h	/^typedef struct CvVideoWriter CvVideoWriter;$/;"	t	typeref:struct:CvVideoWriter
CvVoronoiDiagram2D	/usr/include/opencv/cvaux.h	/^typedef struct CvVoronoiDiagram2D$/;"	s
CvVoronoiDiagram2D	/usr/include/opencv/cvaux.h	/^} CvVoronoiDiagram2D;$/;"	t	typeref:struct:CvVoronoiDiagram2D
CvVoronoiEdge2D	/usr/include/opencv/cvaux.h	/^typedef struct CvVoronoiEdge2D$/;"	s
CvVoronoiEdge2D	/usr/include/opencv/cvaux.h	/^} CvVoronoiEdge2D;$/;"	t	typeref:struct:CvVoronoiEdge2D
CvVoronoiNode2D	/usr/include/opencv/cvaux.h	/^typedef struct CvVoronoiNode2D$/;"	s
CvVoronoiNode2D	/usr/include/opencv/cvaux.h	/^} CvVoronoiNode2D;$/;"	t	typeref:struct:CvVoronoiNode2D
CvVoronoiSite2D	/usr/include/opencv/cvaux.h	/^typedef struct CvVoronoiSite2D$/;"	s
CvVoronoiSite2D	/usr/include/opencv/cvaux.h	/^} CvVoronoiSite2D;$/;"	t	typeref:struct:CvVoronoiSite2D
CvVoronoiSite2D::next	/usr/include/opencv/cvaux.h	/^    struct CvVoronoiSite2D *next[2];$/;"	m	struct:CvVoronoiSite2D	typeref:struct:CvVoronoiSite2D::CvVoronoiSite2D	access:public
CvWin32WindowCallback	/usr/include/opencv/highgui.h	/^typedef int (CV_CDECL * CvWin32WindowCallback)(HWND, UINT, WPARAM, LPARAM, int*);$/;"	t
CvWriteFunc	/usr/include/opencv/cxtypes.h	/^typedef void (CV_CDECL *CvWriteFunc)( CvFileStorage* storage, const char* name,$/;"	t
Cv_iplAllocateImageData	/usr/include/opencv/cxcore.h	/^typedef void (CV_STDCALL* Cv_iplAllocateImageData)(IplImage*,int,int);$/;"	t
Cv_iplCloneImage	/usr/include/opencv/cxcore.h	/^typedef IplImage* (CV_STDCALL* Cv_iplCloneImage)(const IplImage*);$/;"	t
Cv_iplCreateImageHeader	/usr/include/opencv/cxcore.h	/^typedef IplImage* (CV_STDCALL* Cv_iplCreateImageHeader)$/;"	t
Cv_iplCreateROI	/usr/include/opencv/cxcore.h	/^typedef IplROI* (CV_STDCALL* Cv_iplCreateROI)(int,int,int,int,int);$/;"	t
Cv_iplDeallocate	/usr/include/opencv/cxcore.h	/^typedef void (CV_STDCALL* Cv_iplDeallocate)(IplImage*,int);$/;"	t
CvvImage	/usr/include/opencv/highgui.h	/^    CvvImage();$/;"	p	class:CvvImage	access:public	signature:()
CvvImage	/usr/include/opencv/highgui.h	/^class CV_EXPORTS CvvImage$/;"	c
CvvImage::Bpp	/usr/include/opencv/highgui.h	/^    int Bpp() { return m_img ? (m_img->depth & 255)*m_img->nChannels : 0; };$/;"	f	class:CvvImage	access:public	signature:()
CvvImage::CopyOf	/usr/include/opencv/highgui.h	/^    virtual void  CopyOf( CvvImage& image, int desired_color = -1 );$/;"	p	class:CvvImage	access:public	signature:( CvvImage& image, int desired_color = -1 )
CvvImage::CopyOf	/usr/include/opencv/highgui.h	/^    virtual void  CopyOf( IplImage* img, int desired_color = -1 );$/;"	p	class:CvvImage	access:public	signature:( IplImage* img, int desired_color = -1 )
CvvImage::Create	/usr/include/opencv/highgui.h	/^    virtual bool  Create( int width, int height, int bits_per_pixel, int image_origin = 0 );$/;"	p	class:CvvImage	access:public	signature:( int width, int height, int bits_per_pixel, int image_origin = 0 )
CvvImage::CvvImage	/usr/include/opencv/highgui.h	/^    CvvImage();$/;"	p	class:CvvImage	access:public	signature:()
CvvImage::Destroy	/usr/include/opencv/highgui.h	/^    virtual void  Destroy(void);$/;"	p	class:CvvImage	access:public	signature:(void)
CvvImage::DrawToHDC	/usr/include/opencv/highgui.h	/^    virtual void  DrawToHDC( HDC hDCDst, RECT* pDstRect );$/;"	p	class:CvvImage	access:public	signature:( HDC hDCDst, RECT* pDstRect )
CvvImage::Fill	/usr/include/opencv/highgui.h	/^    virtual void  Fill( int color );$/;"	p	class:CvvImage	access:public	signature:( int color )
CvvImage::GetImage	/usr/include/opencv/highgui.h	/^    IplImage* GetImage() { return m_img; };$/;"	f	class:CvvImage	access:public	signature:()
CvvImage::Height	/usr/include/opencv/highgui.h	/^    int Height() { return !m_img ? 0 : !m_img->roi ? m_img->height : m_img->roi->height;};$/;"	f	class:CvvImage	access:public	signature:()
CvvImage::Load	/usr/include/opencv/highgui.h	/^    virtual bool  Load( const char* filename, int desired_color = 1 );$/;"	p	class:CvvImage	access:public	signature:( const char* filename, int desired_color = 1 )
CvvImage::LoadRect	/usr/include/opencv/highgui.h	/^    virtual bool  LoadRect( const char* filename,$/;"	f	class:CvvImage	access:public	signature:( const char* filename, int desired_color, RECT r )
CvvImage::LoadRect	/usr/include/opencv/highgui.h	/^    virtual bool  LoadRect( const char* filename,$/;"	p	class:CvvImage	access:public	signature:( const char* filename, int desired_color, CvRect r )
CvvImage::Save	/usr/include/opencv/highgui.h	/^    virtual bool  Save( const char* filename );$/;"	p	class:CvvImage	access:public	signature:( const char* filename )
CvvImage::Show	/usr/include/opencv/highgui.h	/^    virtual void  Show( HDC dc, int x, int y, int width, int height,$/;"	p	class:CvvImage	access:public	signature:( HDC dc, int x, int y, int width, int height, int from_x = 0, int from_y = 0 )
CvvImage::Show	/usr/include/opencv/highgui.h	/^    virtual void  Show( const char* window );$/;"	p	class:CvvImage	access:public	signature:( const char* window )
CvvImage::Width	/usr/include/opencv/highgui.h	/^    int Width() { return !m_img ? 0 : !m_img->roi ? m_img->width : m_img->roi->width; };$/;"	f	class:CvvImage	access:public	signature:()
CvvImage::m_img	/usr/include/opencv/highgui.h	/^    IplImage*  m_img;$/;"	m	class:CvvImage	access:protected
CvvImage::~CvvImage	/usr/include/opencv/highgui.h	/^    virtual ~CvvImage();$/;"	p	class:CvvImage	access:public	signature:()
DEFAULT	/usr/include/opencv/ml.h	/^    enum { DEFAULT=0, GINI=1, MISCLASS=3, SQERR=4 };$/;"	e	enum:CvBoost::__anon28
DILATE	/usr/include/opencv/cv.hpp	/^    enum { ERODE=0, DILATE=1 };$/;"	e	enum:CvMorphology::__anon12
DISCRETE	/usr/include/opencv/ml.h	/^    enum { DISCRETE=0, REAL=1, LOGIT=2, GENTLE=3 };$/;"	e	enum:CvBoost::__anon27
DP	/usr/include/opencv/cvtypes.h	/^    int DP;                     \/* number of state vector dimensions *\/$/;"	m	struct:CvKalman	access:public
DP	/usr/include/opencv/cvtypes.h	/^    int DP;$/;"	m	struct:CvConDensation	access:public
DYN	core_structures.h	45;"	d
DYNAMIC_STRUCTURE	core_structures.h	77;"	d
DYNAMIC_STRUCTURE_DECLARATIONS	core_structures.h	64;"	d
DYN_FREE	core_structures.h	44;"	d
DYN_INIT	core_structures.h	43;"	d
DelBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    DelBlob(int BlobIndex) = 0;$/;"	p	class:CvBlobTracker	access:public	signature:(int BlobIndex)
DelBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void DelBlob(int BlobIndex)$/;"	f	class:CvBlobSeq	access:public	signature:(int BlobIndex)
DelBlobByID	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    DelBlobByID(int BlobID){DelBlob(GetBlobIndexByID(BlobID));};$/;"	f	class:CvBlobTracker	access:public	signature:(int BlobID)
DelBlobByID	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void DelBlobByID(int BlobID)$/;"	f	class:CvBlobSeq	access:public	signature:(int BlobID)
DelBlobTrack	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void DelBlobTrack(int TrackIndex)$/;"	f	class:CvBlobTrackSeq	access:public	signature:(int TrackIndex)
DelBlobTrackByID	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void DelBlobTrackByID(int TrackID)$/;"	f	class:CvBlobTrackSeq	access:public	signature:(int TrackID)
DelParam	/usr/include/opencv/cvvidsurv.hpp	/^    void DelParam(char* name)$/;"	f	class:CvVSModule	access:protected	signature:(char* name)
Destroy	/usr/include/opencv/highgui.h	/^    virtual void  Destroy(void);$/;"	p	class:CvvImage	access:public	signature:(void)
Detect	/usr/include/opencv/cvvidsurv.hpp	/^    void Detect( const CvArr* \/*img*\/, \/* out *\/ CvBlobSeq* \/*detected_blob_seq*\/ = 0 ) {};$/;"	f	class:CvObjectDetector	access:public	signature:( const CvArr* , CvBlobSeq* = 0 )
DetectNewBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual int DetectNewBlob(IplImage* pImg, IplImage* pImgFG, CvBlobSeq* pNewBlobList, CvBlobSeq* pOldBlobList) = 0;$/;"	p	class:CvBlobDetector	access:public	signature:(IplImage* pImg, IplImage* pImgFG, CvBlobSeq* pNewBlobList, CvBlobSeq* pOldBlobList)
Double	/usr/include/opencv/cvvidsurv.hpp	/^    double              Double;$/;"	m	struct:CvDefParam	access:public
Double_Index	geometry_structures.h	/^struct Double_Index { $/;"	s
Double_Index::primary	geometry_structures.h	/^	size_t primary, secondary; $/;"	m	struct:Double_Index	access:public
Double_Index::secondary	geometry_structures.h	/^	size_t primary, secondary; $/;"	m	struct:Double_Index	access:public
Double_Index::set	geometry_structures.h	/^	bool set; $/;"	m	struct:Double_Index	access:public
Draw	/usr/include/opencv/cvvidsurv.hpp	/^    IplImage* Draw( const CvArr* src, CvBlobSeq* blob_seq = 0, const CvSeq* roi_seq = 0 );$/;"	p	class:CvImageDrawer	access:public	signature:( const CvArr* src, CvBlobSeq* blob_seq = 0, const CvSeq* roi_seq = 0 )
DrawPoints	/usr/include/opencv/cvaux.h	/^    virtual void DrawPoints( CvMat** dst );$/;"	p	class:CvCalibFilter	access:public	signature:( CvMat** dst )
DrawPoints	/usr/include/opencv/cvaux.h	/^    virtual void DrawPoints( IplImage** dst );$/;"	p	class:CvCalibFilter	access:public	signature:( IplImage** dst )
DrawToHDC	/usr/include/opencv/highgui.h	/^    virtual void  DrawToHDC( HDC hDCDst, RECT* pDstRect );$/;"	p	class:CvvImage	access:public	signature:( HDC hDCDst, RECT* pDstRect )
Drawing_Style	interface_opengl.h	/^struct Drawing_Style { $/;"	s
Drawing_Style::color	interface_opengl.h	/^	float color[3], line_width, point_size, opacity;$/;"	m	struct:Drawing_Style	access:public
Drawing_Style::line_width	interface_opengl.h	/^	float color[3], line_width, point_size, opacity;$/;"	m	struct:Drawing_Style	access:public
Drawing_Style::opacity	interface_opengl.h	/^	float color[3], line_width, point_size, opacity;$/;"	m	struct:Drawing_Style	access:public
Drawing_Style::point_size	interface_opengl.h	/^	float color[3], line_width, point_size, opacity;$/;"	m	struct:Drawing_Style	access:public
DynamMatr	/usr/include/opencv/cvtypes.h	/^    float* DynamMatr;           \/* =transition_matrix->data.fl *\/$/;"	m	struct:CvKalman	access:public
DynamMatr	/usr/include/opencv/cvtypes.h	/^    float* DynamMatr;       \/* Matrix of the linear Dynamics system  *\/$/;"	m	struct:CvConDensation	access:public
ELLIPSE	/usr/include/opencv/cv.hpp	/^    enum { RECT=0, CROSS=1, ELLIPSE=2, CUSTOM=100, BINARY = 0, GRAYSCALE=256 };$/;"	e	enum:CvMorphology::__anon11
ELLIPSE	/usr/include/opencv/cvvidsurv.hpp	/^    enum {RECT, ELLIPSE} shape;$/;"	e	enum:CvDrawShape::__anon33
EPS_SVR	/usr/include/opencv/ml.h	/^    enum { C_SVC=100, NU_SVC=101, ONE_CLASS=102, EPS_SVR=103, NU_SVR=104 };$/;"	e	enum:CvSVM::__anon21
ERODE	/usr/include/opencv/cv.hpp	/^    enum { ERODE=0, DILATE=1 };$/;"	e	enum:CvMorphology::__anon12
EXIT	/usr/include/opencv/cxerror.h	185;"	d
F	geometry_structures.h	/^	CvMat * F; $/;"	m	struct:Calibration_Fundamental_Matrix	access:public
FGTrainFrames	/usr/include/opencv/cvvidsurv.hpp	/^    int                     FGTrainFrames; \/* number of frames are needed for FG detector to train *\/$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
FILESYSTEM_PATH_SEPARATOR	interface_filesystem.h	/^const char * const FILESYSTEM_PATH_SEPARATOR = "\/";$/;"	v
FILESYSTEM_PATH_SEPARATOR	interface_filesystem.h	/^const char * const FILESYSTEM_PATH_SEPARATOR = "\\\\";$/;"	v
FILESYSTEM_PATH_SEPARATORS	interface_filesystem.h	/^const char * const FILESYSTEM_PATH_SEPARATORS = "\\\\\/"; \/\/ note somewhat platform dependent$/;"	v
FLIP_KERNEL	/usr/include/opencv/cv.hpp	/^    enum { NORMALIZE_KERNEL=1, FLIP_KERNEL=2 };$/;"	e	enum:CvSepFilter::__anon10
FREE	core_debug.h	38;"	d
Fbd	/usr/include/opencv/cvaux.h	/^    IplImage*              Fbd;$/;"	m	struct:CvFGDStatModel	access:public
Fill	/usr/include/opencv/highgui.h	/^    virtual void  Fill( int color );$/;"	p	class:CvvImage	access:public	signature:( int color )
FindEtalon	/usr/include/opencv/cvaux.h	/^    virtual bool FindEtalon( CvMat** imgs );$/;"	p	class:CvCalibFilter	access:public	signature:( CvMat** imgs )
FindEtalon	/usr/include/opencv/cvaux.h	/^    virtual bool FindEtalon( IplImage** imgs );$/;"	p	class:CvCalibFilter	access:public	signature:( IplImage** imgs )
Float	/usr/include/opencv/cvvidsurv.hpp	/^    float               Float;$/;"	m	struct:CvDefParam	access:public
FreeParam	/usr/include/opencv/cvvidsurv.hpp	/^    void    FreeParam(CvDefParam** pp)$/;"	f	class:CvVSModule	access:private	signature:(CvDefParam** pp)
Fs	geometry_structures.h	/^	Calibration_Fundamental_Matrices Fs; \/\/ note currently not used \/\/ fundamental matrices transforming points in different shots to lines on this shot$/;"	m	struct:Calibration_Camera	access:public
Ftd	/usr/include/opencv/cvaux.h	/^    IplImage*              Ftd;$/;"	m	struct:CvFGDStatModel	access:public
G	/usr/include/opencv/ml.h	/^    double* G;$/;"	m	class:CvSVMSolver	access:public
GAUSSIAN	/usr/include/opencv/ml.h	/^    enum { IDENTITY = 0, SIGMOID_SYM = 1, GAUSSIAN = 2 };$/;"	e	enum:CvANN_MLP::__anon30
GENERIC	/usr/include/opencv/cv.hpp	/^    enum { GENERIC=0, ASYMMETRICAL=1, SYMMETRICAL=2, POSITIVE=4, SUM_TO_1=8, INTEGER=16 };$/;"	e	enum:CvSepFilter::__anon9
GENTLE	/usr/include/opencv/ml.h	/^    enum { DISCRETE=0, REAL=1, LOGIT=2, GENTLE=3 };$/;"	e	enum:CvBoost::__anon27
GEOMETRY_CORRESPONDENCE	geometry_structures.h	/^enum GEOMETRY_RELATION { GEOMETRY_CORRESPONDENCE, GEOMETRY_INCIDENCE };$/;"	e	enum:GEOMETRY_RELATION
GEOMETRY_DATA_ORIGIN	geometry_structures.h	/^enum GEOMETRY_DATA_ORIGIN { GEOMETRY_MANUAL_INPUT, GEOMETRY_GENERATED = -1, GEOMETRY_NOT_CREDIBLE = -2, GEOMETRY_NOT_CHANGED = -3, GEOMETRY_MANUALLY_MARKED_AS_INVISIBLE = -4 }; \/\/ todo probably change this to something better$/;"	g
GEOMETRY_GENERATED	geometry_structures.h	/^enum GEOMETRY_DATA_ORIGIN { GEOMETRY_MANUAL_INPUT, GEOMETRY_GENERATED = -1, GEOMETRY_NOT_CREDIBLE = -2, GEOMETRY_NOT_CHANGED = -3, GEOMETRY_MANUALLY_MARKED_AS_INVISIBLE = -4 }; \/\/ todo probably change this to something better$/;"	e	enum:GEOMETRY_DATA_ORIGIN
GEOMETRY_IMAGE_INFO_STATUS	geometry_structures.h	/^enum GEOMETRY_IMAGE_INFO_STATUS $/;"	g
GEOMETRY_INCIDENCE	geometry_structures.h	/^enum GEOMETRY_RELATION { GEOMETRY_CORRESPONDENCE, GEOMETRY_INCIDENCE };$/;"	e	enum:GEOMETRY_RELATION
GEOMETRY_INFO_DEDUCED	geometry_structures.h	/^	GEOMETRY_INFO_DEDUCED,       \/\/ this file specifically wasn't loaded, but image dimensions have been taken from a different source (another image from the same sequence, .xml file, ...)$/;"	e	enum:GEOMETRY_IMAGE_INFO_STATUS
GEOMETRY_INFO_LOADED	geometry_structures.h	/^	GEOMETRY_INFO_LOADED         \/\/ file was loaded and reliable dimensions save were stored$/;"	e	enum:GEOMETRY_IMAGE_INFO_STATUS
GEOMETRY_INFO_NOT_LOADED	geometry_structures.h	/^	GEOMETRY_INFO_NOT_LOADED,    \/\/ info is unknown $/;"	e	enum:GEOMETRY_IMAGE_INFO_STATUS
GEOMETRY_ITEM_TYPE	geometry_structures.h	/^enum GEOMETRY_ITEM_TYPE { GEOMETRY_UNSPECIFIED, GEOMETRY_POINT, GEOMETRY_VERTEX, GEOMETRY_SHOT };$/;"	g
GEOMETRY_MANUALLY_MARKED_AS_INVISIBLE	geometry_structures.h	/^enum GEOMETRY_DATA_ORIGIN { GEOMETRY_MANUAL_INPUT, GEOMETRY_GENERATED = -1, GEOMETRY_NOT_CREDIBLE = -2, GEOMETRY_NOT_CHANGED = -3, GEOMETRY_MANUALLY_MARKED_AS_INVISIBLE = -4 }; \/\/ todo probably change this to something better$/;"	e	enum:GEOMETRY_DATA_ORIGIN
GEOMETRY_MANUAL_INPUT	geometry_structures.h	/^enum GEOMETRY_DATA_ORIGIN { GEOMETRY_MANUAL_INPUT, GEOMETRY_GENERATED = -1, GEOMETRY_NOT_CREDIBLE = -2, GEOMETRY_NOT_CHANGED = -3, GEOMETRY_MANUALLY_MARKED_AS_INVISIBLE = -4 }; \/\/ todo probably change this to something better$/;"	e	enum:GEOMETRY_DATA_ORIGIN
GEOMETRY_NOT_CHANGED	geometry_structures.h	/^enum GEOMETRY_DATA_ORIGIN { GEOMETRY_MANUAL_INPUT, GEOMETRY_GENERATED = -1, GEOMETRY_NOT_CREDIBLE = -2, GEOMETRY_NOT_CHANGED = -3, GEOMETRY_MANUALLY_MARKED_AS_INVISIBLE = -4 }; \/\/ todo probably change this to something better$/;"	e	enum:GEOMETRY_DATA_ORIGIN
GEOMETRY_NOT_CREDIBLE	geometry_structures.h	/^enum GEOMETRY_DATA_ORIGIN { GEOMETRY_MANUAL_INPUT, GEOMETRY_GENERATED = -1, GEOMETRY_NOT_CREDIBLE = -2, GEOMETRY_NOT_CHANGED = -3, GEOMETRY_MANUALLY_MARKED_AS_INVISIBLE = -4 }; \/\/ todo probably change this to something better$/;"	e	enum:GEOMETRY_DATA_ORIGIN
GEOMETRY_POINT	geometry_structures.h	/^enum GEOMETRY_ITEM_TYPE { GEOMETRY_UNSPECIFIED, GEOMETRY_POINT, GEOMETRY_VERTEX, GEOMETRY_SHOT };$/;"	e	enum:GEOMETRY_ITEM_TYPE
GEOMETRY_RELATION	geometry_structures.h	/^enum GEOMETRY_RELATION { GEOMETRY_CORRESPONDENCE, GEOMETRY_INCIDENCE };$/;"	g
GEOMETRY_SHOT	geometry_structures.h	/^enum GEOMETRY_ITEM_TYPE { GEOMETRY_UNSPECIFIED, GEOMETRY_POINT, GEOMETRY_VERTEX, GEOMETRY_SHOT };$/;"	e	enum:GEOMETRY_ITEM_TYPE
GEOMETRY_UNSPECIFIED	geometry_structures.h	/^enum GEOMETRY_ITEM_TYPE { GEOMETRY_UNSPECIFIED, GEOMETRY_POINT, GEOMETRY_VERTEX, GEOMETRY_SHOT };$/;"	e	enum:GEOMETRY_ITEM_TYPE
GEOMETRY_VERTEX	geometry_structures.h	/^enum GEOMETRY_ITEM_TYPE { GEOMETRY_UNSPECIFIED, GEOMETRY_POINT, GEOMETRY_VERTEX, GEOMETRY_SHOT };$/;"	e	enum:GEOMETRY_ITEM_TYPE
GEOMETRY_VERTEX_AUTO	geometry_structures.h	/^enum GEOMETRY_VERTEX_TYPE { GEOMETRY_VERTEX_USER, GEOMETRY_VERTEX_AUTO, GEOMETRY_VERTEX_EQUIVALENCE };$/;"	e	enum:GEOMETRY_VERTEX_TYPE
GEOMETRY_VERTEX_EQUIVALENCE	geometry_structures.h	/^enum GEOMETRY_VERTEX_TYPE { GEOMETRY_VERTEX_USER, GEOMETRY_VERTEX_AUTO, GEOMETRY_VERTEX_EQUIVALENCE };$/;"	e	enum:GEOMETRY_VERTEX_TYPE
GEOMETRY_VERTEX_TYPE	geometry_structures.h	/^enum GEOMETRY_VERTEX_TYPE { GEOMETRY_VERTEX_USER, GEOMETRY_VERTEX_AUTO, GEOMETRY_VERTEX_EQUIVALENCE };$/;"	g
GEOMETRY_VERTEX_USER	geometry_structures.h	/^enum GEOMETRY_VERTEX_TYPE { GEOMETRY_VERTEX_USER, GEOMETRY_VERTEX_AUTO, GEOMETRY_VERTEX_EQUIVALENCE };$/;"	e	enum:GEOMETRY_VERTEX_TYPE
GINI	/usr/include/opencv/ml.h	/^    enum { DEFAULT=0, GINI=1, MISCLASS=3, SQERR=4 };$/;"	e	enum:CvBoost::__anon28
GRAYSCALE	/usr/include/opencv/cv.hpp	/^    enum { RECT=0, CROSS=1, ELLIPSE=2, CUSTOM=100, BINARY = 0, GRAYSCALE=256 };$/;"	e	enum:CvMorphology::__anon11
GUI_CLEAR	gui.cpp	16;"	d	file:
GUI_CLEAR_ARRAY	gui.cpp	17;"	d	file:
GUI_Context	gui.h	/^struct GUI_Context$/;"	s
GUI_Context::event	gui.h	/^	SDL_Event * event;$/;"	m	struct:GUI_Context	access:public
GUI_Context::event_cancelled	gui.h	/^	bool event_cancelled;$/;"	m	struct:GUI_Context	access:public
GUI_Context::font	gui.h	/^	CvFont font;$/;"	m	struct:GUI_Context	access:public
GUI_Context::height	gui.h	/^	int width, height;$/;"	m	struct:GUI_Context	access:public
GUI_Context::panels	gui.h	/^	GUI_Panel * panels[GUI_MAX_PANELS];$/;"	m	struct:GUI_Context	access:public
GUI_Context::panels_count	gui.h	/^	size_t panels_count;$/;"	m	struct:GUI_Context	access:public
GUI_Context::px	gui.h	/^	double px, py; \/\/ pixel width and height$/;"	m	struct:GUI_Context	access:public
GUI_Context::py	gui.h	/^	double px, py; \/\/ pixel width and height$/;"	m	struct:GUI_Context	access:public
GUI_Context::root_panel	gui.h	/^	GUI_Panel root_panel;$/;"	m	struct:GUI_Context	access:public
GUI_Context::surface	gui.h	/^	SDL_Surface * surface;$/;"	m	struct:GUI_Context	access:public
GUI_Context::video_flags	gui.h	/^	int video_flags;$/;"	m	struct:GUI_Context	access:public
GUI_Context::video_info	gui.h	/^	const SDL_VideoInfo * video_info;$/;"	m	struct:GUI_Context	access:public
GUI_Context::width	gui.h	/^	int width, height;$/;"	m	struct:GUI_Context	access:public
GUI_EVENT_HANDLER	gui.h	161;"	d
GUI_Event	gui.h	/^typedef void (*GUI_Event)(GUI_Panel * panel);$/;"	t
GUI_FIRE_EVENT	gui.cpp	24;"	d	file:
GUI_GLView_Render	gui.h	/^typedef void (*GUI_GLView_Render)();$/;"	t
GUI_MAIN	gui.h	2;"	d
GUI_MAIN_MENU_CONTAINER	gui.h	/^enum GUI_Menu_Type { GUI_MAIN_MENU_CONTAINER, GUI_MAIN_MENU_ITEM, GUI_MENU_ITEM };$/;"	e	enum:GUI_Menu_Type
GUI_MAIN_MENU_ITEM	gui.h	/^enum GUI_Menu_Type { GUI_MAIN_MENU_CONTAINER, GUI_MAIN_MENU_ITEM, GUI_MENU_ITEM };$/;"	e	enum:GUI_Menu_Type
GUI_MAX_PANELS	gui.h	17;"	d
GUI_MENU_ITEM	gui.h	/^enum GUI_Menu_Type { GUI_MAIN_MENU_CONTAINER, GUI_MAIN_MENU_ITEM, GUI_MENU_ITEM };$/;"	e	enum:GUI_Menu_Type
GUI_Menu_Type	gui.h	/^enum GUI_Menu_Type { GUI_MAIN_MENU_CONTAINER, GUI_MAIN_MENU_ITEM, GUI_MENU_ITEM };$/;"	g
GUI_NEW	gui.cpp	14;"	d	file:
GUI_NEW_ARRAY	gui.cpp	15;"	d	file:
GUI_Panel	gui.h	/^struct GUI_Panel$/;"	s
GUI_Panel::caption	gui.h	/^	const char * caption; $/;"	m	struct:GUI_Panel	access:public
GUI_Panel::caption_height	gui.h	/^	int caption_width, caption_height;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::caption_image	gui.h	/^	IplImage * caption_image;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::caption_texture_id	gui.h	/^	GLuint caption_texture_id; $/;"	m	struct:GUI_Panel	access:public
GUI_Panel::caption_width	gui.h	/^	int caption_width, caption_height;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::d	gui.h	/^	double d; $/;"	m	struct:GUI_Panel	access:public
GUI_Panel::debugging_title	gui.h	/^	const char * debugging_title;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::disabled	gui.h	/^	bool focus, disabled;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::effective_x1	gui.h	/^	int effective_x1, effective_y1, effective_x2, effective_y2;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::effective_x2	gui.h	/^	int effective_x1, effective_y1, effective_x2, effective_y2;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::effective_y1	gui.h	/^	int effective_x1, effective_y1, effective_x2, effective_y2;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::effective_y2	gui.h	/^	int effective_x1, effective_y1, effective_x2, effective_y2;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::effectively_hidden	gui.h	/^		effectively_hidden \/\/ panel is hasn't been displayed in last rendering either because $/;"	m	struct:GUI_Panel	access:public
GUI_Panel::focus	gui.h	/^	bool focus, disabled;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::glview_render	gui.h	/^	GUI_GLView_Render glview_render;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::height	gui.h	/^	int width, height;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::hidden	gui.h	/^		hidden, \/\/ panel is hidden $/;"	m	struct:GUI_Panel	access:public
GUI_Panel::i	gui.h	/^	int i; $/;"	m	struct:GUI_Panel	access:public
GUI_Panel::margin_bottom	gui.h	/^	int margin_top, margin_bottom, margin_left, margin_right;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::margin_left	gui.h	/^	int margin_top, margin_bottom, margin_left, margin_right;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::margin_right	gui.h	/^	int margin_top, margin_bottom, margin_left, margin_right;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::margin_top	gui.h	/^	int margin_top, margin_bottom, margin_left, margin_right;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::menu_first_child	gui.h	/^	GUI_Panel * menu_first_child, * menu_sibling, * menu_parent;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::menu_parent	gui.h	/^	GUI_Panel * menu_first_child, * menu_sibling, * menu_parent;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::menu_sibling	gui.h	/^	GUI_Panel * menu_first_child, * menu_sibling, * menu_parent;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::menu_type	gui.h	/^	GUI_Menu_Type menu_type;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::on_buttonaction	gui.h	/^		on_mouseup, on_menuitemaction, on_buttonaction;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::on_focus	gui.h	/^		on_focus, on_unfocus, on_mousemove, on_mousedown, on_mousedownout, $/;"	m	struct:GUI_Panel	access:public
GUI_Panel::on_menuitemaction	gui.h	/^		on_mouseup, on_menuitemaction, on_buttonaction;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::on_mousedown	gui.h	/^		on_focus, on_unfocus, on_mousemove, on_mousedown, on_mousedownout, $/;"	m	struct:GUI_Panel	access:public
GUI_Panel::on_mousedownout	gui.h	/^		on_focus, on_unfocus, on_mousemove, on_mousedown, on_mousedownout, $/;"	m	struct:GUI_Panel	access:public
GUI_Panel::on_mousemove	gui.h	/^		on_focus, on_unfocus, on_mousemove, on_mousedown, on_mousedownout, $/;"	m	struct:GUI_Panel	access:public
GUI_Panel::on_mouseup	gui.h	/^		on_mouseup, on_menuitemaction, on_buttonaction;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::on_render	gui.h	/^	GUI_Render on_render;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::on_unfocus	gui.h	/^		on_focus, on_unfocus, on_mousemove, on_mousedown, on_mousedownout, $/;"	m	struct:GUI_Panel	access:public
GUI_Panel::p	gui.h	/^	void * p;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::parent	gui.h	/^	GUI_Panel * parent, * sibling;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::positioner	gui.h	/^	GUI_Positioner positioner;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::radio_next	gui.h	/^	GUI_Panel * radio_next, * radio_parent;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::radio_parent	gui.h	/^	GUI_Panel * radio_next, * radio_parent;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::sibling	gui.h	/^	GUI_Panel * parent, * sibling;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::tab_complement	gui.h	/^	GUI_Panel * tab_complement, * tab_sibling, * tab_container;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::tab_container	gui.h	/^	GUI_Panel * tab_complement, * tab_sibling, * tab_container;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::tab_sibling	gui.h	/^	GUI_Panel * tab_complement, * tab_sibling, * tab_container;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::width	gui.h	/^	int width, height;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::x1	gui.h	/^	int x1, y1, x2, y2;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::x2	gui.h	/^	int x1, y1, x2, y2;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::y1	gui.h	/^	int x1, y1, x2, y2;$/;"	m	struct:GUI_Panel	access:public
GUI_Panel::y2	gui.h	/^	int x1, y1, x2, y2;$/;"	m	struct:GUI_Panel	access:public
GUI_Positioner	gui.h	/^typedef void (*GUI_Positioner)(GUI_Panel * panel);$/;"	t
GUI_Render	gui.h	/^typedef void (*GUI_Render)(GUI_Panel * panel);$/;"	t
GUI_SET_RENDERING_STYLE	gui.h	162;"	d
GUI_STYLE	gui_style.h	2;"	d
GetBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob*     GetBlob(int index) = 0;$/;"	p	class:CvBlobTrackerAuto	access:public	signature:(int index)
GetBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob* GetBlob(int BlobIndex) = 0;$/;"	p	class:CvBlobTracker	access:public	signature:(int BlobIndex)
GetBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob* GetBlob(int BlobIndex)$/;"	f	class:CvBlobSeq	access:public	signature:(int BlobIndex)
GetBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob* GetBlob(int index) = 0;$/;"	p	class:CvBlobTrackPostProc	access:public	signature:(int index)
GetBlobByID	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob*     GetBlobByID(int ID) = 0;$/;"	p	class:CvBlobTrackerAuto	access:public	signature:(int ID)
GetBlobByID	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob* GetBlobByID(int BlobID)$/;"	f	class:CvBlobSeq	access:public	signature:(int BlobID)
GetBlobByID	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob* GetBlobByID(int BlobID)$/;"	f	class:CvBlobTrackPostProc	access:public	signature:(int BlobID)
GetBlobByID	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob* GetBlobByID(int BlobID){return GetBlob(GetBlobIndexByID(BlobID));};$/;"	f	class:CvBlobTracker	access:public	signature:(int BlobID)
GetBlobHyp	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob* GetBlobHyp(int BlobIndex, int \/*hypothesis*\/){return GetBlob(BlobIndex);};$/;"	f	class:CvBlobTracker	access:public	signature:(int BlobIndex, int )
GetBlobHypNum	/usr/include/opencv/cvvidsurv.hpp	/^    virtual int     GetBlobHypNum(int \/*BlobIdx*\/){return 1;};$/;"	f	class:CvBlobTracker	access:public	signature:(int )
GetBlobIndexByID	/usr/include/opencv/cvvidsurv.hpp	/^    virtual int     GetBlobIndexByID(int BlobID)$/;"	f	class:CvBlobTracker	access:public	signature:(int BlobID)
GetBlobNum	/usr/include/opencv/cvvidsurv.hpp	/^    virtual int         GetBlobNum() = 0;$/;"	p	class:CvBlobTrackerAuto	access:public	signature:()
GetBlobNum	/usr/include/opencv/cvvidsurv.hpp	/^    virtual int     GetBlobNum() = 0;$/;"	p	class:CvBlobTrackPostProc	access:public	signature:()
GetBlobNum	/usr/include/opencv/cvvidsurv.hpp	/^    virtual int     GetBlobNum() = 0;$/;"	p	class:CvBlobTracker	access:public	signature:()
GetBlobNum	/usr/include/opencv/cvvidsurv.hpp	/^    virtual int GetBlobNum()$/;"	f	class:CvBlobSeq	access:public	signature:()
GetBlobTrack	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlobTrack* GetBlobTrack(int TrackIndex)$/;"	f	class:CvBlobTrackSeq	access:public	signature:(int TrackIndex)
GetBlobTrackByID	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlobTrack* GetBlobTrackByID(int TrackID)$/;"	f	class:CvBlobTrackSeq	access:public	signature:(int TrackID)
GetBlobTrackNum	/usr/include/opencv/cvvidsurv.hpp	/^    virtual int GetBlobTrackNum()$/;"	f	class:CvBlobTrackSeq	access:public	signature:()
GetCameraCount	/usr/include/opencv/cvaux.h	/^    int GetCameraCount() const { return cameraCount; }$/;"	f	class:CvCalibFilter	access:public	signature:() const
GetCameraParams	/usr/include/opencv/cvaux.h	/^    virtual const CvCamera* GetCameraParams( int idx = 0 ) const;$/;"	p	class:CvCalibFilter	access:public	signature:( int idx = 0 ) const
GetConfidence	/usr/include/opencv/cvvidsurv.hpp	/^    virtual double  GetConfidence(int \/*BlobIndex*\/, CvBlob* \/*pBlob*\/, IplImage* \/*pImg*\/, IplImage* \/*pImgFG*\/ = NULL)$/;"	f	class:CvBlobTracker	access:public	signature:(int , CvBlob* , IplImage* , IplImage* = NULL)
GetConfidence	/usr/include/opencv/cvvidsurv.hpp	/^    virtual double GetConfidence(CvBlob* \/*pBlob*\/, IplImage* \/*pImg*\/,$/;"	f	class:CvBlobTrackerOne	access:public	signature:(CvBlob* , IplImage* , IplImage* = NULL, IplImage* = NULL)
GetConfidenceList	/usr/include/opencv/cvvidsurv.hpp	/^    virtual double GetConfidenceList(CvBlobSeq* pBlobList, IplImage* pImg, IplImage* pImgFG = NULL)$/;"	f	class:CvBlobTracker	access:public	signature:(CvBlobSeq* pBlobList, IplImage* pImg, IplImage* pImgFG = NULL)
GetEtalon	/usr/include/opencv/cvaux.h	/^        GetEtalon( int* paramCount = 0, const double** etalonParams = 0,$/;"	p	class:CvCalibFilter	access:public	signature:( int* paramCount = 0, const double** etalonParams = 0, int* pointCount = 0, const CvPoint2D32f** etalonPoints = 0 ) const
GetFGMask	/usr/include/opencv/cvvidsurv.hpp	/^    virtual IplImage*   GetFGMask(){return NULL;};$/;"	f	class:CvBlobTrackerAuto	access:public	signature:()
GetFV	/usr/include/opencv/cvvidsurv.hpp	/^    virtual float*  GetFV(int index, int* pFVID) = 0; \/* pointer to FV, if return 0 then FV does not created *\/$/;"	p	class:CvBlobTrackFVGen	access:public	signature:(int index, int* pFVID)
GetFVMax	/usr/include/opencv/cvvidsurv.hpp	/^    virtual float*  GetFVMax() = 0; \/* returned pointer to array of maximal values of FV, if return 0 then FVrange is not exist *\/$/;"	p	class:CvBlobTrackFVGen	access:public	signature:()
GetFVMin	/usr/include/opencv/cvvidsurv.hpp	/^    virtual float*  GetFVMin() = 0; \/* returned pointer to array of minimal values of FV, if return 0 then FVrange is not exist *\/$/;"	p	class:CvBlobTrackFVGen	access:public	signature:()
GetFVNum	/usr/include/opencv/cvvidsurv.hpp	/^    virtual int     GetFVNum() = 0;$/;"	p	class:CvBlobTrackFVGen	access:public	signature:()
GetFVSize	/usr/include/opencv/cvvidsurv.hpp	/^    virtual int     GetFVSize() = 0;$/;"	p	class:CvBlobTrackFVGen	access:public	signature:()
GetFVVar	/usr/include/opencv/cvvidsurv.hpp	/^    virtual float*  GetFVVar(){return NULL;}; \/* returned pointer to array of variation of values of FV, if return 0 then FVVar is not exist *\/$/;"	f	class:CvBlobTrackFVGen	access:public	signature:()
GetFrameCount	/usr/include/opencv/cvaux.h	/^    virtual int GetFrameCount( int* framesTotal = 0 ) const;$/;"	p	class:CvCalibFilter	access:public	signature:( int* framesTotal = 0 ) const
GetHeight	/usr/include/opencv/cvvidsurv.hpp	/^    virtual double  GetHeight(CvBlob* pB) = 0;$/;"	p	class:CvBlobTrackAnalysisHeight	access:public	signature:(CvBlob* pB)
GetImage	/usr/include/opencv/cvvidsurv.hpp	/^    IplImage* GetImage() { return m_image; }$/;"	f	class:CvImageDrawer	access:public	signature:()
GetImage	/usr/include/opencv/highgui.h	/^    IplImage* GetImage() { return m_img; };$/;"	f	class:CvvImage	access:public	signature:()
GetLatestPoints	/usr/include/opencv/cvaux.h	/^    virtual bool GetLatestPoints( int idx, CvPoint2D32f** pts,$/;"	p	class:CvCalibFilter	access:public	signature:( int idx, CvPoint2D32f** pts, int* count, bool* found )
GetMask	/usr/include/opencv/cvvidsurv.hpp	/^    virtual IplImage* GetMask() = 0;$/;"	p	class:CvFGDetector	access:public	signature:()
GetMaxBorderSize	/usr/include/opencv/cvvidsurv.hpp	/^    int GetMaxBorderSize() const { return 0; }$/;"	f	class:CvObjectDetector	access:public	signature:() const
GetMinWindowSize	/usr/include/opencv/cvvidsurv.hpp	/^    CvSize GetMinWindowSize() const { return cvSize(0,0); }$/;"	f	class:CvObjectDetector	access:public	signature:() const
GetModuleName	/usr/include/opencv/cvvidsurv.hpp	/^    char*   GetModuleName()$/;"	f	class:CvVSModule	access:public	signature:()
GetNickName	/usr/include/opencv/cvvidsurv.hpp	/^    char* GetNickName()$/;"	f	class:CvVSModule	access:public	signature:()
GetParam	/usr/include/opencv/cvvidsurv.hpp	/^    double GetParam(char* name)$/;"	f	class:CvVSModule	access:public	signature:(char* name)
GetParamComment	/usr/include/opencv/cvvidsurv.hpp	/^    char* GetParamComment(char* name)$/;"	f	class:CvVSModule	access:public	signature:(char* name)
GetParamName	/usr/include/opencv/cvvidsurv.hpp	/^    char* GetParamName(int index)$/;"	f	class:CvVSModule	access:public	signature:(int index)
GetParamPtr	/usr/include/opencv/cvvidsurv.hpp	/^    CvDefParam* GetParamPtr(char* name)$/;"	f	class:CvVSModule	access:private	signature:(char* name)
GetParamPtr	/usr/include/opencv/cvvidsurv.hpp	/^    CvDefParam* GetParamPtr(int index)$/;"	f	class:CvVSModule	access:private	signature:(int index)
GetParamStr	/usr/include/opencv/cvvidsurv.hpp	/^    char* GetParamStr(char* name)$/;"	f	class:CvVSModule	access:public	signature:(char* name)
GetRow	/usr/include/opencv/ml.h	/^    typedef float* (CvSVMSolver::*GetRow)( int i, float* row, float* dst, bool existed );$/;"	t	class:CvSVMSolver	access:public
GetState	/usr/include/opencv/cvvidsurv.hpp	/^    virtual float       GetState(int BlobID) = 0;$/;"	p	class:CvBlobTrackerAuto	access:public	signature:(int BlobID)
GetState	/usr/include/opencv/cvvidsurv.hpp	/^    virtual float   GetState(int BlobID) = 0;$/;"	p	class:CvBlobTrackAnalysis	access:public	signature:(int BlobID)
GetStateDesc	/usr/include/opencv/cvvidsurv.hpp	/^    virtual char*       GetStateDesc(int BlobID) = 0;$/;"	p	class:CvBlobTrackerAuto	access:public	signature:(int BlobID)
GetStateDesc	/usr/include/opencv/cvvidsurv.hpp	/^    virtual char*   GetStateDesc(int \/*BlobID*\/){return NULL;};$/;"	f	class:CvBlobTrackAnalysis	access:public	signature:(int )
GetStereoParams	/usr/include/opencv/cvaux.h	/^    virtual const CvStereoCamera* GetStereoParams() const;$/;"	p	class:CvCalibFilter	access:public	signature:() const
GetTypeName	/usr/include/opencv/cvvidsurv.hpp	/^    char*   GetTypeName()$/;"	f	class:CvVSModule	access:public	signature:()
Group	ui_state.h	/^struct Group$/;"	s
Group::hidden	ui_state.h	/^	bool hidden;    \/\/ true if the group is hidden$/;"	m	struct:Group	access:public
Group::restriction	ui_state.h	/^	GEOMETRY_ITEM_TYPE restriction;    \/\/ group can be restricted to contain only some type of items (vertices, polygons, ...) \/\/ unused$/;"	m	struct:Group	access:public
Group::set	ui_state.h	/^	bool set;$/;"	m	struct:Group	access:public
Group::title	ui_state.h	/^	char * title;   \/\/ user can assign arbitrary name to a group $/;"	m	struct:Group	access:public
HAVE_IPL	/usr/include/opencv/cv.h	47;"	d
HAVE_IPL	/usr/include/opencv/cxcore.h	47;"	d
HAVE_IPL	/usr/include/opencv/cxtypes.h	90;"	d
HG_AUTOSIZE	/usr/include/opencv/highgui.h	330;"	d
HIGHGUI_BACKWARD_COMPATIBILITY	/usr/include/opencv/highgui.h	307;"	d
Height	/usr/include/opencv/highgui.h	/^    int Height() { return !m_img ? 0 : !m_img->roi ? m_img->height : m_img->roi->height;};$/;"	f	class:CvvImage	access:public	signature:()
HistType	/usr/include/opencv/cvvidsurv.hpp	/^    int     HistType; \/* see Prob.h *\/$/;"	m	struct:CvBlobTrackerParamLH	access:public
ID	/usr/include/opencv/cvvidsurv.hpp	/^    int     ID;  \/* blbo ID         *\/     $/;"	m	struct:CvBlob	access:public
ID	/usr/include/opencv/cxtypes.h	/^    int  ID;            \/* version (=0)*\/$/;"	m	struct:_IplImage	access:public
IDENTITY	/usr/include/opencv/ml.h	/^    enum { IDENTITY = 0, SIGMOID_SYM = 1, GAUSSIAN = 2 };$/;"	e	enum:CvANN_MLP::__anon30
IMAGE_LOADER_ALL	core_image_loader.h	/^enum Image_Loader_Content { IMAGE_LOADER_ALL, IMAGE_LOADER_CENTER, IMAGE_LOADER_REGION };$/;"	e	enum:Image_Loader_Content
IMAGE_LOADER_CENTER	core_image_loader.h	/^enum Image_Loader_Content { IMAGE_LOADER_ALL, IMAGE_LOADER_CENTER, IMAGE_LOADER_REGION };$/;"	e	enum:Image_Loader_Content
IMAGE_LOADER_CONTINUOUS_LOADING	core_image_loader.h	/^enum Image_Loader_Quality { IMAGE_LOADER_NOT_LOADED, IMAGE_LOADER_LOW_RESOLUTION, IMAGE_LOADER_FULL_RESOLUTION, IMAGE_LOADER_CONTINUOUS_LOADING };$/;"	e	enum:Image_Loader_Quality
IMAGE_LOADER_FULL_RESOLUTION	core_image_loader.h	/^enum Image_Loader_Quality { IMAGE_LOADER_NOT_LOADED, IMAGE_LOADER_LOW_RESOLUTION, IMAGE_LOADER_FULL_RESOLUTION, IMAGE_LOADER_CONTINUOUS_LOADING };$/;"	e	enum:Image_Loader_Quality
IMAGE_LOADER_FULL_SIZE	core_image_loader.cpp	/^static const int IMAGE_LOADER_FULL_SIZE = 2048, IMAGE_LOADER_LOW_SIZE = 256;$/;"	v	file:
IMAGE_LOADER_LOW_RESOLUTION	core_image_loader.h	/^enum Image_Loader_Quality { IMAGE_LOADER_NOT_LOADED, IMAGE_LOADER_LOW_RESOLUTION, IMAGE_LOADER_FULL_RESOLUTION, IMAGE_LOADER_CONTINUOUS_LOADING };$/;"	e	enum:Image_Loader_Quality
IMAGE_LOADER_LOW_SIZE	core_image_loader.cpp	/^static const int IMAGE_LOADER_FULL_SIZE = 2048, IMAGE_LOADER_LOW_SIZE = 256;$/;"	v	file:
IMAGE_LOADER_MAX_REQUESTS	core_image_loader.cpp	/^static const size_t IMAGE_LOADER_MAX_REQUESTS = 1000;$/;"	v	file:
IMAGE_LOADER_NOT_LOADED	core_image_loader.h	/^enum Image_Loader_Quality { IMAGE_LOADER_NOT_LOADED, IMAGE_LOADER_LOW_RESOLUTION, IMAGE_LOADER_FULL_RESOLUTION, IMAGE_LOADER_CONTINUOUS_LOADING };$/;"	e	enum:Image_Loader_Quality
IMAGE_LOADER_REGION	core_image_loader.h	/^enum Image_Loader_Content { IMAGE_LOADER_ALL, IMAGE_LOADER_CENTER, IMAGE_LOADER_REGION };$/;"	e	enum:Image_Loader_Content
INDEX_CLEAR	core_structures.h	37;"	d
INDEX_DECLARATION	core_structures.h	36;"	d
INDEX_DECLARATION	ui_state.h	/^	INDEX_DECLARATION(current_calibration);$/;"	p	struct:UI_State	access:public	signature:(current_calibration)
INDEX_DECLARATION	ui_state.h	/^	INDEX_DECLARATION(current_shot);$/;"	p	struct:UI_State	access:public	signature:(current_shot)
INDEX_DECLARATION	ui_state.h	/^	INDEX_DECLARATION(focused_point);$/;"	p	struct:UI_State	access:public	signature:(focused_point)
INDEX_DECLARATION	ui_state.h	/^	INDEX_DECLARATION(processed_polygon);$/;"	p	struct:UI_State	access:public	signature:(processed_polygon)
INDEX_DECLARATION	ui_state.h	/^	INDEX_DECLARATION(processed_vertex); $/;"	p	struct:UI_State	access:public	signature:(processed_vertex)
INDEX_IS_SET	core_structures.h	39;"	d
INDEX_IS_SET_AND_VALID	core_structures.h	40;"	d
INDEX_SET	core_structures.h	38;"	d
INTEGER	/usr/include/opencv/cv.hpp	/^    enum { GENERIC=0, ASYMMETRICAL=1, SYMMETRICAL=2, POSITIVE=4, SUM_TO_1=8, INTEGER=16 };$/;"	e	enum:CvSepFilter::__anon9
IPCVAPI	/usr/include/opencv/cxmisc.h	666;"	d
IPCVAPI_C_EX	/usr/include/opencv/cxmisc.h	676;"	d
IPCVAPI_EX	/usr/include/opencv/cxmisc.h	673;"	d
IPCVAPI_IMPL	/usr/include/opencv/cxmisc.h	680;"	d
IPL_ALIGN_16BYTES	/usr/include/opencv/cxtypes.h	349;"	d
IPL_ALIGN_32BYTES	/usr/include/opencv/cxtypes.h	350;"	d
IPL_ALIGN_4BYTES	/usr/include/opencv/cxtypes.h	347;"	d
IPL_ALIGN_8BYTES	/usr/include/opencv/cxtypes.h	348;"	d
IPL_ALIGN_DWORD	/usr/include/opencv/cxtypes.h	352;"	d
IPL_ALIGN_QWORD	/usr/include/opencv/cxtypes.h	353;"	d
IPL_BORDER_CONSTANT	/usr/include/opencv/cxtypes.h	355;"	d
IPL_BORDER_REFLECT	/usr/include/opencv/cxtypes.h	357;"	d
IPL_BORDER_REFLECT_101	/usr/include/opencv/cxtypes.h	435;"	d
IPL_BORDER_REPLICATE	/usr/include/opencv/cxtypes.h	356;"	d
IPL_BORDER_WRAP	/usr/include/opencv/cxtypes.h	358;"	d
IPL_DATA_ORDER_PIXEL	/usr/include/opencv/cxtypes.h	341;"	d
IPL_DATA_ORDER_PLANE	/usr/include/opencv/cxtypes.h	342;"	d
IPL_DEPTH_16S	/usr/include/opencv/cxtypes.h	338;"	d
IPL_DEPTH_16U	/usr/include/opencv/cxtypes.h	334;"	d
IPL_DEPTH_1U	/usr/include/opencv/cxtypes.h	332;"	d
IPL_DEPTH_32F	/usr/include/opencv/cxtypes.h	335;"	d
IPL_DEPTH_32S	/usr/include/opencv/cxtypes.h	339;"	d
IPL_DEPTH_64F	/usr/include/opencv/cxtypes.h	448;"	d
IPL_DEPTH_8S	/usr/include/opencv/cxtypes.h	337;"	d
IPL_DEPTH_8U	/usr/include/opencv/cxtypes.h	333;"	d
IPL_DEPTH_SIGN	/usr/include/opencv/cxtypes.h	330;"	d
IPL_GAUSSIAN_5x5	/usr/include/opencv/cvcompat.h	93;"	d
IPL_IMAGE_DATA	/usr/include/opencv/cxtypes.h	429;"	d
IPL_IMAGE_HEADER	/usr/include/opencv/cxtypes.h	428;"	d
IPL_IMAGE_MAGIC_VAL	/usr/include/opencv/cxtypes.h	437;"	d
IPL_IMAGE_ROI	/usr/include/opencv/cxtypes.h	430;"	d
IPL_ORIGIN_BL	/usr/include/opencv/cxtypes.h	345;"	d
IPL_ORIGIN_TL	/usr/include/opencv/cxtypes.h	344;"	d
IPPI_CALL	/usr/include/opencv/cxmisc.h	639;"	d
IS_SET	core_structures.h	49;"	d
Image_Loader_Content	core_image_loader.h	/^enum Image_Loader_Content { IMAGE_LOADER_ALL, IMAGE_LOADER_CENTER, IMAGE_LOADER_REGION };$/;"	g
Image_Loader_Quality	core_image_loader.h	/^enum Image_Loader_Quality { IMAGE_LOADER_NOT_LOADED, IMAGE_LOADER_LOW_RESOLUTION, IMAGE_LOADER_FULL_RESOLUTION, IMAGE_LOADER_CONTINUOUS_LOADING };$/;"	g
Image_Loader_Request	core_image_loader.h	/^struct Image_Loader_Request$/;"	s
Image_Loader_Request::content	core_image_loader.h	/^	Image_Loader_Content content;$/;"	m	struct:Image_Loader_Request	access:public
Image_Loader_Request::current_quality	core_image_loader.h	/^	Image_Loader_Quality current_quality;$/;"	m	struct:Image_Loader_Request	access:public
Image_Loader_Request::done	core_image_loader.h	/^	bool done;$/;"	m	struct:Image_Loader_Request	access:public
Image_Loader_Request::gl_texture_id	core_image_loader.h	/^	GLuint gl_texture_id;$/;"	m	struct:Image_Loader_Request	access:public
Image_Loader_Request::gl_texture_max_x	core_image_loader.h	/^	double gl_texture_min_x, gl_texture_min_y, gl_texture_max_x, gl_texture_max_y;$/;"	m	struct:Image_Loader_Request	access:public
Image_Loader_Request::gl_texture_max_y	core_image_loader.h	/^	double gl_texture_min_x, gl_texture_min_y, gl_texture_max_x, gl_texture_max_y;$/;"	m	struct:Image_Loader_Request	access:public
Image_Loader_Request::gl_texture_min_x	core_image_loader.h	/^	double gl_texture_min_x, gl_texture_min_y, gl_texture_max_x, gl_texture_max_y;$/;"	m	struct:Image_Loader_Request	access:public
Image_Loader_Request::gl_texture_min_y	core_image_loader.h	/^	double gl_texture_min_x, gl_texture_min_y, gl_texture_max_x, gl_texture_max_y;$/;"	m	struct:Image_Loader_Request	access:public
Image_Loader_Request::gl_texture_quality	core_image_loader.h	/^	Image_Loader_Quality gl_texture_quality;$/;"	m	struct:Image_Loader_Request	access:public
Image_Loader_Request::image	core_image_loader.h	/^	IplImage * image;$/;"	m	struct:Image_Loader_Request	access:public
Image_Loader_Request::lock	core_image_loader.h	/^	pthread_mutex_t lock;$/;"	m	struct:Image_Loader_Request	access:public
Image_Loader_Request::quality	core_image_loader.h	/^	Image_Loader_Quality quality;$/;"	m	struct:Image_Loader_Request	access:public
Image_Loader_Request::set	core_image_loader.h	/^	bool set;$/;"	m	struct:Image_Loader_Request	access:public
Image_Loader_Request::shot_id	core_image_loader.h	/^	size_t shot_id;$/;"	m	struct:Image_Loader_Request	access:public
Image_Loader_Request::sx	core_image_loader.h	/^	double x, y, sx, sy;$/;"	m	struct:Image_Loader_Request	access:public
Image_Loader_Request::sy	core_image_loader.h	/^	double x, y, sx, sy;$/;"	m	struct:Image_Loader_Request	access:public
Image_Loader_Request::x	core_image_loader.h	/^	double x, y, sx, sy;$/;"	m	struct:Image_Loader_Request	access:public
Image_Loader_Request::y	core_image_loader.h	/^	double x, y, sx, sy;$/;"	m	struct:Image_Loader_Request	access:public
Image_Loader_Request_Handle	core_image_loader.h	/^struct Image_Loader_Request_Handle$/;"	s
Image_Loader_Request_Handle::id	core_image_loader.h	/^	size_t id, time;$/;"	m	struct:Image_Loader_Request_Handle	access:public
Image_Loader_Request_Handle::time	core_image_loader.h	/^	size_t id, time;$/;"	m	struct:Image_Loader_Request_Handle	access:public
Image_Loader_Shot	core_image_loader.h	/^struct Image_Loader_Shot$/;"	s
Image_Loader_Shot::filename	core_image_loader.h	/^	const char * filename;$/;"	m	struct:Image_Loader_Shot	access:public
Image_Loader_Shot::full	core_image_loader.h	/^	IplImage * full;$/;"	m	struct:Image_Loader_Shot	access:public
Image_Loader_Shot::full_counter	core_image_loader.h	/^	int full_counter, full_unprocessed_counter; $/;"	m	struct:Image_Loader_Shot	access:public
Image_Loader_Shot::full_texture	core_image_loader.h	/^	GLuint full_texture; $/;"	m	struct:Image_Loader_Shot	access:public
Image_Loader_Shot::full_unprocessed_counter	core_image_loader.h	/^	int full_counter, full_unprocessed_counter; $/;"	m	struct:Image_Loader_Shot	access:public
Image_Loader_Shot::height	core_image_loader.h	/^	int width, height;$/;"	m	struct:Image_Loader_Shot	access:public
Image_Loader_Shot::low	core_image_loader.h	/^	IplImage * low; $/;"	m	struct:Image_Loader_Shot	access:public
Image_Loader_Shot::low_counter	core_image_loader.h	/^	int low_counter, low_unprocessed_counter;$/;"	m	struct:Image_Loader_Shot	access:public
Image_Loader_Shot::low_texture	core_image_loader.h	/^	GLuint low_texture;$/;"	m	struct:Image_Loader_Shot	access:public
Image_Loader_Shot::low_unprocessed_counter	core_image_loader.h	/^	int low_counter, low_unprocessed_counter;$/;"	m	struct:Image_Loader_Shot	access:public
Image_Loader_Shot::set	core_image_loader.h	/^	bool set;$/;"	m	struct:Image_Loader_Shot	access:public
Image_Loader_Shot::suggested	core_image_loader.h	/^	bool suggested;$/;"	m	struct:Image_Loader_Shot	access:public
Image_Loader_Shot::width	core_image_loader.h	/^	int width, height;$/;"	m	struct:Image_Loader_Shot	access:public
Index	geometry_structures.h	/^struct Index { $/;"	s
Index::set	geometry_structures.h	/^	bool set; $/;"	m	struct:Index	access:public
Index::value	geometry_structures.h	/^	size_t value; $/;"	m	struct:Index	access:public
Init	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void Init(CvBlob* pBlobInit, IplImage* pImg, IplImage* pImgFG = NULL) = 0;$/;"	p	class:CvBlobTrackerOne	access:public	signature:(CvBlob* pBlobInit, IplImage* pImg, IplImage* pImgFG = NULL)
Int	/usr/include/opencv/cvvidsurv.hpp	/^    int                 Int;$/;"	m	struct:CvDefParam	access:public
IplConvKernel	/usr/include/opencv/cxtypes.h	/^IplConvKernel;$/;"	t	typeref:struct:_IplConvKernel
IplConvKernelFP	/usr/include/opencv/cxtypes.h	/^IplConvKernelFP;$/;"	t	typeref:struct:_IplConvKernelFP
IplImage	/usr/include/opencv/cxtypes.h	/^IplImage;$/;"	t	typeref:struct:_IplImage
IplROI	/usr/include/opencv/cxtypes.h	/^IplROI;$/;"	t	typeref:struct:_IplROI
IplTileInfo	/usr/include/opencv/cxtypes.h	/^typedef struct _IplTileInfo IplTileInfo;$/;"	t	typeref:struct:_IplTileInfo
IsCalibrated	/usr/include/opencv/cvaux.h	/^    bool IsCalibrated() const { return isCalibrated; }$/;"	f	class:CvCalibFilter	access:public	signature:() const
IsModuleName	/usr/include/opencv/cvvidsurv.hpp	/^    int     IsModuleName(char* name)$/;"	f	class:CvVSModule	access:public	signature:(char* name)
IsModuleTypeName	/usr/include/opencv/cvvidsurv.hpp	/^    int     IsModuleTypeName(char* name)$/;"	f	class:CvVSModule	access:public	signature:(char* name)
IsParam	/usr/include/opencv/cvvidsurv.hpp	/^    int  IsParam(char* name)$/;"	f	class:CvVSModule	access:protected	signature:(char* name)
KalmGainMatr	/usr/include/opencv/cvtypes.h	/^    float* KalmGainMatr;        \/* =gain->data.fl *\/$/;"	m	struct:CvKalman	access:public
LAMBDA	core_structures.h	53;"	d
LAMBDA_FIND	core_structures.h	58;"	d
LAMBDA_FIND_FROM	core_structures.h	54;"	d
LAMBDA_FROM	core_structures.h	52;"	d
LAST	core_structures.h	47;"	d
LAST_INDEX	core_structures.h	48;"	d
LINEAR	/usr/include/opencv/ml.h	/^    enum { LINEAR=0, POLY=1, RBF=2, SIGMOID=3 };$/;"	e	enum:CvSVM::__anon22
LINUX	portability.h	14;"	d
LOGIT	/usr/include/opencv/ml.h	/^    enum { DISCRETE=0, REAL=1, LOGIT=2, GENTLE=3 };$/;"	e	enum:CvBoost::__anon27
Lc	/usr/include/opencv/cvaux.h	/^    int           Lc, N1c, N2c, Lcc, N1cc, N2cc, is_obj_without_holes, perform_morphing;$/;"	m	struct:CvFGDStatModelParams	access:public
Lcc	/usr/include/opencv/cvaux.h	/^    int           Lc, N1c, N2c, Lcc, N1cc, N2cc, is_obj_without_holes, perform_morphing;$/;"	m	struct:CvFGDStatModelParams	access:public
LeftEyeRect	/usr/include/opencv/cvaux.h	/^    CvRect LeftEyeRect;$/;"	m	struct:CvFace	access:public
Load	/usr/include/opencv/cvvidsurv.hpp	/^    bool Load( const char* \/*detector_file_name*\/ = 0 ) { return false; }$/;"	f	class:CvObjectDetector	access:public	signature:( const char* = 0 )
Load	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void Load(CvFileStorage* fs, CvFileNode* node)$/;"	f	class:CvBlobSeq	access:public	signature:(CvFileStorage* fs, CvFileNode* node)
Load	/usr/include/opencv/highgui.h	/^    virtual bool  Load( const char* filename, int desired_color = 1 );$/;"	p	class:CvvImage	access:public	signature:( const char* filename, int desired_color = 1 )
LoadCameraParams	/usr/include/opencv/cvaux.h	/^    virtual bool LoadCameraParams( const char* filename );$/;"	p	class:CvCalibFilter	access:public	signature:( const char* filename )
LoadRect	/usr/include/opencv/highgui.h	/^    virtual bool  LoadRect( const char* filename,$/;"	f	class:CvvImage	access:public	signature:( const char* filename, int desired_color, RECT r )
LoadRect	/usr/include/opencv/highgui.h	/^    virtual bool  LoadRect( const char* filename,$/;"	p	class:CvvImage	access:public	signature:( const char* filename, int desired_color, CvRect r )
LoadState	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void LoadState(CvFileStorage*, CvFileNode*){};$/;"	f	class:CvVSModule	access:public	signature:(CvFileStorage*, CvFileNode*)
MATCHING_F_RANSAC	tool_matching.cpp	/^	MATCHING_F_RANSAC = 8,$/;"	v
MATCHING_GUIDED	tool_matching.cpp	/^	MATCHING_GUIDED = 5, $/;"	v
MATCHING_IMAGE_MEASUREMENT_THRESHOLD	tool_matching.cpp	/^	MATCHING_IMAGE_MEASUREMENT_THRESHOLD = 3,$/;"	v
MATCHING_INCLUDE_UNVERIFIED	tool_matching.cpp	/^	MATCHING_INCLUDE_UNVERIFIED = 9$/;"	v
MATCHING_METHOD	tool_matching.cpp	/^	MATCHING_METHOD = 0, $/;"	v
MATCHING_MSER	tool_matching.cpp	/^	MATCHING_MSER = 1$/;"	v
MATCHING_NEIGHBOURS	tool_matching.cpp	/^	MATCHING_NEIGHBOURS = 2,$/;"	v
MATCHING_RESOLUTION	tool_matching.cpp	/^	MATCHING_RESOLUTION = 6,$/;"	v
MATCHING_SIFT	tool_matching.cpp	/^	MATCHING_SIFT = 0, $/;"	v
MATCHING_SIMILARITY_THRESHOLD	tool_matching.cpp	/^	MATCHING_SIMILARITY_THRESHOLD = 4, $/;"	v
MATCHING_SKIP_FEATURE_EXTRACTION	tool_matching.cpp	/^	MATCHING_SKIP_FEATURE_EXTRACTION = 7,$/;"	v
MATCHING_TOPOLOGY	tool_matching.cpp	/^	MATCHING_TOPOLOGY = 1, $/;"	v
MATCHING_TOPOLOGY_SEQUENCE	tool_matching.cpp	/^	MATCHING_TOPOLOGY_SEQUENCE = 1$/;"	v
MATCHING_TOPOLOGY_UNORDERED	tool_matching.cpp	/^	MATCHING_TOPOLOGY_UNORDERED = 0, $/;"	v
MAX	/usr/include/opencv/cxtypes.h	188;"	d
MAX_CAMERAS	/usr/include/opencv/cvaux.h	/^    enum { MAX_CAMERAS = 3 };$/;"	e	enum:CvCalibFilter::__anon7
MIN	/usr/include/opencv/cxtypes.h	184;"	d
MISCLASS	/usr/include/opencv/ml.h	/^    enum { DEFAULT=0, GINI=1, MISCLASS=3, SQERR=4 };$/;"	e	enum:CvBoost::__anon28
MNCovariance	/usr/include/opencv/cvtypes.h	/^    float* MNCovariance;        \/* =measurement_noise_cov->data.fl *\/$/;"	m	struct:CvKalman	access:public
MP	/usr/include/opencv/cvtypes.h	/^    int MP;                     \/* number of measurement vector dimensions *\/$/;"	m	struct:CvKalman	access:public
MP	/usr/include/opencv/cvtypes.h	/^    int MP;$/;"	m	struct:CvConDensation	access:public
MVG_FEATURE	mvg_matching.h	10;"	d
MVG_MEASUREMENT_THRESHOLD	mvg_thresholds.h	/^const double MVG_MEASUREMENT_THRESHOLD = 10.0;$/;"	v
MVG_MIN_INLIERS_TO_TRIANGULATE	mvg_thresholds.h	/^	MVG_MIN_INLIERS_TO_TRIANGULATE = 2,$/;"	v
MVG_MIN_INLIERS_TO_TRIANGULATE_WEAKER	mvg_thresholds.h	/^	MVG_MIN_INLIERS_TO_TRIANGULATE_WEAKER = 2   \/\/ when there are no outliers in the dataset$/;"	v
MVG_RANSAC_PROBABILITY	mvg_thresholds.h	/^const double MVG_RANSAC_PROBABILITY = 0.999;$/;"	v
MVG_RANSAC_TRIALS	mvg_thresholds.h	/^const int MVG_RANSAC_TRIALS = 500;$/;"	v
MVG_RANSAC_TRIANGULATION_TRIALS	mvg_thresholds.h	/^const int MVG_RANSAC_TRIANGULATION_TRIALS = 25;$/;"	v
Matching_Shot	tool_matching.h	/^struct Matching_Shot$/;"	s
Matching_Shot::height	tool_matching.h	/^	int width, height; \/\/ size of loaded shot $/;"	m	struct:Matching_Shot	access:public
Matching_Shot::width	tool_matching.h	/^	int width, height; \/\/ size of loaded shot $/;"	m	struct:Matching_Shot	access:public
Matching_UF_Node	tool_matching.cpp	/^struct Matching_UF_Node $/;"	s	file:
Matching_UF_Node::i	tool_matching.cpp	/^	size_t i; \/\/ index of parent for children, size for root nodes$/;"	m	struct:Matching_UF_Node	file:	access:public
Matching_UF_Node::root	tool_matching.cpp	/^	bool root; \/\/ is this root element $/;"	m	struct:Matching_UF_Node	file:	access:public
Matching_UF_Node::root_with_vertex	tool_matching.cpp	/^	bool root_with_vertex; \/\/ does this root element have created vertex? (in that case the value i holds it's vertex_id)$/;"	m	struct:Matching_UF_Node	file:	access:public
Matching_UF_Node::set	tool_matching.cpp	/^	bool set;$/;"	m	struct:Matching_UF_Node	file:	access:public
MeasurementMatr	/usr/include/opencv/cvtypes.h	/^    float* MeasurementMatr;     \/* =measurement_matrix->data.fl *\/$/;"	m	struct:CvKalman	access:public
MouthRect	/usr/include/opencv/cvaux.h	/^    CvRect MouthRect;$/;"	m	struct:CvFace	access:public
N	/usr/include/opencv/cvaux.h	/^    int N; \/\/graph size$/;"	m	struct:CvCliqueFinder	access:public
N1c	/usr/include/opencv/cvaux.h	/^    int           Lc, N1c, N2c, Lcc, N1cc, N2cc, is_obj_without_holes, perform_morphing;$/;"	m	struct:CvFGDStatModelParams	access:public
N1cc	/usr/include/opencv/cvaux.h	/^    int           Lc, N1c, N2c, Lcc, N1cc, N2cc, is_obj_without_holes, perform_morphing;$/;"	m	struct:CvFGDStatModelParams	access:public
N2c	/usr/include/opencv/cvaux.h	/^    int           Lc, N1c, N2c, Lcc, N1cc, N2cc, is_obj_without_holes, perform_morphing;$/;"	m	struct:CvFGDStatModelParams	access:public
N2cc	/usr/include/opencv/cvaux.h	/^    int           Lc, N1c, N2c, Lcc, N1cc, N2cc, is_obj_without_holes, perform_morphing;$/;"	m	struct:CvFGDStatModelParams	access:public
NORMALIZE_KERNEL	/usr/include/opencv/cv.hpp	/^    enum { NORMALIZE_KERNEL=1, FLIP_KERNEL=2 };$/;"	e	enum:CvSepFilter::__anon10
NO_INPUT_SCALE	/usr/include/opencv/ml.h	/^    enum { UPDATE_WEIGHTS = 1, NO_INPUT_SCALE = 2, NO_OUTPUT_SCALE = 4 };$/;"	e	enum:CvANN_MLP::__anon31
NO_OUTPUT_SCALE	/usr/include/opencv/ml.h	/^    enum { UPDATE_WEIGHTS = 1, NO_INPUT_SCALE = 2, NO_OUTPUT_SCALE = 4 };$/;"	e	enum:CvANN_MLP::__anon31
NU_SVC	/usr/include/opencv/ml.h	/^    enum { C_SVC=100, NU_SVC=101, ONE_CLASS=102, EPS_SVR=103, NU_SVR=104 };$/;"	e	enum:CvSVM::__anon21
NU_SVR	/usr/include/opencv/ml.h	/^    enum { C_SVC=100, NU_SVC=101, ONE_CLASS=102, EPS_SVR=103, NU_SVR=104 };$/;"	e	enum:CvSVM::__anon21
NewParam	/usr/include/opencv/cvvidsurv.hpp	/^    CvDefParam* NewParam(char* name)$/;"	f	class:CvVSModule	access:private	signature:(char* name)
NormalizeRect	/usr/include/opencv/highgui.h	/^CV_INLINE RECT NormalizeRect( RECT r )$/;"	f	signature:( RECT r )
NormalizeRect	/usr/include/opencv/highgui.h	/^CV_INLINE RECT NormalizeRect( RECT r );$/;"	p	signature:( RECT r )
ONE_CLASS	/usr/include/opencv/ml.h	/^    enum { C_SVC=100, NU_SVC=101, ONE_CLASS=102, EPS_SVR=103, NU_SVR=104 };$/;"	e	enum:CvSVM::__anon21
OPENCV_ASSERT	/usr/include/opencv/cxerror.h	113;"	d
OPENCV_CALL	/usr/include/opencv/cxerror.h	119;"	d
OPENCV_ELEM	interface_opencv.h	32;"	d
OPENCV_ERRCHK	/usr/include/opencv/cxerror.h	109;"	d
OPENCV_ERROR	/usr/include/opencv/cxerror.h	106;"	d
OPENCV_PI	interface_opencv.h	/^const double OPENCV_PI = 3.14159265358979323846;$/;"	v
OPENCV_PIXEL	gui.h	14;"	d
OPENCV_RSTERR	/usr/include/opencv/cxerror.h	117;"	d
P	geometry_structures.h	/^	CvMat * P;$/;"	m	struct:Calibration_Camera	access:public
PNCovariance	/usr/include/opencv/cvtypes.h	/^    float* PNCovariance;        \/* =process_noise_cov->data.fl *\/$/;"	m	struct:CvKalman	access:public
POLY	/usr/include/opencv/ml.h	/^    enum { LINEAR=0, POLY=1, RBF=2, SIGMOID=3 };$/;"	e	enum:CvSVM::__anon22
POSITIVE	/usr/include/opencv/cv.hpp	/^    enum { GENERIC=0, ASYMMETRICAL=1, SYMMETRICAL=2, POSITIVE=4, SUM_TO_1=8, INTEGER=16 };$/;"	e	enum:CvSepFilter::__anon9
PROFILE_DOG	/usr/include/opencv/cvvidsurv.hpp	898;"	d
PROFILE_EPANECHNIKOV	/usr/include/opencv/cvvidsurv.hpp	897;"	d
ParamUpdate	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void ParamUpdate(){};$/;"	f	class:CvVSModule	access:public	signature:()
Pbc	/usr/include/opencv/cvaux.h	/^    float                 Pbc;$/;"	m	struct:CvBGPixelStat	access:public
Pbcc	/usr/include/opencv/cvaux.h	/^    float                 Pbcc;$/;"	m	struct:CvBGPixelStat	access:public
Point	geometry_structures.h	/^struct Point {$/;"	s
Point::data_origin	geometry_structures.h	/^	GEOMETRY_DATA_ORIGIN data_origin;    \/\/ where does this point come from (automatically generated, user submitted, ...)$/;"	m	struct:Point	access:public
Point::relation	geometry_structures.h	/^	GEOMETRY_RELATION relation;          \/\/ type of correspondence$/;"	m	struct:Point	access:public
Point::selected	geometry_structures.h	/^	bool selected;                       \/\/ denotes if this point is selected$/;"	m	struct:Point	access:public
Point::set	geometry_structures.h	/^	bool set; $/;"	m	struct:Point	access:public
Point::vertex	geometry_structures.h	/^	size_t vertex;                       \/\/ 3d vertex id$/;"	m	struct:Point	access:public
Point::x	geometry_structures.h	/^	double x, y;                         \/\/ point coordinates, x and y are numbers from interval [0, 1]$/;"	m	struct:Point	access:public
Point::y	geometry_structures.h	/^	double x, y;                         \/\/ point coordinates, x and y are numbers from interval [0, 1]$/;"	m	struct:Point	access:public
Polygon_3d	geometry_structures.h	/^struct Polygon_3d {$/;"	s
Polygon_3d::color	geometry_structures.h	/^	float color[3];$/;"	m	struct:Polygon_3d	access:public
Polygon_3d::image_loader_request	geometry_structures.h	/^	Image_Loader_Request_Handle image_loader_request;$/;"	m	struct:Polygon_3d	access:public
Polygon_3d::selected	geometry_structures.h	/^	bool selected;               \/\/ denotes if this polygon is selected$/;"	m	struct:Polygon_3d	access:public
Polygon_3d::set	geometry_structures.h	/^	bool set;$/;"	m	struct:Polygon_3d	access:public
Polygon_3d::texture_coords	geometry_structures.h	/^	double * texture_coords;$/;"	m	struct:Polygon_3d	access:public
Polygon_3d::vertices	geometry_structures.h	/^	Indices vertices;            \/\/ vertices$/;"	m	struct:Polygon_3d	access:public
PosterErrorCovariance	/usr/include/opencv/cvtypes.h	/^    float* PosterErrorCovariance;\/* =error_cov_post->data.fl *\/$/;"	m	struct:CvKalman	access:public
PosterState	/usr/include/opencv/cvtypes.h	/^    float* PosterState;         \/* =state_pre->data.fl *\/$/;"	m	struct:CvKalman	access:public
Predict	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob* Predict() = 0;$/;"	p	class:CvBlobTrackPredictor	access:public	signature:()
PriorErrorCovariance	/usr/include/opencv/cvtypes.h	/^    float* PriorErrorCovariance;\/* =error_cov_pre->data.fl *\/$/;"	m	struct:CvKalman	access:public
PriorState	/usr/include/opencv/cvtypes.h	/^    float* PriorState;          \/* =state_post->data.fl *\/$/;"	m	struct:CvKalman	access:public
Process	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob* Process(CvBlob* pBlob) = 0;$/;"	p	class:CvBlobTrackPostProcOne	access:public	signature:(CvBlob* pBlob)
Process	/usr/include/opencv/cvvidsurv.hpp	/^    virtual CvBlob* Process(CvBlob* pBlobPrev, IplImage* pImg, IplImage* pImgFG = NULL) = 0;$/;"	p	class:CvBlobTrackerOne	access:public	signature:(CvBlob* pBlobPrev, IplImage* pImg, IplImage* pImgFG = NULL)
Process	/usr/include/opencv/cvvidsurv.hpp	/^    virtual int     Process(CvBlob* pBlob, IplImage* pImg, IplImage* pFG) = 0;$/;"	p	class:CvBlobTrackAnalysisOne	access:public	signature:(CvBlob* pBlob, IplImage* pImg, IplImage* pFG)
Process	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void        Process(IplImage* pImg, IplImage* pMask = NULL) = 0;$/;"	p	class:CvBlobTrackerAuto	access:public	signature:(IplImage* pImg, IplImage* pMask = NULL)
Process	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Process() = 0;$/;"	p	class:CvBlobTrackPostProc	access:public	signature:()
Process	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Process(IplImage* pImg = NULL, IplImage* pFG = NULL) = 0;$/;"	p	class:CvBlobTrackGen	access:public	signature:(IplImage* pImg = NULL, IplImage* pFG = NULL)
Process	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Process(IplImage* pImg) = 0;$/;"	p	class:CvFGDetector	access:public	signature:(IplImage* pImg)
Process	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Process(IplImage* pImg, IplImage* pFG) = 0;$/;"	p	class:CvBlobTrackAnalysis	access:public	signature:(IplImage* pImg, IplImage* pFG)
Process	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Process(IplImage* pImg, IplImage* pFG) = 0;$/;"	p	class:CvBlobTrackFVGen	access:public	signature:(IplImage* pImg, IplImage* pFG)
Process	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Process(IplImage* pImg, IplImage* pImgFG = NULL) = 0;$/;"	p	class:CvBlobTracker	access:public	signature:(IplImage* pImg, IplImage* pImgFG = NULL)
ProcessBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void ProcessBlob(int BlobIndex, CvBlob* pBlob, IplImage* \/*pImg*\/, IplImage* \/*pImgFG*\/ = NULL)$/;"	f	class:CvBlobTracker	access:public	signature:(int BlobIndex, CvBlob* pBlob, IplImage* , IplImage* = NULL)
Ps	geometry_structures.h	/^	Calibration_Cameras Ps; $/;"	m	struct:Calibration	access:public
Push	/usr/include/opencv/cvaux.h	/^    virtual bool Push( const CvPoint2D32f** points = 0 );$/;"	p	class:CvCalibFilter	access:public	signature:( const CvPoint2D32f** points = 0 )
Pv	/usr/include/opencv/cvaux.h	/^    float          Pv, Pvb;$/;"	m	struct:CvBGPixelCCStatTable	access:public
Pv	/usr/include/opencv/cvaux.h	/^    float          Pv, Pvb;$/;"	m	struct:CvBGPixelCStatTable	access:public
Pvb	/usr/include/opencv/cvaux.h	/^    float          Pv, Pvb;$/;"	m	struct:CvBGPixelCCStatTable	access:public
Pvb	/usr/include/opencv/cvaux.h	/^    float          Pv, Pvb;$/;"	m	struct:CvBGPixelCStatTable	access:public
R	ui_visualization.h	/^	double R[3];    \/\/ user camera orientation (radians)$/;"	m	struct:Visualization_State	access:public
RBF	/usr/include/opencv/ml.h	/^    enum { LINEAR=0, POLY=1, RBF=2, SIGMOID=3 };$/;"	e	enum:CvSVM::__anon22
REAL	/usr/include/opencv/ml.h	/^    enum { DISCRETE=0, REAL=1, LOGIT=2, GENTLE=3 };$/;"	e	enum:CvBoost::__anon27
RECT	/usr/include/opencv/cv.hpp	/^    enum { RECT=0, CROSS=1, ELLIPSE=2, CUSTOM=100, BINARY = 0, GRAYSCALE=256 };$/;"	e	enum:CvMorphology::__anon11
RECT	/usr/include/opencv/cvvidsurv.hpp	/^    enum {RECT, ELLIPSE} shape;$/;"	e	enum:CvDrawShape::__anon33
RPROP	/usr/include/opencv/ml.h	/^    enum { BACKPROP=0, RPROP=1 };$/;"	e	enum:CvANN_MLP_TrainParams::__anon29
R_euler	geometry_structures.h	/^	double R_euler[3];     \/\/ camera rotation (euler angles in radians)$/;"	m	struct:Shot	access:public
RandS	/usr/include/opencv/cvtypes.h	/^    struct CvRandState* RandS; \/* Array of structures to generate random vectors *\/$/;"	m	struct:CvConDensation	typeref:struct:CvConDensation::CvRandState	access:public
RandomSample	/usr/include/opencv/cvtypes.h	/^    float* RandomSample;    \/* RandomVector to update sample set     *\/$/;"	m	struct:CvConDensation	access:public
RectToCvRect	/usr/include/opencv/highgui.h	/^CV_INLINE CvRect RectToCvRect( RECT sr )$/;"	f	signature:( RECT sr )
RectToCvRect	/usr/include/opencv/highgui.h	/^CV_INLINE CvRect RectToCvRect( RECT sr );$/;"	p	signature:( RECT sr )
RectToROI	/usr/include/opencv/highgui.h	/^CV_INLINE IplROI RectToROI( RECT r )$/;"	f	signature:( RECT r )
RectToROI	/usr/include/opencv/highgui.h	/^CV_INLINE IplROI RectToROI( RECT r );$/;"	p	signature:( RECT r )
Rectify	/usr/include/opencv/cvaux.h	/^    virtual bool Rectify( CvMat** srcarr, CvMat** dstarr );$/;"	p	class:CvCalibFilter	access:public	signature:( CvMat** srcarr, CvMat** dstarr )
Rectify	/usr/include/opencv/cvaux.h	/^    virtual bool Rectify( IplImage** srcarr, IplImage** dstarr );$/;"	p	class:CvCalibFilter	access:public	signature:( IplImage** srcarr, IplImage** dstarr )
Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Release() = 0;$/;"	p	class:CvBlobTrackAnalysis	access:public	signature:()
Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Release() = 0;$/;"	p	class:CvBlobTrackAnalysisOne	access:public	signature:()
Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Release() = 0;$/;"	p	class:CvBlobTrackFVGen	access:public	signature:()
Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Release() = 0;$/;"	p	class:CvBlobTrackGen	access:public	signature:()
Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Release() = 0;$/;"	p	class:CvBlobTrackPostProc	access:public	signature:()
Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Release() = 0;$/;"	p	class:CvBlobTrackPostProcOne	access:public	signature:()
Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Release() = 0;$/;"	p	class:CvBlobTrackPredictor	access:public	signature:()
Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Release() = 0;$/;"	p	class:CvBlobTracker	access:public	signature:()
Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Release() = 0;$/;"	p	class:CvBlobTrackerAuto	access:public	signature:()
Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Release() = 0;$/;"	p	class:CvFGDetector	access:public	signature:()
Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void Release() =  0;$/;"	p	class:CvBlobTrackerOne	access:public	signature:()
Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void Release() = 0;$/;"	p	class:CvProb	access:public	signature:()
Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void Release() = 0;$/;"	p	class:CvVSModule	access:public	signature:()
Release	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void Release()=0;$/;"	p	class:CvBlobDetector	access:public	signature:()
RightEyeRect	/usr/include/opencv/cvaux.h	/^    CvRect RightEyeRect;$/;"	m	struct:CvFace	access:public
SELECTION_TYPE_INTERSECTION	ui_selection.h	/^enum Selection_Type { SELECTION_TYPE_REPLACEMENT, SELECTION_TYPE_UNION, SELECTION_TYPE_INTERSECTION, SELECTION_TYPE_REMOVE };$/;"	e	enum:Selection_Type
SELECTION_TYPE_REMOVE	ui_selection.h	/^enum Selection_Type { SELECTION_TYPE_REPLACEMENT, SELECTION_TYPE_UNION, SELECTION_TYPE_INTERSECTION, SELECTION_TYPE_REMOVE };$/;"	e	enum:Selection_Type
SELECTION_TYPE_REPLACEMENT	ui_selection.h	/^enum Selection_Type { SELECTION_TYPE_REPLACEMENT, SELECTION_TYPE_UNION, SELECTION_TYPE_INTERSECTION, SELECTION_TYPE_REMOVE };$/;"	e	enum:Selection_Type
SELECTION_TYPE_UNION	ui_selection.h	/^enum Selection_Type { SELECTION_TYPE_REPLACEMENT, SELECTION_TYPE_UNION, SELECTION_TYPE_INTERSECTION, SELECTION_TYPE_REMOVE };$/;"	e	enum:Selection_Type
SIGMOID	/usr/include/opencv/ml.h	/^    enum { LINEAR=0, POLY=1, RBF=2, SIGMOID=3 };$/;"	e	enum:CvSVM::__anon22
SIGMOID_SYM	/usr/include/opencv/ml.h	/^    enum { IDENTITY = 0, SIGMOID_SYM = 1, GAUSSIAN = 2 };$/;"	e	enum:CvANN_MLP::__anon30
SIZE_MAX	core_structures.h	32;"	d
SIZE_MAX	gui.h	12;"	d
SIZE_MAX	portability.h	4;"	d
SQERR	/usr/include/opencv/ml.h	/^    enum { DEFAULT=0, GINI=1, MISCLASS=3, SQERR=4 };$/;"	e	enum:CvBoost::__anon28
START_AUTO_STEP	/usr/include/opencv/ml.h	/^    enum { START_E_STEP=1, START_M_STEP=2, START_AUTO_STEP=0 };$/;"	e	enum:CvEM::__anon24
START_E_STEP	/usr/include/opencv/ml.h	/^    enum { START_E_STEP=1, START_M_STEP=2, START_AUTO_STEP=0 };$/;"	e	enum:CvEM::__anon24
START_M_STEP	/usr/include/opencv/ml.h	/^    enum { START_E_STEP=1, START_M_STEP=2, START_AUTO_STEP=0 };$/;"	e	enum:CvEM::__anon24
SUM_TO_1	/usr/include/opencv/cv.hpp	/^    enum { GENERIC=0, ASYMMETRICAL=1, SYMMETRICAL=2, POSITIVE=4, SUM_TO_1=8, INTEGER=16 };$/;"	e	enum:CvSepFilter::__anon9
SYMMETRICAL	/usr/include/opencv/cv.hpp	/^    enum { GENERIC=0, ASYMMETRICAL=1, SYMMETRICAL=2, POSITIVE=4, SUM_TO_1=8, INTEGER=16 };$/;"	e	enum:CvSepFilter::__anon9
SamplesNum	/usr/include/opencv/cvtypes.h	/^    int SamplesNum;         \/* Number of the Samples                 *\/$/;"	m	struct:CvConDensation	access:public
Save	/usr/include/opencv/highgui.h	/^    virtual bool  Save( const char* filename );$/;"	p	class:CvvImage	access:public	signature:( const char* filename )
SaveCameraParams	/usr/include/opencv/cvaux.h	/^    virtual bool SaveCameraParams( const char* filename );$/;"	p	class:CvCalibFilter	access:public	signature:( const char* filename )
SaveState	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void SaveState(CvFileStorage*){};$/;"	f	class:CvVSModule	access:public	signature:(CvFileStorage*)
Scale	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void Scale(float factor = 0, int x = -1, int y = -1) = 0;$/;"	p	class:CvProb	access:public	signature:(float factor = 0, int x = -1, int y = -1)
ScaleAfter	/usr/include/opencv/cvvidsurv.hpp	/^    int     ScaleAfter;$/;"	m	struct:CvBlobTrackerParamLH	access:public
SelectWorkingSet	/usr/include/opencv/ml.h	/^    typedef bool (CvSVMSolver::*SelectWorkingSet)( int& i, int& j );$/;"	t	class:CvSVMSolver	access:public
Selected_Item	geometry_structures.h	/^struct Selected_Item { $/;"	s
Selected_Item::item_id	geometry_structures.h	/^	size_t item_id;                  \/\/ item's id$/;"	m	struct:Selected_Item	access:public
Selected_Item::item_type	geometry_structures.h	/^	GEOMETRY_ITEM_TYPE item_type;    \/\/ type of selected item (vertex, point, polygon, ...)$/;"	m	struct:Selected_Item	access:public
Selected_Item::set	geometry_structures.h	/^	bool set;$/;"	m	struct:Selected_Item	access:public
Selected_Item::shot_id	geometry_structures.h	/^	size_t shot_id;                  \/\/ id of shot on which selected item is (if applicable) $/;"	m	struct:Selected_Item	access:public
Selection_Type	ui_selection.h	/^enum Selection_Type { SELECTION_TYPE_REPLACEMENT, SELECTION_TYPE_UNION, SELECTION_TYPE_INTERSECTION, SELECTION_TYPE_REMOVE };$/;"	g
SetBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    SetBlob(int \/*BlobIndex*\/, CvBlob* \/*pBlob*\/){};$/;"	f	class:CvBlobTracker	access:public	signature:(int , CvBlob* )
SetBlobByID	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    SetBlobByID(int BlobID, CvBlob* pBlob)$/;"	f	class:CvBlobTracker	access:public	signature:(int BlobID, CvBlob* pBlob)
SetBlobHyp	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    SetBlobHyp(int \/*BlobIndex*\/, CvBlob* \/*pBlob*\/){};$/;"	f	class:CvBlobTracker	access:public	signature:(int , CvBlob* )
SetCameraCount	/usr/include/opencv/cvaux.h	/^    virtual void SetCameraCount( int cameraCount );$/;"	p	class:CvCalibFilter	access:public	signature:( int cameraCount )
SetCameraParams	/usr/include/opencv/cvaux.h	/^    virtual bool SetCameraParams( CvCamera* params );$/;"	p	class:CvCalibFilter	access:public	signature:( CvCamera* params )
SetCollision	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void SetCollision(int \/*CollisionFlag*\/){}; \/* call in case of blob collision situation*\/$/;"	f	class:CvBlobTrackerOne	access:public	signature:(int )
SetEtalon	/usr/include/opencv/cvaux.h	/^        SetEtalon( CvCalibEtalonType etalonType, double* etalonParams,$/;"	p	class:CvCalibFilter	access:public	signature:( CvCalibEtalonType etalonType, double* etalonParams, int pointCount = 0, CvPoint2D32f* points = 0 )
SetFileName	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    SetFileName(char* \/*DataBaseName*\/){};$/;"	f	class:CvBlobTrackAnalysis	access:public	signature:(char* )
SetFileName	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    SetFileName(char* pFileName) = 0;$/;"	p	class:CvBlobTrackGen	access:public	signature:(char* pFileName)
SetFrames	/usr/include/opencv/cvaux.h	/^    virtual bool SetFrames( int totalFrames );$/;"	p	class:CvCalibFilter	access:public	signature:( int totalFrames )
SetModuleName	/usr/include/opencv/cvvidsurv.hpp	/^    void SetModuleName(char* name){m_pModuleName = strdup(name);}$/;"	f	class:CvVSModule	access:protected	signature:(char* name)
SetNickName	/usr/include/opencv/cvvidsurv.hpp	/^    void SetNickName(char* pStr)$/;"	f	class:CvVSModule	access:public	signature:(char* pStr)
SetParam	/usr/include/opencv/cvvidsurv.hpp	/^    void   SetParam(char* name, double val)$/;"	f	class:CvVSModule	access:public	signature:(char* name, double val)
SetParamStr	/usr/include/opencv/cvvidsurv.hpp	/^    void   SetParamStr(char* name, char* str)$/;"	f	class:CvVSModule	access:public	signature:(char* name, char* str)
SetShapes	/usr/include/opencv/cvvidsurv.hpp	/^    void SetShapes( const CvDrawShape* shapes, int num );$/;"	p	class:CvImageDrawer	access:public	signature:( const CvDrawShape* shapes, int num )
SetTypeName	/usr/include/opencv/cvvidsurv.hpp	/^    void SetTypeName(char* name){m_pModuleTypeName = strdup(name);}$/;"	f	class:CvVSModule	access:protected	signature:(char* name)
Shot	geometry_structures.h	/^struct Shot {$/;"	s
Shot::R_euler	geometry_structures.h	/^	double R_euler[3];     \/\/ camera rotation (euler angles in radians)$/;"	m	struct:Shot	access:public
Shot::T	geometry_structures.h	/^	double T[4];           \/\/ camera translation in homogeneous coordinates$/;"	m	struct:Shot	access:public
Shot::calibrated	geometry_structures.h	/^	bool calibrated;       \/\/ denotes whether valid calibration data have been determined or supplied$/;"	m	struct:Shot	access:public
Shot::contours	geometry_structures.h	/^	Contours contours;     \/\/ 2d polygons on this shot \/\/ unused but nice to have for some vision algorithms$/;"	m	struct:Shot	access:public
Shot::f	geometry_structures.h	/^	double f;              \/\/ focal length $/;"	m	struct:Shot	access:public
Shot::film_back	geometry_structures.h	/^	double film_back;      \/\/ CCD size in mm$/;"	m	struct:Shot	access:public
Shot::fovx	geometry_structures.h	/^	double fovx, fovy;     \/\/ field of view (x axis and y axis in degrees)$/;"	m	struct:Shot	access:public
Shot::fovy	geometry_structures.h	/^	double fovx, fovy;     \/\/ field of view (x axis and y axis in degrees)$/;"	m	struct:Shot	access:public
Shot::height	geometry_structures.h	/^	int width, height;     \/\/ size of image plane in pixels $/;"	m	struct:Shot	access:public
Shot::image_filename	geometry_structures.h	/^	char * image_filename; \/\/ image's filename, all changes should be also sent to image_loader$/;"	m	struct:Shot	access:public
Shot::image_loader_request	geometry_structures.h	/^	Image_Loader_Request_Handle image_loader_request; $/;"	m	struct:Shot	access:public
Shot::info_status	geometry_structures.h	/^	GEOMETRY_IMAGE_INFO_STATUS info_status; \/\/ how reliably do we know the information about width and height of the image $/;"	m	struct:Shot	access:public
Shot::internal_calibration	geometry_structures.h	/^	CvMat * projection, * rotation, * translation, * internal_calibration;$/;"	m	struct:Shot	access:public
Shot::kd_tree	geometry_structures.h	/^	kd_node * kd_tree;     \/\/ root node of kd-tree containing nodes$/;"	m	struct:Shot	access:public
Shot::keypoints	geometry_structures.h	/^	feature * keypoints;   \/\/ SIFT keypoints$/;"	m	struct:Shot	access:public
Shot::keypoints_count	geometry_structures.h	/^	int keypoints_count;$/;"	m	struct:Shot	access:public
Shot::matching	geometry_structures.h	/^	void * matching;       \/\/ additional info for matching tool$/;"	m	struct:Shot	access:public
Shot::name	geometry_structures.h	/^	char * name;           \/\/ user-assigned name$/;"	m	struct:Shot	access:public
Shot::partial_calibration	geometry_structures.h	/^	bool partial_calibration; \/\/ current partial calibration has estimate of this camera's calibration matrix $/;"	m	struct:Shot	access:public
Shot::points	geometry_structures.h	/^	Points points;         \/\/ 2d points $/;"	m	struct:Shot	access:public
Shot::pp_x	geometry_structures.h	/^	double pp_x;           \/\/ principal point x coordinate (percentage of image size) $/;"	m	struct:Shot	access:public
Shot::pp_y	geometry_structures.h	/^	double pp_y;           \/\/ principal point y coordinate ...$/;"	m	struct:Shot	access:public
Shot::projection	geometry_structures.h	/^	CvMat * projection, * rotation, * translation, * internal_calibration;$/;"	m	struct:Shot	access:public
Shot::resected	geometry_structures.h	/^	bool resected;         \/\/ specific$/;"	m	struct:Shot	access:public
Shot::rotation	geometry_structures.h	/^	CvMat * projection, * rotation, * translation, * internal_calibration;$/;"	m	struct:Shot	access:public
Shot::set	geometry_structures.h	/^	bool set;$/;"	m	struct:Shot	access:public
Shot::translation	geometry_structures.h	/^	CvMat * projection, * rotation, * translation, * internal_calibration;$/;"	m	struct:Shot	access:public
Shot::ui	geometry_structures.h	/^	void * ui;$/;"	m	struct:Shot	access:public
Shot::visualization_T	geometry_structures.h	/^	double visualization_T[3]; \/\/ used for storing recomputed inhomogeneous coordinates in visualization routines $/;"	m	struct:Shot	access:public
Shot::visualization_pyr_00	geometry_structures.h	/^		visualization_pyr_00[3], $/;"	m	struct:Shot	access:public
Shot::visualization_pyr_01	geometry_structures.h	/^		visualization_pyr_01[3]		$/;"	m	struct:Shot	access:public
Shot::visualization_pyr_10	geometry_structures.h	/^		visualization_pyr_10[3], $/;"	m	struct:Shot	access:public
Shot::visualization_pyr_11	geometry_structures.h	/^		visualization_pyr_11[3], $/;"	m	struct:Shot	access:public
Shot::width	geometry_structures.h	/^	int width, height;     \/\/ size of image plane in pixels $/;"	m	struct:Shot	access:public
Shot_Pair_Relation	geometry_structures.h	/^struct Shot_Pair_Relation $/;"	s
Shot_Pair_Relation::correspondences_count	geometry_structures.h	/^	size_t correspondences_count;    \/\/ number of correspondences$/;"	m	struct:Shot_Pair_Relation	access:public
Shot_Pair_Relation::set	geometry_structures.h	/^	bool set; $/;"	m	struct:Shot_Pair_Relation	access:public
Shot_Relations	geometry_structures.h	/^struct Shot_Relations$/;"	s
Shot_Relations::pair_relations	geometry_structures.h	/^	Shot_Pair_Relations pair_relations;$/;"	m	struct:Shot_Relations	access:public
Shot_Relations::set	geometry_structures.h	/^	bool set; $/;"	m	struct:Shot_Relations	access:public
Show	/usr/include/opencv/highgui.h	/^    virtual void  Show( HDC dc, int x, int y, int width, int height,$/;"	p	class:CvvImage	access:public	signature:( HDC dc, int x, int y, int width, int height, int from_x = 0, int from_y = 0 )
Show	/usr/include/opencv/highgui.h	/^    virtual void  Show( const char* window );$/;"	p	class:CvvImage	access:public	signature:( const char* window )
SkipProcess	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void SkipProcess(CvBlob* \/*pBlobPrev*\/, IplImage* \/*pImg*\/, IplImage* \/*pImgFG*\/ = NULL){};$/;"	f	class:CvBlobTrackerOne	access:public	signature:(CvBlob* , IplImage* , IplImage* = NULL)
StartFrame	/usr/include/opencv/cvvidsurv.hpp	/^    int         StartFrame;$/;"	m	struct:CvBlobTrack	access:public
State	/usr/include/opencv/cvtypes.h	/^    float* State;           \/* Vector of State                       *\/$/;"	m	struct:CvConDensation	access:public
Stop	/usr/include/opencv/cvaux.h	/^    virtual void Stop( bool calibrate = false );$/;"	p	class:CvCalibFilter	access:public	signature:( bool calibrate = false )
Str	/usr/include/opencv/cvvidsurv.hpp	/^    char*               Str;$/;"	m	struct:CvDefParam	access:public
T	/usr/include/opencv/cvaux.h	/^    float         alpha1, alpha2, alpha3, delta, T, minArea;$/;"	m	struct:CvFGDStatModelParams	access:public
T	geometry_structures.h	/^	double T[4];           \/\/ camera translation in homogeneous coordinates$/;"	m	struct:Shot	access:public
T	ui_visualization.h	/^	double T[3];    \/\/ user camera position in space$/;"	m	struct:Visualization_State	access:public
TOOL_ACTION_FILE_DIALOG	tool_core.h	/^enum Tool_Action_Type { TOOL_ACTION_NONE, TOOL_ACTION_SHOW, TOOL_ACTION_FILE_DIALOG, TOOL_ACTION_FUNCTION_CALL };$/;"	e	enum:Tool_Action_Type
TOOL_ACTION_FUNCTION_CALL	tool_core.h	/^enum Tool_Action_Type { TOOL_ACTION_NONE, TOOL_ACTION_SHOW, TOOL_ACTION_FILE_DIALOG, TOOL_ACTION_FUNCTION_CALL };$/;"	e	enum:Tool_Action_Type
TOOL_ACTION_NONE	tool_core.h	/^enum Tool_Action_Type { TOOL_ACTION_NONE, TOOL_ACTION_SHOW, TOOL_ACTION_FILE_DIALOG, TOOL_ACTION_FUNCTION_CALL };$/;"	e	enum:Tool_Action_Type
TOOL_ACTION_SHOW	tool_core.h	/^enum Tool_Action_Type { TOOL_ACTION_NONE, TOOL_ACTION_SHOW, TOOL_ACTION_FILE_DIALOG, TOOL_ACTION_FUNCTION_CALL };$/;"	e	enum:Tool_Action_Type
TOOL_ENUM_FIRST	tool_core.cpp	/^const int TOOL_ENUM_FIRST = 1;$/;"	v
TOOL_PARAMETER_BOOL	tool_core.h	/^enum Tool_Parameter_Type { TOOL_PARAMETER_REAL, TOOL_PARAMETER_INT, TOOL_PARAMETER_ENUM, TOOL_PARAMETER_BOOL }; $/;"	e	enum:Tool_Parameter_Type
TOOL_PARAMETER_ENUM	tool_core.h	/^enum Tool_Parameter_Type { TOOL_PARAMETER_REAL, TOOL_PARAMETER_INT, TOOL_PARAMETER_ENUM, TOOL_PARAMETER_BOOL }; $/;"	e	enum:Tool_Parameter_Type
TOOL_PARAMETER_INT	tool_core.h	/^enum Tool_Parameter_Type { TOOL_PARAMETER_REAL, TOOL_PARAMETER_INT, TOOL_PARAMETER_ENUM, TOOL_PARAMETER_BOOL }; $/;"	e	enum:Tool_Parameter_Type
TOOL_PARAMETER_REAL	tool_core.h	/^enum Tool_Parameter_Type { TOOL_PARAMETER_REAL, TOOL_PARAMETER_INT, TOOL_PARAMETER_ENUM, TOOL_PARAMETER_BOOL }; $/;"	e	enum:Tool_Parameter_Type
TOOL_PARTIAL_FAIL	tool_core.h	148;"	d
TOOL_PASS_CLICK	tool_core.h	140;"	d
TOOL_PASS_DRAGGING	tool_core.h	144;"	d
TOOL_PASS_DRAGGING_DONE	tool_core.h	145;"	d
TOOL_PASS_KEY	tool_core.h	142;"	d
TOOL_PASS_MOUSE_DOWN	tool_core.h	141;"	d
TOOL_PASS_MOVE	tool_core.h	143;"	d
TOOL_SELECTION_ZOOM_RATE	tool_selection.cpp	/^const double TOOL_SELECTION_ZOOM_RATE = 1.3;$/;"	v
TOOL_SELECTION_ZOOM_SNAPPING_MAX	tool_selection.cpp	/^const double TOOL_SELECTION_ZOOM_SNAPPING_MAX = 0.5 * TOOL_SELECTION_ZOOM_RATE - 0.001;$/;"	v
TOOL_SELECTION_ZOOM_SNAPPING_MIN	tool_selection.cpp	/^const double TOOL_SELECTION_ZOOM_SNAPPING_MIN = 0.5 \/ TOOL_SELECTION_ZOOM_RATE + 0.001; $/;"	v
Temp	/usr/include/opencv/cvtypes.h	/^    float* Temp;            \/* Temporary vector                      *\/$/;"	m	struct:CvConDensation	access:public
Temp1	/usr/include/opencv/cvtypes.h	/^    float* Temp1;               \/* temp1->data.fl *\/$/;"	m	struct:CvKalman	access:public
Temp2	/usr/include/opencv/cvtypes.h	/^    float* Temp2;               \/* temp2->data.fl *\/$/;"	m	struct:CvKalman	access:public
Tn	/usr/include/opencv/ml.h	/^    int Tn;$/;"	m	struct:CvDTreeNode	access:public
Tool	tool_core.h	/^struct Tool$/;"	s
Tool::begin	tool_core.h	/^	Tool_Begin_Event_Handler begin; $/;"	m	struct:Tool	access:public
Tool::box	tool_core.h	/^	GUI_Panel * box; \/\/ T note unused$/;"	m	struct:Tool	access:public
Tool::click	tool_core.h	/^	Tool_Click_Event_Handler click;$/;"	m	struct:Tool	access:public
Tool::dragging	tool_core.h	/^	Tool_Dragging_Event_Handler dragging; $/;"	m	struct:Tool	access:public
Tool::dragging_done	tool_core.h	/^	Tool_Dragging_Done_Event_Handler dragging_done;$/;"	m	struct:Tool	access:public
Tool::end	tool_core.h	/^	Tool_End_Event_Handler end;$/;"	m	struct:Tool	access:public
Tool::hint	tool_core.h	/^	char hint[2000];    \/\/ short help text$/;"	m	struct:Tool	access:public
Tool::key_pressed	tool_core.h	/^	Tool_Key_Pressed_Event_Handler key_pressed;$/;"	m	struct:Tool	access:public
Tool::mode_affinity	tool_core.h	/^	UI_Mode mode_affinity;    \/\/ in which mode is this tool available?$/;"	m	struct:Tool	access:public
Tool::mouse_down	tool_core.h	/^	Tool_Mouse_Down_Event_Handler mouse_down;$/;"	m	struct:Tool	access:public
Tool::move	tool_core.h	/^	Tool_Move_Event_Handler move;$/;"	m	struct:Tool	access:public
Tool::parameters	tool_core.h	/^	Tool_Parameters parameters;$/;"	m	struct:Tool	access:public
Tool::process_events	tool_core.h	/^	Tool_Process_Events process_events;    \/\/ decides whether or not to actually process user input in some situation$/;"	m	struct:Tool	access:public
Tool::tab	tool_core.h	/^	GUI_Panel * tab, * tab_last;$/;"	m	struct:Tool	access:public
Tool::tab_last	tool_core.h	/^	GUI_Panel * tab, * tab_last;$/;"	m	struct:Tool	access:public
Tool::title	tool_core.h	/^	char title[100];    \/\/ name of the tool$/;"	m	struct:Tool	access:public
Tool_Action_Type	tool_core.h	/^enum Tool_Action_Type { TOOL_ACTION_NONE, TOOL_ACTION_SHOW, TOOL_ACTION_FILE_DIALOG, TOOL_ACTION_FUNCTION_CALL };$/;"	g
Tool_Begin_Event_Handler	tool_core.h	/^typedef void (* Tool_Begin_Event_Handler)(); $/;"	t
Tool_Calibration	tool_calibration.cpp	/^struct Tool_Calibration$/;"	s	file:
Tool_Click_Event_Handler	tool_core.h	/^typedef void (* Tool_Click_Event_Handler)(double x, double y, int button);$/;"	t
Tool_Dragging_Done_Event_Handler	tool_core.h	/^typedef void (* Tool_Dragging_Done_Event_Handler)(double x1, double y1, double x2, double y2, int button); \/\/ todo what to do when the user moves mouse out of window - this event is not fired... $/;"	t
Tool_Dragging_Event_Handler	tool_core.h	/^typedef void (* Tool_Dragging_Event_Handler)(double x, double y, int button); $/;"	t
Tool_Edit	tool_edit.cpp	/^struct Tool_Edit$/;"	s	file:
Tool_End_Event_Handler	tool_core.h	/^typedef void (* Tool_End_Event_Handler)(); $/;"	t
Tool_File	tool_file.cpp	/^struct Tool_File$/;"	s	file:
Tool_Function_Call	tool_core.h	/^typedef void (* Tool_Function_Call)(); \/\/ callback function to be triggered whenever user presses button in menu$/;"	t
Tool_Key_Pressed_Event_Handler	tool_core.h	/^typedef void (* Tool_Key_Pressed_Event_Handler)();$/;"	t
Tool_Matching	tool_matching.cpp	/^struct Tool_Matching$/;"	s	file:
Tool_Menu_Item	tool_core.h	/^struct Tool_Menu_Item $/;"	s
Tool_Menu_Item::action_type	tool_core.h	/^	Tool_Action_Type action_type;       \/\/ type of action to be triggered (show tool's panel, show file dialog, ...)$/;"	m	struct:Tool_Menu_Item	access:public
Tool_Menu_Item::function_call	tool_core.h	/^	Tool_Function_Call function_call;   \/\/ menu can trigger function call$/;"	m	struct:Tool_Menu_Item	access:public
Tool_Menu_Item::menu_item	tool_core.h	/^	GUI_Panel * menu_item;              \/\/ pointer to GUI element $/;"	m	struct:Tool_Menu_Item	access:public
Tool_Menu_Item::order	tool_core.h	/^	unsigned short int order[20];       \/\/ order of items in menu $/;"	m	struct:Tool_Menu_Item	access:public
Tool_Menu_Item::path	tool_core.h	/^	char * path;                        \/\/ path in menu $/;"	m	struct:Tool_Menu_Item	access:public
Tool_Menu_Item::set	tool_core.h	/^	bool set; $/;"	m	struct:Tool_Menu_Item	access:public
Tool_Menu_Item::tool	tool_core.h	/^	Tool * tool;                        \/\/ pointer to represented tool $/;"	m	struct:Tool_Menu_Item	access:public
Tool_Mouse_Down_Event_Handler	tool_core.h	/^typedef bool (* Tool_Mouse_Down_Event_Handler)(double x, double y, int button);$/;"	t
Tool_Move_Event_Handler	tool_core.h	/^typedef void (* Tool_Move_Event_Handler)(double x, double y);$/;"	t
Tool_Parameter	tool_core.h	/^struct Tool_Parameter$/;"	s
Tool_Parameter::bool_widget	tool_core.h	/^	GUI_Panel * real_widget, * int_widget, * enum_widget, * bool_widget;$/;"	m	struct:Tool_Parameter	access:public
Tool_Parameter::enum_labels	tool_core.h	/^	const char * * enum_labels;$/;"	m	struct:Tool_Parameter	access:public
Tool_Parameter::enum_widget	tool_core.h	/^	GUI_Panel * real_widget, * int_widget, * enum_widget, * bool_widget;$/;"	m	struct:Tool_Parameter	access:public
Tool_Parameter::fetched_int	tool_core.h	/^	int fetched_int;$/;"	m	struct:Tool_Parameter	access:public
Tool_Parameter::fetched_real	tool_core.h	/^	double fetched_real; $/;"	m	struct:Tool_Parameter	access:public
Tool_Parameter::int_widget	tool_core.h	/^	GUI_Panel * real_widget, * int_widget, * enum_widget, * bool_widget;$/;"	m	struct:Tool_Parameter	access:public
Tool_Parameter::real_widget	tool_core.h	/^	GUI_Panel * real_widget, * int_widget, * enum_widget, * bool_widget;$/;"	m	struct:Tool_Parameter	access:public
Tool_Parameter::set	tool_core.h	/^	bool set;$/;"	m	struct:Tool_Parameter	access:public
Tool_Parameter::title	tool_core.h	/^	const char * title;$/;"	m	struct:Tool_Parameter	access:public
Tool_Parameter::type	tool_core.h	/^	Tool_Parameter_Type type; $/;"	m	struct:Tool_Parameter	access:public
Tool_Parameter::value	tool_core.h	/^	void * value;$/;"	m	struct:Tool_Parameter	access:public
Tool_Parameter_Type	tool_core.h	/^enum Tool_Parameter_Type { TOOL_PARAMETER_REAL, TOOL_PARAMETER_INT, TOOL_PARAMETER_ENUM, TOOL_PARAMETER_BOOL }; $/;"	g
Tool_Points	tool_points.cpp	/^struct Tool_Points $/;"	s	file:
Tool_Points::context_vertex	tool_points.cpp	/^	size_t context_vertex;$/;"	m	struct:Tool_Points	file:	access:public
Tool_Points::context_vertex_set	tool_points.cpp	/^	bool context_vertex_set;$/;"	m	struct:Tool_Points	file:	access:public
Tool_Points::new_point_created	tool_points.cpp	/^	bool new_point_created;$/;"	m	struct:Tool_Points	file:	access:public
Tool_Polygons	tool_polygons.cpp	/^struct Tool_Polygons$/;"	s	file:
Tool_Process_Events	tool_core.h	/^typedef bool (* Tool_Process_Events)();$/;"	t
Tool_Selection	tool_selection.cpp	/^struct Tool_Selection$/;"	s	file:
Tool_Selection::shot_down_x	tool_selection.cpp	/^	double shot_down_x, shot_down_y;$/;"	m	struct:Tool_Selection	file:	access:public
Tool_Selection::shot_down_y	tool_selection.cpp	/^	double shot_down_x, shot_down_y;$/;"	m	struct:Tool_Selection	file:	access:public
Tools_State	tool_core.h	/^struct Tools_State$/;"	s
Tools_State::application_menu	tool_core.h	/^	GUI_Panel * application_menu;$/;"	m	struct:Tools_State	access:public
Tools_State::count	tool_core.h	/^	size_t current, count;$/;"	m	struct:Tools_State	access:public
Tools_State::current	tool_core.h	/^	size_t current, count;$/;"	m	struct:Tools_State	access:public
Tools_State::finalized	tool_core.h	/^	bool finalized;$/;"	m	struct:Tools_State	access:public
Tools_State::menu_items	tool_core.h	/^	Tool_Menu_Items menu_items;$/;"	m	struct:Tools_State	access:public
Tools_State::tools	tool_core.h	/^	Tool tools[100];$/;"	m	struct:Tools_State	access:public
TrackID	/usr/include/opencv/cvvidsurv.hpp	/^    int         TrackID;$/;"	m	struct:CvBlobTrack	access:public
TransferParamsFromChild	/usr/include/opencv/cvvidsurv.hpp	/^    void TransferParamsFromChild(CvVSModule* pM, char* prefix = NULL)$/;"	f	class:CvVSModule	access:public	signature:(CvVSModule* pM, char* prefix = NULL)
TransferParamsToChild	/usr/include/opencv/cvvidsurv.hpp	/^    void TransferParamsToChild(CvVSModule* pM, char* prefix = NULL)$/;"	f	class:CvVSModule	access:public	signature:(CvVSModule* pM, char* prefix = NULL)
UI_CLICK_DELAY	ui_constants.cpp	/^const double UI_CLICK_DELAY = 350;$/;"	v
UI_CLICK_DISTANCE_SQ	ui_constants.cpp	/^const double UI_CLICK_DISTANCE_SQ = 64;$/;"	v
UI_CONTEXT_CROSSHAIR	ui_context.h	/^enum Context_Decoration { UI_CONTEXT_NONE, UI_CONTEXT_CROSSHAIR };$/;"	e	enum:Context_Decoration
UI_CONTEXT_MAX_SHOWN_ITEMS	ui_context.cpp	/^const size_t UI_CONTEXT_MAX_SHOWN_ITEMS = 10;$/;"	v
UI_CONTEXT_NONE	ui_context.h	/^enum Context_Decoration { UI_CONTEXT_NONE, UI_CONTEXT_CROSSHAIR };$/;"	e	enum:Context_Decoration
UI_CONTEXT_SCALE	ui_context.cpp	/^const double UI_CONTEXT_SCALE = 0.33;$/;"	v
UI_CONTEXT_THUMBNAIL	ui_context.h	/^enum Context_Content { UI_CONTEXT_THUMBNAIL, UI_CONTEXT_ZOOM };$/;"	e	enum:Context_Content
UI_CONTEXT_ZOOM	ui_context.h	/^enum Context_Content { UI_CONTEXT_THUMBNAIL, UI_CONTEXT_ZOOM };$/;"	e	enum:Context_Content
UI_FOCUS_PIXEL_DISTANCE_SQ	ui_constants.cpp	/^const double UI_FOCUS_PIXEL_DISTANCE_SQ = 64;$/;"	v
UI_GROUND_ANGLE_DRAGGING_STEP	ui_constants.cpp	/^const double UI_GROUND_ANGLE_DRAGGING_STEP = 0.01;$/;"	v
UI_ICONS_BAD	ui_icons.h	/^enum UI_ICONS_QUALITY{ UI_ICONS_NEUTRAL = 0, UI_ICONS_GOODGOOD = 1, UI_ICONS_GOOD = 2, UI_ICONS_BAD = 3, UI_ICONS_BADBAD = 4 };$/;"	e	enum:UI_ICONS_QUALITY
UI_ICONS_BADBAD	ui_icons.h	/^enum UI_ICONS_QUALITY{ UI_ICONS_NEUTRAL = 0, UI_ICONS_GOODGOOD = 1, UI_ICONS_GOOD = 2, UI_ICONS_BAD = 3, UI_ICONS_BADBAD = 4 };$/;"	e	enum:UI_ICONS_QUALITY
UI_ICONS_BOOL	ui_icons.h	/^enum UI_ICONS_BOOL { UI_ICONS_TRUE = 0, UI_ICONS_FALSE = 5 };$/;"	g
UI_ICONS_COUNT	ui_icons.h	/^const int UI_ICONS_COUNT = 10;$/;"	v
UI_ICONS_FALSE	ui_icons.h	/^enum UI_ICONS_BOOL { UI_ICONS_TRUE = 0, UI_ICONS_FALSE = 5 };$/;"	e	enum:UI_ICONS_BOOL
UI_ICONS_GOOD	ui_icons.h	/^enum UI_ICONS_QUALITY{ UI_ICONS_NEUTRAL = 0, UI_ICONS_GOODGOOD = 1, UI_ICONS_GOOD = 2, UI_ICONS_BAD = 3, UI_ICONS_BADBAD = 4 };$/;"	e	enum:UI_ICONS_QUALITY
UI_ICONS_GOODGOOD	ui_icons.h	/^enum UI_ICONS_QUALITY{ UI_ICONS_NEUTRAL = 0, UI_ICONS_GOODGOOD = 1, UI_ICONS_GOOD = 2, UI_ICONS_BAD = 3, UI_ICONS_BADBAD = 4 };$/;"	e	enum:UI_ICONS_QUALITY
UI_ICONS_NEUTRAL	ui_icons.h	/^enum UI_ICONS_QUALITY{ UI_ICONS_NEUTRAL = 0, UI_ICONS_GOODGOOD = 1, UI_ICONS_GOOD = 2, UI_ICONS_BAD = 3, UI_ICONS_BADBAD = 4 };$/;"	e	enum:UI_ICONS_QUALITY
UI_ICONS_QUALITY	ui_icons.h	/^enum UI_ICONS_QUALITY{ UI_ICONS_NEUTRAL = 0, UI_ICONS_GOODGOOD = 1, UI_ICONS_GOOD = 2, UI_ICONS_BAD = 3, UI_ICONS_BADBAD = 4 };$/;"	g
UI_ICONS_QUALITY_COUNT	ui_icons.h	/^const int UI_ICONS_QUALITY_COUNT = 5; $/;"	v
UI_ICONS_TRUE	ui_icons.h	/^enum UI_ICONS_BOOL { UI_ICONS_TRUE = 0, UI_ICONS_FALSE = 5 };$/;"	e	enum:UI_ICONS_BOOL
UI_ICON_HEIGHT	ui_icons.h	/^const int UI_ICON_HEIGHT = 16;$/;"	v
UI_ICON_WIDTH	ui_icons.h	/^const int UI_ICON_WIDTH = 16;$/;"	v
UI_ITEM_SECTION	ui_core.h	/^enum UI_Item_Type { UI_ITEM_SHOT, UI_ITEM_VERTEX, UI_ITEM_SECTION };$/;"	e	enum:UI_Item_Type
UI_ITEM_SHOT	ui_core.h	/^enum UI_Item_Type { UI_ITEM_SHOT, UI_ITEM_VERTEX, UI_ITEM_SECTION };$/;"	e	enum:UI_Item_Type
UI_ITEM_VERTEX	ui_core.h	/^enum UI_Item_Type { UI_ITEM_SHOT, UI_ITEM_VERTEX, UI_ITEM_SECTION };$/;"	e	enum:UI_Item_Type
UI_Item_Type	ui_core.h	/^enum UI_Item_Type { UI_ITEM_SHOT, UI_ITEM_VERTEX, UI_ITEM_SECTION };$/;"	g
UI_MODE_CALCULATION	ui_state.h	/^enum UI_Mode { UI_MODE_OVERVIEW, UI_MODE_INSPECTION, UI_MODE_SHOT, UI_MODE_CALCULATION, UI_MODE_UNSPECIFIED };$/;"	e	enum:UI_Mode
UI_MODE_INSPECTION	ui_state.h	/^enum UI_Mode { UI_MODE_OVERVIEW, UI_MODE_INSPECTION, UI_MODE_SHOT, UI_MODE_CALCULATION, UI_MODE_UNSPECIFIED };$/;"	e	enum:UI_Mode
UI_MODE_OVERVIEW	ui_state.h	/^enum UI_Mode { UI_MODE_OVERVIEW, UI_MODE_INSPECTION, UI_MODE_SHOT, UI_MODE_CALCULATION, UI_MODE_UNSPECIFIED };$/;"	e	enum:UI_Mode
UI_MODE_SHOT	ui_state.h	/^enum UI_Mode { UI_MODE_OVERVIEW, UI_MODE_INSPECTION, UI_MODE_SHOT, UI_MODE_CALCULATION, UI_MODE_UNSPECIFIED };$/;"	e	enum:UI_Mode
UI_MODE_UNSPECIFIED	ui_state.h	/^enum UI_Mode { UI_MODE_OVERVIEW, UI_MODE_INSPECTION, UI_MODE_SHOT, UI_MODE_CALCULATION, UI_MODE_UNSPECIFIED };$/;"	e	enum:UI_Mode
UI_Meta	ui_core.h	/^struct UI_Meta$/;"	s
UI_Meta::index	ui_core.h	/^	size_t index;$/;"	m	struct:UI_Meta	access:public
UI_Meta::type	ui_core.h	/^	UI_Item_Type type;$/;"	m	struct:UI_Meta	access:public
UI_Mode	ui_state.h	/^enum UI_Mode { UI_MODE_OVERVIEW, UI_MODE_INSPECTION, UI_MODE_SHOT, UI_MODE_CALCULATION, UI_MODE_UNSPECIFIED };$/;"	g
UI_SHADOW_ALPHA	ui_constants.cpp	/^const double UI_SHADOW_ALPHA = 0.05;$/;"	v
UI_SHADOW_DISTANCE	ui_constants.cpp	/^const double UI_SHADOW_DISTANCE = 0;$/;"	v
UI_SHADOW_PRECISION	ui_constants.cpp	/^const int UI_SHADOW_PRECISION = 4;$/;"	v
UI_SHADOW_SIZE	ui_constants.cpp	/^const double UI_SHADOW_SIZE = 0.0075;$/;"	v
UI_STYLE_BACKGROUND	ui_constants.cpp	/^const float UI_STYLE_BACKGROUND[3] = { 0.0F, 0.0F, 0.0F }; $/;"	v
UI_STYLE_CAMERA	ui_constants.cpp	/^const Drawing_Style UI_STYLE_CAMERA = { { 1.0F, 1.0F, 1.0F }, 1.0F, 2.0F, 1.0F }; $/;"	v
UI_STYLE_CONTOUR	ui_constants.cpp	/^const Drawing_Style UI_STYLE_CONTOUR = { { 0.7F, 0.7F, 0.7F }, 1.0F, 1.0F, 1.0F }; \/\/ todo $/;"	v
UI_STYLE_HELPERS	ui_constants.cpp	/^const Drawing_Style UI_STYLE_HELPERS = { { 0.8F, 0.8F, 0.6F }, 1.0F, 1.0F, 1.0F }; $/;"	v
UI_STYLE_POINT	ui_constants.cpp	/^const Drawing_Style UI_STYLE_POINT = { { 1.0F, 1.0F, 1.0F }, 1.0F, 2.0F, 1.0F };$/;"	v
UI_STYLE_POINT_NOT_CREDIBLE	ui_constants.cpp	/^const Drawing_Style UI_STYLE_POINT_NOT_CREDIBLE = { { 0.7F, 0.7F, 0.7F }, 1.0F, 2.0F, 1.0F };$/;"	v
UI_STYLE_POLYGON	ui_constants.cpp	/^const Drawing_Style UI_STYLE_POLYGON = { { 1.0F, 1.0F, 1.0F }, 1.0F, 1.0F, 1.0F }; \/\/ { { 0.6, 0.6, 1 }, 1.5, 1, 0.4 }; $/;"	v
UI_STYLE_POLYGON_JOINING_POINTS	ui_constants.cpp	/^const Drawing_Style UI_STYLE_POLYGON_JOINING_POINTS = { { 1.0F, 1.0F, 1.0F }, 1.0F, 1.0F, 1.0F }; $/;"	v
UI_STYLE_SELECTED_POINT	ui_constants.cpp	/^const Drawing_Style UI_STYLE_SELECTED_POINT = { { 1.0F, 1.0F, 0.44F }, 1.0F, 2.0F, 1.0F };$/;"	v
UI_STYLE_SELECTED_POLYGON	ui_constants.cpp	/^const Drawing_Style UI_STYLE_SELECTED_POLYGON = { { 1.0F, 1.0F, 0.44F }, 1.0F, 2.0F, 1.0F }; $/;"	v
UI_STYLE_SELECTED_VERTEX	ui_constants.cpp	/^const Drawing_Style UI_STYLE_SELECTED_VERTEX = { { 0.0F, 1.0F, 0.44F }, 1.0F, 2.0F, 1.0F }; $/;"	v
UI_STYLE_SELECTION_BORDER	ui_constants.cpp	/^const Drawing_Style UI_STYLE_SELECTION_BORDER = { { 1.0F, 1.0F, 0.44F }, 1.0F, 1.0F, 1.0F }; $/;"	v
UI_STYLE_VERTEX	ui_constants.cpp	/^const Drawing_Style UI_STYLE_VERTEX = { { 1.0F, 0.44F, 1.0F }, 1.0F, 2.0F, 1.0F }; \/\/ { { 1, 0.44, 1 }, 1, 2, 1 }; $/;"	v
UI_Section_Meta	ui_core.h	/^struct UI_Section_Meta$/;"	s
UI_Section_Meta::index	ui_core.h	/^	size_t index; $/;"	m	struct:UI_Section_Meta	access:public
UI_Section_Meta::type	ui_core.h	/^	UI_Item_Type type; $/;"	m	struct:UI_Section_Meta	access:public
UI_Section_Meta::unfolded	ui_core.h	/^	bool unfolded;$/;"	m	struct:UI_Section_Meta	access:public
UI_Shot_Meta	ui_core.h	/^struct UI_Shot_Meta $/;"	s
UI_Shot_Meta::index	ui_core.h	/^	size_t index; $/;"	m	struct:UI_Shot_Meta	access:public
UI_Shot_Meta::list_id	ui_core.h	/^	int list_id;    \/\/ id in table displaying the list of all pictures$/;"	m	struct:UI_Shot_Meta	access:public
UI_Shot_Meta::selected	ui_core.h	/^	bool selected;$/;"	m	struct:UI_Shot_Meta	access:public
UI_Shot_Meta::type	ui_core.h	/^	UI_Item_Type type; $/;"	m	struct:UI_Shot_Meta	access:public
UI_Shot_Meta::view_center_x	ui_core.h	/^	double view_center_x, view_center_y, view_zoom;    \/\/ zooming and scrolling $/;"	m	struct:UI_Shot_Meta	access:public
UI_Shot_Meta::view_center_y	ui_core.h	/^	double view_center_x, view_center_y, view_zoom;    \/\/ zooming and scrolling $/;"	m	struct:UI_Shot_Meta	access:public
UI_Shot_Meta::view_zoom	ui_core.h	/^	double view_center_x, view_center_y, view_zoom;    \/\/ zooming and scrolling $/;"	m	struct:UI_Shot_Meta	access:public
UI_State	ui_state.h	/^	UI_State(): $/;"	f	struct:UI_State	access:public	signature:()
UI_State	ui_state.h	/^struct UI_State {$/;"	s
UI_State::INDEX_DECLARATION	ui_state.h	/^	INDEX_DECLARATION(current_calibration);$/;"	p	struct:UI_State	access:public	signature:(current_calibration)
UI_State::INDEX_DECLARATION	ui_state.h	/^	INDEX_DECLARATION(current_shot);$/;"	p	struct:UI_State	access:public	signature:(current_shot)
UI_State::INDEX_DECLARATION	ui_state.h	/^	INDEX_DECLARATION(focused_point);$/;"	p	struct:UI_State	access:public	signature:(focused_point)
UI_State::INDEX_DECLARATION	ui_state.h	/^	INDEX_DECLARATION(processed_polygon);$/;"	p	struct:UI_State	access:public	signature:(processed_polygon)
UI_State::INDEX_DECLARATION	ui_state.h	/^	INDEX_DECLARATION(processed_vertex); $/;"	p	struct:UI_State	access:public	signature:(processed_vertex)
UI_State::UI_State	ui_state.h	/^	UI_State(): $/;"	f	struct:UI_State	access:public	signature:()
UI_State::div_glview	ui_state.h	/^		* window, * pane, * pane_tools, * div_tools, * div_glview, $/;"	m	struct:UI_State	access:public
UI_State::div_selections	ui_state.h	/^		* div_selections, * div_tabs, * vbox_selections, * vbox_tabs, $/;"	m	struct:UI_State	access:public
UI_State::div_tabs	ui_state.h	/^		* div_selections, * div_tabs, * vbox_selections, * vbox_tabs, $/;"	m	struct:UI_State	access:public
UI_State::div_toolbar	ui_state.h	/^		* div_toolbar, * toolbar, * list;$/;"	m	struct:UI_State	access:public
UI_State::div_tools	ui_state.h	/^		* window, * pane, * pane_tools, * div_tools, * div_glview, $/;"	m	struct:UI_State	access:public
UI_State::dualview	ui_state.h	/^	size_t dualview;$/;"	m	struct:UI_State	access:public
UI_State::dualview_set	ui_state.h	/^	bool dualview_set;$/;"	m	struct:UI_State	access:public
UI_State::gl	ui_state.h	/^		* root_panel, * top, * side, * gl, * side_top, * side_bottom, $/;"	m	struct:UI_State	access:public
UI_State::ground_POI_dragging_start	ui_state.h	/^	double ground_POI_dragging_start[3];                              \/\/ changing camera position in ground inspection mode $/;"	m	struct:UI_State	access:public
UI_State::ground_alpha_dragging_speed	ui_state.h	/^	double ground_phi_dragging_speed, ground_alpha_dragging_speed;    \/\/ todo $/;"	m	struct:UI_State	access:public
UI_State::ground_alpha_dragging_start	ui_state.h	/^	double ground_phi_dragging_start, ground_alpha_dragging_start;    \/\/ changing camera angle in ground inspection mode$/;"	m	struct:UI_State	access:public
UI_State::ground_camera_movement_speed	ui_state.h	/^	const double ground_camera_movement_speed;$/;"	m	struct:UI_State	access:public
UI_State::ground_phi_dragging_speed	ui_state.h	/^	double ground_phi_dragging_speed, ground_alpha_dragging_speed;    \/\/ todo $/;"	m	struct:UI_State	access:public
UI_State::ground_phi_dragging_start	ui_state.h	/^	double ground_phi_dragging_start, ground_alpha_dragging_start;    \/\/ changing camera angle in ground inspection mode$/;"	m	struct:UI_State	access:public
UI_State::groups	ui_state.h	/^	Groups groups;$/;"	m	struct:UI_State	access:public
UI_State::icons	ui_state.h	/^	SDL_Surface * icons;$/;"	m	struct:UI_State	access:public
UI_State::inspection_camera_movement_speed	ui_state.h	/^	const double inspection_camera_movement_speed;    \/\/ movement speed (in space units per second)$/;"	m	struct:UI_State	access:public
UI_State::inspection_camera_rotation_speed	ui_state.h	/^	const double inspection_camera_rotation_speed;    \/\/ rotation speed (in radians per second)$/;"	m	struct:UI_State	access:public
UI_State::inspection_clear_keys	ui_state.h	/^	bool * inspection_clear_keys, * shot_clear_keys, * overview_clear_keys;    \/\/ determines which key states should be automatically cleared$/;"	m	struct:UI_State	access:public
UI_State::key_state	ui_state.h	/^	Uint8 * keys, * key_state; \/\/ pointer to array containing keys' state info (supplied by SDL)$/;"	m	struct:UI_State	access:public
UI_State::keys	ui_state.h	/^	Uint8 * keys, * key_state; \/\/ pointer to array containing keys' state info (supplied by SDL)$/;"	m	struct:UI_State	access:public
UI_State::keys_length	ui_state.h	/^	int keys_length; \/\/ length of the keys_state array$/;"	m	struct:UI_State	access:public
UI_State::list	ui_state.h	/^		* div_toolbar, * toolbar, * list;$/;"	m	struct:UI_State	access:public
UI_State::mode	ui_state.h	/^	UI_Mode mode, previous_mode;$/;"	m	struct:UI_State	access:public
UI_State::mouse_button	ui_state.h	/^	Uint8 mouse_button;$/;"	m	struct:UI_State	access:public
UI_State::mouse_down	ui_state.h	/^	bool mouse_down;$/;"	m	struct:UI_State	access:public
UI_State::mouse_down_ticks	ui_state.h	/^	Uint32 mouse_down_ticks, mouse_dragging_ticks;$/;"	m	struct:UI_State	access:public
UI_State::mouse_down_x	ui_state.h	/^	int mouse_x, mouse_y, mouse_down_x, mouse_down_y;$/;"	m	struct:UI_State	access:public
UI_State::mouse_down_y	ui_state.h	/^	int mouse_x, mouse_y, mouse_down_x, mouse_down_y;$/;"	m	struct:UI_State	access:public
UI_State::mouse_dragging_ticks	ui_state.h	/^	Uint32 mouse_down_ticks, mouse_dragging_ticks;$/;"	m	struct:UI_State	access:public
UI_State::mouse_no_dragging	ui_state.h	/^	bool mouse_no_dragging;$/;"	m	struct:UI_State	access:public
UI_State::mouse_over	ui_state.h	/^	bool mouse_over;$/;"	m	struct:UI_State	access:public
UI_State::mouse_x	ui_state.h	/^	int mouse_x, mouse_y, mouse_down_x, mouse_down_y;$/;"	m	struct:UI_State	access:public
UI_State::mouse_y	ui_state.h	/^	int mouse_x, mouse_y, mouse_down_x, mouse_down_y;$/;"	m	struct:UI_State	access:public
UI_State::overview_clear_keys	ui_state.h	/^	bool * inspection_clear_keys, * shot_clear_keys, * overview_clear_keys;    \/\/ determines which key states should be automatically cleared$/;"	m	struct:UI_State	access:public
UI_State::pane	ui_state.h	/^		* window, * pane, * pane_tools, * div_tools, * div_glview, $/;"	m	struct:UI_State	access:public
UI_State::pane_tools	ui_state.h	/^		* window, * pane, * pane_tools, * div_tools, * div_glview, $/;"	m	struct:UI_State	access:public
UI_State::previous_mode	ui_state.h	/^	UI_Mode mode, previous_mode;$/;"	m	struct:UI_State	access:public
UI_State::processed_vertex_stage	ui_state.h	/^	int processed_vertex_stage;$/;"	m	struct:UI_State	access:public
UI_State::root_panel	ui_state.h	/^		* root_panel, * top, * side, * gl, * side_top, * side_bottom, $/;"	m	struct:UI_State	access:public
UI_State::selection_list	ui_state.h	/^	Selected_Items selection_list;$/;"	m	struct:UI_State	access:public
UI_State::shot_clear_keys	ui_state.h	/^	bool * inspection_clear_keys, * shot_clear_keys, * overview_clear_keys;    \/\/ determines which key states should be automatically cleared$/;"	m	struct:UI_State	access:public
UI_State::side	ui_state.h	/^		* root_panel, * top, * side, * gl, * side_top, * side_bottom, $/;"	m	struct:UI_State	access:public
UI_State::side_bottom	ui_state.h	/^		* root_panel, * top, * side, * gl, * side_top, * side_bottom, $/;"	m	struct:UI_State	access:public
UI_State::side_top	ui_state.h	/^		* root_panel, * top, * side, * gl, * side_top, * side_bottom, $/;"	m	struct:UI_State	access:public
UI_State::side_top_last	ui_state.h	/^		* side_top_last, * tabs$/;"	m	struct:UI_State	access:public
UI_State::tabs	ui_state.h	/^		* side_top_last, * tabs$/;"	m	struct:UI_State	access:public
UI_State::tool_down_x	ui_state.h	/^	double tool_x, tool_y, tool_down_x, tool_down_y;$/;"	m	struct:UI_State	access:public
UI_State::tool_down_y	ui_state.h	/^	double tool_x, tool_y, tool_down_x, tool_down_y;$/;"	m	struct:UI_State	access:public
UI_State::tool_x	ui_state.h	/^	double tool_x, tool_y, tool_down_x, tool_down_y;$/;"	m	struct:UI_State	access:public
UI_State::tool_y	ui_state.h	/^	double tool_x, tool_y, tool_down_x, tool_down_y;$/;"	m	struct:UI_State	access:public
UI_State::toolbar	ui_state.h	/^		* div_toolbar, * toolbar, * list;$/;"	m	struct:UI_State	access:public
UI_State::top	ui_state.h	/^		* root_panel, * top, * side, * gl, * side_top, * side_bottom, $/;"	m	struct:UI_State	access:public
UI_State::treeview	ui_state.h	/^		* treeview, * treeview_shots, * treeview_vertices, \/* * tabs, *\/$/;"	m	struct:UI_State	access:public
UI_State::treeview_shots	ui_state.h	/^		* treeview, * treeview_shots, * treeview_vertices, \/* * tabs, *\/$/;"	m	struct:UI_State	access:public
UI_State::treeview_vertices	ui_state.h	/^		* treeview, * treeview_shots, * treeview_vertices, \/* * tabs, *\/$/;"	m	struct:UI_State	access:public
UI_State::vbox_selections	ui_state.h	/^		* div_selections, * div_tabs, * vbox_selections, * vbox_tabs, $/;"	m	struct:UI_State	access:public
UI_State::vbox_tabs	ui_state.h	/^		* div_selections, * div_tabs, * vbox_selections, * vbox_tabs, $/;"	m	struct:UI_State	access:public
UI_State::window	ui_state.h	/^		* window, * pane, * pane_tools, * div_tools, * div_glview, $/;"	m	struct:UI_State	access:public
UPDATE_WEIGHTS	/usr/include/opencv/ml.h	/^    enum { UPDATE_WEIGHTS = 1, NO_INPUT_SCALE = 2, NO_OUTPUT_SCALE = 4 };$/;"	e	enum:CvANN_MLP::__anon31
Undistort	/usr/include/opencv/cvaux.h	/^    virtual bool Undistort( CvMat** src, CvMat** dst );$/;"	p	class:CvCalibFilter	access:public	signature:( CvMat** src, CvMat** dst )
Undistort	/usr/include/opencv/cvaux.h	/^    virtual bool Undistort( IplImage** src, IplImage** dst );$/;"	p	class:CvCalibFilter	access:public	signature:( IplImage** src, IplImage** dst )
Update	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void    Update(CvBlob* pBlob) = 0;$/;"	p	class:CvBlobTrackPredictor	access:public	signature:(CvBlob* pBlob)
Update	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void Update(CvBlob* \/*pBlob*\/, IplImage* \/*pImg*\/, IplImage* \/*pImgFG*\/ = NULL){};$/;"	f	class:CvBlobTrackerOne	access:public	signature:(CvBlob* , IplImage* , IplImage* = NULL)
Update	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void Update(IplImage* pImg, IplImage* pImgFG = NULL)$/;"	f	class:CvBlobTracker	access:public	signature:(IplImage* pImg, IplImage* pImgFG = NULL)
UpdateBlob	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void UpdateBlob(int \/*BlobIndex*\/, CvBlob* \/*pBlob*\/, IplImage* \/*pImg*\/, IplImage* \/*pImgFG*\/ = NULL){};$/;"	f	class:CvBlobTracker	access:public	signature:(int , CvBlob* , IplImage* , IplImage* = NULL)
UsePPData	/usr/include/opencv/cvvidsurv.hpp	/^    int                     UsePPData;$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
VISUALIZATION_AUTO	ui_visualization_point.cpp	/^const unsigned int VISUALIZATION_AUTO = 16;$/;"	v
VISUALIZATION_DEFAULT	ui_visualization_point.cpp	/^const unsigned int VISUALIZATION_DEFAULT = 0; $/;"	v
VISUALIZATION_FOCUSED	ui_visualization_point.cpp	/^const unsigned int VISUALIZATION_FOCUSED = 1; $/;"	v
VISUALIZATION_FOCUSED_POINT_SIZE	ui_visualization_point.cpp	/^const double VISUALIZATION_FOCUSED_POINT_SIZE = 7.5;$/;"	v
VISUALIZATION_OUTLIER	ui_visualization_point.cpp	/^const unsigned int VISUALIZATION_OUTLIER = 8;$/;"	v
VISUALIZATION_POINT_SIZE	ui_visualization_point.cpp	/^const double VISUALIZATION_POINT_SIZE = 5;$/;"	v
VISUALIZATION_PROCESSED	ui_visualization_point.cpp	/^const unsigned int VISUALIZATION_PROCESSED = 4;$/;"	v
VISUALIZATION_SELECTED	ui_visualization_point.cpp	/^const unsigned int VISUALIZATION_SELECTED = 2; $/;"	v
Value	/usr/include/opencv/cvvidsurv.hpp	/^    virtual double Value(int* \/*comp*\/, int \/*x*\/ = 0, int \/*y*\/ = 0){return -1;};$/;"	f	class:CvProb	access:public	signature:(int* , int = 0, int = 0)
Vertex	geometry_structures.h	/^struct Vertex {$/;"	s
Vertex::color	geometry_structures.h	/^	float color[3];              \/\/ vertex can be colored by user or by any algorithm to help distinguish between different groups of vertices$/;"	m	struct:Vertex	access:public
Vertex::group	geometry_structures.h	/^	size_t group;                \/\/ vertex can be a part of group$/;"	m	struct:Vertex	access:public
Vertex::nx	geometry_structures.h	/^	double nx, ny, nz;           \/\/ vertex normal$/;"	m	struct:Vertex	access:public
Vertex::ny	geometry_structures.h	/^	double nx, ny, nz;           \/\/ vertex normal$/;"	m	struct:Vertex	access:public
Vertex::nz	geometry_structures.h	/^	double nx, ny, nz;           \/\/ vertex normal$/;"	m	struct:Vertex	access:public
Vertex::reconstructed	geometry_structures.h	/^	bool set, reconstructed;$/;"	m	struct:Vertex	access:public
Vertex::selected	geometry_structures.h	/^	bool selected;               \/\/ denotes if this vertex is selected \/\/ todo move int UI item meta structure$/;"	m	struct:Vertex	access:public
Vertex::set	geometry_structures.h	/^	bool set, reconstructed;$/;"	m	struct:Vertex	access:public
Vertex::tex_x	geometry_structures.h	/^	double tex_x, tex_y;         \/\/ texture coordinates$/;"	m	struct:Vertex	access:public
Vertex::tex_y	geometry_structures.h	/^	double tex_x, tex_y;         \/\/ texture coordinates$/;"	m	struct:Vertex	access:public
Vertex::vertex_type	geometry_structures.h	/^	GEOMETRY_VERTEX_TYPE vertex_type; \/\/ vertex type$/;"	m	struct:Vertex	access:public
Vertex::x	geometry_structures.h	/^	double x, y, z;              \/\/ space coordinates of vertex$/;"	m	struct:Vertex	access:public
Vertex::y	geometry_structures.h	/^	double x, y, z;              \/\/ space coordinates of vertex$/;"	m	struct:Vertex	access:public
Vertex::z	geometry_structures.h	/^	double x, y, z;              \/\/ space coordinates of vertex$/;"	m	struct:Vertex	access:public
Vertex_Incidence	geometry_structures.h	/^struct Vertex_Incidence { $/;"	s
Vertex_Incidence::set	geometry_structures.h	/^	bool set; $/;"	m	struct:Vertex_Incidence	access:public
Vertex_Incidence::shot_point_ids	geometry_structures.h	/^	Double_Indices shot_point_ids;$/;"	m	struct:Vertex_Incidence	access:public
Visualization_State	ui_visualization.h	/^struct Visualization_State { $/;"	s
Visualization_State::R	ui_visualization.h	/^	double R[3];    \/\/ user camera orientation (radians)$/;"	m	struct:Visualization_State	access:public
Visualization_State::T	ui_visualization.h	/^	double T[3];    \/\/ user camera position in space$/;"	m	struct:Visualization_State	access:public
Visualization_State::continuous_loading_alpha	ui_visualization.h	/^	double continuous_loading_alpha; $/;"	m	struct:Visualization_State	access:public
Visualization_State::finite_shots_count	ui_visualization.h	/^	size_t finite_shots_count; $/;"	m	struct:Visualization_State	access:public
Visualization_State::ground	ui_visualization.h	/^	double * ground;     \/\/ homogeneous coordinates of ground plane (inhomogeneous part, i.e. first 3 values, $/;"	m	struct:Visualization_State	access:public
Visualization_State::ground_POI	ui_visualization.h	/^	double ground_POI[3];    \/\/ point of interest $/;"	m	struct:Visualization_State	access:public
Visualization_State::ground_alpha	ui_visualization.h	/^	double ground_alpha, ground_phi, ground_distance; \/\/ distance and angles used to orient in space while in ground plane inspection$/;"	m	struct:Visualization_State	access:public
Visualization_State::ground_axis_x	ui_visualization.h	/^	double ground_axis_x[3], ground_axis_y[3], ground_axis_z[3];    \/\/ perpendicular unit vectors lying on ground plane and specifying $/;"	m	struct:Visualization_State	access:public
Visualization_State::ground_axis_y	ui_visualization.h	/^	double ground_axis_x[3], ground_axis_y[3], ground_axis_z[3];    \/\/ perpendicular unit vectors lying on ground plane and specifying $/;"	m	struct:Visualization_State	access:public
Visualization_State::ground_axis_z	ui_visualization.h	/^	double ground_axis_x[3], ground_axis_y[3], ground_axis_z[3];    \/\/ perpendicular unit vectors lying on ground plane and specifying $/;"	m	struct:Visualization_State	access:public
Visualization_State::ground_distance	ui_visualization.h	/^	double ground_alpha, ground_phi, ground_distance; \/\/ distance and angles used to orient in space while in ground plane inspection$/;"	m	struct:Visualization_State	access:public
Visualization_State::ground_mode	ui_visualization.h	/^	bool ground_mode;    \/\/ ground inspection is on\/off$/;"	m	struct:Visualization_State	access:public
Visualization_State::ground_phi	ui_visualization.h	/^	double ground_alpha, ground_phi, ground_distance; \/\/ distance and angles used to orient in space while in ground plane inspection$/;"	m	struct:Visualization_State	access:public
Visualization_State::max_dev	ui_visualization.h	/^	double shots_T_mean[3], shots_T_deviation[3], max_dev;    \/\/ mean and variance of the cameras' positions$/;"	m	struct:Visualization_State	access:public
Visualization_State::opengl_modelview	ui_visualization.h	/^	GLdouble opengl_modelview[16], opengl_projection[16]; $/;"	m	struct:Visualization_State	access:public
Visualization_State::opengl_projection	ui_visualization.h	/^	GLdouble opengl_modelview[16], opengl_projection[16]; $/;"	m	struct:Visualization_State	access:public
Visualization_State::opengl_viewport	ui_visualization.h	/^	int opengl_viewport[4];$/;"	m	struct:Visualization_State	access:public
Visualization_State::point_of_focus	ui_visualization.h	/^	double point_of_focus[3];    \/\/ position of the point on which user camera is focused $/;"	m	struct:Visualization_State	access:public
Visualization_State::shots_T_deviation	ui_visualization.h	/^	double shots_T_mean[3], shots_T_deviation[3], max_dev;    \/\/ mean and variance of the cameras' positions$/;"	m	struct:Visualization_State	access:public
Visualization_State::shots_T_mean	ui_visualization.h	/^	double shots_T_mean[3], shots_T_deviation[3], max_dev;    \/\/ mean and variance of the cameras' positions$/;"	m	struct:Visualization_State	access:public
W	core_constants.h	/^enum Core_Axes { X, Y, Z, W };$/;"	e	enum:Core_Axes
Width	/usr/include/opencv/highgui.h	/^    int Width() { return !m_img ? 0 : !m_img->roi ? m_img->width : m_img->roi->width; };$/;"	f	class:CvvImage	access:public	signature:()
Write	/usr/include/opencv/cvvidsurv.hpp	/^    virtual void Write(CvFileStorage* fs, char* name)$/;"	f	class:CvBlobSeq	access:public	signature:(CvFileStorage* fs, char* name)
X	core_constants.h	/^enum Core_Axes { X, Y, Z, W };$/;"	e	enum:Core_Axes
X	geometry_structures.h	/^	CvMat * X;$/;"	m	struct:Calibration_Vertex	access:public
XML_ATTR_FILM_BACK	geometry_loader.cpp	/^const xmlChar * XML_ATTR_FILM_BACK = xmlCharStrdup("fbh");$/;"	v
XML_ATTR_FOVX	geometry_loader.cpp	/^const xmlChar * XML_ATTR_FOVX = xmlCharStrdup("fovx");$/;"	v
XML_ATTR_HEIGHT	geometry_loader.cpp	/^const xmlChar * XML_ATTR_HEIGHT = xmlCharStrdup("h");$/;"	v
XML_ATTR_IMAGE	geometry_loader.cpp	/^const xmlChar * XML_ATTR_IMAGE = xmlCharStrdup("img");$/;"	v
XML_ATTR_NAME	geometry_loader.cpp	/^const xmlChar * XML_ATTR_NAME = xmlCharStrdup("n"); $/;"	v
XML_ATTR_WIDTH	geometry_loader.cpp	/^const xmlChar * XML_ATTR_WIDTH = xmlCharStrdup("w");$/;"	v
XML_ATTR_X	geometry_loader.cpp	/^const xmlChar * XML_ATTR_X = xmlCharStrdup("x");$/;"	v
XML_ATTR_Y	geometry_loader.cpp	/^const xmlChar * XML_ATTR_Y = xmlCharStrdup("y");$/;"	v
XML_ATTR_Z	geometry_loader.cpp	/^const xmlChar * XML_ATTR_Z = xmlCharStrdup("z");$/;"	v
XML_ELEM_CAMERA	geometry_loader.cpp	/^const xmlChar * XML_ELEM_CAMERA = xmlCharStrdup("CINF"); $/;"	v
XML_ELEM_FRAME	geometry_loader.cpp	/^const xmlChar * XML_ELEM_FRAME = xmlCharStrdup("CFRM");$/;"	v
XML_ELEM_IMAGE_PLANE	geometry_loader.cpp	/^const xmlChar * XML_ELEM_IMAGE_PLANE = xmlCharStrdup("IPLN");$/;"	v
XML_ELEM_ROTATION	geometry_loader.cpp	/^const xmlChar * XML_ELEM_ROTATION = xmlCharStrdup("R");$/;"	v
XML_ELEM_SHOT	geometry_loader.cpp	/^const xmlChar * XML_ELEM_SHOT = xmlCharStrdup("SHOT"); $/;"	v
XML_ELEM_TRANSLATION	geometry_loader.cpp	/^const xmlChar * XML_ELEM_TRANSLATION = xmlCharStrdup("T");$/;"	v
XML_ELEM_VERTEX	geometry_loader.cpp	/^const xmlChar * XML_ELEM_VERTEX = xmlCharStrdup("P");$/;"	v
Xcoef	/usr/include/opencv/cvaux.h	/^    double Xcoef;$/;"	m	struct:CvStereoLineCoeff	access:public
XcoefA	/usr/include/opencv/cvaux.h	/^    double XcoefA;$/;"	m	struct:CvStereoLineCoeff	access:public
XcoefAB	/usr/include/opencv/cvaux.h	/^    double XcoefAB;$/;"	m	struct:CvStereoLineCoeff	access:public
XcoefB	/usr/include/opencv/cvaux.h	/^    double XcoefB;$/;"	m	struct:CvStereoLineCoeff	access:public
Xs	geometry_structures.h	/^	Calibration_Vertices Xs;$/;"	m	struct:Calibration	access:public
Y	core_constants.h	/^enum Core_Axes { X, Y, Z, W };$/;"	e	enum:Core_Axes
Ycoef	/usr/include/opencv/cvaux.h	/^    double Ycoef;$/;"	m	struct:CvStereoLineCoeff	access:public
YcoefA	/usr/include/opencv/cvaux.h	/^    double YcoefA;$/;"	m	struct:CvStereoLineCoeff	access:public
YcoefAB	/usr/include/opencv/cvaux.h	/^    double YcoefAB;$/;"	m	struct:CvStereoLineCoeff	access:public
YcoefB	/usr/include/opencv/cvaux.h	/^    double YcoefB;$/;"	m	struct:CvStereoLineCoeff	access:public
Z	core_constants.h	/^enum Core_Axes { X, Y, Z, W };$/;"	e	enum:Core_Axes
Zcoef	/usr/include/opencv/cvaux.h	/^    double Zcoef;$/;"	m	struct:CvStereoLineCoeff	access:public
ZcoefA	/usr/include/opencv/cvaux.h	/^    double ZcoefA;$/;"	m	struct:CvStereoLineCoeff	access:public
ZcoefAB	/usr/include/opencv/cvaux.h	/^    double ZcoefAB;$/;"	m	struct:CvStereoLineCoeff	access:public
ZcoefB	/usr/include/opencv/cvaux.h	/^    double ZcoefB;$/;"	m	struct:CvStereoLineCoeff	access:public
_CRT_SECURE_NO_DEPRECATE	/usr/include/opencv/cxtypes.h	46;"	d
_CVCOMPAT_H_	/usr/include/opencv/cvcompat.h	51;"	d
_CVHAARTRAINING_H_	/usr/include/opencv/cvhaartraining.h	49;"	d
_CVMAT_HPP_	/usr/include/opencv/cvmat.hpp	43;"	d
_CVTYPES_H_	/usr/include/opencv/cvtypes.h	43;"	d
_CVVERSION_H_	/usr/include/opencv/cvver.h	48;"	d
_CV_HPP_	/usr/include/opencv/cv.hpp	43;"	d
_CV_H_	/usr/include/opencv/cv.h	44;"	d
_CXCORE_ERROR_H_	/usr/include/opencv/cxerror.h	43;"	d
_CXCORE_HPP_	/usr/include/opencv/cxcore.hpp	44;"	d
_CXCORE_H_	/usr/include/opencv/cxcore.h	44;"	d
_CXCORE_MISC_H_	/usr/include/opencv/cxmisc.h	48;"	d
_CXCORE_TYPES_H_	/usr/include/opencv/cxtypes.h	43;"	d
_CvPixelPosition32f	/usr/include/opencv/cvcompat.h	/^typedef struct _CvPixelPosition32f$/;"	s
_CvPixelPosition32f::bottomline	/usr/include/opencv/cvcompat.h	/^    float*  bottomline;$/;"	m	struct:_CvPixelPosition32f	access:public
_CvPixelPosition32f::currline	/usr/include/opencv/cvcompat.h	/^    float*  currline;$/;"	m	struct:_CvPixelPosition32f	access:public
_CvPixelPosition32f::height	/usr/include/opencv/cvcompat.h	/^    int     height;$/;"	m	struct:_CvPixelPosition32f	access:public
_CvPixelPosition32f::step	/usr/include/opencv/cvcompat.h	/^    int     step;$/;"	m	struct:_CvPixelPosition32f	access:public
_CvPixelPosition32f::step_arr	/usr/include/opencv/cvcompat.h	/^    int     step_arr[3];$/;"	m	struct:_CvPixelPosition32f	access:public
_CvPixelPosition32f::topline	/usr/include/opencv/cvcompat.h	/^    float*  topline;$/;"	m	struct:_CvPixelPosition32f	access:public
_CvPixelPosition32f::width	/usr/include/opencv/cvcompat.h	/^    int     width;$/;"	m	struct:_CvPixelPosition32f	access:public
_CvPixelPosition32f::x	/usr/include/opencv/cvcompat.h	/^    int     x;$/;"	m	struct:_CvPixelPosition32f	access:public
_CvPixelPosition8s	/usr/include/opencv/cvcompat.h	/^typedef struct _CvPixelPosition8s$/;"	s
_CvPixelPosition8s::bottomline	/usr/include/opencv/cvcompat.h	/^    char*   bottomline;$/;"	m	struct:_CvPixelPosition8s	access:public
_CvPixelPosition8s::currline	/usr/include/opencv/cvcompat.h	/^    char*   currline;$/;"	m	struct:_CvPixelPosition8s	access:public
_CvPixelPosition8s::height	/usr/include/opencv/cvcompat.h	/^    int     height;$/;"	m	struct:_CvPixelPosition8s	access:public
_CvPixelPosition8s::step	/usr/include/opencv/cvcompat.h	/^    int     step;$/;"	m	struct:_CvPixelPosition8s	access:public
_CvPixelPosition8s::step_arr	/usr/include/opencv/cvcompat.h	/^    int     step_arr[3];$/;"	m	struct:_CvPixelPosition8s	access:public
_CvPixelPosition8s::topline	/usr/include/opencv/cvcompat.h	/^    char*   topline;$/;"	m	struct:_CvPixelPosition8s	access:public
_CvPixelPosition8s::width	/usr/include/opencv/cvcompat.h	/^    int     width;$/;"	m	struct:_CvPixelPosition8s	access:public
_CvPixelPosition8s::x	/usr/include/opencv/cvcompat.h	/^    int     x;$/;"	m	struct:_CvPixelPosition8s	access:public
_CvPixelPosition8u	/usr/include/opencv/cvcompat.h	/^typedef struct _CvPixelPosition8u$/;"	s
_CvPixelPosition8u::bottomline	/usr/include/opencv/cvcompat.h	/^    unsigned char*   bottomline;    \/* pointer to the start of the first line           *\/$/;"	m	struct:_CvPixelPosition8u	access:public
_CvPixelPosition8u::currline	/usr/include/opencv/cvcompat.h	/^    unsigned char*   currline;      \/* pointer to the start of the current pixel line   *\/$/;"	m	struct:_CvPixelPosition8u	access:public
_CvPixelPosition8u::height	/usr/include/opencv/cvcompat.h	/^    int     height;                 \/* height of the image  ( in pixels )               *\/$/;"	m	struct:_CvPixelPosition8u	access:public
_CvPixelPosition8u::step	/usr/include/opencv/cvcompat.h	/^    int     step;                   \/* distance between lines ( in elements of single   *\/$/;"	m	struct:_CvPixelPosition8u	access:public
_CvPixelPosition8u::step_arr	/usr/include/opencv/cvcompat.h	/^    int     step_arr[3];            \/* array: ( 0, -step, step ). It is used for        *\/$/;"	m	struct:_CvPixelPosition8u	access:public
_CvPixelPosition8u::topline	/usr/include/opencv/cvcompat.h	/^    unsigned char*   topline;       \/* pointer to the start of the top pixel line       *\/$/;"	m	struct:_CvPixelPosition8u	access:public
_CvPixelPosition8u::width	/usr/include/opencv/cvcompat.h	/^    int     width;                  \/* width of the image  ( in pixels )                *\/$/;"	m	struct:_CvPixelPosition8u	access:public
_CvPixelPosition8u::x	/usr/include/opencv/cvcompat.h	/^    int     x;                      \/* current x coordinate ( in pixels )               *\/$/;"	m	struct:_CvPixelPosition8u	access:public
_HIGH_GUI_	/usr/include/opencv/highgui.h	43;"	d
_INC_WINDOWS	/usr/include/opencv/cxcore.h	54;"	d
_INC_WINDOWS	/usr/include/opencv/cxcore.h	64;"	d
_IplConvKernel	/usr/include/opencv/cxtypes.h	/^typedef struct _IplConvKernel$/;"	s
_IplConvKernel::anchorX	/usr/include/opencv/cxtypes.h	/^    int  anchorX;$/;"	m	struct:_IplConvKernel	access:public
_IplConvKernel::anchorY	/usr/include/opencv/cxtypes.h	/^    int  anchorY;$/;"	m	struct:_IplConvKernel	access:public
_IplConvKernel::nCols	/usr/include/opencv/cxtypes.h	/^    int  nCols;$/;"	m	struct:_IplConvKernel	access:public
_IplConvKernel::nRows	/usr/include/opencv/cxtypes.h	/^    int  nRows;$/;"	m	struct:_IplConvKernel	access:public
_IplConvKernel::nShiftR	/usr/include/opencv/cxtypes.h	/^    int  nShiftR;$/;"	m	struct:_IplConvKernel	access:public
_IplConvKernel::values	/usr/include/opencv/cxtypes.h	/^    int *values;$/;"	m	struct:_IplConvKernel	access:public
_IplConvKernelFP	/usr/include/opencv/cxtypes.h	/^typedef struct _IplConvKernelFP$/;"	s
_IplConvKernelFP::anchorX	/usr/include/opencv/cxtypes.h	/^    int  anchorX;$/;"	m	struct:_IplConvKernelFP	access:public
_IplConvKernelFP::anchorY	/usr/include/opencv/cxtypes.h	/^    int  anchorY;$/;"	m	struct:_IplConvKernelFP	access:public
_IplConvKernelFP::nCols	/usr/include/opencv/cxtypes.h	/^    int  nCols;$/;"	m	struct:_IplConvKernelFP	access:public
_IplConvKernelFP::nRows	/usr/include/opencv/cxtypes.h	/^    int  nRows;$/;"	m	struct:_IplConvKernelFP	access:public
_IplConvKernelFP::values	/usr/include/opencv/cxtypes.h	/^    float *values;$/;"	m	struct:_IplConvKernelFP	access:public
_IplImage	/usr/include/opencv/cxtypes.h	/^typedef struct _IplImage$/;"	s
_IplImage::BorderConst	/usr/include/opencv/cxtypes.h	/^    int  BorderConst[4]; \/* ditto *\/$/;"	m	struct:_IplImage	access:public
_IplImage::BorderMode	/usr/include/opencv/cxtypes.h	/^    int  BorderMode[4]; \/* ignored by OpenCV *\/$/;"	m	struct:_IplImage	access:public
_IplImage::ID	/usr/include/opencv/cxtypes.h	/^    int  ID;            \/* version (=0)*\/$/;"	m	struct:_IplImage	access:public
_IplImage::align	/usr/include/opencv/cxtypes.h	/^    int  align;         \/* Alignment of image rows (4 or 8).$/;"	m	struct:_IplImage	access:public
_IplImage::alphaChannel	/usr/include/opencv/cxtypes.h	/^    int  alphaChannel;  \/* ignored by OpenCV *\/$/;"	m	struct:_IplImage	access:public
_IplImage::channelSeq	/usr/include/opencv/cxtypes.h	/^    char channelSeq[4]; \/* ditto *\/$/;"	m	struct:_IplImage	access:public
_IplImage::colorModel	/usr/include/opencv/cxtypes.h	/^    char colorModel[4]; \/* ignored by OpenCV *\/$/;"	m	struct:_IplImage	access:public
_IplImage::dataOrder	/usr/include/opencv/cxtypes.h	/^    int  dataOrder;     \/* 0 - interleaved color channels, 1 - separate color channels.$/;"	m	struct:_IplImage	access:public
_IplImage::depth	/usr/include/opencv/cxtypes.h	/^    int  depth;         \/* pixel depth in bits: IPL_DEPTH_8U, IPL_DEPTH_8S, IPL_DEPTH_16S,$/;"	m	struct:_IplImage	access:public
_IplImage::height	/usr/include/opencv/cxtypes.h	/^    int  height;        \/* image height in pixels *\/$/;"	m	struct:_IplImage	access:public
_IplImage::imageData	/usr/include/opencv/cxtypes.h	/^    char *imageData;  \/* pointer to aligned image data *\/$/;"	m	struct:_IplImage	access:public
_IplImage::imageDataOrigin	/usr/include/opencv/cxtypes.h	/^    char *imageDataOrigin; \/* pointer to very origin of image data$/;"	m	struct:_IplImage	access:public
_IplImage::imageId	/usr/include/opencv/cxtypes.h	/^    void  *imageId;     \/* ditto *\/$/;"	m	struct:_IplImage	access:public
_IplImage::imageSize	/usr/include/opencv/cxtypes.h	/^    int  imageSize;     \/* image data size in bytes$/;"	m	struct:_IplImage	access:public
_IplImage::maskROI	/usr/include/opencv/cxtypes.h	/^    struct _IplImage *maskROI; \/* must be NULL *\/$/;"	m	struct:_IplImage	typeref:struct:_IplImage::_IplImage	access:public
_IplImage::nChannels	/usr/include/opencv/cxtypes.h	/^    int  nChannels;     \/* Most of OpenCV functions support 1,2,3 or 4 channels *\/$/;"	m	struct:_IplImage	access:public
_IplImage::nSize	/usr/include/opencv/cxtypes.h	/^    int  nSize;         \/* sizeof(IplImage) *\/$/;"	m	struct:_IplImage	access:public
_IplImage::origin	/usr/include/opencv/cxtypes.h	/^    int  origin;        \/* 0 - top-left origin,$/;"	m	struct:_IplImage	access:public
_IplImage::roi	/usr/include/opencv/cxtypes.h	/^    struct _IplROI *roi;\/* image ROI. if NULL, the whole image is selected *\/$/;"	m	struct:_IplImage	typeref:struct:_IplImage::_IplROI	access:public
_IplImage::tileInfo	/usr/include/opencv/cxtypes.h	/^    struct _IplTileInfo *tileInfo; \/* ditto *\/$/;"	m	struct:_IplImage	typeref:struct:_IplImage::_IplTileInfo	access:public
_IplImage::width	/usr/include/opencv/cxtypes.h	/^    int  width;         \/* image width in pixels *\/$/;"	m	struct:_IplImage	access:public
_IplImage::widthStep	/usr/include/opencv/cxtypes.h	/^    int  widthStep;   \/* size of aligned image row in bytes *\/$/;"	m	struct:_IplImage	access:public
_IplROI	/usr/include/opencv/cxtypes.h	/^typedef struct _IplROI$/;"	s
_IplROI::coi	/usr/include/opencv/cxtypes.h	/^    int  coi; \/* 0 - no COI (all channels are selected), 1 - 0th channel is selected ...*\/$/;"	m	struct:_IplROI	access:public
_IplROI::height	/usr/include/opencv/cxtypes.h	/^    int  height;$/;"	m	struct:_IplROI	access:public
_IplROI::width	/usr/include/opencv/cxtypes.h	/^    int  width;$/;"	m	struct:_IplROI	access:public
_IplROI::xOffset	/usr/include/opencv/cxtypes.h	/^    int  xOffset;$/;"	m	struct:_IplROI	access:public
_IplROI::yOffset	/usr/include/opencv/cxtypes.h	/^    int  yOffset;$/;"	m	struct:_IplROI	access:public
__ACTIONS	actions.h	26;"	d
__APPLICATION	application.h	26;"	d
__BEGIN__	/usr/include/opencv/cxerror.h	182;"	d
__CLEANUP__	/usr/include/opencv/cxerror.h	184;"	d
__CORE_CONSTANTS	core_constants.h	26;"	d
__CORE_DEBUG	core_debug.h	26;"	d
__CORE_IMAGE_LOADER	core_image_loader.h	26;"	d
__CORE_MATH_ROUTINES	core_math_routines.h	26;"	d
__CORE_STATE	core_state.h	26;"	d
__CORE_STRUCTURES	core_structures.h	26;"	d
__CVAUX_HPP__	/usr/include/opencv/cvaux.hpp	43;"	d
__CVAUX__H__	/usr/include/opencv/cvaux.h	43;"	d
__CVVIDEOSURVEILLANCE_H__	/usr/include/opencv/cvvidsurv.hpp	44;"	d
__CV_EXTENSIONS	cv_extensions.h	26;"	d
__END__	/usr/include/opencv/cxerror.h	183;"	d
__EVENTS	ui_events.h	26;"	d
__GEOMETRY_EXPORT	geometry_export.h	26;"	d
__GEOMETRY_LOADER	geometry_loader.h	26;"	d
__GEOMETRY_PUBLISH	geometry_publish.h	26;"	d
__GEOMETRY_QUERIES	geometry_queries.h	26;"	d
__GEOMETRY_ROUTINES	geometry_routines.h	26;"	d
__GEOMETRY_STRUCTURES	geometry_structures.h	26;"	d
__GEOMETRY_TEXTURES	geometry_textures.h	26;"	d
__INTERFACE_FILESYSTEM	interface_filesystem.h	2;"	d
__INTERFACE_OPENCV	interface_opencv.h	22;"	d
__INTERFACE_OPENGL	interface_opengl.h	22;"	d
__INTERFACE_SDL	interface_sdl.h	22;"	d
__ML_H__	/usr/include/opencv/ml.h	42;"	d
__MVG_AUTOCALIBRATION	mvg_autocalibration.h	26;"	d
__MVG_CAMERA	mvg_camera.h	2;"	d
__MVG_DECOMPOSITION	mvg_decomposition.h	26;"	d
__MVG_MATCHING	mvg_matching.h	2;"	d
__MVG_RESECTION	mvg_resection.h	26;"	d
__MVG_THRESHOLDS	mvg_thresholds.h	26;"	d
__MVG_TRIANGULATION	mvg_triangulation.h	26;"	d
__NORMALIZATION	mvg_normalization.h	2;"	d
__TOOL_CALIBRATION	tool_calibration.h	26;"	d
__TOOL_COORDINATES	tool_coordinates.h	26;"	d
__TOOL_CORE	tool_core.h	26;"	d
__TOOL_EDIT	tool_edit.h	26;"	d
__TOOL_EXTRUDE	tool_extrude.h	26;"	d
__TOOL_FILE	tool_file.h	26;"	d
__TOOL_IMAGE	tool_image.h	26;"	d
__TOOL_MATCHING	tool_matching.h	26;"	d
__TOOL_PLANE_EXTRACTION	tool_plane_extraction.h	26;"	d
__TOOL_POINTS	tool_points.h	26;"	d
__TOOL_POLYGONS	tool_polygons.h	26;"	d
__TOOL_RESECTION	tool_resection.h	26;"	d
__TOOL_SELECTION	tool_selection.h	26;"	d
__TOOL_TRIANGULATION	tool_triangulation.h	26;"	d
__TOOL_TYPICAL_INCLUDES	tool_typical_includes.h	26;"	d
__UI_CONSTANTS	ui_constants.h	26;"	d
__UI_CONTEXT	ui_context.h	26;"	d
__UI_CORE	ui_core.h	26;"	d
__UI_EPIPOLARS	ui_epipolars.h	26;"	d
__UI_INSPECTION_MODE	ui_inspection_mode.h	26;"	d
__UI_LIST	ui_list.h	26;"	d
__UI_SELECTION	ui_selection.h	26;"	d
__UI_SHOT_MODE	ui_shot_mode.h	26;"	d
__UI_STATE	ui_state.h	26;"	d
__UI_VISUALIZATION	ui_visualization.h	26;"	d
__UI_VISUALIZATION_HELPERS	ui_visualization_helpers.h	26;"	d
__UI_VISUALIZATION_POINT	ui_visualization_point.h	26;"	d
__UI_WORKFLOW	ui_workflow.h	26;"	d
__anon18::height	/usr/include/opencv/cxtypes.h	/^    int height;$/;"	m	struct:__anon18	access:public
__anon18::width	/usr/include/opencv/cxtypes.h	/^    int width;$/;"	m	struct:__anon18	access:public
__anon1::callback	/usr/include/opencv/cvaux.h	/^    CvCallback callback;$/;"	m	union:__anon1	access:public
__anon1::data	/usr/include/opencv/cvaux.h	/^    void* data;$/;"	m	union:__anon1	access:public
__anon3::id	/usr/include/opencv/cvaux.h	/^    int id;$/;"	m	struct:__anon3	access:public
__anon3::p	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f p; \/\/ pgruebele: So we do not loose precision, this needs to be float$/;"	m	struct:__anon3	access:public
__anon4::id	/usr/include/opencv/cvaux.h	/^    int id;$/;"	m	struct:__anon4	access:public
__anon4::p	/usr/include/opencv/cvaux.h	/^    CvPoint3D32f p;             \/\/ location of the tracked object$/;"	m	struct:__anon4	access:public
__anon5::mat	/usr/include/opencv/cvaux.h	/^    float mat[4][4];              \/* maps camera coordinates to world coordinates *\/$/;"	m	struct:__anon5	access:public
__anon5::principal_point	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f principal_point; \/* copied from intrinsics so this structure *\/$/;"	m	struct:__anon5	access:public
__anon5::valid	/usr/include/opencv/cvaux.h	/^    CvBool valid;$/;"	m	struct:__anon5	access:public
__anon6::distortion	/usr/include/opencv/cvaux.h	/^    float distortion[4];$/;"	m	struct:__anon6	access:public
__anon6::focal_length	/usr/include/opencv/cvaux.h	/^    float focal_length[2];$/;"	m	struct:__anon6	access:public
__anon6::principal_point	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f principal_point;$/;"	m	struct:__anon6	access:public
action_camera_resection	actions.cpp	/^bool action_camera_resection(size_t shot_id, const bool enforce_square_pixels, const bool enforce_zero_skew)$/;"	f	signature:(size_t shot_id, const bool enforce_square_pixels, const bool enforce_zero_skew)
action_camera_resection	actions.h	/^bool action_camera_resection(size_t shot_id, const bool enforce_square_pixels, const bool enforce_zero_skew);$/;"	p	signature:(size_t shot_id, const bool enforce_square_pixels, const bool enforce_zero_skew)
action_triangulate_vertices	actions.cpp	/^bool action_triangulate_vertices($/;"	f	signature:( bool * shots_to_use , const int min_inliers , const int min_inliers_weaker , const bool only_manual , const double measurement_threshold )
action_triangulate_vertices	actions.h	/^bool action_triangulate_vertices(bool * shots_to_use = NULL, const int min_inliers = MVG_MIN_INLIERS_TO_TRIANGULATE, const int min_inliers_weaker = MVG_MIN_INLIERS_TO_TRIANGULATE_WEAKER, const bool only_manual = false, const double measurement_threshold = MVG_MEASUREMENT_THRESHOLD);$/;"	p	signature:(bool * shots_to_use = NULL, const int min_inliers = MVG_MIN_INLIERS_TO_TRIANGULATE, const int min_inliers_weaker = MVG_MIN_INLIERS_TO_TRIANGULATE_WEAKER, const bool only_manual = false, const double measurement_threshold = MVG_MEASUREMENT_THRESHOLD)
action_type	tool_core.h	/^	Tool_Action_Type action_type;       \/\/ type of action to be triggered (show tool's panel, show file dialog, ...)$/;"	m	struct:Tool_Menu_Item	access:public
activ_func	/usr/include/opencv/ml.h	/^    int activ_func;$/;"	m	class:CvANN_MLP	access:protected
active	core_debug.cpp	/^	bool active;$/;"	m	struct:Allocated_Memory	file:	access:public
active_var_mask	/usr/include/opencv/ml.h	/^    CvMat* active_var_mask;$/;"	m	class:CvRTrees	access:protected
add_3	core_math_routines.cpp	/^void add_3(const double * a, const double * b, double * result) $/;"	f	signature:(const double * a, const double * b, double * result)
add_3	core_math_routines.h	/^void add_3(const double * a, const double * b, double * result);$/;"	p	signature:(const double * a, const double * b, double * result)
add_mul_3	core_math_routines.cpp	/^void add_mul_3(const double * a, const double x, const double * b, double * result)$/;"	f	signature:(const double * a, const double x, const double * b, double * result)
add_mul_3	core_math_routines.h	/^void add_mul_3(const double * a, const double x, const double * b, double * result);$/;"	p	signature:(const double * a, const double x, const double * b, double * result)
addref	/usr/include/opencv/cxcore.hpp	/^    void addref() const$/;"	f	class:CvMatrix	access:public	signature:() const
adj_matr	/usr/include/opencv/cvaux.h	/^    int**    adj_matr;$/;"	m	struct:CvCliqueFinder	access:public
agTimeoutObjQ	application.cpp	/^extern "C" struct ag_objectq agTimeoutObjQ;$/;"	v	typeref:struct:ag_objectq
align	/usr/include/opencv/cxtypes.h	/^    int  align;         \/* Alignment of image rows (4 or 8).$/;"	m	struct:_IplImage	access:public
alloca	/usr/include/opencv/cxmisc.h	123;"	d
alloca	/usr/include/opencv/cxmisc.h	124;"	d
allocate_memory	core_debug.cpp	/^void * allocate_memory(size_t size, const char * description, const char * file, const char * line) $/;"	f	signature:(size_t size, const char * description, const char * file, const char * line)
allocate_memory	core_debug.h	/^void * allocate_memory(size_t size, const char * description, const char * file, const char * line);$/;"	p	signature:(size_t size, const char * description, const char * file, const char * line)
alpha	/usr/include/opencv/cvtypes.h	/^    float* alpha;$/;"	m	struct:CvHaarClassifier	access:public
alpha	/usr/include/opencv/ml.h	/^    double alpha;$/;"	m	struct:CvDTreeNode	access:public
alpha	/usr/include/opencv/ml.h	/^    double* alpha;$/;"	m	class:CvSVMSolver	access:public
alpha	/usr/include/opencv/ml.h	/^    double* alpha;$/;"	m	struct:CvSVMDecisionFunc	access:public
alpha1	/usr/include/opencv/cvaux.h	/^    float         alpha1, alpha2, alpha3, delta, T, minArea;$/;"	m	struct:CvFGDStatModelParams	access:public
alpha2	/usr/include/opencv/cvaux.h	/^    float         alpha1, alpha2, alpha3, delta, T, minArea;$/;"	m	struct:CvFGDStatModelParams	access:public
alpha3	/usr/include/opencv/cvaux.h	/^    float         alpha1, alpha2, alpha3, delta, T, minArea;$/;"	m	struct:CvFGDStatModelParams	access:public
alphaChannel	/usr/include/opencv/cxtypes.h	/^    int  alphaChannel;  \/* ignored by OpenCV *\/$/;"	m	struct:_IplImage	access:public
alpha_count	/usr/include/opencv/ml.h	/^    int alpha_count;$/;"	m	class:CvSVMSolver	access:public
alpha_status	/usr/include/opencv/ml.h	/^    char* alpha_status;$/;"	m	class:CvSVMSolver	access:public
anchor	/usr/include/opencv/cv.hpp	/^    CvPoint anchor;$/;"	m	class:CvBaseImageFilter	access:protected
anchorX	/usr/include/opencv/cxtypes.h	/^    int  anchorX;$/;"	m	struct:_IplConvKernel	access:public
anchorX	/usr/include/opencv/cxtypes.h	/^    int  anchorX;$/;"	m	struct:_IplConvKernelFP	access:public
anchorY	/usr/include/opencv/cxtypes.h	/^    int  anchorY;$/;"	m	struct:_IplConvKernel	access:public
anchorY	/usr/include/opencv/cxtypes.h	/^    int  anchorY;$/;"	m	struct:_IplConvKernelFP	access:public
angle	/usr/include/opencv/cxtypes.h	/^    float angle;          \/* angle between the horizontal axis$/;"	m	struct:CvBox2D	access:public
appearance_profile	/usr/include/opencv/cvvidsurv.hpp	/^    int     appearance_profile;$/;"	m	struct:CvBlobTrackerParamMS	access:public
application_menu	tool_core.h	/^	GUI_Panel * application_menu;$/;"	m	struct:Tools_State	access:public
area	/usr/include/opencv/cvtypes.h	/^    double area;    \/* area of the connected component  *\/$/;"	m	struct:CvConnectedComp	access:public
ascii	/usr/include/opencv/cxcore.h	/^    const int*  ascii; \/* font data and metrics *\/$/;"	m	struct:CvFont	access:public
attach	/usr/include/opencv/cxcore.hpp	/^    void attach( IplImage* img, bool use_refcount=true )$/;"	f	class:CvImage	access:public	signature:( IplImage* img, bool use_refcount=true )
attr	/usr/include/opencv/cxtypes.h	/^    const char** attr; \/* NULL-terminated array of (attribute_name,attribute_value) pairs *\/$/;"	m	struct:CvAttrList	access:public
aux_inside_2d_interval	gui.cpp	/^static bool aux_inside_2d_interval(int px, int py, int x1, int y1, int x2, int y2)$/;"	f	file:	signature:(int px, int py, int x1, int y1, int x2, int y2)
aux_inside_interval	gui.cpp	/^static bool aux_inside_interval(int x, int a, int b)$/;"	f	file:	signature:(int x, int a, int b)
average_value	core_math_routines.cpp	/^double average_value(const double a, const double b) $/;"	f	signature:(const double a, const double b)
average_value	core_math_routines.h	/^double average_value(const double a, const double b);$/;"	p	signature:(const double a, const double b)
avg	/usr/include/opencv/ml.h	/^    CvMat** avg;$/;"	m	class:CvNormalBayesClassifier	access:protected
b	/usr/include/opencv/ml.h	/^    double* b;$/;"	m	class:CvSVMSolver	access:public
basic_laplacian	/usr/include/opencv/cv.hpp	/^    bool basic_laplacian;$/;"	m	class:CvLaplaceFilter	access:protected
beg1	/usr/include/opencv/cvvidsurv.hpp	/^    int beg1,beg2;$/;"	m	struct:CvTracksTimePos	access:public
beg2	/usr/include/opencv/cvvidsurv.hpp	/^    int beg1,beg2;$/;"	m	struct:CvTracksTimePos	access:public
begin	tool_core.h	/^	Tool_Begin_Event_Handler begin; $/;"	m	struct:Tool	access:public
best_score	/usr/include/opencv/cvaux.h	/^    int best_score;$/;"	m	struct:CvCliqueFinder	access:public
best_weight	/usr/include/opencv/cvaux.h	/^    float best_weight;$/;"	m	struct:CvCliqueFinder	access:public
bg_threshold	/usr/include/opencv/cvaux.h	/^    double  bg_threshold, std_threshold, minArea;$/;"	m	struct:CvGaussBGStatModelParams	access:public
bins	/usr/include/opencv/cxtypes.h	/^    CvArr*  bins;$/;"	m	struct:CvHistogram	access:public
block_size	/usr/include/opencv/cxtypes.h	/^    int block_size;  \/* block size *\/$/;"	m	struct:CvMemStorage	access:public
bool_widget	tool_core.h	/^	GUI_Panel * real_widget, * int_widget, * enum_widget, * bool_widget;$/;"	m	struct:Tool_Parameter	access:public
boost_type	/usr/include/opencv/ml.h	/^    int boost_type;$/;"	m	struct:CvBoostParams	access:public
border	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f border[2][4];$/;"	m	struct:CvStereoCamera	access:public
border_mode	/usr/include/opencv/cv.hpp	/^    int max_ky, border_mode;$/;"	m	class:CvBaseImageFilter	access:protected
border_tab	/usr/include/opencv/cv.hpp	/^    int* border_tab;$/;"	m	class:CvBaseImageFilter	access:protected
border_tab_sz	/usr/include/opencv/cv.hpp	/^    int border_tab_sz1, border_tab_sz;$/;"	m	class:CvBaseImageFilter	access:protected
border_tab_sz1	/usr/include/opencv/cv.hpp	/^    int border_tab_sz1, border_tab_sz;$/;"	m	class:CvBaseImageFilter	access:protected
border_value	/usr/include/opencv/cv.hpp	/^    CvScalar border_value;$/;"	m	class:CvBaseImageFilter	access:protected
bottom	/usr/include/opencv/cxtypes.h	/^    CvMemBlock* bottom;\/* first allocated block *\/$/;"	m	struct:CvMemStorage	access:public
bottom_rows	/usr/include/opencv/cv.hpp	/^    int top_rows, bottom_rows, max_rows;$/;"	m	class:CvBaseImageFilter	access:protected
bottomline	/usr/include/opencv/cvcompat.h	/^    char*   bottomline;$/;"	m	struct:_CvPixelPosition8s	access:public
bottomline	/usr/include/opencv/cvcompat.h	/^    float*  bottomline;$/;"	m	struct:_CvPixelPosition32f	access:public
bottomline	/usr/include/opencv/cvcompat.h	/^    unsigned char*   bottomline;    \/* pointer to the start of the first line           *\/$/;"	m	struct:_CvPixelPosition8u	access:public
box	tool_core.h	/^	GUI_Panel * box; \/\/ T note unused$/;"	m	struct:Tool	access:public
bp_dw_scale	/usr/include/opencv/ml.h	/^    double bp_dw_scale, bp_moment_scale;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
bp_moment_scale	/usr/include/opencv/ml.h	/^    double bp_dw_scale, bp_moment_scale;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
buf	/usr/include/opencv/ml.h	/^    CvMat* buf;$/;"	m	struct:CvDTreeTrainData	access:public
buf	/usr/include/opencv/ml.h	/^    float* buf[2];$/;"	m	class:CvSVMSolver	access:public
buf_count	/usr/include/opencv/cv.hpp	/^    int buf_size, buf_step, buf_count, buf_max_count;$/;"	m	class:CvBaseImageFilter	access:protected
buf_count	/usr/include/opencv/ml.h	/^    int buf_count, buf_size;$/;"	m	struct:CvDTreeTrainData	access:public
buf_end	/usr/include/opencv/cv.hpp	/^    uchar *buf_start, *buf_end, *buf_head, *buf_tail;$/;"	m	class:CvBaseImageFilter	access:protected
buf_head	/usr/include/opencv/cv.hpp	/^    uchar *buf_start, *buf_end, *buf_head, *buf_tail;$/;"	m	class:CvBaseImageFilter	access:protected
buf_idx	/usr/include/opencv/ml.h	/^    int buf_idx;$/;"	m	struct:CvDTreeNode	access:public
buf_max_count	/usr/include/opencv/cv.hpp	/^    int buf_size, buf_step, buf_count, buf_max_count;$/;"	m	class:CvBaseImageFilter	access:protected
buf_size	/usr/include/opencv/cv.hpp	/^    int buf_size, buf_step, buf_count, buf_max_count;$/;"	m	class:CvBaseImageFilter	access:protected
buf_size	/usr/include/opencv/ml.h	/^    int buf_count, buf_size;$/;"	m	struct:CvDTreeTrainData	access:public
buf_start	/usr/include/opencv/cv.hpp	/^    uchar *buf_start, *buf_end, *buf_head, *buf_tail;$/;"	m	class:CvBaseImageFilter	access:protected
buf_step	/usr/include/opencv/cv.hpp	/^    int buf_size, buf_step, buf_count, buf_max_count;$/;"	m	class:CvBaseImageFilter	access:protected
buf_tail	/usr/include/opencv/cv.hpp	/^    uchar *buf_start, *buf_end, *buf_head, *buf_tail;$/;"	m	class:CvBaseImageFilter	access:protected
buffer	/usr/include/opencv/cv.hpp	/^    uchar* buffer;$/;"	m	class:CvBaseImageFilter	access:protected
c	/usr/include/opencv/ml.h	/^            float c;$/;"	m	struct:CvDTreeSplit::__anon25::__anon26	access:public
c	/usr/include/opencv/ml.h	/^    CvMat*  c;$/;"	m	class:CvNormalBayesClassifier	access:protected
cache_line_size	/usr/include/opencv/ml.h	/^    int cache_line_size;$/;"	m	class:CvSVMSolver	access:public
cache_size	/usr/include/opencv/ml.h	/^    int cache_size;$/;"	m	class:CvSVMSolver	access:public
calc	/usr/include/opencv/ml.h	/^    virtual void calc( int vcount, int n, const float** vecs, const float* another, float* results );$/;"	p	struct:CvSVMKernel	access:public	signature:( int vcount, int n, const float** vecs, const float* another, float* results )
calc_activ_func	/usr/include/opencv/ml.h	/^    virtual void calc_activ_func( CvMat* xf, const double* bias ) const;$/;"	p	class:CvANN_MLP	access:protected	signature:( CvMat* xf, const double* bias ) const
calc_activ_func_deriv	/usr/include/opencv/ml.h	/^    virtual void calc_activ_func_deriv( CvMat* xf, CvMat* deriv, const double* bias ) const;$/;"	p	class:CvANN_MLP	access:protected	signature:( CvMat* xf, CvMat* deriv, const double* bias ) const
calc_func	/usr/include/opencv/ml.h	/^    Calc calc_func;$/;"	m	struct:CvSVMKernel	access:public
calc_input_scale	/usr/include/opencv/ml.h	/^    virtual void calc_input_scale( const CvVectors* vecs, int flags );$/;"	p	class:CvANN_MLP	access:protected	signature:( const CvVectors* vecs, int flags )
calc_linear	/usr/include/opencv/ml.h	/^    virtual void calc_linear( int vec_count, int vec_size, const float** vecs,$/;"	p	struct:CvSVMKernel	access:public	signature:( int vec_count, int vec_size, const float** vecs, const float* another, float* results )
calc_node_dir	/usr/include/opencv/ml.h	/^    virtual double calc_node_dir( CvDTreeNode* n );$/;"	p	class:CvBoostTree	access:protected	signature:( CvDTreeNode* n )
calc_node_dir	/usr/include/opencv/ml.h	/^    virtual double calc_node_dir( CvDTreeNode* node );$/;"	p	class:CvDTree	access:protected	signature:( CvDTreeNode* node )
calc_node_value	/usr/include/opencv/ml.h	/^    virtual void calc_node_value( CvDTreeNode* n );$/;"	p	class:CvBoostTree	access:protected	signature:( CvDTreeNode* n )
calc_node_value	/usr/include/opencv/ml.h	/^    virtual void calc_node_value( CvDTreeNode* node );$/;"	p	class:CvDTree	access:protected	signature:( CvDTreeNode* node )
calc_non_rbf_base	/usr/include/opencv/ml.h	/^    virtual void calc_non_rbf_base( int vec_count, int vec_size, const float** vecs,$/;"	p	struct:CvSVMKernel	access:public	signature:( int vec_count, int vec_size, const float** vecs, const float* another, float* results, double alpha, double beta )
calc_output_scale	/usr/include/opencv/ml.h	/^    virtual void calc_output_scale( const CvVectors* vecs, int flags );$/;"	p	class:CvANN_MLP	access:protected	signature:( const CvVectors* vecs, int flags )
calc_poly	/usr/include/opencv/ml.h	/^    virtual void calc_poly( int vec_count, int vec_size, const float** vecs,$/;"	p	struct:CvSVMKernel	access:public	signature:( int vec_count, int vec_size, const float** vecs, const float* another, float* results )
calc_rbf	/usr/include/opencv/ml.h	/^    virtual void calc_rbf( int vec_count, int vec_size, const float** vecs,$/;"	p	struct:CvSVMKernel	access:public	signature:( int vec_count, int vec_size, const float** vecs, const float* another, float* results )
calc_rho	/usr/include/opencv/ml.h	/^    virtual void calc_rho( double& rho, double& r );$/;"	p	class:CvSVMSolver	access:public	signature:( double& rho, double& r )
calc_rho_func	/usr/include/opencv/ml.h	/^    CalcRho calc_rho_func;$/;"	m	class:CvSVMSolver	access:public
calc_rho_nu_svm	/usr/include/opencv/ml.h	/^    virtual void calc_rho_nu_svm( double& rho, double& r );$/;"	p	class:CvSVMSolver	access:public	signature:( double& rho, double& r )
calc_sigmoid	/usr/include/opencv/ml.h	/^    virtual void calc_sigmoid( int vec_count, int vec_size, const float** vecs,$/;"	p	struct:CvSVMKernel	access:public	signature:( int vec_count, int vec_size, const float** vecs, const float* another, float* results )
calc_var_importance	/usr/include/opencv/ml.h	/^    bool calc_var_importance; \/\/ true <=> RF processes variable importance$/;"	m	struct:CvRTParams	access:public
calibrated	geometry_structures.h	/^	bool calibrated;       \/\/ denotes whether valid calibration data have been determined or supplied$/;"	m	struct:Shot	access:public
calibration_add_view	tool_calibration.cpp	/^bool calibration_add_view(const size_t calibration_id, const size_t shot_id, const double threshold, const bool normalize_data, const bool normalize_A)$/;"	f	signature:(const size_t calibration_id, const size_t shot_id, const double threshold, const bool normalize_data, const bool normalize_A)
calibration_auto	tool_calibration.cpp	/^bool calibration_auto($/;"	f	signature:( const unsigned int randomness, const bool normalize_data, const bool normalize_A, const double distance_threshold )
calibration_auto_begin	tool_calibration.cpp	/^bool calibration_auto_begin($/;"	f	signature:( const unsigned int randomness, const bool normalize_data, const bool normalize_A, const double distance_threshold )
calibration_auto_end	tool_calibration.cpp	/^bool calibration_auto_end($/;"	f	signature:( const unsigned int randomness, const bool normalize_data, const bool normalize_A, const double distance_threshold )
calibration_auto_step	tool_calibration.cpp	/^bool calibration_auto_step($/;"	f	signature:( const unsigned int randomness, const bool normalize_data, const bool normalize_A, const double distance_threshold )
calibration_bundle	tool_calibration.cpp	/^void calibration_bundle() $/;"	f	signature:()
calibration_bundle	tool_calibration.cpp	/^void calibration_bundle();$/;"	p	file:	signature:()
calibration_pair	tool_calibration.cpp	/^bool calibration_pair($/;"	f	signature:( const size_t shot_id1, const size_t shot_id2, const bool normalize_data, const bool normalize_A, const double epipolar_distance_threshold, size_t * const calibration_id )
calibration_projection	tool_calibration.cpp	/^void calibration_projection(int j, int i, double *aj, double *bi, double *xij, void *adata)$/;"	f	signature:(int j, int i, double *aj, double *bi, double *xij, void *adata)
calibration_rectify	tool_calibration.cpp	/^void calibration_rectify(bool affine = false);$/;"	p	file:	signature:(bool affine = false)
calibration_rectify	tool_calibration.cpp	/^void calibration_rectify(bool affine)$/;"	f	signature:(bool affine)
calibration_refine	tool_calibration.cpp	/^void calibration_refine(bool strict)$/;"	f	signature:(bool strict)
calibration_refresh_flag	tool_calibration.cpp	/^void calibration_refresh_flag(size_t calibration_id)$/;"	f	signature:(size_t calibration_id)
calibration_triangulate_vertex	tool_calibration.cpp	/^void calibration_triangulate_vertex($/;"	f	signature:( const size_t calibration_id, const size_t vertex_id, const double measurement_threshold, const int min_inliers, const bool normalize_data, const bool normalize_A )
calibration_triangulate_vertices	tool_calibration.cpp	/^void calibration_triangulate_vertices($/;"	f	signature:( const size_t calibration_id, const double measurement_threshold, const int min_inliers, const bool normalize_data, const bool normalize_A )
calibration_triangulate_vertices	tool_calibration.cpp	/^void calibration_triangulate_vertices($/;"	p	file:	signature:( const size_t calibration_id, const double measurement_threshold, const int min_inliers, const bool normalize_data, const bool normalize_A )
calibration_update_inliers	tool_calibration.cpp	/^void calibration_update_inliers(const size_t calibration_id)$/;"	f	signature:(const size_t calibration_id)
calibration_update_inliers	tool_calibration.cpp	/^void calibration_update_inliers(const size_t calibration_id, const size_t P_id, const size_t count, const size_t * points_indices, const CvMat * status)$/;"	f	signature:(const size_t calibration_id, const size_t P_id, const size_t count, const size_t * points_indices, const CvMat * status)
calibration_update_inliers	tool_calibration.cpp	/^void calibration_update_inliers(const size_t calibration_id, const size_t P_id, const size_t count, const size_t * points_indices, const bool * status)$/;"	f	signature:(const size_t calibration_id, const size_t P_id, const size_t count, const size_t * points_indices, const bool * status)
calibration_update_inliers	tool_calibration.cpp	/^void calibration_update_inliers(const size_t calibration_id, const size_t count, const size_t * indices, const bool * status)$/;"	f	signature:(const size_t calibration_id, const size_t count, const size_t * indices, const bool * status)
calibrations	geometry_structures.cpp	/^Calibrations calibrations; \/\/ calibrations$/;"	v
callback	/usr/include/opencv/cvaux.h	/^    CvCallback callback;$/;"	m	union:__anon1	access:public
camera	/usr/include/opencv/cvaux.h	/^    CvCamera* camera[2]; \/* two individual camera parameters *\/$/;"	m	struct:CvStereoCamera	access:public
cameraCount	/usr/include/opencv/cvaux.h	/^    int     cameraCount;$/;"	m	class:CvCalibFilter	access:protected
cameraParams	/usr/include/opencv/cvaux.h	/^    CvCamera cameraParams[MAX_CAMERAS];$/;"	m	class:CvCalibFilter	access:protected
cand_weight	/usr/include/opencv/cvaux.h	/^    float* cand_weight;$/;"	m	struct:CvCliqueFinder	access:public
caption	gui.h	/^	const char * caption; $/;"	m	struct:GUI_Panel	access:public
caption_height	gui.h	/^	int caption_width, caption_height;$/;"	m	struct:GUI_Panel	access:public
caption_image	gui.h	/^	IplImage * caption_image;$/;"	m	struct:GUI_Panel	access:public
caption_texture_id	gui.h	/^	GLuint caption_texture_id; $/;"	m	struct:GUI_Panel	access:public
caption_width	gui.h	/^	int caption_width, caption_height;$/;"	m	struct:GUI_Panel	access:public
cat_count	/usr/include/opencv/ml.h	/^    CvMat* cat_count;$/;"	m	struct:CvDTreeTrainData	access:public
cat_map	/usr/include/opencv/ml.h	/^    CvMat* cat_map;$/;"	m	struct:CvDTreeTrainData	access:public
cat_ofs	/usr/include/opencv/ml.h	/^    CvMat* cat_ofs;$/;"	m	struct:CvDTreeTrainData	access:public
cat_var_count	/usr/include/opencv/ml.h	/^    int ord_var_count, cat_var_count;$/;"	m	struct:CvDTreeTrainData	access:public
cctable	/usr/include/opencv/cvaux.h	/^    CvBGPixelCCStatTable* cctable;$/;"	m	struct:CvBGPixelStat	access:public
ce	/usr/include/opencv/cvaux.h	/^    int* ce;$/;"	m	struct:CvCliqueFinder	access:public
center	/usr/include/opencv/cxtypes.h	/^    CvPoint2D32f center;  \/* center of the box *\/$/;"	m	struct:CvBox2D	access:public
chain	/usr/include/opencv/cvaux.h	/^    CvSeq* chain;$/;"	m	struct:CvLCMEdge	access:public
channelSeq	/usr/include/opencv/cxtypes.h	/^    char channelSeq[4]; \/* ditto *\/$/;"	m	struct:_IplImage	access:public
channels	/usr/include/opencv/cxcore.hpp	/^    int channels() const { return image ? image->nChannels : 0; }$/;"	f	class:CvImage	access:public	signature:() const
channels	/usr/include/opencv/cxcore.hpp	/^    int channels() const { return matrix ? CV_MAT_CN(matrix->type) : 0; }$/;"	f	class:CvMatrix	access:public	signature:() const
check_all_chunks	core_debug.cpp	/^void check_all_chunks()$/;"	f	signature:()
check_all_chunks	core_debug.h	/^void check_all_chunks();$/;"	p	signature:()
check_chunk	core_debug.cpp	/^bool check_chunk(const size_t id) $/;"	f	signature:(const size_t id)
check_chunk	core_debug.h	/^bool check_chunk(const size_t id);$/;"	p	signature:(const size_t id)
child	/usr/include/opencv/cvtypes.h	/^    int child;$/;"	m	struct:CvHaarStageClassifier	access:public
chunks	core_debug.cpp	/^Allocated_Memory chunks[number_of_chunks];$/;"	v
chunks_count	core_debug.cpp	/^size_t chunks_count;$/;"	v
class_idx	/usr/include/opencv/ml.h	/^    int class_idx;$/;"	m	struct:CvDTreeNode	access:public
class_labels	/usr/include/opencv/ml.h	/^    CvMat* class_labels;$/;"	m	class:CvSVM	access:protected
class_weights	/usr/include/opencv/ml.h	/^    CvMat*      class_weights; \/\/ for CV_SVM_C_SVC$/;"	m	struct:CvSVMParams	access:public
class_weights	/usr/include/opencv/ml.h	/^    CvMat* class_weights;$/;"	m	class:CvSVM	access:protected
classifier	/usr/include/opencv/cvtypes.h	/^    CvHaarClassifier* classifier;$/;"	m	struct:CvHaarStageClassifier	access:public
clear	/usr/include/opencv/cv.hpp	/^    virtual void clear();$/;"	p	class:CvBaseImageFilter	access:public	signature:()
clear	/usr/include/opencv/cv.hpp	/^    virtual void clear();$/;"	p	class:CvLinearFilter	access:public	signature:()
clear	/usr/include/opencv/cv.hpp	/^    virtual void clear();$/;"	p	class:CvMorphology	access:public	signature:()
clear	/usr/include/opencv/cv.hpp	/^    virtual void clear();$/;"	p	class:CvSepFilter	access:public	signature:()
clear	/usr/include/opencv/cxcore.hpp	/^    void clear() { detach(); }$/;"	f	class:CvImage	access:public	signature:()
clear	/usr/include/opencv/cxcore.hpp	/^    void clear()$/;"	f	class:CvMatrix	access:public	signature:()
clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	class:CvANN_MLP	access:public	signature:()
clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	class:CvBoost	access:public	signature:()
clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	class:CvBoostTree	access:public	signature:()
clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	class:CvDTree	access:public	signature:()
clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	class:CvEM	access:public	signature:()
clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	class:CvKNearest	access:public	signature:()
clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	class:CvNormalBayesClassifier	access:public	signature:()
clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	class:CvRTrees	access:public	signature:()
clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	class:CvSVM	access:public	signature:()
clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	class:CvSVMSolver	access:public	signature:()
clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	class:CvStatModel	access:public	signature:()
clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	struct:CvDTreeTrainData	access:public	signature:()
clear	/usr/include/opencv/ml.h	/^    virtual void clear();$/;"	p	struct:CvSVMKernel	access:public	signature:()
click	tool_core.h	/^	Tool_Click_Event_Handler click;$/;"	m	struct:Tool	access:public
clone	/usr/include/opencv/cxcore.hpp	/^    CvImage clone() { return CvImage(image ? cvCloneImage(image) : 0); }$/;"	f	class:CvImage	access:public	signature:()
clone	/usr/include/opencv/cxcore.hpp	/^    CvMatrix clone() { return CvMatrix(matrix ? cvCloneMat(matrix) : 0); }$/;"	f	class:CvMatrix	access:public	signature:()
clone	/usr/include/opencv/cxtypes.h	/^    CvCloneFunc clone;$/;"	m	struct:CvTypeInfo	access:public
cls_labels	/usr/include/opencv/ml.h	/^    CvMat*  cls_labels;$/;"	m	class:CvNormalBayesClassifier	access:protected
cluster_categories	/usr/include/opencv/ml.h	/^    virtual void cluster_categories( const int* vectors, int vector_count,$/;"	p	class:CvDTree	access:protected	signature:( const int* vectors, int vector_count, int var_count, int* sums, int k, int* cluster_labels )
code	/usr/include/opencv/cvtypes.h	/^    char      code;$/;"	m	struct:CvChainPtReader	access:public
coef0	/usr/include/opencv/ml.h	/^    double      coef0;  \/\/ for poly\/sigmoid$/;"	m	struct:CvSVMParams	access:public
coeffs	/usr/include/opencv/cvaux.h	/^    double coeffs[2][3][3];\/* coefficients for transformation *\/$/;"	m	struct:CvStereoCamera	access:public
coi	/usr/include/opencv/cxcore.hpp	/^    int coi() const { return !image || !image->roi ? 0 : image->roi->coi; }$/;"	f	class:CvImage	access:public	signature:() const
coi	/usr/include/opencv/cxtypes.h	/^    int  coi; \/* 0 - no COI (all channels are selected), 1 - 0th channel is selected ...*\/$/;"	m	struct:_IplROI	access:public
color	/usr/include/opencv/cvvidsurv.hpp	/^    CvScalar color;$/;"	m	struct:CvDrawShape	access:public
color	geometry_structures.h	/^	float color[3];              \/\/ vertex can be colored by user or by any algorithm to help distinguish between different groups of vertices$/;"	m	struct:Vertex	access:public
color	geometry_structures.h	/^	float color[3];   $/;"	m	struct:Contour	access:public
color	geometry_structures.h	/^	float color[3];$/;"	m	struct:Polygon_3d	access:public
color	interface_opengl.h	/^	float color[3], line_width, point_size, opacity;$/;"	m	struct:Drawing_Style	access:public
colorModel	/usr/include/opencv/cxtypes.h	/^    char colorModel[4]; \/* ignored by OpenCV *\/$/;"	m	struct:_IplImage	access:public
color_transform	/usr/include/opencv/cvaux.hpp	/^    virtual void color_transform( const IplImage* img ); $/;"	p	class:CvCamShiftTracker	access:protected	signature:( const IplImage* img )
cols	/usr/include/opencv/cxcore.hpp	/^    int cols() const { return matrix ? matrix->cols : 0; }$/;"	f	class:CvMatrix	access:public	signature:() const
cols	/usr/include/opencv/cxtypes.h	/^        int cols;$/;"	m	union:CvMat::__anon15	access:public
cols	/usr/include/opencv/cxtypes.h	/^    int cols;$/;"	m	struct:CvMat	access:public
comLen	/usr/include/opencv/cvvidsurv.hpp	/^    int comLen; \/\/common length for two tracks$/;"	m	struct:CvTracksTimePos	access:public
complete_node_dir	/usr/include/opencv/ml.h	/^    virtual void complete_node_dir( CvDTreeNode* node );$/;"	p	class:CvDTree	access:protected	signature:( CvDTreeNode* node )
complexity	/usr/include/opencv/ml.h	/^    int complexity;$/;"	m	struct:CvDTreeNode	access:public
compute_normals_K	tool_triangulation.cpp	/^const size_t compute_normals_K = 200;$/;"	v
compute_vertex_normal_from_pointcloud	tool_triangulation.cpp	/^void compute_vertex_normal_from_pointcloud(const size_t vertex_id, ANNkd_tree * ann_kdtree, size_t * vertices_reindex)$/;"	f	signature:(const size_t vertex_id, ANNkd_tree * ann_kdtree, size_t * vertices_reindex)
compute_vertex_normal_from_pointcloud	tool_triangulation.h	/^void compute_vertex_normal_from_pointcloud(const size_t vertex_id, ANNkd_tree * ann_kdtree, size_t * vertices_reindex);$/;"	p	signature:(const size_t vertex_id, ANNkd_tree * ann_kdtree, size_t * vertices_reindex)
const_row	/usr/include/opencv/cv.hpp	/^    uchar* const_row;$/;"	m	class:CvBaseImageFilter	access:protected
content	core_image_loader.h	/^	Image_Loader_Content content;$/;"	m	struct:Image_Loader_Request	access:public
content	ui_context.h	/^	Context_Content content;$/;"	m	struct:Context_Item	access:public
context_state	ui_context.cpp	/^static Context_State context_state; $/;"	v	file:
context_vertex	tool_points.cpp	/^	size_t context_vertex;$/;"	m	struct:Tool_Points	file:	access:public
context_vertex_set	tool_points.cpp	/^	bool context_vertex_set;$/;"	m	struct:Tool_Points	file:	access:public
continuous_loading_alpha	ui_visualization.h	/^	double continuous_loading_alpha; $/;"	m	struct:Visualization_State	access:public
contour	/usr/include/opencv/cvaux.h	/^    CvContour* contour; $/;"	m	struct:CvLCMNode	access:public
contour	/usr/include/opencv/cvtypes.h	/^    CvSeq* contour; \/* optional component boundary$/;"	m	struct:CvConnectedComp	access:public
contours	geometry_structures.h	/^	Contours contours;     \/\/ 2d polygons on this shot \/\/ unused but nice to have for some vision algorithms$/;"	m	struct:Shot	access:public
control_matrix	/usr/include/opencv/cvtypes.h	/^    CvMat* control_matrix;      \/* control matrix (B)$/;"	m	struct:CvKalman	access:public
coordinates_apply_homography_to_cameras	tool_coordinates.cpp	/^bool coordinates_apply_homography_to_cameras(CvMat * H)$/;"	f	signature:(CvMat * H)
coordinates_apply_homography_to_cameras	tool_coordinates.h	/^bool coordinates_apply_homography_to_cameras(CvMat * H);$/;"	p	signature:(CvMat * H)
coordinates_reorient_using_current_camera	tool_coordinates.cpp	/^void coordinates_reorient_using_current_camera()$/;"	f	signature:()
coordinates_reorient_using_current_camera	tool_coordinates.h	/^void coordinates_reorient_using_current_camera();$/;"	p	signature:()
coordinates_rotate_all_cameras	tool_coordinates.cpp	/^bool coordinates_rotate_all_cameras(size_t shot_id) $/;"	f	signature:(size_t shot_id)
coordinates_rotate_all_cameras	tool_coordinates.h	/^bool coordinates_rotate_all_cameras(size_t shot_id);$/;"	p	signature:(size_t shot_id)
core_abort	core_debug.cpp	/^int core_abort()$/;"	f	signature:()
core_abort	core_debug.h	/^int core_abort();$/;"	p	signature:()
core_debug_initialize	core_debug.cpp	/^bool core_debug_initialize()$/;"	f	signature:()
core_debug_initialize	core_debug.h	/^bool core_debug_initialize();$/;"	p	signature:()
core_initialize	core_state.cpp	/^bool core_initialize()$/;"	f	signature:()
core_initialize	core_state.h	/^bool core_initialize();$/;"	p	signature:()
core_magic_number	core_debug.cpp	/^const size_t core_magic_number = 0xDEADF00D;$/;"	v
core_state	core_state.cpp	/^Core_State core_state;$/;"	v
correspondences_count	geometry_structures.h	/^	size_t correspondences_count;    \/\/ number of correspondences$/;"	m	struct:Shot_Pair_Relation	access:public
count	/usr/include/opencv/cvtypes.h	/^    int  count;$/;"	m	struct:CvHaarClassifierCascade	access:public
count	/usr/include/opencv/cvtypes.h	/^    int  count;$/;"	m	struct:CvHaarStageClassifier	access:public
count	/usr/include/opencv/cvtypes.h	/^    int count;$/;"	m	struct:CvHaarClassifier	access:public
count	/usr/include/opencv/cxcore.h	/^    int count; \/* number of arrays *\/$/;"	m	struct:CvNArrayIterator	access:public
count	/usr/include/opencv/cxtypes.h	/^    int    count;             \/* number of elements in the block *\/$/;"	m	struct:CvSeqBlock	access:public
count	/usr/include/opencv/ml.h	/^    CvMat** count;$/;"	m	class:CvNormalBayesClassifier	access:protected
count	/usr/include/opencv/ml.h	/^    int dims, count;$/;"	m	struct:CvVectors	access:public
count	tool_core.h	/^	size_t current, count;$/;"	m	struct:Tools_State	access:public
count	ui_context.h	/^	size_t count;$/;"	m	struct:Context_State	access:public
countFrames	/usr/include/opencv/cvaux.h	/^    int                        countFrames;$/;"	m	struct:CvGaussBGModel	access:public
counts	/usr/include/opencv/ml.h	/^    CvMat* counts;$/;"	m	struct:CvDTreeTrainData	access:public
cov_mat_type	/usr/include/opencv/ml.h	/^    int cov_mat_type;$/;"	m	struct:CvEMParams	access:public
cov_rotate_mats	/usr/include/opencv/ml.h	/^    CvMat** cov_rotate_mats;$/;"	m	class:CvEM	access:protected
cov_rotate_mats	/usr/include/opencv/ml.h	/^    CvMat** cov_rotate_mats;$/;"	m	class:CvNormalBayesClassifier	access:protected
covs	/usr/include/opencv/ml.h	/^    CvMat** covs;$/;"	m	class:CvEM	access:protected
covs	/usr/include/opencv/ml.h	/^    const CvMat** covs;$/;"	m	struct:CvEMParams	access:public
create	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTrackAnalysis* cvCreateBlobTrackAnalysisList(CvBlobTrackAnalysisOne* (*create)());$/;"	p	signature:()
create	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTrackPostProc* cvCreateBlobTrackPostProcList(CvBlobTrackPostProcOne* (*create)());$/;"	p	signature:()
create	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTracker* cvCreateBlobTrackerList(CvBlobTrackerOne* (*create)());$/;"	p	signature:()
create	/usr/include/opencv/cxcore.hpp	/^    void create( CvSize size, int depth, int channels )$/;"	f	class:CvImage	access:public	signature:( CvSize size, int depth, int channels )
create	/usr/include/opencv/cxcore.hpp	/^    void create( int rows, int cols, int type )$/;"	f	class:CvMatrix	access:public	signature:( int rows, int cols, int type )
create	/usr/include/opencv/ml.h	/^    virtual bool create( const CvSVMParams* _params, Calc _calc_func );$/;"	p	struct:CvSVMKernel	access:public	signature:( const CvSVMParams* _params, Calc _calc_func )
create	/usr/include/opencv/ml.h	/^    virtual bool create( int count, int var_count, const float** samples, char* y,$/;"	p	class:CvSVMSolver	access:public	signature:( int count, int var_count, const float** samples, char* y, int alpha_count, double* alpha, double Cp, double Cn, CvMemStorage* storage, CvSVMKernel* kernel, GetRow get_row, SelectWorkingSet select_working_set, CalcRho calc_rho )
create	/usr/include/opencv/ml.h	/^    virtual void create( const CvMat* _layer_sizes,$/;"	p	class:CvANN_MLP	access:public	signature:( const CvMat* _layer_sizes, int _activ_func=SIGMOID_SYM, double _f_param1=0, double _f_param2=0 )
create_kernel	/usr/include/opencv/ml.h	/^    virtual void create_kernel();$/;"	p	class:CvSVM	access:protected	signature:()
create_solver	/usr/include/opencv/ml.h	/^    virtual void create_solver();$/;"	p	class:CvSVM	access:protected	signature:()
cross_3	core_math_routines.cpp	/^void cross_3(const double * a, const double * b, double * result) $/;"	f	signature:(const double * a, const double * b, double * result)
cross_3	core_math_routines.h	/^void cross_3(const double * a, const double * b, double * result);$/;"	p	signature:(const double * a, const double * b, double * result)
ctable	/usr/include/opencv/cvaux.h	/^    CvBGPixelCStatTable*  ctable;$/;"	m	struct:CvBGPixelStat	access:public
cur_weight	/usr/include/opencv/cvaux.h	/^    float* cur_weight;$/;"	m	struct:CvCliqueFinder	access:public
curidx	/usr/include/opencv/cxtypes.h	/^    int curidx;$/;"	m	struct:CvSparseMatIterator	access:public
current	tool_core.h	/^	size_t current, count;$/;"	m	struct:Tools_State	access:public
current_comp	/usr/include/opencv/cvaux.h	/^    int* current_comp;$/;"	m	struct:CvCliqueFinder	access:public
current_quality	core_image_loader.h	/^	Image_Loader_Quality current_quality;$/;"	m	struct:Image_Loader_Request	access:public
current_shot	geometry_loader.h	/^	Shot * current_shot;$/;"	m	struct:geometry_loader_SAX_state	access:public
currline	/usr/include/opencv/cvcompat.h	/^    char*   currline;$/;"	m	struct:_CvPixelPosition8s	access:public
currline	/usr/include/opencv/cvcompat.h	/^    float*  currline;$/;"	m	struct:_CvPixelPosition32f	access:public
currline	/usr/include/opencv/cvcompat.h	/^    unsigned char*   currline;      \/* pointer to the start of the current pixel line   *\/$/;"	m	struct:_CvPixelPosition8u	access:public
cut_tree	/usr/include/opencv/ml.h	/^    virtual int cut_tree( int T, int fold, double min_alpha );$/;"	p	class:CvDTree	access:protected	signature:( int T, int fold, double min_alpha )
cv16s	/usr/include/opencv/cxmisc.h	/^    cv16u, cv16s, cv16sc,$/;"	e	enum:CvDataType
cv16sc	/usr/include/opencv/cxmisc.h	/^    cv16u, cv16s, cv16sc,$/;"	e	enum:CvDataType
cv16u	/usr/include/opencv/cxmisc.h	/^    cv16u, cv16s, cv16sc,$/;"	e	enum:CvDataType
cv1u	/usr/include/opencv/cxmisc.h	/^    cv1u,$/;"	e	enum:CvDataType
cv2DRotationMatrix	/usr/include/opencv/cv.h	/^CVAPI(CvMat*)  cv2DRotationMatrix( CvPoint2D32f center, double angle,$/;"	p	signature:( CvPoint2D32f center, double angle, double scale, CvMat* map_matrix )
cv32f	/usr/include/opencv/cxmisc.h	/^    cv32f, cv32fc,$/;"	e	enum:CvDataType
cv32fc	/usr/include/opencv/cxmisc.h	/^    cv32f, cv32fc,$/;"	e	enum:CvDataType
cv32s	/usr/include/opencv/cxmisc.h	/^    cv32u, cv32s, cv32sc,$/;"	e	enum:CvDataType
cv32sc	/usr/include/opencv/cxmisc.h	/^    cv32u, cv32s, cv32sc,$/;"	e	enum:CvDataType
cv32u	/usr/include/opencv/cxmisc.h	/^    cv32u, cv32s, cv32sc,$/;"	e	enum:CvDataType
cv3dTracker2dTrackedObject	/usr/include/opencv/cvaux.h	/^CV_INLINE Cv3dTracker2dTrackedObject cv3dTracker2dTrackedObject(int id, CvPoint2D32f p)$/;"	f	signature:(int id, CvPoint2D32f p)
cv3dTrackerCalibrateCameras	/usr/include/opencv/cvaux.h	/^CVAPI(CvBool) cv3dTrackerCalibrateCameras(int num_cameras,$/;"	p	signature:(int num_cameras, const Cv3dTrackerCameraIntrinsics camera_intrinsics[], CvSize etalon_size, float square_size, IplImage *samples[], Cv3dTrackerCameraInfo camera_info[])
cv3dTrackerLocateObjects	/usr/include/opencv/cvaux.h	/^CVAPI(int)  cv3dTrackerLocateObjects(int num_cameras, int num_objects,$/;"	p	signature:(int num_cameras, int num_objects, const Cv3dTrackerCameraInfo camera_info[], const Cv3dTracker2dTrackedObject tracking_info[], Cv3dTrackerTrackedObject tracked_objects[])
cv3dTrackerTrackedObject	/usr/include/opencv/cvaux.h	/^CV_INLINE Cv3dTrackerTrackedObject cv3dTrackerTrackedObject(int id, CvPoint3D32f p)$/;"	f	signature:(int id, CvPoint3D32f p)
cv64f	/usr/include/opencv/cxmisc.h	/^    cv64f, cv64fc$/;"	e	enum:CvDataType
cv64fc	/usr/include/opencv/cxmisc.h	/^    cv64f, cv64fc$/;"	e	enum:CvDataType
cv64s	/usr/include/opencv/cxmisc.h	/^    cv64u, cv64s, cv64sc,$/;"	e	enum:CvDataType
cv64sc	/usr/include/opencv/cxmisc.h	/^    cv64u, cv64s, cv64sc,$/;"	e	enum:CvDataType
cv64u	/usr/include/opencv/cxmisc.h	/^    cv64u, cv64s, cv64sc,$/;"	e	enum:CvDataType
cv8s	/usr/include/opencv/cxmisc.h	/^    cv8u, cv8s,$/;"	e	enum:CvDataType
cv8u	/usr/include/opencv/cxmisc.h	/^    cv8u, cv8s,$/;"	e	enum:CvDataType
cvAXPY	/usr/include/opencv/cxcore.h	544;"	d
cvAbs	/usr/include/opencv/cxcore.h	622;"	d
cvAbsDiff	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvAbsDiff( const CvArr* src1, const CvArr* src2, CvArr* dst );$/;"	p	signature:( const CvArr* src1, const CvArr* src2, CvArr* dst )
cvAbsDiffS	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvAbsDiffS( const CvArr* src, CvArr* dst, CvScalar value );$/;"	p	signature:( const CvArr* src, CvArr* dst, CvScalar value )
cvAcc	/usr/include/opencv/cv.h	/^CVAPI(void)  cvAcc( const CvArr* image, CvArr* sum,$/;"	p	signature:( const CvArr* image, CvArr* sum, const CvArr* mask CV_DEFAULT(NULL) )
cvAccMask	/usr/include/opencv/cvcompat.h	118;"	d
cvAdaptiveThreshold	/usr/include/opencv/cv.h	/^CVAPI(void)  cvAdaptiveThreshold( const CvArr* src, CvArr* dst, double max_value,$/;"	p	signature:( const CvArr* src, CvArr* dst, double max_value, int adaptive_method CV_DEFAULT(CV_ADAPTIVE_THRESH_MEAN_C), int threshold_type CV_DEFAULT(CV_THRESH_BINARY), int block_size CV_DEFAULT(3), double param1 CV_DEFAULT(5))
cvAdd	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvAdd( const CvArr* src1, const CvArr* src2, CvArr* dst,$/;"	p	signature:( const CvArr* src1, const CvArr* src2, CvArr* dst, const CvArr* mask CV_DEFAULT(NULL))
cvAddNoise	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS void cvAddNoise(IplImage* pImg, int noise_type, double Ampl, CvRandState* rnd_state = NULL);$/;"	p	signature:(IplImage* pImg, int noise_type, double Ampl, CvRandState* rnd_state = NULL)
cvAddS	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvAddS( const CvArr* src, CvScalar value, CvArr* dst,$/;"	p	signature:( const CvArr* src, CvScalar value, CvArr* dst, const CvArr* mask CV_DEFAULT(NULL))
cvAddSearchPath	/usr/include/opencv/highgui.h	317;"	d
cvAddWeighted	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvAddWeighted( const CvArr* src1, double alpha,$/;"	p	signature:( const CvArr* src1, double alpha, const CvArr* src2, double beta, double gamma, CvArr* dst )
cvAlgHintAccurate	/usr/include/opencv/cxmisc.h	/^    cvAlgHintAccurate$/;"	e	enum:CvHintAlgorithm
cvAlgHintFast	/usr/include/opencv/cxmisc.h	/^    cvAlgHintFast,$/;"	e	enum:CvHintAlgorithm
cvAlgHintNone	/usr/include/opencv/cxmisc.h	/^    cvAlgHintNone,$/;"	e	enum:CvHintAlgorithm
cvAlign	/usr/include/opencv/cxmisc.h	/^CV_INLINE int cvAlign( int size, int align )$/;"	f	signature:( int size, int align )
cvAlignPtr	/usr/include/opencv/cxmisc.h	/^CV_INLINE void* cvAlignPtr( const void* ptr, int align=32 )$/;"	f	signature:( const void* ptr, int align=32 )
cvAlloc	/usr/include/opencv/cxcore.h	/^CVAPI(void*)  cvAlloc( size_t size );$/;"	p	signature:( size_t size )
cvAnd	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvAnd( const CvArr* src1, const CvArr* src2,$/;"	p	signature:( const CvArr* src1, const CvArr* src2, CvArr* dst, const CvArr* mask CV_DEFAULT(NULL))
cvAndS	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvAndS( const CvArr* src, CvScalar value,$/;"	p	signature:( const CvArr* src, CvScalar value, CvArr* dst, const CvArr* mask CV_DEFAULT(NULL))
cvApproxChains	/usr/include/opencv/cv.h	/^CVAPI(CvSeq*) cvApproxChains( CvSeq* src_seq, CvMemStorage* storage,$/;"	p	signature:( CvSeq* src_seq, CvMemStorage* storage, int method CV_DEFAULT(CV_CHAIN_APPROX_SIMPLE), double parameter CV_DEFAULT(0), int minimal_perimeter CV_DEFAULT(0), int recursive CV_DEFAULT(0))
cvApproxPoly	/usr/include/opencv/cv.h	/^CVAPI(CvSeq*)  cvApproxPoly( const void* src_seq,$/;"	p	signature:( const void* src_seq, int header_size, CvMemStorage* storage, int method, double parameter, int parameter2 CV_DEFAULT(0))
cvArcLength	/usr/include/opencv/cv.h	/^CVAPI(double)  cvArcLength( const void* curve,$/;"	p	signature:( const void* curve, CvSlice slice CV_DEFAULT(CV_WHOLE_SEQ), int is_closed CV_DEFAULT(-1))
cvAttrList	/usr/include/opencv/cxtypes.h	/^CV_INLINE CvAttrList cvAttrList( const char** attr CV_DEFAULT(NULL),$/;"	f	signature:( const char** attr CV_DEFAULT(NULL), CvAttrList* next CV_DEFAULT(NULL) )
cvAttrValue	/usr/include/opencv/cxcore.h	/^CVAPI(const char*) cvAttrValue( const CvAttrList* attr, const char* attr_name );$/;"	p	signature:( const CvAttrList* attr, const char* attr_name )
cvAvg	/usr/include/opencv/cxcore.h	/^CVAPI(CvScalar)  cvAvg( const CvArr* arr, const CvArr* mask CV_DEFAULT(NULL) );$/;"	p	signature:( const CvArr* arr, const CvArr* mask CV_DEFAULT(NULL) )
cvAvgSdv	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvAvgSdv( const CvArr* arr, CvScalar* mean, CvScalar* std_dev,$/;"	p	signature:( const CvArr* arr, CvScalar* mean, CvScalar* std_dev, const CvArr* mask CV_DEFAULT(NULL) )
cvBackProjectPCA	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvBackProjectPCA( const CvArr* proj, const CvArr* mean,$/;"	p	signature:( const CvArr* proj, const CvArr* mean, const CvArr* eigenvects, CvArr* result )
cvBlob	/usr/include/opencv/cvvidsurv.hpp	/^inline CvBlob cvBlob(float x,float y, float w, float h)$/;"	f	signature:(float x,float y, float w, float h)
cvBoundingRect	/usr/include/opencv/cv.h	/^CVAPI(CvRect)  cvBoundingRect( CvArr* points, int update CV_DEFAULT(0) );$/;"	p	signature:( CvArr* points, int update CV_DEFAULT(0) )
cvBoxPoints	/usr/include/opencv/cv.h	/^CVAPI(void) cvBoxPoints( CvBox2D box, CvPoint2D32f pt[4] );$/;"	p	signature:( CvBox2D box, CvPoint2D32f pt[4] )
cvCalcArrBackProject	/usr/include/opencv/cv.h	/^CVAPI(void)  cvCalcArrBackProject( CvArr** image, CvArr* dst,$/;"	p	signature:( CvArr** image, CvArr* dst, const CvHistogram* hist )
cvCalcArrBackProjectPatch	/usr/include/opencv/cv.h	/^CVAPI(void)  cvCalcArrBackProjectPatch( CvArr** image, CvArr* dst, CvSize range,$/;"	p	signature:( CvArr** image, CvArr* dst, CvSize range, CvHistogram* hist, int method, double factor )
cvCalcArrHist	/usr/include/opencv/cv.h	/^CVAPI(void)  cvCalcArrHist( CvArr** arr, CvHistogram* hist,$/;"	p	signature:( CvArr** arr, CvHistogram* hist, int accumulate CV_DEFAULT(0), const CvArr* mask CV_DEFAULT(NULL) )
cvCalcBackProject	/usr/include/opencv/cv.h	882;"	d
cvCalcBackProjectPatch	/usr/include/opencv/cv.h	890;"	d
cvCalcBayesianProb	/usr/include/opencv/cv.h	/^CVAPI(void)  cvCalcBayesianProb( CvHistogram** src, int number,$/;"	p	signature:( CvHistogram** src, int number, CvHistogram** dst)
cvCalcContoursCorrespondence	/usr/include/opencv/cvaux.h	/^CvSeq* cvCalcContoursCorrespondence( const CvSeq* contour1,$/;"	p	signature:( const CvSeq* contour1, const CvSeq* contour2, CvMemStorage* storage)
cvCalcCovarMatrix	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvCalcCovarMatrix( const CvArr** vects, int count,$/;"	p	signature:( const CvArr** vects, int count, CvArr* cov_mat, CvArr* avg, int flags )
cvCalcCovarMatrixEx	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvCalcCovarMatrixEx( int nObjects, void* input, int ioFlags,$/;"	p	signature:( int nObjects, void* input, int ioFlags, int ioBufSize, uchar* buffer, void* userData, IplImage* avg, float* covarMatrix )
cvCalcDecompCoeff	/usr/include/opencv/cvaux.h	/^CVAPI(double)  cvCalcDecompCoeff( IplImage* obj, IplImage* eigObj, IplImage* avg );$/;"	p	signature:( IplImage* obj, IplImage* eigObj, IplImage* avg )
cvCalcEMD	/usr/include/opencv/cvcompat.h	/^CV_INLINE  float  cvCalcEMD( const float* signature1, int size1,$/;"	f	signature:( const float* signature1, int size1, const float* signature2, int size2, int dims, int dist_type CV_DEFAULT(CV_DIST_L2), CvDistanceFunction dist_func CV_DEFAULT(0), float* lower_bound CV_DEFAULT(0), void* user_param CV_DEFAULT(0))
cvCalcEMD2	/usr/include/opencv/cv.h	/^CVAPI(float)  cvCalcEMD2( const CvArr* signature1,$/;"	p	signature:( const CvArr* signature1, const CvArr* signature2, int distance_type, CvDistanceFunction distance_func CV_DEFAULT(NULL), const CvArr* cost_matrix CV_DEFAULT(NULL), CvArr* flow CV_DEFAULT(NULL), float* lower_bound CV_DEFAULT(NULL), void* userdata CV_DEFAULT(NULL))
cvCalcEigenObjects	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvCalcEigenObjects( int nObjects, void* input, void* output,$/;"	p	signature:( int nObjects, void* input, void* output, int ioFlags, int ioBufSize, void* userData, CvTermCriteria* calcLimit, IplImage* avg, float* eigVals )
cvCalcGlobalOrientation	/usr/include/opencv/cv.h	/^CVAPI(double)  cvCalcGlobalOrientation( const CvArr* orientation, const CvArr* mask,$/;"	p	signature:( const CvArr* orientation, const CvArr* mask, const CvArr* mhi, double timestamp, double duration )
cvCalcHist	/usr/include/opencv/cv.h	/^CV_INLINE  void  cvCalcHist( IplImage** image, CvHistogram* hist,$/;"	f	signature:( IplImage** image, CvHistogram* hist, int accumulate CV_DEFAULT(0), const CvArr* mask CV_DEFAULT(NULL) )
cvCalcHistMask	/usr/include/opencv/cvcompat.h	124;"	d
cvCalcImageHomography	/usr/include/opencv/cv.h	/^CVAPI(void)  cvCalcImageHomography( float* line, CvPoint3D32f* center,$/;"	p	signature:( float* line, CvPoint3D32f* center, float* intrinsic, float* homography )
cvCalcMotionGradient	/usr/include/opencv/cv.h	/^CVAPI(void)    cvCalcMotionGradient( const CvArr* mhi, CvArr* mask, CvArr* orientation,$/;"	p	signature:( const CvArr* mhi, CvArr* mask, CvArr* orientation, double delta1, double delta2, int aperture_size CV_DEFAULT(3))
cvCalcOpticalFlowBM	/usr/include/opencv/cv.h	/^CVAPI(void)  cvCalcOpticalFlowBM( const CvArr* prev, const CvArr* curr,$/;"	p	signature:( const CvArr* prev, const CvArr* curr, CvSize block_size, CvSize shift_size, CvSize max_range, int use_previous, CvArr* velx, CvArr* vely )
cvCalcOpticalFlowHS	/usr/include/opencv/cv.h	/^CVAPI(void)  cvCalcOpticalFlowHS( const CvArr* prev, const CvArr* curr,$/;"	p	signature:( const CvArr* prev, const CvArr* curr, int use_previous, CvArr* velx, CvArr* vely, double lambda, CvTermCriteria criteria )
cvCalcOpticalFlowLK	/usr/include/opencv/cv.h	/^CVAPI(void)  cvCalcOpticalFlowLK( const CvArr* prev, const CvArr* curr,$/;"	p	signature:( const CvArr* prev, const CvArr* curr, CvSize win_size, CvArr* velx, CvArr* vely )
cvCalcOpticalFlowPyrLK	/usr/include/opencv/cv.h	/^CVAPI(void)  cvCalcOpticalFlowPyrLK( const CvArr*  prev, const CvArr*  curr,$/;"	p	signature:( const CvArr* prev, const CvArr* curr, CvArr* prev_pyr, CvArr* curr_pyr, const CvPoint2D32f* prev_features, CvPoint2D32f* curr_features, int count, CvSize win_size, int level, char* status, float* track_error, CvTermCriteria criteria, int flags )
cvCalcPCA	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvCalcPCA( const CvArr* data, CvArr* mean,$/;"	p	signature:( const CvArr* data, CvArr* mean, CvArr* eigenvals, CvArr* eigenvects, int flags )
cvCalcPGH	/usr/include/opencv/cv.h	/^CVAPI(void)  cvCalcPGH( const CvSeq* contour, CvHistogram* hist );$/;"	p	signature:( const CvSeq* contour, CvHistogram* hist )
cvCalcProbDensity	/usr/include/opencv/cv.h	/^CVAPI(void)  cvCalcProbDensity( const CvHistogram* hist1, const CvHistogram* hist2,$/;"	p	signature:( const CvHistogram* hist1, const CvHistogram* hist2, CvHistogram* dst_hist, double scale CV_DEFAULT(255) )
cvCalcSubdivVoronoi2D	/usr/include/opencv/cv.h	/^CVAPI(void)  cvCalcSubdivVoronoi2D( CvSubdiv2D* subdiv );$/;"	p	signature:( CvSubdiv2D* subdiv )
cvCalibrateCamera	/usr/include/opencv/cvcompat.h	/^CV_INLINE void cvCalibrateCamera( int image_count, int* _point_counts,$/;"	f	signature:( int image_count, int* _point_counts, CvSize image_size, CvPoint2D32f* _image_points, CvPoint3D32f* _object_points, float* _distortion_coeffs, float* _camera_matrix, float* _translation_vectors, float* _rotation_matrices, int flags )
cvCalibrateCamera2	/usr/include/opencv/cv.h	/^CVAPI(void) cvCalibrateCamera2( const CvMat* object_points,$/;"	p	signature:( const CvMat* object_points, const CvMat* image_points, const CvMat* point_counts, CvSize image_size, CvMat* intrinsic_matrix, CvMat* distortion_coeffs, CvMat* rotation_vectors CV_DEFAULT(NULL), CvMat* translation_vectors CV_DEFAULT(NULL), int flags CV_DEFAULT(0) )
cvCalibrateCamera_64d	/usr/include/opencv/cvcompat.h	/^CV_INLINE void cvCalibrateCamera_64d( int image_count, int* _point_counts,$/;"	f	signature:( int image_count, int* _point_counts, CvSize image_size, CvPoint2D64f* _image_points, CvPoint3D64f* _object_points, double* _distortion_coeffs, double* _camera_matrix, double* _translation_vectors, double* _rotation_matrices, int flags )
cvCamShift	/usr/include/opencv/cv.h	/^CVAPI(int)  cvCamShift( const CvArr* prob_image, CvRect  window,$/;"	p	signature:( const CvArr* prob_image, CvRect window, CvTermCriteria criteria, CvConnectedComp* comp, CvBox2D* box CV_DEFAULT(NULL) )
cvCanny	/usr/include/opencv/cv.h	/^CVAPI(void)  cvCanny( const CvArr* image, CvArr* edges, double threshold1,$/;"	p	signature:( const CvArr* image, CvArr* edges, double threshold1, double threshold2, int aperture_size CV_DEFAULT(3) )
cvCaptureFromAVI	/usr/include/opencv/highgui.h	314;"	d
cvCaptureFromCAM	/usr/include/opencv/highgui.h	313;"	d
cvCaptureFromFile	/usr/include/opencv/highgui.h	312;"	d
cvCartToPolar	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvCartToPolar( const CvArr* x, const CvArr* y,$/;"	p	signature:( const CvArr* x, const CvArr* y, CvArr* magnitude, CvArr* angle CV_DEFAULT(NULL), int angle_in_degrees CV_DEFAULT(0))
cvCbrt	/usr/include/opencv/cxcore.h	/^CVAPI(float)  cvCbrt( float value );$/;"	p	signature:( float value )
cvCeil	/usr/include/opencv/cxtypes.h	/^CV_INLINE  int  cvCeil( double value )$/;"	f	signature:( double value )
cvChangeDetection	/usr/include/opencv/cvaux.h	/^CVAPI(int)  cvChangeDetection( IplImage*  prev_frame,$/;"	p	signature:( IplImage* prev_frame, IplImage* curr_frame, IplImage* change_mask )
cvChangeSeqBlock	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvChangeSeqBlock( void* reader, int direction );$/;"	p	signature:( void* reader, int direction )
cvCheckArr	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvCheckArr( const CvArr* arr, int flags CV_DEFAULT(0),$/;"	p	signature:( const CvArr* arr, int flags CV_DEFAULT(0), double min_val CV_DEFAULT(0), double max_val CV_DEFAULT(0))
cvCheckArray	/usr/include/opencv/cxcore.h	669;"	d
cvCheckContourConvexity	/usr/include/opencv/cv.h	/^CVAPI(int)  cvCheckContourConvexity( const CvArr* contour );$/;"	p	signature:( const CvArr* contour )
cvCheckTermCriteria	/usr/include/opencv/cxcore.h	/^CVAPI(CvTermCriteria) cvCheckTermCriteria( CvTermCriteria criteria,$/;"	p	signature:( CvTermCriteria criteria, double default_eps, int default_max_iters )
cvCircle	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvCircle( CvArr* img, CvPoint center, int radius,$/;"	p	signature:( CvArr* img, CvPoint center, int radius, CvScalar color, int thickness CV_DEFAULT(1), int line_type CV_DEFAULT(8), int shift CV_DEFAULT(0))
cvCircleAA	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvCircleAA( CvArr* img, CvPoint center, int radius,$/;"	f	signature:( CvArr* img, CvPoint center, int radius, double color, int scale CV_DEFAULT(0) )
cvClearGraph	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvClearGraph( CvGraph* graph );$/;"	p	signature:( CvGraph* graph )
cvClearHist	/usr/include/opencv/cv.h	/^CVAPI(void)  cvClearHist( CvHistogram* hist );$/;"	p	signature:( CvHistogram* hist )
cvClearMemStorage	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvClearMemStorage( CvMemStorage* storage );$/;"	p	signature:( CvMemStorage* storage )
cvClearND	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvClearND( CvArr* arr, const int* idx );$/;"	p	signature:( CvArr* arr, const int* idx )
cvClearSeq	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvClearSeq( CvSeq* seq );$/;"	p	signature:( CvSeq* seq )
cvClearSet	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvClearSet( CvSet* set_header );$/;"	p	signature:( CvSet* set_header )
cvClearSubdivVoronoi2D	/usr/include/opencv/cv.h	/^CVAPI(void)  cvClearSubdivVoronoi2D( CvSubdiv2D* subdiv );$/;"	p	signature:( CvSubdiv2D* subdiv )
cvClipLine	/usr/include/opencv/cxcore.h	/^CVAPI(int) cvClipLine( CvSize img_size, CvPoint* pt1, CvPoint* pt2 );$/;"	p	signature:( CvSize img_size, CvPoint* pt1, CvPoint* pt2 )
cvClone	/usr/include/opencv/cxcore.h	/^CVAPI(void*) cvClone( const void* struct_ptr );$/;"	p	signature:( const void* struct_ptr )
cvCloneGraph	/usr/include/opencv/cxcore.h	/^CVAPI(CvGraph*) cvCloneGraph( const CvGraph* graph, CvMemStorage* storage );$/;"	p	signature:( const CvGraph* graph, CvMemStorage* storage )
cvCloneImage	/usr/include/opencv/cxcore.h	/^CVAPI(IplImage*) cvCloneImage( const IplImage* image );$/;"	p	signature:( const IplImage* image )
cvCloneMat	/usr/include/opencv/cxcore.h	/^CVAPI(CvMat*) cvCloneMat( const CvMat* mat );$/;"	p	signature:( const CvMat* mat )
cvCloneMatND	/usr/include/opencv/cxcore.h	/^CVAPI(CvMatND*) cvCloneMatND( const CvMatND* mat );$/;"	p	signature:( const CvMatND* mat )
cvCloneSeq	/usr/include/opencv/cxcore.h	/^CV_INLINE CvSeq* cvCloneSeq( const CvSeq* seq, CvMemStorage* storage CV_DEFAULT(NULL))$/;"	f	signature:( const CvSeq* seq, CvMemStorage* storage CV_DEFAULT(NULL))
cvCloneSparseMat	/usr/include/opencv/cxcore.h	/^CVAPI(CvSparseMat*) cvCloneSparseMat( const CvSparseMat* mat );$/;"	p	signature:( const CvSparseMat* mat )
cvCmp	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvCmp( const CvArr* src1, const CvArr* src2, CvArr* dst, int cmp_op );$/;"	p	signature:( const CvArr* src1, const CvArr* src2, CvArr* dst, int cmp_op )
cvCmpEq	/usr/include/opencv/cxmisc.h	/^    cvCmpEq,$/;"	e	enum:CvCmpOp
cvCmpGreater	/usr/include/opencv/cxmisc.h	/^    cvCmpGreater$/;"	e	enum:CvCmpOp
cvCmpGreaterEq	/usr/include/opencv/cxmisc.h	/^    cvCmpGreaterEq,$/;"	e	enum:CvCmpOp
cvCmpLess	/usr/include/opencv/cxmisc.h	/^    cvCmpLess,$/;"	e	enum:CvCmpOp
cvCmpLessEq	/usr/include/opencv/cxmisc.h	/^    cvCmpLessEq,$/;"	e	enum:CvCmpOp
cvCmpS	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvCmpS( const CvArr* src, double value, CvArr* dst, int cmp_op );$/;"	p	signature:( const CvArr* src, double value, CvArr* dst, int cmp_op )
cvColorToScalar	/usr/include/opencv/cxcore.h	/^CVAPI(CvScalar)  cvColorToScalar( double packed_color, int arrtype );$/;"	p	signature:( double packed_color, int arrtype )
cvCompareHist	/usr/include/opencv/cv.h	/^CVAPI(double)  cvCompareHist( const CvHistogram* hist1,$/;"	p	signature:( const CvHistogram* hist1, const CvHistogram* hist2, int method)
cvCompleteSymm	/usr/include/opencv/ml.h	/^CVAPI(void) cvCompleteSymm( CvMat* matrix, int lower_to_upper );$/;"	p	signature:( CvMat* matrix, int lower_to_upper )
cvComputeCorrespondEpilines	/usr/include/opencv/cv.h	/^CVAPI(void) cvComputeCorrespondEpilines( const CvMat* points,$/;"	p	signature:( const CvMat* points, int which_image, const CvMat* fundamental_matrix, CvMat* correspondent_lines )
cvComputePerspectiveMap	/usr/include/opencv/cvaux.h	/^CVAPI(void) cvComputePerspectiveMap( const double coeffs[3][3], CvArr* rectMapX, CvArr* rectMapY );$/;"	p	signature:( const double coeffs[3][3], CvArr* rectMapX, CvArr* rectMapY )
cvComputeRQDecomposition	cv_extensions.cpp	/^void cvComputeRQDecomposition(CvMat *matrixM, CvMat *matrixR, CvMat *matrixQ, CvMat *matrixQx, CvMat *matrixQy, CvMat *matrixQz, CvPoint3D64f *eulerAngles)$/;"	f	signature:(CvMat *matrixM, CvMat *matrixR, CvMat *matrixQ, CvMat *matrixQx, CvMat *matrixQy, CvMat *matrixQz, CvPoint3D64f *eulerAngles)
cvComputeRQDecomposition	cv_extensions.h	/^void cvComputeRQDecomposition(CvMat * matrixM, CvMat * matrixR, CvMat * matrixQ, CvMat * matrixQx, CvMat * matrixQy, CvMat * matrixQz, CvPoint3D64f * eulerAngles);$/;"	p	signature:(CvMat * matrixM, CvMat * matrixR, CvMat * matrixQ, CvMat * matrixQx, CvMat * matrixQy, CvMat * matrixQz, CvPoint3D64f * eulerAngles)
cvConDensInitSampleSet	/usr/include/opencv/cv.h	/^CVAPI(void)  cvConDensInitSampleSet( CvConDensation* condens, CvMat* lower_bound, CvMat* upper_bound );$/;"	p	signature:( CvConDensation* condens, CvMat* lower_bound, CvMat* upper_bound )
cvConDensUpdateByTime	/usr/include/opencv/cv.h	/^CVAPI(void)  cvConDensUpdateByTime( CvConDensation* condens);$/;"	p	signature:( CvConDensation* condens)
cvContourArea	/usr/include/opencv/cv.h	/^CVAPI(double)  cvContourArea( const CvArr* contour,$/;"	p	signature:( const CvArr* contour, CvSlice slice CV_DEFAULT(CV_WHOLE_SEQ))
cvContourBoundingRect	/usr/include/opencv/cvcompat.h	/^CV_INLINE  CvRect  cvContourBoundingRect( void* point_set, int update CV_DEFAULT(0))$/;"	f	signature:( void* point_set, int update CV_DEFAULT(0))
cvContourConvexHull	/usr/include/opencv/cvcompat.h	394;"	d
cvContourConvexHullApprox	/usr/include/opencv/cvcompat.h	403;"	d
cvContourFromContourTree	/usr/include/opencv/cv.h	/^CVAPI(CvSeq*)  cvContourFromContourTree( const CvContourTree* tree,$/;"	p	signature:( const CvContourTree* tree, CvMemStorage* storage, CvTermCriteria criteria )
cvContourMoments	/usr/include/opencv/cvcompat.h	344;"	d
cvContourPerimeter	/usr/include/opencv/cv.h	723;"	d
cvConvert	/usr/include/opencv/cxcore.h	480;"	d
cvConvertImage	/usr/include/opencv/highgui.h	/^CVAPI(void) cvConvertImage( const CvArr* src, CvArr* dst, int flags CV_DEFAULT(0));$/;"	p	signature:( const CvArr* src, CvArr* dst, int flags CV_DEFAULT(0))
cvConvertPointsHomogenious	/usr/include/opencv/cv.h	/^CVAPI(void) cvConvertPointsHomogenious( const CvMat* src, CvMat* dst );$/;"	p	signature:( const CvMat* src, CvMat* dst )
cvConvertScale	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvConvertScale( const CvArr* src, CvArr* dst,$/;"	p	signature:( const CvArr* src, CvArr* dst, double scale CV_DEFAULT(1), double shift CV_DEFAULT(0) )
cvConvertScaleAbs	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvConvertScaleAbs( const CvArr* src, CvArr* dst,$/;"	p	signature:( const CvArr* src, CvArr* dst, double scale CV_DEFAULT(1), double shift CV_DEFAULT(0) )
cvConvexHull	/usr/include/opencv/cvcompat.h	/^CV_INLINE void cvConvexHull( CvPoint* points, int num_points,$/;"	f	signature:( CvPoint* points, int num_points, CvRect* CV_UNREFERENCED(bound_rect), int orientation, int* hull, int* hullsize )
cvConvexHull2	/usr/include/opencv/cv.h	/^CVAPI(CvSeq*) cvConvexHull2( const CvArr* input,$/;"	p	signature:( const CvArr* input, void* hull_storage CV_DEFAULT(NULL), int orientation CV_DEFAULT(CV_CLOCKWISE), int return_points CV_DEFAULT(0))
cvConvexHullApprox	/usr/include/opencv/cvcompat.h	398;"	d
cvConvexityDefects	/usr/include/opencv/cv.h	/^CVAPI(CvSeq*)  cvConvexityDefects( const CvArr* contour, const CvArr* convexhull,$/;"	p	signature:( const CvArr* contour, const CvArr* convexhull, CvMemStorage* storage CV_DEFAULT(NULL))
cvCopy	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvCopy( const CvArr* src, CvArr* dst,$/;"	p	signature:( const CvArr* src, CvArr* dst, const CvArr* mask CV_DEFAULT(NULL) )
cvCopyHist	/usr/include/opencv/cv.h	/^CVAPI(void)  cvCopyHist( const CvHistogram* src, CvHistogram** dst );$/;"	p	signature:( const CvHistogram* src, CvHistogram** dst )
cvCopyImage	/usr/include/opencv/cvcompat.h	378;"	d
cvCopyMakeBorder	/usr/include/opencv/cv.h	/^CVAPI(void) cvCopyMakeBorder( const CvArr* src, CvArr* dst, CvPoint offset,$/;"	p	signature:( const CvArr* src, CvArr* dst, CvPoint offset, int bordertype, CvScalar value CV_DEFAULT(cvScalarAll(0)))
cvCornerEigenValsAndVecs	/usr/include/opencv/cv.h	/^CVAPI(void)  cvCornerEigenValsAndVecs( const CvArr* image, CvArr* eigenvv,$/;"	p	signature:( const CvArr* image, CvArr* eigenvv, int block_size, int aperture_size CV_DEFAULT(3) )
cvCornerHarris	/usr/include/opencv/cv.h	/^CVAPI(void)  cvCornerHarris( const CvArr* image, CvArr* harris_responce,$/;"	p	signature:( const CvArr* image, CvArr* harris_responce, int block_size, int aperture_size CV_DEFAULT(3), double k CV_DEFAULT(0.04) )
cvCornerMinEigenVal	/usr/include/opencv/cv.h	/^CVAPI(void)  cvCornerMinEigenVal( const CvArr* image, CvArr* eigenval,$/;"	p	signature:( const CvArr* image, CvArr* eigenval, int block_size, int aperture_size CV_DEFAULT(3) )
cvCountNonZero	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvCountNonZero( const CvArr* arr );$/;"	p	signature:( const CvArr* arr )
cvCreate2DHMM	/usr/include/opencv/cvaux.h	/^CVAPI(CvEHMM*)  cvCreate2DHMM( int* stateNumber, int* numMix, int obsSize );$/;"	p	signature:( int* stateNumber, int* numMix, int obsSize )
cvCreateAVIWriter	/usr/include/opencv/highgui.h	315;"	d
cvCreateBlobDetectorCC	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobDetector* cvCreateBlobDetectorCC();$/;"	p	signature:()
cvCreateBlobDetectorSimple	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobDetector* cvCreateBlobDetectorSimple();$/;"	p	signature:()
cvCreateBlobTrackerAuto	/usr/include/opencv/cvvidsurv.hpp	/^inline CvBlobTrackerAuto* cvCreateBlobTrackerAuto(int type, void* param)$/;"	f	signature:(int type, void* param)
cvCreateBlobTrackerAuto1	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTrackerAuto* cvCreateBlobTrackerAuto1(CvBlobTrackerAutoParam1* param = NULL);$/;"	p	signature:(CvBlobTrackerAutoParam1* param = NULL)
cvCreateBlobTrackerCC	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTracker* cvCreateBlobTrackerCC();$/;"	p	signature:()
cvCreateBlobTrackerCCMSPF	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTracker* cvCreateBlobTrackerCCMSPF();$/;"	p	signature:()
cvCreateBlobTrackerLHR	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTracker* cvCreateBlobTrackerLHR(CvBlobTrackerParamLH* \/*param*\/ = NULL);$/;"	p	signature:(CvBlobTrackerParamLH* = NULL)
cvCreateBlobTrackerLHRS	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTracker* cvCreateBlobTrackerLHRS(CvBlobTrackerParamLH* \/*param*\/ = NULL);$/;"	p	signature:(CvBlobTrackerParamLH* = NULL)
cvCreateBlobTrackerMS	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTracker* cvCreateBlobTrackerMS();$/;"	p	signature:()
cvCreateBlobTrackerMS1	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTracker* cvCreateBlobTrackerMS1(CvBlobTrackerParamMS* param);$/;"	p	signature:(CvBlobTrackerParamMS* param)
cvCreateBlobTrackerMS1ByList	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTracker* cvCreateBlobTrackerMS1ByList();$/;"	p	signature:()
cvCreateBlobTrackerMS2	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTracker* cvCreateBlobTrackerMS2(CvBlobTrackerParamMS* param);$/;"	p	signature:(CvBlobTrackerParamMS* param)
cvCreateBlobTrackerMSFG	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTracker* cvCreateBlobTrackerMSFG();$/;"	p	signature:()
cvCreateBlobTrackerMSFGS	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTracker* cvCreateBlobTrackerMSFGS();$/;"	p	signature:()
cvCreateBlobTrackerMSPF	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTracker* cvCreateBlobTrackerMSPF();$/;"	p	signature:()
cvCreateCameraCapture	/usr/include/opencv/highgui.h	/^CVAPI(CvCapture*) cvCreateCameraCapture( int index );$/;"	p	signature:( int index )
cvCreateCascadeClassifier	/usr/include/opencv/cvhaartraining.h	/^void cvCreateCascadeClassifier( const char* dirname,$/;"	p	signature:( const char* dirname, const char* vecfilename, const char* bgfilename, int npos, int nneg, int nstages, int numprecalculated, int numsplits, float minhitrate = 0.995F, float maxfalsealarm = 0.5F, float weightfraction = 0.95F, int mode = 0, int symmetric = 1, int equalweights = 1, int winwidth = 24, int winheight = 24, int boosttype = 3, int stumperror = 0 )
cvCreateChildMemStorage	/usr/include/opencv/cxcore.h	/^CVAPI(CvMemStorage*)  cvCreateChildMemStorage( CvMemStorage* parent );$/;"	p	signature:( CvMemStorage* parent )
cvCreateConDensation	/usr/include/opencv/cv.h	/^CVAPI(CvConDensation*)  cvCreateConDensation( int dynam_params,$/;"	p	signature:( int dynam_params, int measure_params, int sample_count )
cvCreateContourTree	/usr/include/opencv/cv.h	/^CVAPI(CvContourTree*)  cvCreateContourTree( const CvSeq* contour,$/;"	p	signature:( const CvSeq* contour, CvMemStorage* storage, double threshold )
cvCreateData	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvCreateData( CvArr* arr );$/;"	p	signature:( CvArr* arr )
cvCreateFGDStatModel	/usr/include/opencv/cvaux.h	/^CVAPI(CvBGStatModel*) cvCreateFGDStatModel( IplImage* first_frame,$/;"	p	signature:( IplImage* first_frame, CvFGDStatModelParams* parameters CV_DEFAULT(NULL))
cvCreateFGDetectorBase	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvFGDetector* cvCreateFGDetectorBase(int type, void *param);$/;"	p	signature:(int type, void *param)
cvCreateFileCapture	/usr/include/opencv/highgui.h	/^CVAPI(CvCapture*) cvCreateFileCapture( const char* filename );$/;"	p	signature:( const char* filename )
cvCreateGLCM	/usr/include/opencv/cvaux.h	/^CVAPI(CvGLCM*) cvCreateGLCM( const IplImage* srcImage,$/;"	p	signature:( const IplImage* srcImage, int stepMagnitude, const int* stepDirections CV_DEFAULT(0), int numStepDirections CV_DEFAULT(0), int optimizationType CV_DEFAULT(CV_GLCM_OPTIMIZATION_NONE))
cvCreateGLCMDescriptors	/usr/include/opencv/cvaux.h	/^CVAPI(void) cvCreateGLCMDescriptors( CvGLCM* destGLCM,$/;"	p	signature:( CvGLCM* destGLCM, int descriptorOptimizationType CV_DEFAULT(CV_GLCMDESC_OPTIMIZATION_ALLOWDOUBLENEST))
cvCreateGLCMImage	/usr/include/opencv/cvaux.h	/^CVAPI(IplImage*) cvCreateGLCMImage( CvGLCM* GLCM, int step );$/;"	p	signature:( CvGLCM* GLCM, int step )
cvCreateGaussianBGModel	/usr/include/opencv/cvaux.h	/^CVAPI(CvBGStatModel*) cvCreateGaussianBGModel( IplImage* first_frame,$/;"	p	signature:( IplImage* first_frame, CvGaussBGStatModelParams* parameters CV_DEFAULT(NULL))
cvCreateGraph	/usr/include/opencv/cxcore.h	/^CVAPI(CvGraph*)  cvCreateGraph( int graph_flags, int header_size,$/;"	p	signature:( int graph_flags, int header_size, int vtx_size, int edge_size, CvMemStorage* storage )
cvCreateGraphScanner	/usr/include/opencv/cxcore.h	/^CVAPI(CvGraphScanner*)  cvCreateGraphScanner( CvGraph* graph,$/;"	p	signature:( CvGraph* graph, CvGraphVtx* vtx CV_DEFAULT(NULL), int mask CV_DEFAULT(CV_GRAPH_ALL_ITEMS))
cvCreateHandMask	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvCreateHandMask( CvSeq* hand_points,$/;"	p	signature:( CvSeq* hand_points, IplImage *img_mask, CvRect *roi)
cvCreateHist	/usr/include/opencv/cv.h	/^CVAPI(CvHistogram*)  cvCreateHist( int dims, int* sizes, int type,$/;"	p	signature:( int dims, int* sizes, int type, float** ranges CV_DEFAULT(NULL), int uniform CV_DEFAULT(1))
cvCreateImage	/usr/include/opencv/cxcore.h	/^CVAPI(IplImage*)  cvCreateImage( CvSize size, int depth, int channels );$/;"	p	signature:( CvSize size, int depth, int channels )
cvCreateImageData	/usr/include/opencv/cvcompat.h	97;"	d
cvCreateImageHeader	/usr/include/opencv/cxcore.h	/^CVAPI(IplImage*)  cvCreateImageHeader( CvSize size, int depth, int channels );$/;"	p	signature:( CvSize size, int depth, int channels )
cvCreateKalman	/usr/include/opencv/cv.h	/^CVAPI(CvKalman*) cvCreateKalman( int dynam_params, int measure_params,$/;"	p	signature:( int dynam_params, int measure_params, int control_params CV_DEFAULT(0))
cvCreateMat	/usr/include/opencv/cxcore.h	/^CVAPI(CvMat*)  cvCreateMat( int rows, int cols, int type );$/;"	p	signature:( int rows, int cols, int type )
cvCreateMatHeader	/usr/include/opencv/cxcore.h	/^CVAPI(CvMat*)  cvCreateMatHeader( int rows, int cols, int type );$/;"	p	signature:( int rows, int cols, int type )
cvCreateMatND	/usr/include/opencv/cxcore.h	/^CVAPI(CvMatND*)  cvCreateMatND( int dims, const int* sizes, int type );$/;"	p	signature:( int dims, const int* sizes, int type )
cvCreateMatNDHeader	/usr/include/opencv/cxcore.h	/^CVAPI(CvMatND*)  cvCreateMatNDHeader( int dims, const int* sizes, int type );$/;"	p	signature:( int dims, const int* sizes, int type )
cvCreateMemStorage	/usr/include/opencv/cxcore.h	/^CVAPI(CvMemStorage*)  cvCreateMemStorage( int block_size CV_DEFAULT(0));$/;"	p	signature:( int block_size CV_DEFAULT(0))
cvCreateModuleBlobTrackAnalysisHistP	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTrackAnalysis* cvCreateModuleBlobTrackAnalysisHistP();$/;"	p	signature:()
cvCreateModuleBlobTrackAnalysisHistPV	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTrackAnalysis* cvCreateModuleBlobTrackAnalysisHistPV();$/;"	p	signature:()
cvCreateModuleBlobTrackAnalysisHistPVS	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTrackAnalysis* cvCreateModuleBlobTrackAnalysisHistPVS();$/;"	p	signature:()
cvCreateModuleBlobTrackAnalysisHistSS	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTrackAnalysis* cvCreateModuleBlobTrackAnalysisHistSS();$/;"	p	signature:()
cvCreateModuleBlobTrackAnalysisIOR	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTrackAnalysis* cvCreateModuleBlobTrackAnalysisIOR();$/;"	p	signature:()
cvCreateModuleBlobTrackAnalysisTrackDist	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTrackAnalysis* cvCreateModuleBlobTrackAnalysisTrackDist();$/;"	p	signature:()
cvCreateModuleBlobTrackGen1	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTrackGen* cvCreateModuleBlobTrackGen1();$/;"	p	signature:()
cvCreateModuleBlobTrackGenYML	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTrackGen* cvCreateModuleBlobTrackGenYML();$/;"	p	signature:()
cvCreateModuleBlobTrackPostProcKalman	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTrackPostProc* cvCreateModuleBlobTrackPostProcKalman();$/;"	p	signature:()
cvCreateModuleBlobTrackPostProcTimeAverExp	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTrackPostProc* cvCreateModuleBlobTrackPostProcTimeAverExp();$/;"	p	signature:()
cvCreateModuleBlobTrackPostProcTimeAverRect	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTrackPostProc* cvCreateModuleBlobTrackPostProcTimeAverRect();$/;"	p	signature:()
cvCreateModuleBlobTrackPredictKalman	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvBlobTrackPredictor* cvCreateModuleBlobTrackPredictKalman();$/;"	p	signature:()
cvCreateObsInfo	/usr/include/opencv/cvaux.h	/^CVAPI(CvImgObsInfo*)  cvCreateObsInfo( CvSize numObs, int obsSize );$/;"	p	signature:( CvSize numObs, int obsSize )
cvCreatePOSITObject	/usr/include/opencv/cv.h	/^CVAPI(CvPOSITObject*)  cvCreatePOSITObject( CvPoint3D32f* points, int point_count );$/;"	p	signature:( CvPoint3D32f* points, int point_count )
cvCreateProb	/usr/include/opencv/cvvidsurv.hpp	/^inline CvProb* cvCreateProb(int type, int dim, CvSize size = cvSize(1,1), void* \/*param*\/ = NULL)$/;"	f	signature:(int type, int dim, CvSize size = cvSize(1,1), void* = NULL)
cvCreateProbHist	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvProb* cvCreateProbHist(int dim, CvSize size);$/;"	p	signature:(int dim, CvSize size)
cvCreateProbMG	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvProb* cvCreateProbMG(int dim, CvSize size, int sample_num);$/;"	p	signature:(int dim, CvSize size, int sample_num)
cvCreateProbMG2	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvProb* cvCreateProbMG2(int dim, CvSize size, int sample_num);$/;"	p	signature:(int dim, CvSize size, int sample_num)
cvCreateProbS	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvProb* cvCreateProbS(int dim, CvSize size, int sample_num);$/;"	p	signature:(int dim, CvSize size, int sample_num)
cvCreateSeq	/usr/include/opencv/cxcore.h	/^CVAPI(CvSeq*)  cvCreateSeq( int seq_flags, int header_size,$/;"	p	signature:( int seq_flags, int header_size, int elem_size, CvMemStorage* storage )
cvCreateSeqBlock	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvCreateSeqBlock( CvSeqWriter* writer );$/;"	p	signature:( CvSeqWriter* writer )
cvCreateSet	/usr/include/opencv/cxcore.h	/^CVAPI(CvSet*)  cvCreateSet( int set_flags, int header_size,$/;"	p	signature:( int set_flags, int header_size, int elem_size, CvMemStorage* storage )
cvCreateSparseMat	/usr/include/opencv/cxcore.h	/^CVAPI(CvSparseMat*)  cvCreateSparseMat( int dims, const int* sizes, int type );$/;"	p	signature:( int dims, const int* sizes, int type )
cvCreateStructuringElementEx	/usr/include/opencv/cv.h	/^CVAPI(IplConvKernel*)  cvCreateStructuringElementEx($/;"	p	signature:( int cols, int rows, int anchor_x, int anchor_y, int shape, int* values CV_DEFAULT(NULL) )
cvCreateSubdiv2D	/usr/include/opencv/cv.h	/^CVAPI(CvSubdiv2D*)  cvCreateSubdiv2D( int subdiv_type, int header_size,$/;"	p	signature:( int subdiv_type, int header_size, int vtx_size, int quadedge_size, CvMemStorage* storage )
cvCreateSubdivDelaunay2D	/usr/include/opencv/cv.h	/^CV_INLINE  CvSubdiv2D* cvCreateSubdivDelaunay2D( CvRect rect, CvMemStorage* storage )$/;"	f	signature:( CvRect rect, CvMemStorage* storage )
cvCreateTestSamples	/usr/include/opencv/cvhaartraining.h	/^void cvCreateTestSamples( const char* infoname,$/;"	p	signature:( const char* infoname, const char* imgfilename, int bgcolor, int bgthreshold, const char* bgfilename, int count, int invert, int maxintensitydev, double maxxangle, double maxyangle, double maxzangle, int showsamples, int winwidth, int winheight )
cvCreateTestSeq	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvTestSeq* cvCreateTestSeq(char* pConfigfile, char** videos, int numvideo, float Scale = 1, int noise_type = CV_NOISE_NONE, double noise_ampl = 0);$/;"	p	signature:(char* pConfigfile, char** videos, int numvideo, float Scale = 1, int noise_type = CV_NOISE_NONE, double noise_ampl = 0)
cvCreateTestSet	/usr/include/opencv/ml.h	/^CVAPI(void) cvCreateTestSet( int type, CvMat** samples,$/;"	p	signature:( int type, CvMat** samples, int num_samples, int num_features, CvMat** responses, int num_classes, ... )
cvCreateTrackbar	/usr/include/opencv/highgui.h	/^CVAPI(int) cvCreateTrackbar( const char* trackbar_name, const char* window_name,$/;"	p	signature:( const char* trackbar_name, const char* window_name, int* value, int count, CvTrackbarCallback on_change )
cvCreateTracks_AreaErr	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS void cvCreateTracks_AreaErr(CvBlobTrackSeq *TS1, CvBlobTrackSeq *TS2, int addW, int addH);$/;"	p	signature:(CvBlobTrackSeq *TS1, CvBlobTrackSeq *TS2, int addW, int addH)
cvCreateTracks_One	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS void cvCreateTracks_One(CvBlobTrackSeq *TS);$/;"	p	signature:(CvBlobTrackSeq *TS)
cvCreateTracks_Same	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS void cvCreateTracks_Same(CvBlobTrackSeq *TS1, CvBlobTrackSeq *TS2);$/;"	p	signature:(CvBlobTrackSeq *TS1, CvBlobTrackSeq *TS2)
cvCreateTrainingSamples	/usr/include/opencv/cvhaartraining.h	/^void cvCreateTrainingSamples( const char* filename,$/;"	p	signature:( const char* filename, const char* imgfilename, int bgcolor, int bgthreshold, const char* bgfilename, int count, int invert = 0, int maxintensitydev = 40, double maxxangle = 1.1, double maxyangle = 1.1, double maxzangle = 0.5, int showsamples = 0, int winwidth = 24, int winheight = 24 )
cvCreateTrainingSamplesFromInfo	/usr/include/opencv/cvhaartraining.h	/^int cvCreateTrainingSamplesFromInfo( const char* infoname, const char* vecfilename,$/;"	p	signature:( const char* infoname, const char* vecfilename, int num, int showsamples, int winwidth, int winheight )
cvCreateTreeCascadeClassifier	/usr/include/opencv/cvhaartraining.h	/^void cvCreateTreeCascadeClassifier( const char* dirname,$/;"	p	signature:( const char* dirname, const char* vecfilename, const char* bgfilename, int npos, int nneg, int nstages, int numprecalculated, int numsplits, float minhitrate, float maxfalsealarm, float weightfraction, int mode, int symmetric, int equalweights, int winwidth, int winheight, int boosttype, int stumperror, int maxtreesplits, int minpos )
cvCreateVideoWriter	/usr/include/opencv/highgui.h	/^CVAPI(CvVideoWriter*) cvCreateVideoWriter( const char* filename, int fourcc,$/;"	p	signature:( const char* filename, int fourcc, double fps, CvSize frame_size, int is_color CV_DEFAULT(1))
cvCrossProduct	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvCrossProduct( const CvArr* src1, const CvArr* src2, CvArr* dst );$/;"	p	signature:( const CvArr* src1, const CvArr* src2, CvArr* dst )
cvCvToIplDepth	/usr/include/opencv/cxtypes.h	/^CV_INLINE int cvCvToIplDepth( int type )$/;"	f	signature:( int type )
cvCvtColor	/usr/include/opencv/cv.h	/^CVAPI(void)  cvCvtColor( const CvArr* src, CvArr* dst, int code );$/;"	p	signature:( const CvArr* src, CvArr* dst, int code )
cvCvtPixToPlane	/usr/include/opencv/cvcompat.h	170;"	d
cvCvtPlaneToPix	/usr/include/opencv/cvcompat.h	171;"	d
cvCvtScale	/usr/include/opencv/cxcore.h	478;"	d
cvCvtScaleAbs	/usr/include/opencv/cxcore.h	491;"	d
cvCvtSeqToArray	/usr/include/opencv/cxcore.h	/^CVAPI(void*)  cvCvtSeqToArray( const CvSeq* seq, void* elements,$/;"	p	signature:( const CvSeq* seq, void* elements, CvSlice slice CV_DEFAULT(CV_WHOLE_SEQ) )
cvDCT	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvDCT( const CvArr* src, CvArr* dst, int flags );$/;"	p	signature:( const CvArr* src, CvArr* dst, int flags )
cvDFT	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvDFT( const CvArr* src, CvArr* dst, int flags,$/;"	p	signature:( const CvArr* src, CvArr* dst, int flags, int nonzero_rows CV_DEFAULT(0) )
cvDeInterlace	/usr/include/opencv/cvaux.h	/^CVAPI(void) cvDeInterlace( const CvArr* frame, CvArr* fieldEven, CvArr* fieldOdd );$/;"	p	signature:( const CvArr* frame, CvArr* fieldEven, CvArr* fieldOdd )
cvDecRefData	/usr/include/opencv/cxcore.h	/^CV_INLINE  void  cvDecRefData( CvArr* arr )$/;"	f	signature:( CvArr* arr )
cvDeleteMoire	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvDeleteMoire( IplImage*  img );$/;"	p	signature:( IplImage* img )
cvDestroyAllWindows	/usr/include/opencv/highgui.h	/^CVAPI(void) cvDestroyAllWindows(void);$/;"	p	signature:(void)
cvDestroyWindow	/usr/include/opencv/highgui.h	/^CVAPI(void) cvDestroyWindow( const char* name );$/;"	p	signature:( const char* name )
cvDet	/usr/include/opencv/cxcore.h	/^CVAPI(double) cvDet( const CvArr* mat );$/;"	p	signature:( const CvArr* mat )
cvDetectedBlob	/usr/include/opencv/cvvidsurv.hpp	/^CV_INLINE CvDetectedBlob cvDetectedBlob( float x, float y, float w, float h, int ID = 0, float response = 0.0F )$/;"	f	signature:( float x, float y, float w, float h, int ID = 0, float response = 0.0F )
cvDilate	/usr/include/opencv/cv.h	/^CVAPI(void)  cvDilate( const CvArr* src, CvArr* dst,$/;"	p	signature:( const CvArr* src, CvArr* dst, IplConvKernel* element CV_DEFAULT(NULL), int iterations CV_DEFAULT(1) )
cvDistTransform	/usr/include/opencv/cv.h	/^CVAPI(void)  cvDistTransform( const CvArr* src, CvArr* dst,$/;"	p	signature:( const CvArr* src, CvArr* dst, int distance_type CV_DEFAULT(CV_DIST_L2), int mask_size CV_DEFAULT(3), const float* mask CV_DEFAULT(NULL), CvArr* labels CV_DEFAULT(NULL))
cvDiv	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvDiv( const CvArr* src1, const CvArr* src2,$/;"	p	signature:( const CvArr* src1, const CvArr* src2, CvArr* dst, double scale CV_DEFAULT(1))
cvDotProduct	/usr/include/opencv/cxcore.h	/^CVAPI(double)  cvDotProduct( const CvArr* src1, const CvArr* src2 );$/;"	p	signature:( const CvArr* src1, const CvArr* src2 )
cvDrawChessboardCorners	/usr/include/opencv/cv.h	/^CVAPI(void) cvDrawChessboardCorners( CvArr* image, CvSize pattern_size,$/;"	p	signature:( CvArr* image, CvSize pattern_size, CvPoint2D32f* corners, int count, int pattern_was_found )
cvDrawCircle	/usr/include/opencv/cxcore.h	1321;"	d
cvDrawContours	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvDrawContours( CvArr *img, CvSeq* contour,$/;"	p	signature:( CvArr *img, CvSeq* contour, CvScalar external_color, CvScalar hole_color, int max_level, int thickness CV_DEFAULT(1), int line_type CV_DEFAULT(8), CvPoint offset CV_DEFAULT(cvPoint(0,0)))
cvDrawEllipse	/usr/include/opencv/cxcore.h	1322;"	d
cvDrawLine	/usr/include/opencv/cxcore.h	1320;"	d
cvDrawPolyLine	/usr/include/opencv/cxcore.h	1323;"	d
cvDrawRect	/usr/include/opencv/cxcore.h	1319;"	d
cvDynamicCorrespondMulti	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvDynamicCorrespondMulti( int  line_count,$/;"	p	signature:( int line_count, int* first, int* first_runs, int* second, int* second_runs, int* first_corr, int* second_corr)
cvEViterbi	/usr/include/opencv/cvaux.h	/^CVAPI(float)  cvEViterbi( CvImgObsInfo* obs_info, CvEHMM* hmm );$/;"	p	signature:( CvImgObsInfo* obs_info, CvEHMM* hmm )
cvEigenDecomposite	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvEigenDecomposite( IplImage* obj, int nEigObjs, void* eigInput,$/;"	p	signature:( IplImage* obj, int nEigObjs, void* eigInput, int ioFlags, void* userData, IplImage* avg, float* coeffs )
cvEigenProjection	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvEigenProjection( void* eigInput, int nEigObjs, int ioFlags,$/;"	p	signature:( void* eigInput, int nEigObjs, int ioFlags, void* userData, float* coeffs, IplImage* avg, IplImage* proj )
cvEigenVV	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvEigenVV( CvArr* mat, CvArr* evects,$/;"	p	signature:( CvArr* mat, CvArr* evects, CvArr* evals, double eps CV_DEFAULT(0))
cvEllipse	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvEllipse( CvArr* img, CvPoint center, CvSize axes,$/;"	p	signature:( CvArr* img, CvPoint center, CvSize axes, double angle, double start_angle, double end_angle, CvScalar color, int thickness CV_DEFAULT(1), int line_type CV_DEFAULT(8), int shift CV_DEFAULT(0))
cvEllipse2Poly	/usr/include/opencv/cxcore.h	/^CVAPI(int) cvEllipse2Poly( CvPoint center, CvSize axes,$/;"	p	signature:( CvPoint center, CvSize axes, int angle, int arc_start, int arc_end, CvPoint * pts, int delta )
cvEllipseAA	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvEllipseAA( CvArr* img, CvPoint center, CvSize axes,$/;"	f	signature:( CvArr* img, CvPoint center, CvSize axes, double angle, double start_angle, double end_angle, double color, int scale CV_DEFAULT(0) )
cvEllipseBox	/usr/include/opencv/cxcore.h	/^CV_INLINE  void  cvEllipseBox( CvArr* img, CvBox2D box, CvScalar color,$/;"	f	signature:( CvArr* img, CvBox2D box, CvScalar color, int thickness CV_DEFAULT(1), int line_type CV_DEFAULT(8), int shift CV_DEFAULT(0) )
cvEndFindContours	/usr/include/opencv/cv.h	/^CVAPI(CvSeq*)  cvEndFindContours( CvContourScanner* scanner );$/;"	p	signature:( CvContourScanner* scanner )
cvEndScanGraph	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvEndScanGraph( CvGraphScanner* scanner )$/;"	f	signature:( CvGraphScanner* scanner )
cvEndWriteSeq	/usr/include/opencv/cxcore.h	/^CVAPI(CvSeq*)  cvEndWriteSeq( CvSeqWriter* writer );$/;"	p	signature:( CvSeqWriter* writer )
cvEndWriteStruct	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvEndWriteStruct( CvFileStorage* fs );$/;"	p	signature:( CvFileStorage* fs )
cvEqualizeHist	/usr/include/opencv/cv.h	/^CVAPI(void)  cvEqualizeHist( const CvArr* src, CvArr* dst );$/;"	p	signature:( const CvArr* src, CvArr* dst )
cvErode	/usr/include/opencv/cv.h	/^CVAPI(void)  cvErode( const CvArr* src, CvArr* dst,$/;"	p	signature:( const CvArr* src, CvArr* dst, IplConvKernel* element CV_DEFAULT(NULL), int iterations CV_DEFAULT(1) )
cvError	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvError( int status, const char* func_name,$/;"	p	signature:( int status, const char* func_name, const char* err_msg, const char* file_name, int line )
cvErrorFromIppStatus	/usr/include/opencv/cxcore.h	/^CVAPI(int) cvErrorFromIppStatus( int ipp_status );$/;"	p	signature:( int ipp_status )
cvErrorStr	/usr/include/opencv/cxcore.h	/^CVAPI(const char*) cvErrorStr( int status );$/;"	p	signature:( int status )
cvEstimateHMMStateParams	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvEstimateHMMStateParams( CvImgObsInfo** obs_info_array,$/;"	p	signature:( CvImgObsInfo** obs_info_array, int num_img, CvEHMM* hmm )
cvEstimateObsProb	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvEstimateObsProb( CvImgObsInfo* obs_info,$/;"	p	signature:( CvImgObsInfo* obs_info, CvEHMM* hmm )
cvEstimateTransProb	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvEstimateTransProb( CvImgObsInfo** obs_info_array,$/;"	p	signature:( CvImgObsInfo** obs_info_array, int num_img, CvEHMM* hmm )
cvExp	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvExp( const CvArr* src, CvArr* dst );$/;"	p	signature:( const CvArr* src, CvArr* dst )
cvFFT	/usr/include/opencv/cxcore.h	890;"	d
cvFastArctan	/usr/include/opencv/cxcore.h	/^CVAPI(float) cvFastArctan( float y, float x );$/;"	p	signature:( float y, float x )
cvFillConvexPoly	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvFillConvexPoly( CvArr* img, CvPoint* pts, int npts, CvScalar color,$/;"	p	signature:( CvArr* img, CvPoint* pts, int npts, CvScalar color, int line_type CV_DEFAULT(8), int shift CV_DEFAULT(0))
cvFillImage	/usr/include/opencv/cvcompat.h	/^CV_INLINE void cvFillImage( CvArr* mat, double color )$/;"	f	signature:( CvArr* mat, double color )
cvFillPoly	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvFillPoly( CvArr* img, CvPoint** pts, int* npts, int contours, CvScalar color,$/;"	p	signature:( CvArr* img, CvPoint** pts, int* npts, int contours, CvScalar color, int line_type CV_DEFAULT(8), int shift CV_DEFAULT(0) )
cvFilter2D	/usr/include/opencv/cv.h	/^CVAPI(void) cvFilter2D( const CvArr* src, CvArr* dst, const CvMat* kernel,$/;"	p	signature:( const CvArr* src, CvArr* dst, const CvMat* kernel, CvPoint anchor CV_DEFAULT(cvPoint(-1,-1)))
cvFindChessBoardCornerGuesses	/usr/include/opencv/cvcompat.h	/^cvFindChessBoardCornerGuesses( const void* arr, void* CV_UNREFERENCED(thresharr),$/;"	f	signature:( const void* arr, void* CV_UNREFERENCED(thresharr), CvMemStorage * CV_UNREFERENCED(storage), CvSize pattern_size, CvPoint2D32f * corners, int *corner_count )
cvFindChessboardCorners	/usr/include/opencv/cv.h	/^CVAPI(int) cvFindChessboardCorners( const void* image, CvSize pattern_size,$/;"	p	signature:( const void* image, CvSize pattern_size, CvPoint2D32f* corners, int* corner_count CV_DEFAULT(NULL), int flags CV_DEFAULT(CV_CALIB_CB_ADAPTIVE_THRESH) )
cvFindContours	/usr/include/opencv/cv.h	/^CVAPI(int)  cvFindContours( CvArr* image, CvMemStorage* storage, CvSeq** first_contour,$/;"	p	signature:( CvArr* image, CvMemStorage* storage, CvSeq** first_contour, int header_size CV_DEFAULT(sizeof(CvContour)), int mode CV_DEFAULT(CV_RETR_LIST), int method CV_DEFAULT(CV_CHAIN_APPROX_SIMPLE), CvPoint offset CV_DEFAULT(cvPoint(0,0)))
cvFindCornerSubPix	/usr/include/opencv/cv.h	/^CVAPI(void)  cvFindCornerSubPix( const CvArr* image, CvPoint2D32f* corners,$/;"	p	signature:( const CvArr* image, CvPoint2D32f* corners, int count, CvSize win, CvSize zero_zone, CvTermCriteria criteria )
cvFindDominantPoints	/usr/include/opencv/cv.h	/^CVAPI(CvSeq*) cvFindDominantPoints( CvSeq* contour, CvMemStorage* storage,$/;"	p	signature:( CvSeq* contour, CvMemStorage* storage, int method CV_DEFAULT(CV_DOMINANT_IPAN), double parameter1 CV_DEFAULT(0), double parameter2 CV_DEFAULT(0), double parameter3 CV_DEFAULT(0), double parameter4 CV_DEFAULT(0))
cvFindExtrinsicCameraParams	/usr/include/opencv/cvcompat.h	/^CV_INLINE void cvFindExtrinsicCameraParams( int point_count,$/;"	f	signature:( int point_count, CvSize CV_UNREFERENCED(image_size), CvPoint2D32f* _image_points, CvPoint3D32f* _object_points, float* focal_length, CvPoint2D32f principal_point, float* _distortion_coeffs, float* _rotation_vector, float* _translation_vector )
cvFindExtrinsicCameraParams2	/usr/include/opencv/cv.h	/^CVAPI(void) cvFindExtrinsicCameraParams2( const CvMat* object_points,$/;"	p	signature:( const CvMat* object_points, const CvMat* image_points, const CvMat* intrinsic_matrix, const CvMat* distortion_coeffs, CvMat* rotation_vector, CvMat* translation_vector )
cvFindExtrinsicCameraParams_64d	/usr/include/opencv/cvcompat.h	/^CV_INLINE void cvFindExtrinsicCameraParams_64d( int point_count,$/;"	f	signature:( int point_count, CvSize CV_UNREFERENCED(image_size), CvPoint2D64f* _image_points, CvPoint3D64f* _object_points, double* focal_length, CvPoint2D64f principal_point, double* _distortion_coeffs, double* _rotation_vector, double* _translation_vector )
cvFindFace	/usr/include/opencv/cvaux.h	/^CvSeq * cvFindFace(IplImage * Image,CvMemStorage* storage);$/;"	p	signature:(IplImage * Image,CvMemStorage* storage)
cvFindFundamentalMat	/usr/include/opencv/cv.h	/^CVAPI(int) cvFindFundamentalMat( const CvMat* points1, const CvMat* points2,$/;"	p	signature:( const CvMat* points1, const CvMat* points2, CvMat* fundamental_matrix, int method CV_DEFAULT(CV_FM_RANSAC), double param1 CV_DEFAULT(1.), double param2 CV_DEFAULT(0.99), CvMat* status CV_DEFAULT(NULL) )
cvFindFundamentalMatrix	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvFindFundamentalMatrix( int* points1, int* points2,$/;"	f	signature:( int* points1, int* points2, int numpoints, int CV_UNREFERENCED(method), float* matrix )
cvFindGraphEdge	/usr/include/opencv/cxcore.h	/^CVAPI(CvGraphEdge*)  cvFindGraphEdge( const CvGraph* graph, int start_idx, int end_idx );$/;"	p	signature:( const CvGraph* graph, int start_idx, int end_idx )
cvFindGraphEdgeByPtr	/usr/include/opencv/cxcore.h	/^CVAPI(CvGraphEdge*)  cvFindGraphEdgeByPtr( const CvGraph* graph,$/;"	p	signature:( const CvGraph* graph, const CvGraphVtx* start_vtx, const CvGraphVtx* end_vtx )
cvFindHandRegion	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvFindHandRegion (CvPoint3D32f* points, int count,$/;"	p	signature:(CvPoint3D32f* points, int count, CvSeq* indexs, float* line, CvSize2D32f size, int flag, CvPoint3D32f* center, CvMemStorage* storage, CvSeq **numbers)
cvFindHandRegionA	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvFindHandRegionA( CvPoint3D32f* points, int count,$/;"	p	signature:( CvPoint3D32f* points, int count, CvSeq* indexs, float* line, CvSize2D32f size, int jc, CvPoint3D32f* center, CvMemStorage* storage, CvSeq **numbers)
cvFindHomography	/usr/include/opencv/cv.h	/^CVAPI(void) cvFindHomography( const CvMat* src_points,$/;"	p	signature:( const CvMat* src_points, const CvMat* dst_points, CvMat* homography )
cvFindNearestPoint2D	/usr/include/opencv/cv.h	/^CVAPI(CvSubdiv2DPoint*) cvFindNearestPoint2D( CvSubdiv2D* subdiv, CvPoint2D32f pt );$/;"	p	signature:( CvSubdiv2D* subdiv, CvPoint2D32f pt )
cvFindNextContour	/usr/include/opencv/cv.h	/^CVAPI(CvSeq*)  cvFindNextContour( CvContourScanner scanner );$/;"	p	signature:( CvContourScanner scanner )
cvFindRuns	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvFindRuns( int    line_count,$/;"	p	signature:( int line_count, uchar* prewarp1, uchar* prewarp2, int* line_lengths1, int* line_lengths2, int* runs1, int* runs2, int* num_runs1, int* num_runs2)
cvFindStereoCorrespondence	/usr/include/opencv/cvaux.h	/^cvFindStereoCorrespondence( $/;"	p	signature:( const CvArr* leftImage, const CvArr* rightImage, int mode, CvArr* dispImage, int maxDisparity, double param1 CV_DEFAULT(CV_UNDEF_SC_PARAM), double param2 CV_DEFAULT(CV_UNDEF_SC_PARAM), double param3 CV_DEFAULT(CV_UNDEF_SC_PARAM), double param4 CV_DEFAULT(CV_UNDEF_SC_PARAM), double param5 CV_DEFAULT(CV_UNDEF_SC_PARAM) )
cvFindType	/usr/include/opencv/cxcore.h	/^CVAPI(CvTypeInfo*) cvFindType( const char* type_name );$/;"	p	signature:( const char* type_name )
cvFirstType	/usr/include/opencv/cxcore.h	/^CVAPI(CvTypeInfo*) cvFirstType(void);$/;"	p	signature:(void)
cvFitEllipse	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void cvFitEllipse( const CvPoint2D32f* points, int count, CvBox2D* box )$/;"	f	signature:( const CvPoint2D32f* points, int count, CvBox2D* box )
cvFitEllipse2	/usr/include/opencv/cv.h	/^CVAPI(CvBox2D) cvFitEllipse2( const CvArr* points );$/;"	p	signature:( const CvArr* points )
cvFitLine	/usr/include/opencv/cv.h	/^CVAPI(void)  cvFitLine( const CvArr* points, int dist_type, double param,$/;"	p	signature:( const CvArr* points, int dist_type, double param, double reps, double aeps, float* line )
cvFitLine2D	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvFitLine2D( CvPoint2D32f* points, int count, int dist,$/;"	f	signature:( CvPoint2D32f* points, int count, int dist, void *param, float reps, float aeps, float* line )
cvFitLine3D	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvFitLine3D( CvPoint3D32f* points, int count, int dist,$/;"	f	signature:( CvPoint3D32f* points, int count, int dist, void *param, float reps, float aeps, float* line )
cvFlip	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvFlip( const CvArr* src, CvArr* dst CV_DEFAULT(NULL),$/;"	p	signature:( const CvArr* src, CvArr* dst CV_DEFAULT(NULL), int flip_mode CV_DEFAULT(0))
cvFloodFill	/usr/include/opencv/cv.h	/^CVAPI(void)  cvFloodFill( CvArr* image, CvPoint seed_point,$/;"	p	signature:( CvArr* image, CvPoint seed_point, CvScalar new_val, CvScalar lo_diff CV_DEFAULT(cvScalarAll(0)), CvScalar up_diff CV_DEFAULT(cvScalarAll(0)), CvConnectedComp* comp CV_DEFAULT(NULL), int flags CV_DEFAULT(4), CvArr* mask CV_DEFAULT(NULL))
cvFloor	/usr/include/opencv/cxtypes.h	/^CV_INLINE  int  cvFloor( double value )$/;"	f	signature:( double value )
cvFlushSeqWriter	/usr/include/opencv/cxcore.h	/^CVAPI(void)   cvFlushSeqWriter( CvSeqWriter* writer );$/;"	p	signature:( CvSeqWriter* writer )
cvFont	/usr/include/opencv/cxcore.h	/^CV_INLINE CvFont cvFont( double scale, int thickness CV_DEFAULT(1) )$/;"	f	signature:( double scale, int thickness CV_DEFAULT(1) )
cvFree	/usr/include/opencv/cxcore.h	94;"	d
cvFree_	/usr/include/opencv/cxcore.h	/^CVAPI(void)   cvFree_( void* ptr );$/;"	p	signature:( void* ptr )
cvFuncName	/usr/include/opencv/cxerror.h	130;"	d
cvGEMM	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvGEMM( const CvArr* src1, const CvArr* src2, double alpha,$/;"	p	signature:( const CvArr* src1, const CvArr* src2, double alpha, const CvArr* src3, double beta, CvArr* dst, int tABC CV_DEFAULT(0))
cvGet1D	/usr/include/opencv/cxcore.h	/^CVAPI(CvScalar) cvGet1D( const CvArr* arr, int idx0 );$/;"	p	signature:( const CvArr* arr, int idx0 )
cvGet2D	/usr/include/opencv/cxcore.h	/^CVAPI(CvScalar) cvGet2D( const CvArr* arr, int idx0, int idx1 );$/;"	p	signature:( const CvArr* arr, int idx0, int idx1 )
cvGet3D	/usr/include/opencv/cxcore.h	/^CVAPI(CvScalar) cvGet3D( const CvArr* arr, int idx0, int idx1, int idx2 );$/;"	p	signature:( const CvArr* arr, int idx0, int idx1, int idx2 )
cvGetAffineTransform	/usr/include/opencv/cv.h	/^CVAPI(CvMat*) cvGetAffineTransform( const CvPoint2D32f * src, $/;"	p	signature:( const CvPoint2D32f * src, const CvPoint2D32f * dst, CvMat * map_matrix )
cvGetAt	/usr/include/opencv/cvcompat.h	348;"	d
cvGetCaptureProperty	/usr/include/opencv/highgui.h	/^CVAPI(double) cvGetCaptureProperty( CvCapture* capture, int property_id );$/;"	p	signature:( CvCapture* capture, int property_id )
cvGetCentralMoment	/usr/include/opencv/cv.h	/^CVAPI(double)  cvGetCentralMoment( CvMoments* moments, int x_order, int y_order );$/;"	p	signature:( CvMoments* moments, int x_order, int y_order )
cvGetCol	/usr/include/opencv/cxcore.h	/^CV_INLINE  CvMat*  cvGetCol( const CvArr* arr, CvMat* submat, int col )$/;"	f	signature:( const CvArr* arr, CvMat* submat, int col )
cvGetCols	/usr/include/opencv/cxcore.h	/^CVAPI(CvMat*) cvGetCols( const CvArr* arr, CvMat* submat,$/;"	p	signature:( const CvArr* arr, CvMat* submat, int start_col, int end_col )
cvGetDiag	/usr/include/opencv/cxcore.h	/^CVAPI(CvMat*) cvGetDiag( const CvArr* arr, CvMat* submat,$/;"	p	signature:( const CvArr* arr, CvMat* submat, int diag CV_DEFAULT(0))
cvGetDimSize	/usr/include/opencv/cxcore.h	/^CVAPI(int) cvGetDimSize( const CvArr* arr, int index );$/;"	p	signature:( const CvArr* arr, int index )
cvGetDims	/usr/include/opencv/cxcore.h	/^CVAPI(int) cvGetDims( const CvArr* arr, int* sizes CV_DEFAULT(NULL) );$/;"	p	signature:( const CvArr* arr, int* sizes CV_DEFAULT(NULL) )
cvGetElemType	/usr/include/opencv/cxcore.h	/^CVAPI(int) cvGetElemType( const CvArr* arr );$/;"	p	signature:( const CvArr* arr )
cvGetErrInfo	/usr/include/opencv/cxcore.h	/^CVAPI(int) cvGetErrInfo( const char** errcode_desc, const char** description,$/;"	p	signature:( const char** errcode_desc, const char** description, const char** filename, int* line )
cvGetErrMode	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvGetErrMode( void );$/;"	p	signature:( void )
cvGetErrStatus	/usr/include/opencv/cxcore.h	/^CVAPI(int) cvGetErrStatus( void );$/;"	p	signature:( void )
cvGetFileNode	/usr/include/opencv/cxcore.h	/^CVAPI(CvFileNode*) cvGetFileNode( CvFileStorage* fs, CvFileNode* map,$/;"	p	signature:( CvFileStorage* fs, CvFileNode* map, const CvStringHashNode* key, int create_missing CV_DEFAULT(0) )
cvGetFileNodeByName	/usr/include/opencv/cxcore.h	/^CVAPI(CvFileNode*) cvGetFileNodeByName( const CvFileStorage* fs,$/;"	p	signature:( const CvFileStorage* fs, const CvFileNode* map, const char* name )
cvGetFileNodeName	/usr/include/opencv/cxcore.h	/^CVAPI(const char*) cvGetFileNodeName( const CvFileNode* node );$/;"	p	signature:( const CvFileNode* node )
cvGetGLCMDescriptor	/usr/include/opencv/cvaux.h	/^CVAPI(double) cvGetGLCMDescriptor( CvGLCM* GLCM, int step, int descriptor );$/;"	p	signature:( CvGLCM* GLCM, int step, int descriptor )
cvGetGLCMDescriptorStatistics	/usr/include/opencv/cvaux.h	/^CVAPI(void) cvGetGLCMDescriptorStatistics( CvGLCM* GLCM, int descriptor,$/;"	p	signature:( CvGLCM* GLCM, int descriptor, double* average, double* standardDeviation )
cvGetGraphVtx	/usr/include/opencv/cxcore.h	1190;"	d
cvGetHashedKey	/usr/include/opencv/cxcore.h	/^CVAPI(CvStringHashNode*) cvGetHashedKey( CvFileStorage* fs, const char* name,$/;"	p	signature:( CvFileStorage* fs, const char* name, int len CV_DEFAULT(-1), int create_missing CV_DEFAULT(0))
cvGetHistValue_1D	/usr/include/opencv/cvcompat.h	493;"	d
cvGetHistValue_2D	/usr/include/opencv/cvcompat.h	495;"	d
cvGetHistValue_3D	/usr/include/opencv/cvcompat.h	497;"	d
cvGetHistValue_nD	/usr/include/opencv/cvcompat.h	499;"	d
cvGetHuMoments	/usr/include/opencv/cv.h	/^CVAPI(void) cvGetHuMoments( CvMoments*  moments, CvHuMoments*  hu_moments );$/;"	p	signature:( CvMoments* moments, CvHuMoments* hu_moments )
cvGetImage	/usr/include/opencv/cxcore.h	/^CVAPI(IplImage*) cvGetImage( const CvArr* arr, IplImage* image_header );$/;"	p	signature:( const CvArr* arr, IplImage* image_header )
cvGetImageCOI	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvGetImageCOI( const IplImage* image );$/;"	p	signature:( const IplImage* image )
cvGetImageROI	/usr/include/opencv/cxcore.h	/^CVAPI(CvRect) cvGetImageROI( const IplImage* image );$/;"	p	signature:( const IplImage* image )
cvGetImageRawData	/usr/include/opencv/cvcompat.h	100;"	d
cvGetMat	/usr/include/opencv/cxcore.h	/^CVAPI(CvMat*) cvGetMat( const CvArr* arr, CvMat* header,$/;"	p	signature:( const CvArr* arr, CvMat* header, int* coi CV_DEFAULT(NULL), int allowND CV_DEFAULT(0))
cvGetMatSize	/usr/include/opencv/cxmisc.h	/^CV_INLINE  CvSize  cvGetMatSize( const CvMat* mat )$/;"	f	signature:( const CvMat* mat )
cvGetMinMaxHistValue	/usr/include/opencv/cv.h	/^CVAPI(void)  cvGetMinMaxHistValue( const CvHistogram* hist,$/;"	p	signature:( const CvHistogram* hist, float* min_value, float* max_value, int* min_idx CV_DEFAULT(NULL), int* max_idx CV_DEFAULT(NULL))
cvGetModuleInfo	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvGetModuleInfo( const char* module_name,$/;"	p	signature:( const char* module_name, const char** version, const char** loaded_addon_plugins )
cvGetND	/usr/include/opencv/cxcore.h	/^CVAPI(CvScalar) cvGetND( const CvArr* arr, const int* idx );$/;"	p	signature:( const CvArr* arr, const int* idx )
cvGetNextSparseNode	/usr/include/opencv/cxcore.h	/^CV_INLINE CvSparseNode* cvGetNextSparseNode( CvSparseMatIterator* mat_iterator )$/;"	f	signature:( CvSparseMatIterator* mat_iterator )
cvGetNormalizedCentralMoment	/usr/include/opencv/cv.h	/^CVAPI(double)  cvGetNormalizedCentralMoment( CvMoments* moments,$/;"	p	signature:( CvMoments* moments, int x_order, int y_order )
cvGetNumThreads	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvGetNumThreads( void );$/;"	p	signature:( void )
cvGetOptimalDFTSize	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvGetOptimalDFTSize( int size0 );$/;"	p	signature:( int size0 )
cvGetPerspectiveTransform	/usr/include/opencv/cv.h	/^CVAPI(CvMat*) cvGetPerspectiveTransform( const CvPoint2D32f* src,$/;"	p	signature:( const CvPoint2D32f* src, const CvPoint2D32f* dst, CvMat* map_matrix )
cvGetPtrAt	/usr/include/opencv/cvcompat.h	347;"	d
cvGetQuadrangleSubPix	/usr/include/opencv/cv.h	/^CVAPI(void)  cvGetQuadrangleSubPix( const CvArr* src, CvArr* dst,$/;"	p	signature:( const CvArr* src, CvArr* dst, const CvMat* map_matrix )
cvGetRawData	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvGetRawData( const CvArr* arr, uchar** data,$/;"	p	signature:( const CvArr* arr, uchar** data, int* step CV_DEFAULT(NULL), CvSize* roi_size CV_DEFAULT(NULL))
cvGetReal1D	/usr/include/opencv/cxcore.h	/^CVAPI(double) cvGetReal1D( const CvArr* arr, int idx0 );$/;"	p	signature:( const CvArr* arr, int idx0 )
cvGetReal2D	/usr/include/opencv/cxcore.h	/^CVAPI(double) cvGetReal2D( const CvArr* arr, int idx0, int idx1 );$/;"	p	signature:( const CvArr* arr, int idx0, int idx1 )
cvGetReal3D	/usr/include/opencv/cxcore.h	/^CVAPI(double) cvGetReal3D( const CvArr* arr, int idx0, int idx1, int idx2 );$/;"	p	signature:( const CvArr* arr, int idx0, int idx1, int idx2 )
cvGetRealND	/usr/include/opencv/cxcore.h	/^CVAPI(double) cvGetRealND( const CvArr* arr, const int* idx );$/;"	p	signature:( const CvArr* arr, const int* idx )
cvGetRectSubPix	/usr/include/opencv/cv.h	/^CVAPI(void)  cvGetRectSubPix( const CvArr* src, CvArr* dst, CvPoint2D32f center );$/;"	p	signature:( const CvArr* src, CvArr* dst, CvPoint2D32f center )
cvGetRootFileNode	/usr/include/opencv/cxcore.h	/^CVAPI(CvFileNode*) cvGetRootFileNode( const CvFileStorage* fs,$/;"	p	signature:( const CvFileStorage* fs, int stream_index CV_DEFAULT(0) )
cvGetRow	/usr/include/opencv/cxcore.h	/^CV_INLINE  CvMat*  cvGetRow( const CvArr* arr, CvMat* submat, int row )$/;"	f	signature:( const CvArr* arr, CvMat* submat, int row )
cvGetRows	/usr/include/opencv/cxcore.h	/^CVAPI(CvMat*) cvGetRows( const CvArr* arr, CvMat* submat,$/;"	p	signature:( const CvArr* arr, CvMat* submat, int start_row, int end_row, int delta_row CV_DEFAULT(1))
cvGetSeqElem	/usr/include/opencv/cxcore.h	/^CVAPI(char*)  cvGetSeqElem( const CvSeq* seq, int index );$/;"	p	signature:( const CvSeq* seq, int index )
cvGetSeqReaderPos	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvGetSeqReaderPos( CvSeqReader* reader );$/;"	p	signature:( CvSeqReader* reader )
cvGetSetElem	/usr/include/opencv/cxcore.h	/^CV_INLINE CvSetElem* cvGetSetElem( const CvSet* set_header, int idx )$/;"	f	signature:( const CvSet* set_header, int idx )
cvGetSize	/usr/include/opencv/cxcore.h	/^CVAPI(CvSize) cvGetSize( const CvArr* arr );$/;"	p	signature:( const CvArr* arr )
cvGetSpatialMoment	/usr/include/opencv/cv.h	/^CVAPI(double)  cvGetSpatialMoment( CvMoments* moments, int x_order, int y_order );$/;"	p	signature:( CvMoments* moments, int x_order, int y_order )
cvGetSubArr	/usr/include/opencv/cxcore.h	198;"	d
cvGetSubRect	/usr/include/opencv/cxcore.h	/^CVAPI(CvMat*) cvGetSubRect( const CvArr* arr, CvMat* submat, CvRect rect );$/;"	p	signature:( const CvArr* arr, CvMat* submat, CvRect rect )
cvGetTextSize	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvGetTextSize( const char* text_string, const CvFont* font,$/;"	p	signature:( const char* text_string, const CvFont* font, CvSize* text_size, int* baseline )
cvGetThreadNum	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvGetThreadNum( void );$/;"	p	signature:( void )
cvGetTickCount	/usr/include/opencv/cxcore.h	/^CVAPI(int64)  cvGetTickCount( void );$/;"	p	signature:( void )
cvGetTickFrequency	/usr/include/opencv/cxcore.h	/^CVAPI(double) cvGetTickFrequency( void );$/;"	p	signature:( void )
cvGetTrackbarPos	/usr/include/opencv/highgui.h	/^CVAPI(int) cvGetTrackbarPos( const char* trackbar_name, const char* window_name );$/;"	p	signature:( const char* trackbar_name, const char* window_name )
cvGetWindowHandle	/usr/include/opencv/highgui.h	/^CVAPI(void*) cvGetWindowHandle( const char* name );$/;"	p	signature:( const char* name )
cvGetWindowName	/usr/include/opencv/highgui.h	/^CVAPI(const char*) cvGetWindowName( void* window_handle );$/;"	p	signature:( void* window_handle )
cvGoodFeaturesToTrack	/usr/include/opencv/cv.h	/^CVAPI(void)  cvGoodFeaturesToTrack( const CvArr* image, CvArr* eig_image,$/;"	p	signature:( const CvArr* image, CvArr* eig_image, CvArr* temp_image, CvPoint2D32f* corners, int* corner_count, double quality_level, double min_distance, const CvArr* mask CV_DEFAULT(NULL), int block_size CV_DEFAULT(3), int use_harris CV_DEFAULT(0), double k CV_DEFAULT(0.04) )
cvGrabFrame	/usr/include/opencv/highgui.h	/^CVAPI(int) cvGrabFrame( CvCapture* capture );$/;"	p	signature:( CvCapture* capture )
cvGraphAddEdge	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvGraphAddEdge( CvGraph* graph,$/;"	p	signature:( CvGraph* graph, int start_idx, int end_idx, const CvGraphEdge* edge CV_DEFAULT(NULL), CvGraphEdge** inserted_edge CV_DEFAULT(NULL) )
cvGraphAddEdgeByPtr	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvGraphAddEdgeByPtr( CvGraph* graph,$/;"	p	signature:( CvGraph* graph, CvGraphVtx* start_vtx, CvGraphVtx* end_vtx, const CvGraphEdge* edge CV_DEFAULT(NULL), CvGraphEdge** inserted_edge CV_DEFAULT(NULL) )
cvGraphAddVtx	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvGraphAddVtx( CvGraph* graph, const CvGraphVtx* vtx CV_DEFAULT(NULL),$/;"	p	signature:( CvGraph* graph, const CvGraphVtx* vtx CV_DEFAULT(NULL), CvGraphVtx** inserted_vtx CV_DEFAULT(NULL) )
cvGraphEdgeIdx	/usr/include/opencv/cxcore.h	1196;"	d
cvGraphFindEdge	/usr/include/opencv/cxcore.h	1177;"	d
cvGraphFindEdgeByPtr	/usr/include/opencv/cxcore.h	1178;"	d
cvGraphGetEdgeCount	/usr/include/opencv/cxcore.h	1199;"	d
cvGraphGetVtxCount	/usr/include/opencv/cxcore.h	1198;"	d
cvGraphRemoveEdge	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvGraphRemoveEdge( CvGraph* graph, int start_idx, int end_idx );$/;"	p	signature:( CvGraph* graph, int start_idx, int end_idx )
cvGraphRemoveEdgeByPtr	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvGraphRemoveEdgeByPtr( CvGraph* graph, CvGraphVtx* start_vtx,$/;"	p	signature:( CvGraph* graph, CvGraphVtx* start_vtx, CvGraphVtx* end_vtx )
cvGraphRemoveVtx	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvGraphRemoveVtx( CvGraph* graph, int index );$/;"	p	signature:( CvGraph* graph, int index )
cvGraphRemoveVtxByPtr	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvGraphRemoveVtxByPtr( CvGraph* graph, CvGraphVtx* vtx );$/;"	p	signature:( CvGraph* graph, CvGraphVtx* vtx )
cvGraphVtxDegree	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvGraphVtxDegree( const CvGraph* graph, int vtx_idx );$/;"	p	signature:( const CvGraph* graph, int vtx_idx )
cvGraphVtxDegreeByPtr	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvGraphVtxDegreeByPtr( const CvGraph* graph, const CvGraphVtx* vtx );$/;"	p	signature:( const CvGraph* graph, const CvGraphVtx* vtx )
cvGraphVtxIdx	/usr/include/opencv/cxcore.h	1193;"	d
cvGuiBoxReport	/usr/include/opencv/cxcore.h	/^CVAPI(int) cvGuiBoxReport( int status, const char* func_name, const char* err_msg,$/;"	p	signature:( int status, const char* func_name, const char* err_msg, const char* file_name, int line, void* userdata )
cvHaarDetectObjects	/usr/include/opencv/cv.h	/^CVAPI(CvSeq*) cvHaarDetectObjects( const CvArr* image,$/;"	p	signature:( const CvArr* image, CvHaarClassifierCascade* cascade, CvMemStorage* storage, double scale_factor CV_DEFAULT(1.1), int min_neighbors CV_DEFAULT(3), int flags CV_DEFAULT(0), CvSize min_size CV_DEFAULT(cvSize(0,0)))
cvHoughCircles	/usr/include/opencv/cv.h	/^CVAPI(CvSeq*) cvHoughCircles( CvArr* image, void* circle_storage,$/;"	p	signature:( CvArr* image, void* circle_storage, int method, double dp, double min_dist, double param1 CV_DEFAULT(100), double param2 CV_DEFAULT(100), int min_radius CV_DEFAULT(0), int max_radius CV_DEFAULT(0))
cvHoughLines	/usr/include/opencv/cvcompat.h	/^CV_INLINE  int  cvHoughLines( CvArr* image, double rho,$/;"	f	signature:( CvArr* image, double rho, double theta, int threshold, float* lines, int linesNumber )
cvHoughLines2	/usr/include/opencv/cv.h	/^CVAPI(CvSeq*)  cvHoughLines2( CvArr* image, void* line_storage, int method, $/;"	p	signature:( CvArr* image, void* line_storage, int method, double rho, double theta, int threshold, double param1 CV_DEFAULT(0), double param2 CV_DEFAULT(0))
cvHoughLinesP	/usr/include/opencv/cvcompat.h	/^CV_INLINE  int  cvHoughLinesP( CvArr* image, double rho,$/;"	f	signature:( CvArr* image, double rho, double theta, int threshold, int lineLength, int lineGap, int* lines, int linesNumber )
cvHoughLinesSDiv	/usr/include/opencv/cvcompat.h	/^CV_INLINE  int  cvHoughLinesSDiv( CvArr* image, double rho, int srn,$/;"	f	signature:( CvArr* image, double rho, int srn, double theta, int stn, int threshold, float* lines, int linesNumber )
cvImgToObs_DCT	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvImgToObs_DCT( const CvArr* arr, float* obs, CvSize dctSize,$/;"	p	signature:( const CvArr* arr, float* obs, CvSize dctSize, CvSize obsSize, CvSize delta )
cvInRange	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvInRange( const CvArr* src, const CvArr* lower,$/;"	p	signature:( const CvArr* src, const CvArr* lower, const CvArr* upper, CvArr* dst )
cvInRangeS	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvInRangeS( const CvArr* src, CvScalar lower,$/;"	p	signature:( const CvArr* src, CvScalar lower, CvScalar upper, CvArr* dst )
cvIncRefData	/usr/include/opencv/cxcore.h	/^CV_INLINE  int  cvIncRefData( CvArr* arr )$/;"	f	signature:( CvArr* arr )
cvInitFaceTracker	/usr/include/opencv/cvaux.h	/^CVAPI(CvFaceTracker*) cvInitFaceTracker(CvFaceTracker* pFaceTracking, const IplImage* imgGray,$/;"	p	signature:(CvFaceTracker* pFaceTracking, const IplImage* imgGray, CvRect* pRects, int nRects)
cvInitFont	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvInitFont( CvFont* font, int font_face,$/;"	p	signature:( CvFont* font, int font_face, double hscale, double vscale, double shear CV_DEFAULT(0), int thickness CV_DEFAULT(1), int line_type CV_DEFAULT(8))
cvInitImageHeader	/usr/include/opencv/cxcore.h	/^CVAPI(IplImage*) cvInitImageHeader( IplImage* image, CvSize size, int depth,$/;"	p	signature:( IplImage* image, CvSize size, int depth, int channels, int origin CV_DEFAULT(0), int align CV_DEFAULT(4))
cvInitLineIterator	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvInitLineIterator( const CvArr* image, CvPoint pt1, CvPoint pt2,$/;"	p	signature:( const CvArr* image, CvPoint pt1, CvPoint pt2, CvLineIterator* line_iterator, int connectivity CV_DEFAULT(8), int left_to_right CV_DEFAULT(0))
cvInitMatHeader	/usr/include/opencv/cxcore.h	/^CVAPI(CvMat*) cvInitMatHeader( CvMat* mat, int rows, int cols,$/;"	p	signature:( CvMat* mat, int rows, int cols, int type, void* data CV_DEFAULT(NULL), int step CV_DEFAULT(CV_AUTOSTEP) )
cvInitMatNDHeader	/usr/include/opencv/cxcore.h	/^CVAPI(CvMatND*)  cvInitMatNDHeader( CvMatND* mat, int dims, const int* sizes,$/;"	p	signature:( CvMatND* mat, int dims, const int* sizes, int type, void* data CV_DEFAULT(NULL) )
cvInitMixSegm	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvInitMixSegm( CvImgObsInfo** obs_info_array,$/;"	p	signature:( CvImgObsInfo** obs_info_array, int num_img, CvEHMM* hmm )
cvInitNArrayIterator	/usr/include/opencv/cxcore.h	/^CVAPI(int) cvInitNArrayIterator( int count, CvArr** arrs,$/;"	p	signature:( int count, CvArr** arrs, const CvArr* mask, CvMatND* stubs, CvNArrayIterator* array_iterator, int flags CV_DEFAULT(0) )
cvInitPerspectiveTransform	/usr/include/opencv/cvaux.h	/^CVAPI(void) cvInitPerspectiveTransform( CvSize size, const CvPoint2D32f vertex[4], double matrix[3][3],$/;"	p	signature:( CvSize size, const CvPoint2D32f vertex[4], double matrix[3][3], CvArr* rectMap )
cvInitSparseMatIterator	/usr/include/opencv/cxcore.h	/^CVAPI(CvSparseNode*) cvInitSparseMatIterator( const CvSparseMat* mat,$/;"	p	signature:( const CvSparseMat* mat, CvSparseMatIterator* mat_iterator )
cvInitSubdivDelaunay2D	/usr/include/opencv/cv.h	/^CVAPI(void)  cvInitSubdivDelaunay2D( CvSubdiv2D* subdiv, CvRect rect );$/;"	p	signature:( CvSubdiv2D* subdiv, CvRect rect )
cvInitSystem	/usr/include/opencv/highgui.h	/^CVAPI(int) cvInitSystem( int argc, char** argv );$/;"	p	signature:( int argc, char** argv )
cvInitTreeNodeIterator	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvInitTreeNodeIterator( CvTreeNodeIterator* tree_iterator,$/;"	p	signature:( CvTreeNodeIterator* tree_iterator, const void* first, int max_level )
cvInitUndistortMap	/usr/include/opencv/cv.h	/^CVAPI(void) cvInitUndistortMap( const CvMat* intrinsic_matrix,$/;"	p	signature:( const CvMat* intrinsic_matrix, const CvMat* distortion_coeffs, CvArr* mapx, CvArr* mapy )
cvInpaint	/usr/include/opencv/cv.h	/^CVAPI(void) cvInpaint( const CvArr* src, const CvArr* inpaint_mask,$/;"	p	signature:( const CvArr* src, const CvArr* inpaint_mask, CvArr* dst, double inpaintRange, int flags )
cvInsertNodeIntoTree	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvInsertNodeIntoTree( void* node, void* parent, void* frame );$/;"	p	signature:( void* node, void* parent, void* frame )
cvIntegral	/usr/include/opencv/cv.h	/^CVAPI(void) cvIntegral( const CvArr* image, CvArr* sum,$/;"	p	signature:( const CvArr* image, CvArr* sum, CvArr* sqsum CV_DEFAULT(NULL), CvArr* tilted_sum CV_DEFAULT(NULL))
cvIntegralImage	/usr/include/opencv/cvcompat.h	107;"	d
cvInv	/usr/include/opencv/cxcore.h	752;"	d
cvInvSqrt	/usr/include/opencv/cxtypes.h	261;"	d
cvInvert	/usr/include/opencv/cxcore.h	/^CVAPI(double)  cvInvert( const CvArr* src, CvArr* dst,$/;"	p	signature:( const CvArr* src, CvArr* dst, int method CV_DEFAULT(CV_LU))
cvIsInf	/usr/include/opencv/cxtypes.h	/^CV_INLINE int cvIsInf( double value )$/;"	f	signature:( double value )
cvIsNaN	/usr/include/opencv/cxtypes.h	/^CV_INLINE int cvIsNaN( double value )$/;"	f	signature:( double value )
cvKMeans	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvKMeans( int num_clusters, float** samples,$/;"	f	signature:( int num_clusters, float** samples, int num_samples, int vec_size, CvTermCriteria termcrit, int* cluster_idx )
cvKMeans2	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvKMeans2( const CvArr* samples, int cluster_count,$/;"	p	signature:( const CvArr* samples, int cluster_count, CvArr* labels, CvTermCriteria termcrit )
cvKalmanCorrect	/usr/include/opencv/cv.h	/^CVAPI(const CvMat*)  cvKalmanCorrect( CvKalman* kalman, const CvMat* measurement );$/;"	p	signature:( CvKalman* kalman, const CvMat* measurement )
cvKalmanPredict	/usr/include/opencv/cv.h	/^CVAPI(const CvMat*)  cvKalmanPredict( CvKalman* kalman,$/;"	p	signature:( CvKalman* kalman, const CvMat* control CV_DEFAULT(NULL))
cvKalmanUpdateByMeasurement	/usr/include/opencv/cvcompat.h	860;"	d
cvKalmanUpdateByTime	/usr/include/opencv/cvcompat.h	859;"	d
cvLUT	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvLUT( const CvArr* src, CvArr* dst, const CvArr* lut );$/;"	p	signature:( const CvArr* src, CvArr* dst, const CvArr* lut )
cvLaplace	/usr/include/opencv/cv.h	/^CVAPI(void) cvLaplace( const CvArr* src, CvArr* dst,$/;"	p	signature:( const CvArr* src, CvArr* dst, int aperture_size CV_DEFAULT(3) )
cvLine	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvLine( CvArr* img, CvPoint pt1, CvPoint pt2,$/;"	p	signature:( CvArr* img, CvPoint pt1, CvPoint pt2, CvScalar color, int thickness CV_DEFAULT(1), int line_type CV_DEFAULT(8), int shift CV_DEFAULT(0) )
cvLineAA	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvLineAA( CvArr* img, CvPoint pt1, CvPoint pt2,$/;"	f	signature:( CvArr* img, CvPoint pt1, CvPoint pt2, double color, int scale CV_DEFAULT(0))
cvLinearContorModelFromVoronoiDiagram	/usr/include/opencv/cvaux.h	/^CVAPI(CvGraph*) cvLinearContorModelFromVoronoiDiagram(CvVoronoiDiagram2D* VoronoiDiagram,$/;"	p	signature:(CvVoronoiDiagram2D* VoronoiDiagram, float maxWidth)
cvLoad	/usr/include/opencv/cxcore.h	/^CVAPI(void*) cvLoad( const char* filename,$/;"	p	signature:( const char* filename, CvMemStorage* memstorage CV_DEFAULT(NULL), const char* name CV_DEFAULT(NULL), const char** real_name CV_DEFAULT(NULL) )
cvLoadHaarClassifierCascade	/usr/include/opencv/cv.h	/^CVAPI(CvHaarClassifierCascade*) cvLoadHaarClassifierCascade($/;"	p	signature:( const char* directory, CvSize orig_window_size)
cvLoadImage	/usr/include/opencv/highgui.h	/^CVAPI(IplImage*) cvLoadImage( const char* filename, int iscolor CV_DEFAULT(CV_LOAD_IMAGE_COLOR));$/;"	p	signature:( const char* filename, int iscolor CV_DEFAULT(CV_LOAD_IMAGE_COLOR))
cvLoadImageM	/usr/include/opencv/highgui.h	/^CVAPI(CvMat*) cvLoadImageM( const char* filename, int iscolor CV_DEFAULT(CV_LOAD_IMAGE_COLOR));$/;"	p	signature:( const char* filename, int iscolor CV_DEFAULT(CV_LOAD_IMAGE_COLOR))
cvLog	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvLog( const CvArr* src, CvArr* dst );$/;"	p	signature:( const CvArr* src, CvArr* dst )
cvLogPolar	/usr/include/opencv/cv.h	/^CVAPI(void)  cvLogPolar( const CvArr* src, CvArr* dst,$/;"	p	signature:( const CvArr* src, CvArr* dst, CvPoint2D32f center, double M, int flags CV_DEFAULT(CV_INTER_LINEAR+CV_WARP_FILL_OUTLIERS))
cvMahalanobis	/usr/include/opencv/cxcore.h	/^CVAPI(double)  cvMahalanobis( const CvArr* vec1, const CvArr* vec2, CvArr* mat );$/;"	p	signature:( const CvArr* vec1, const CvArr* vec2, CvArr* mat )
cvMahalonobis	/usr/include/opencv/cxcore.h	812;"	d
cvMake2DPoints	/usr/include/opencv/cvcompat.h	893;"	d
cvMake3DPoints	/usr/include/opencv/cvcompat.h	894;"	d
cvMakeAlphaScanlines	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvMakeAlphaScanlines( int*  scanlines1,$/;"	p	signature:( int* scanlines1, int* scanlines2, int* scanlinesA, int* lengths, int line_count, float alpha)
cvMakeHistHeaderForArray	/usr/include/opencv/cv.h	/^CVAPI(CvHistogram*)  cvMakeHistHeaderForArray($/;"	p	signature:( int dims, int* sizes, CvHistogram* hist, float* data, float** ranges CV_DEFAULT(NULL), int uniform CV_DEFAULT(1))
cvMakeScanlines	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvMakeScanlines( const CvMatrix3* matrix, CvSize  img_size,$/;"	p	signature:( const CvMatrix3* matrix, CvSize img_size, int* scanlines1, int* scanlines2, int* lengths1, int* lengths2, int* line_count )
cvMakeSeqHeaderForArray	/usr/include/opencv/cxcore.h	/^CVAPI(CvSeq*) cvMakeSeqHeaderForArray( int seq_type, int header_size,$/;"	p	signature:( int seq_type, int header_size, int elem_size, void* elements, int total, CvSeq* seq, CvSeqBlock* block )
cvMat	/usr/include/opencv/cxtypes.h	/^CV_INLINE CvMat cvMat( int rows, int cols, int type, void* data CV_DEFAULT(NULL))$/;"	f	signature:( int rows, int cols, int type, void* data CV_DEFAULT(NULL))
cvMatArray	/usr/include/opencv/cvcompat.h	/^CV_INLINE CvMat cvMatArray( int rows, int cols, int type,$/;"	f	signature:( int rows, int cols, int type, int count, void* data CV_DEFAULT(0))
cvMatMul	/usr/include/opencv/cxcore.h	691;"	d
cvMatMulAdd	/usr/include/opencv/cxcore.h	690;"	d
cvMatMulAddEx	/usr/include/opencv/cxcore.h	701;"	d
cvMatMulAddS	/usr/include/opencv/cxcore.h	708;"	d
cvMatchContourTrees	/usr/include/opencv/cv.h	/^CVAPI(double)  cvMatchContourTrees( const CvContourTree* tree1,$/;"	p	signature:( const CvContourTree* tree1, const CvContourTree* tree2, int method, double threshold )
cvMatchContours	/usr/include/opencv/cvcompat.h	108;"	d
cvMatchShapes	/usr/include/opencv/cv.h	/^CVAPI(double)  cvMatchShapes( const void* object1, const void* object2,$/;"	p	signature:( const void* object1, const void* object2, int method, double parameter CV_DEFAULT(0))
cvMatchTemplate	/usr/include/opencv/cv.h	/^CVAPI(void)  cvMatchTemplate( const CvArr* image, const CvArr* templ,$/;"	p	signature:( const CvArr* image, const CvArr* templ, CvArr* result, int method )
cvMax	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvMax( const CvArr* src1, const CvArr* src2, CvArr* dst );$/;"	p	signature:( const CvArr* src1, const CvArr* src2, CvArr* dst )
cvMaxRect	/usr/include/opencv/cv.h	/^CVAPI(CvRect)  cvMaxRect( const CvRect* rect1, const CvRect* rect2 );$/;"	p	signature:( const CvRect* rect1, const CvRect* rect2 )
cvMaxS	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvMaxS( const CvArr* src, double value, CvArr* dst );$/;"	p	signature:( const CvArr* src, double value, CvArr* dst )
cvMean	/usr/include/opencv/cvcompat.h	/^CV_INLINE double cvMean( const CvArr* image, const CvArr* mask CV_DEFAULT(0))$/;"	f	signature:( const CvArr* image, const CvArr* mask CV_DEFAULT(0))
cvMeanMask	/usr/include/opencv/cvcompat.h	351;"	d
cvMeanShift	/usr/include/opencv/cv.h	/^CVAPI(int)  cvMeanShift( const CvArr* prob_image, CvRect  window,$/;"	p	signature:( const CvArr* prob_image, CvRect window, CvTermCriteria criteria, CvConnectedComp* comp )
cvMean_StdDev	/usr/include/opencv/cvcompat.h	/^CV_INLINE void  cvMean_StdDev( const CvArr* image, double* mean, double* sdv,$/;"	f	signature:( const CvArr* image, double* mean, double* sdv, const CvArr* mask CV_DEFAULT(0))
cvMean_StdDevMask	/usr/include/opencv/cvcompat.h	352;"	d
cvMemStorageAlloc	/usr/include/opencv/cxcore.h	/^CVAPI(void*) cvMemStorageAlloc( CvMemStorage* storage, size_t size );$/;"	p	signature:( CvMemStorage* storage, size_t size )
cvMemStorageAllocString	/usr/include/opencv/cxcore.h	/^CVAPI(CvString) cvMemStorageAllocString( CvMemStorage* storage, const char* ptr,$/;"	p	signature:( CvMemStorage* storage, const char* ptr, int len CV_DEFAULT(-1) )
cvMerge	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvMerge( const CvArr* src0, const CvArr* src1,$/;"	p	signature:( const CvArr* src0, const CvArr* src1, const CvArr* src2, const CvArr* src3, CvArr* dst )
cvMin	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvMin( const CvArr* src1, const CvArr* src2, CvArr* dst );$/;"	p	signature:( const CvArr* src1, const CvArr* src2, CvArr* dst )
cvMinAreaRect	/usr/include/opencv/cvcompat.h	/^CV_INLINE void cvMinAreaRect( CvPoint* points, int n,$/;"	f	signature:( CvPoint* points, int n, int CV_UNREFERENCED(left), int CV_UNREFERENCED(bottom), int CV_UNREFERENCED(right), int CV_UNREFERENCED(top), CvPoint2D32f* anchor, CvPoint2D32f* vect1, CvPoint2D32f* vect2 )
cvMinAreaRect2	/usr/include/opencv/cv.h	/^CVAPI(CvBox2D)  cvMinAreaRect2( const CvArr* points,$/;"	p	signature:( const CvArr* points, CvMemStorage* storage CV_DEFAULT(NULL))
cvMinEnclosingCircle	/usr/include/opencv/cv.h	/^CVAPI(int)  cvMinEnclosingCircle( const CvArr* points,$/;"	p	signature:( const CvArr* points, CvPoint2D32f* center, float* radius )
cvMinMaxLoc	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvMinMaxLoc( const CvArr* arr, double* min_val, double* max_val,$/;"	p	signature:( const CvArr* arr, double* min_val, double* max_val, CvPoint* min_loc CV_DEFAULT(NULL), CvPoint* max_loc CV_DEFAULT(NULL), const CvArr* mask CV_DEFAULT(NULL) )
cvMinMaxLocMask	/usr/include/opencv/cvcompat.h	356;"	d
cvMinS	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvMinS( const CvArr* src, double value, CvArr* dst );$/;"	p	signature:( const CvArr* src, double value, CvArr* dst )
cvMirror	/usr/include/opencv/cxcore.h	729;"	d
cvMixChannels	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvMixChannels( const CvArr** src, int src_count,$/;"	p	signature:( const CvArr** src, int src_count, CvArr** dst, int dst_count, const int* from_to, int pair_count )
cvMixSegmL2	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvMixSegmL2( CvImgObsInfo** obs_info_array,$/;"	p	signature:( CvImgObsInfo** obs_info_array, int num_img, CvEHMM* hmm )
cvMoments	/usr/include/opencv/cv.h	/^CVAPI(void) cvMoments( const CvArr* arr, CvMoments* moments, int binary CV_DEFAULT(0));$/;"	p	signature:( const CvArr* arr, CvMoments* moments, int binary CV_DEFAULT(0))
cvMorphContours	/usr/include/opencv/cvaux.h	/^CvSeq* cvMorphContours( const CvSeq* contour1, const CvSeq* contour2,$/;"	p	signature:( const CvSeq* contour1, const CvSeq* contour2, CvSeq* corr, double alpha, CvMemStorage* storage )
cvMorphEpilinesMulti	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvMorphEpilinesMulti( int    line_count,$/;"	p	signature:( int line_count, uchar* first_pix, int* first_num, uchar* second_pix, int* second_num, uchar* dst_pix, int* dst_num, float alpha, int* first, int* first_runs, int* second, int* second_runs, int* first_corr, int* second_corr)
cvMorphologyEx	/usr/include/opencv/cv.h	/^CVAPI(void)  cvMorphologyEx( const CvArr* src, CvArr* dst,$/;"	p	signature:( const CvArr* src, CvArr* dst, CvArr* temp, IplConvKernel* element, int operation, int iterations CV_DEFAULT(1) )
cvMoveWindow	/usr/include/opencv/highgui.h	/^CVAPI(void) cvMoveWindow( const char* name, int x, int y );$/;"	p	signature:( const char* name, int x, int y )
cvMul	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvMul( const CvArr* src1, const CvArr* src2,$/;"	p	signature:( const CvArr* src1, const CvArr* src2, CvArr* dst, double scale CV_DEFAULT(1) )
cvMulSpectrums	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvMulSpectrums( const CvArr* src1, const CvArr* src2,$/;"	p	signature:( const CvArr* src1, const CvArr* src2, CvArr* dst, int flags )
cvMulTransposed	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvMulTransposed( const CvArr* src, CvArr* dst, int order,$/;"	p	signature:( const CvArr* src, CvArr* dst, int order, const CvArr* delta CV_DEFAULT(NULL), double scale CV_DEFAULT(1.) )
cvMultiplyAcc	/usr/include/opencv/cv.h	/^CVAPI(void)  cvMultiplyAcc( const CvArr* image1, const CvArr* image2, CvArr* acc,$/;"	p	signature:( const CvArr* image1, const CvArr* image2, CvArr* acc, const CvArr* mask CV_DEFAULT(NULL) )
cvMultiplyAccMask	/usr/include/opencv/cvcompat.h	120;"	d
cvNamedWindow	/usr/include/opencv/highgui.h	/^CVAPI(int) cvNamedWindow( const char* name, int flags CV_DEFAULT(CV_WINDOW_AUTOSIZE) );$/;"	p	signature:( const char* name, int flags CV_DEFAULT(CV_WINDOW_AUTOSIZE) )
cvNextGraphItem	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvNextGraphItem( CvGraphScanner* scanner );$/;"	p	signature:( CvGraphScanner* scanner )
cvNextNArraySlice	/usr/include/opencv/cxcore.h	/^CVAPI(int) cvNextNArraySlice( CvNArrayIterator* array_iterator );$/;"	p	signature:( CvNArrayIterator* array_iterator )
cvNextTreeNode	/usr/include/opencv/cxcore.h	/^CVAPI(void*) cvNextTreeNode( CvTreeNodeIterator* tree_iterator );$/;"	p	signature:( CvTreeNodeIterator* tree_iterator )
cvNorm	/usr/include/opencv/cxcore.h	/^CVAPI(double)  cvNorm( const CvArr* arr1, const CvArr* arr2 CV_DEFAULT(NULL),$/;"	p	signature:( const CvArr* arr1, const CvArr* arr2 CV_DEFAULT(NULL), int norm_type CV_DEFAULT(CV_L2), const CvArr* mask CV_DEFAULT(NULL) )
cvNormMask	/usr/include/opencv/cvcompat.h	354;"	d
cvNormalize	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvNormalize( const CvArr* src, CvArr* dst,$/;"	p	signature:( const CvArr* src, CvArr* dst, double a CV_DEFAULT(1.), double b CV_DEFAULT(0.), int norm_type CV_DEFAULT(CV_L2), const CvArr* mask CV_DEFAULT(NULL) )
cvNormalizeHist	/usr/include/opencv/cv.h	/^CVAPI(void)  cvNormalizeHist( CvHistogram* hist, double factor );$/;"	p	signature:( CvHistogram* hist, double factor )
cvNot	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvNot( const CvArr* src, CvArr* dst );$/;"	p	signature:( const CvArr* src, CvArr* dst )
cvNulDevReport	/usr/include/opencv/cxcore.h	/^CVAPI(int) cvNulDevReport( int status, const char* func_name, const char* err_msg,$/;"	p	signature:( int status, const char* func_name, const char* err_msg, const char* file_name, int line, void* userdata )
cvOpenFileStorage	/usr/include/opencv/cxcore.h	/^CVAPI(CvFileStorage*)  cvOpenFileStorage( const char* filename,$/;"	p	signature:( const char* filename, CvMemStorage* memstorage, int flags )
cvOr	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvOr( const CvArr* src1, const CvArr* src2,$/;"	p	signature:( const CvArr* src1, const CvArr* src2, CvArr* dst, const CvArr* mask CV_DEFAULT(NULL))
cvOrS	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvOrS( const CvArr* src, CvScalar value,$/;"	p	signature:( const CvArr* src, CvScalar value, CvArr* dst, const CvArr* mask CV_DEFAULT(NULL))
cvPOSIT	/usr/include/opencv/cv.h	/^CVAPI(void)  cvPOSIT(  CvPOSITObject* posit_object, CvPoint2D32f* image_points,$/;"	p	signature:( CvPOSITObject* posit_object, CvPoint2D32f* image_points, double focal_length, CvTermCriteria criteria, CvMatr32f rotation_matrix, CvVect32f translation_vector)
cvPerspectiveTransform	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvPerspectiveTransform( const CvArr* src, CvArr* dst,$/;"	p	signature:( const CvArr* src, CvArr* dst, const CvMat* mat )
cvPoint	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvPoint  cvPoint( int x, int y )$/;"	f	signature:( int x, int y )
cvPoint2D32f	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvPoint2D32f  cvPoint2D32f( double x, double y )$/;"	f	signature:( double x, double y )
cvPoint2D64f	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvPoint2D64f  cvPoint2D64f( double x, double y )$/;"	f	signature:( double x, double y )
cvPoint3D32f	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvPoint3D32f  cvPoint3D32f( double x, double y, double z )$/;"	f	signature:( double x, double y, double z )
cvPoint3D64f	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvPoint3D64f  cvPoint3D64f( double x, double y, double z )$/;"	f	signature:( double x, double y, double z )
cvPointFrom32f	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvPoint  cvPointFrom32f( CvPoint2D32f point )$/;"	f	signature:( CvPoint2D32f point )
cvPointPolygonTest	/usr/include/opencv/cv.h	/^CVAPI(double) cvPointPolygonTest( const CvArr* contour,$/;"	p	signature:( const CvArr* contour, CvPoint2D32f pt, int measure_dist )
cvPointSeqFromMat	/usr/include/opencv/cv.h	/^CVAPI(CvSeq*) cvPointSeqFromMat( int seq_kind, const CvArr* mat,$/;"	p	signature:( int seq_kind, const CvArr* mat, CvContour* contour_header, CvSeqBlock* block )
cvPointTo32f	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvPoint2D32f  cvPointTo32f( CvPoint point )$/;"	f	signature:( CvPoint point )
cvPolarToCart	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvPolarToCart( const CvArr* magnitude, const CvArr* angle,$/;"	p	signature:( const CvArr* magnitude, const CvArr* angle, CvArr* x, CvArr* y, int angle_in_degrees CV_DEFAULT(0))
cvPolyLine	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvPolyLine( CvArr* img, CvPoint** pts, int* npts, int contours,$/;"	p	signature:( CvArr* img, CvPoint** pts, int* npts, int contours, int is_closed, CvScalar color, int thickness CV_DEFAULT(1), int line_type CV_DEFAULT(8), int shift CV_DEFAULT(0) )
cvPolyLineAA	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvPolyLineAA( CvArr* img, CvPoint** pts, int* npts, int contours,$/;"	f	signature:( CvArr* img, CvPoint** pts, int* npts, int contours, int is_closed, double color, int scale CV_DEFAULT(0) )
cvPostBoostingFindFace	/usr/include/opencv/cvaux.h	/^CvSeq * cvPostBoostingFindFace(IplImage * Image,CvMemStorage* storage);$/;"	p	signature:(IplImage * Image,CvMemStorage* storage)
cvPostWarpImage	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvPostWarpImage( int       line_count,$/;"	p	signature:( int line_count, uchar* src, int* src_nums, IplImage* img, int* scanlines)
cvPow	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvPow( const CvArr* src, CvArr* dst, double power );$/;"	p	signature:( const CvArr* src, CvArr* dst, double power )
cvPreCornerDetect	/usr/include/opencv/cv.h	/^CVAPI(void) cvPreCornerDetect( const CvArr* image, CvArr* corners,$/;"	p	signature:( const CvArr* image, CvArr* corners, int aperture_size CV_DEFAULT(3) )
cvPreWarpImage	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvPreWarpImage( int       line_count,$/;"	p	signature:( int line_count, IplImage* img, uchar* dst, int* dst_nums, int* scanlines)
cvPrevTreeNode	/usr/include/opencv/cxcore.h	/^CVAPI(void*) cvPrevTreeNode( CvTreeNodeIterator* tree_iterator );$/;"	p	signature:( CvTreeNodeIterator* tree_iterator )
cvProject3D	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvProject3D( CvPoint3D32f* points3D, int count,$/;"	f	signature:( CvPoint3D32f* points3D, int count, CvPoint2D32f* points2D, int xIndx CV_DEFAULT(0), int yIndx CV_DEFAULT(1))
cvProjectPCA	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvProjectPCA( const CvArr* data, const CvArr* mean,$/;"	p	signature:( const CvArr* data, const CvArr* mean, const CvArr* eigenvects, CvArr* result )
cvProjectPoints	/usr/include/opencv/cvcompat.h	/^CV_INLINE void  cvProjectPoints( int point_count, CvPoint3D64f* _object_points,$/;"	f	signature:( int point_count, CvPoint3D64f* _object_points, double* _rotation_vector, double* _translation_vector, double* focal_length, CvPoint2D64f principal_point, double* _distortion, CvPoint2D64f* _image_points, double* _deriv_points_rotation_matrix, double* _deriv_points_translation_vect, double* _deriv_points_focal, double* _deriv_points_principal_point, double* _deriv_points_distortion_coeffs )
cvProjectPoints2	/usr/include/opencv/cv.h	/^CVAPI(void) cvProjectPoints2( const CvMat* object_points, const CvMat* rotation_vector,$/;"	p	signature:( const CvMat* object_points, const CvMat* rotation_vector, const CvMat* translation_vector, const CvMat* intrinsic_matrix, const CvMat* distortion_coeffs, CvMat* image_points, CvMat* dpdrot CV_DEFAULT(NULL), CvMat* dpdt CV_DEFAULT(NULL), CvMat* dpdf CV_DEFAULT(NULL), CvMat* dpdc CV_DEFAULT(NULL), CvMat* dpddist CV_DEFAULT(NULL) )
cvProjectPointsSimple	/usr/include/opencv/cvcompat.h	/^CV_INLINE void  cvProjectPointsSimple( int point_count, CvPoint3D64f* _object_points,$/;"	f	signature:( int point_count, CvPoint3D64f* _object_points, double* _rotation_matrix, double* _translation_vector, double* _camera_matrix, double* _distortion, CvPoint2D64f* _image_points )
cvPseudoInv	/usr/include/opencv/cvcompat.h	342;"	d
cvPseudoInverse	/usr/include/opencv/cvcompat.h	/^CV_INLINE double cvPseudoInverse( const CvArr* src, CvArr* dst )$/;"	f	signature:( const CvArr* src, CvArr* dst )
cvPtr1D	/usr/include/opencv/cxcore.h	/^CVAPI(uchar*) cvPtr1D( const CvArr* arr, int idx0, int* type CV_DEFAULT(NULL));$/;"	p	signature:( const CvArr* arr, int idx0, int* type CV_DEFAULT(NULL))
cvPtr2D	/usr/include/opencv/cxcore.h	/^CVAPI(uchar*) cvPtr2D( const CvArr* arr, int idx0, int idx1, int* type CV_DEFAULT(NULL) );$/;"	p	signature:( const CvArr* arr, int idx0, int idx1, int* type CV_DEFAULT(NULL) )
cvPtr3D	/usr/include/opencv/cxcore.h	/^CVAPI(uchar*) cvPtr3D( const CvArr* arr, int idx0, int idx1, int idx2,$/;"	p	signature:( const CvArr* arr, int idx0, int idx1, int idx2, int* type CV_DEFAULT(NULL))
cvPtrND	/usr/include/opencv/cxcore.h	/^CVAPI(uchar*) cvPtrND( const CvArr* arr, const int* idx, int* type CV_DEFAULT(NULL),$/;"	p	signature:( const CvArr* arr, const int* idx, int* type CV_DEFAULT(NULL), int create_node CV_DEFAULT(1), unsigned* precalc_hashval CV_DEFAULT(NULL))
cvPutText	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvPutText( CvArr* img, const char* text, CvPoint org,$/;"	p	signature:( CvArr* img, const char* text, CvPoint org, const CvFont* font, CvScalar color )
cvPyrDown	/usr/include/opencv/cv.h	/^CVAPI(void)  cvPyrDown( const CvArr* src, CvArr* dst,$/;"	p	signature:( const CvArr* src, CvArr* dst, int filter CV_DEFAULT(CV_GAUSSIAN_5x5) )
cvPyrMeanShiftFiltering	/usr/include/opencv/cv.h	/^CVAPI(void) cvPyrMeanShiftFiltering( const CvArr* src, CvArr* dst, $/;"	p	signature:( const CvArr* src, CvArr* dst, double sp, double sr, int max_level CV_DEFAULT(1), CvTermCriteria termcrit CV_DEFAULT(cvTermCriteria(CV_TERMCRIT_ITER+CV_TERMCRIT_EPS,5,1)))
cvPyrSegmentation	/usr/include/opencv/cv.h	/^CVAPI(void) cvPyrSegmentation( IplImage* src, IplImage* dst,$/;"	p	signature:( IplImage* src, IplImage* dst, CvMemStorage* storage, CvSeq** comp, int level, double threshold1, double threshold2 )
cvPyrUp	/usr/include/opencv/cv.h	/^CVAPI(void)  cvPyrUp( const CvArr* src, CvArr* dst,$/;"	p	signature:( const CvArr* src, CvArr* dst, int filter CV_DEFAULT(CV_GAUSSIAN_5x5) )
cvQueryFrame	/usr/include/opencv/highgui.h	/^CVAPI(IplImage*) cvQueryFrame( CvCapture* capture );$/;"	p	signature:( CvCapture* capture )
cvQueryHistValue_1D	/usr/include/opencv/cvcompat.h	482;"	d
cvQueryHistValue_2D	/usr/include/opencv/cvcompat.h	484;"	d
cvQueryHistValue_3D	/usr/include/opencv/cvcompat.h	486;"	d
cvQueryHistValue_nD	/usr/include/opencv/cvcompat.h	488;"	d
cvROIToRect	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvRect  cvROIToRect( IplROI roi )$/;"	f	signature:( IplROI roi )
cvRand	/usr/include/opencv/cvcompat.h	/^CV_INLINE void cvRand( CvRandState* state, CvArr* arr )$/;"	f	signature:( CvRandState* state, CvArr* arr )
cvRandArr	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvRandArr( CvRNG* rng, CvArr* arr, int dist_type,$/;"	p	signature:( CvRNG* rng, CvArr* arr, int dist_type, CvScalar param1, CvScalar param2 )
cvRandGaussMixture	/usr/include/opencv/ml.h	/^CVAPI(void) cvRandGaussMixture( CvMat* means[],$/;"	p	signature:( CvMat* means[], CvMat* covs[], float weights[], int clsnum, CvMat* sample, CvMat* sampClasses CV_DEFAULT(0) )
cvRandInit	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvRandInit( CvRandState* state, double param1,$/;"	f	signature:( CvRandState* state, double param1, double param2, int seed, int disttype CV_DEFAULT(CV_RAND_UNI))
cvRandInt	/usr/include/opencv/cxtypes.h	/^CV_INLINE unsigned cvRandInt( CvRNG* rng )$/;"	f	signature:( CvRNG* rng )
cvRandMVNormal	/usr/include/opencv/ml.h	/^CVAPI(void) cvRandMVNormal( CvMat* mean, CvMat* cov, CvMat* sample,$/;"	p	signature:( CvMat* mean, CvMat* cov, CvMat* sample, CvRNG* rng CV_DEFAULT(0) )
cvRandNext	/usr/include/opencv/cvcompat.h	246;"	d
cvRandReal	/usr/include/opencv/cxtypes.h	/^CV_INLINE double cvRandReal( CvRNG* rng )$/;"	f	signature:( CvRNG* rng )
cvRandSetRange	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvRandSetRange( CvRandState* state, double param1,$/;"	f	signature:( CvRandState* state, double param1, double param2, int idx CV_DEFAULT(-1))
cvRandShuffle	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvRandShuffle( CvArr* mat, CvRNG* rng,$/;"	p	signature:( CvArr* mat, CvRNG* rng, double iter_factor CV_DEFAULT(1.))
cvRange	/usr/include/opencv/cxcore.h	/^CVAPI(CvArr*)  cvRange( CvArr* mat, double start, double end );$/;"	p	signature:( CvArr* mat, double start, double end )
cvRawDataToScalar	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvRawDataToScalar( const void* data, int type, CvScalar* scalar );$/;"	p	signature:( const void* data, int type, CvScalar* scalar )
cvRead	/usr/include/opencv/cxcore.h	/^CVAPI(void*) cvRead( CvFileStorage* fs, CvFileNode* node,$/;"	p	signature:( CvFileStorage* fs, CvFileNode* node, CvAttrList* attributes CV_DEFAULT(NULL))
cvReadByName	/usr/include/opencv/cxcore.h	/^CV_INLINE void* cvReadByName( CvFileStorage* fs, const CvFileNode* map,$/;"	f	signature:( CvFileStorage* fs, const CvFileNode* map, const char* name, CvAttrList* attributes CV_DEFAULT(NULL) )
cvReadChainPoint	/usr/include/opencv/cv.h	/^CVAPI(CvPoint) cvReadChainPoint( CvChainPtReader* reader );$/;"	p	signature:( CvChainPtReader* reader )
cvReadInt	/usr/include/opencv/cxcore.h	/^CV_INLINE int cvReadInt( const CvFileNode* node, int default_value CV_DEFAULT(0) )$/;"	f	signature:( const CvFileNode* node, int default_value CV_DEFAULT(0) )
cvReadIntByName	/usr/include/opencv/cxcore.h	/^CV_INLINE int cvReadIntByName( const CvFileStorage* fs, const CvFileNode* map,$/;"	f	signature:( const CvFileStorage* fs, const CvFileNode* map, const char* name, int default_value CV_DEFAULT(0) )
cvReadRawData	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvReadRawData( const CvFileStorage* fs, const CvFileNode* src,$/;"	p	signature:( const CvFileStorage* fs, const CvFileNode* src, void* dst, const char* dt )
cvReadRawDataSlice	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvReadRawDataSlice( const CvFileStorage* fs, CvSeqReader* reader,$/;"	p	signature:( const CvFileStorage* fs, CvSeqReader* reader, int count, void* dst, const char* dt )
cvReadReal	/usr/include/opencv/cxcore.h	/^CV_INLINE double cvReadReal( const CvFileNode* node, double default_value CV_DEFAULT(0.) )$/;"	f	signature:( const CvFileNode* node, double default_value CV_DEFAULT(0.) )
cvReadRealByName	/usr/include/opencv/cxcore.h	/^CV_INLINE double cvReadRealByName( const CvFileStorage* fs, const CvFileNode* map,$/;"	f	signature:( const CvFileStorage* fs, const CvFileNode* map, const char* name, double default_value CV_DEFAULT(0.) )
cvReadString	/usr/include/opencv/cxcore.h	/^CV_INLINE const char* cvReadString( const CvFileNode* node,$/;"	f	signature:( const CvFileNode* node, const char* default_value CV_DEFAULT(NULL) )
cvReadStringByName	/usr/include/opencv/cxcore.h	/^CV_INLINE const char* cvReadStringByName( const CvFileStorage* fs, const CvFileNode* map,$/;"	f	signature:( const CvFileStorage* fs, const CvFileNode* map, const char* name, const char* default_value CV_DEFAULT(NULL) )
cvReadStructByName	/usr/include/opencv/cvvidsurv.hpp	/^void inline cvReadStructByName(CvFileStorage* fs, CvFileNode* node, char* name, void* addr, char* desc)$/;"	f	signature:(CvFileStorage* fs, CvFileNode* node, char* name, void* addr, char* desc)
cvRealScalar	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvScalar  cvRealScalar( double val0 )$/;"	f	signature:( double val0 )
cvRect	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvRect  cvRect( int x, int y, int width, int height )$/;"	f	signature:( int x, int y, int width, int height )
cvRectIntersection	/usr/include/opencv/cvvidsurv.hpp	/^CV_INLINE CvRect cvRectIntersection( const CvRect r1, const CvRect r2 )$/;"	f	signature:( const CvRect r1, const CvRect r2 )
cvRectToROI	/usr/include/opencv/cxtypes.h	/^CV_INLINE  IplROI  cvRectToROI( CvRect rect, int coi )$/;"	f	signature:( CvRect rect, int coi )
cvRectangle	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvRectangle( CvArr* img, CvPoint pt1, CvPoint pt2,$/;"	p	signature:( CvArr* img, CvPoint pt1, CvPoint pt2, CvScalar color, int thickness CV_DEFAULT(1), int line_type CV_DEFAULT(8), int shift CV_DEFAULT(0))
cvRedirectError	/usr/include/opencv/cxcore.h	/^CVAPI(CvErrorCallback) cvRedirectError( CvErrorCallback error_handler,$/;"	p	signature:( CvErrorCallback error_handler, void* userdata CV_DEFAULT(NULL), void** prev_userdata CV_DEFAULT(NULL) )
cvReduce	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvReduce( const CvArr* src, CvArr* dst, int dim CV_DEFAULT(-1),$/;"	p	signature:( const CvArr* src, CvArr* dst, int dim CV_DEFAULT(-1), int op CV_DEFAULT(CV_REDUCE_SUM) )
cvRefineForegroundMaskBySegm	/usr/include/opencv/cvaux.h	/^CVAPI(void) cvRefineForegroundMaskBySegm( CvSeq* segments, CvBGStatModel*  bg_model );$/;"	p	signature:( CvSeq* segments, CvBGStatModel* bg_model )
cvRegisterModule	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvRegisterModule( const CvModuleInfo* module_info );$/;"	p	signature:( const CvModuleInfo* module_info )
cvRegisterType	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvRegisterType( const CvTypeInfo* info );$/;"	p	signature:( const CvTypeInfo* info )
cvRelease	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvRelease( void** struct_ptr );$/;"	p	signature:( void** struct_ptr )
cvRelease2DHMM	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvRelease2DHMM( CvEHMM** hmm );$/;"	p	signature:( CvEHMM** hmm )
cvReleaseBGStatModel	/usr/include/opencv/cvaux.h	/^CV_INLINE void cvReleaseBGStatModel( CvBGStatModel** bg_model )$/;"	f	signature:( CvBGStatModel** bg_model )
cvReleaseBlobDetector	/usr/include/opencv/cvvidsurv.hpp	/^inline void cvReleaseBlobDetector(CvBlobDetector** ppBD)$/;"	f	signature:(CvBlobDetector** ppBD)
cvReleaseBlobTrackAnalysis	/usr/include/opencv/cvvidsurv.hpp	/^inline void cvReleaseBlobTrackAnalysis(CvBlobTrackAnalysis** pBTPP)$/;"	f	signature:(CvBlobTrackAnalysis** pBTPP)
cvReleaseBlobTrackGen	/usr/include/opencv/cvvidsurv.hpp	/^inline void cvReleaseBlobTrackGen(CvBlobTrackGen** pBTGen)$/;"	f	signature:(CvBlobTrackGen** pBTGen)
cvReleaseBlobTrackPostProc	/usr/include/opencv/cvvidsurv.hpp	/^inline void cvReleaseBlobTrackPostProc(CvBlobTrackPostProc** pBTPP)$/;"	f	signature:(CvBlobTrackPostProc** pBTPP)
cvReleaseBlobTracker	/usr/include/opencv/cvvidsurv.hpp	/^inline void cvReleaseBlobTracker(CvBlobTracker**ppT )$/;"	f	signature:(CvBlobTracker**ppT )
cvReleaseBlobTrackerAuto	/usr/include/opencv/cvvidsurv.hpp	/^inline void cvReleaseBlobTrackerAuto(CvBlobTrackerAuto** ppT)$/;"	f	signature:(CvBlobTrackerAuto** ppT)
cvReleaseBlobTrackerOne	/usr/include/opencv/cvvidsurv.hpp	/^inline void cvReleaseBlobTrackerOne(CvBlobTrackerOne **ppT )$/;"	f	signature:(CvBlobTrackerOne **ppT )
cvReleaseCapture	/usr/include/opencv/highgui.h	/^CVAPI(void) cvReleaseCapture( CvCapture** capture );$/;"	p	signature:( CvCapture** capture )
cvReleaseConDensation	/usr/include/opencv/cv.h	/^CVAPI(void)  cvReleaseConDensation( CvConDensation** condens );$/;"	p	signature:( CvConDensation** condens )
cvReleaseData	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvReleaseData( CvArr* arr );$/;"	p	signature:( CvArr* arr )
cvReleaseFGDetector	/usr/include/opencv/cvvidsurv.hpp	/^inline void cvReleaseFGDetector(CvFGDetector** ppT )$/;"	f	signature:(CvFGDetector** ppT )
cvReleaseFaceTracker	/usr/include/opencv/cvaux.h	/^CVAPI(void) cvReleaseFaceTracker(CvFaceTracker** ppFaceTracker);$/;"	p	signature:(CvFaceTracker** ppFaceTracker)
cvReleaseFileStorage	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvReleaseFileStorage( CvFileStorage** fs );$/;"	p	signature:( CvFileStorage** fs )
cvReleaseGLCM	/usr/include/opencv/cvaux.h	/^CVAPI(void) cvReleaseGLCM( CvGLCM** GLCM, int flag CV_DEFAULT(CV_GLCM_ALL));$/;"	p	signature:( CvGLCM** GLCM, int flag CV_DEFAULT(CV_GLCM_ALL))
cvReleaseGraphScanner	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvReleaseGraphScanner( CvGraphScanner** scanner );$/;"	p	signature:( CvGraphScanner** scanner )
cvReleaseHaarClassifierCascade	/usr/include/opencv/cv.h	/^CVAPI(void) cvReleaseHaarClassifierCascade( CvHaarClassifierCascade** cascade );$/;"	p	signature:( CvHaarClassifierCascade** cascade )
cvReleaseHist	/usr/include/opencv/cv.h	/^CVAPI(void)  cvReleaseHist( CvHistogram** hist );$/;"	p	signature:( CvHistogram** hist )
cvReleaseImage	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvReleaseImage( IplImage** image );$/;"	p	signature:( IplImage** image )
cvReleaseImageData	/usr/include/opencv/cvcompat.h	98;"	d
cvReleaseImageHeader	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvReleaseImageHeader( IplImage** image );$/;"	p	signature:( IplImage** image )
cvReleaseKalman	/usr/include/opencv/cv.h	/^CVAPI(void)  cvReleaseKalman( CvKalman** kalman);$/;"	p	signature:( CvKalman** kalman)
cvReleaseLinearContorModelStorage	/usr/include/opencv/cvaux.h	/^CVAPI(int) cvReleaseLinearContorModelStorage(CvGraph** Graph);$/;"	p	signature:(CvGraph** Graph)
cvReleaseMat	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvReleaseMat( CvMat** mat );$/;"	p	signature:( CvMat** mat )
cvReleaseMatHeader	/usr/include/opencv/cvcompat.h	379;"	d
cvReleaseMatND	/usr/include/opencv/cxcore.h	/^CV_INLINE  void  cvReleaseMatND( CvMatND** mat )$/;"	f	signature:( CvMatND** mat )
cvReleaseMemStorage	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvReleaseMemStorage( CvMemStorage** storage );$/;"	p	signature:( CvMemStorage** storage )
cvReleaseObsInfo	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvReleaseObsInfo( CvImgObsInfo** obs_info );$/;"	p	signature:( CvImgObsInfo** obs_info )
cvReleasePOSITObject	/usr/include/opencv/cv.h	/^CVAPI(void)  cvReleasePOSITObject( CvPOSITObject**  posit_object );$/;"	p	signature:( CvPOSITObject** posit_object )
cvReleaseProb	/usr/include/opencv/cvvidsurv.hpp	/^inline void cvReleaseProb(CvProb** ppProb){ppProb[0]->Release();ppProb[0]=NULL;}$/;"	f	signature:(CvProb** ppProb)
cvReleaseSparseMat	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvReleaseSparseMat( CvSparseMat** mat );$/;"	p	signature:( CvSparseMat** mat )
cvReleaseStructuringElement	/usr/include/opencv/cv.h	/^CVAPI(void)  cvReleaseStructuringElement( IplConvKernel** element );$/;"	p	signature:( IplConvKernel** element )
cvReleaseTestSeq	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS void cvReleaseTestSeq(CvTestSeq** ppTestSeq);$/;"	p	signature:(CvTestSeq** ppTestSeq)
cvReleaseVideoWriter	/usr/include/opencv/highgui.h	/^CVAPI(void) cvReleaseVideoWriter( CvVideoWriter** writer );$/;"	p	signature:( CvVideoWriter** writer )
cvReleaseVoronoiStorage	/usr/include/opencv/cvaux.h	/^CVAPI(void) cvReleaseVoronoiStorage(CvVoronoiDiagram2D* VoronoiDiagram,$/;"	p	signature:(CvVoronoiDiagram2D* VoronoiDiagram, CvMemStorage** pVoronoiStorage)
cvRemap	/usr/include/opencv/cv.h	/^CVAPI(void)  cvRemap( const CvArr* src, CvArr* dst,$/;"	p	signature:( const CvArr* src, CvArr* dst, const CvArr* mapx, const CvArr* mapy, int flags CV_DEFAULT(CV_INTER_LINEAR+CV_WARP_FILL_OUTLIERS), CvScalar fillval CV_DEFAULT(cvScalarAll(0)) )
cvRemoveMemoryManager	/usr/include/opencv/cvcompat.h	359;"	d
cvRemoveNodeFromTree	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvRemoveNodeFromTree( void* node, void* frame );$/;"	p	signature:( void* node, void* frame )
cvRepeat	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvRepeat( const CvArr* src, CvArr* dst );$/;"	p	signature:( const CvArr* src, CvArr* dst )
cvResetImageROI	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvResetImageROI( IplImage* image );$/;"	p	signature:( IplImage* image )
cvReshape	/usr/include/opencv/cxcore.h	/^CVAPI(CvMat*) cvReshape( const CvArr* arr, CvMat* header,$/;"	p	signature:( const CvArr* arr, CvMat* header, int new_cn, int new_rows CV_DEFAULT(0) )
cvReshapeMatND	/usr/include/opencv/cxcore.h	/^CVAPI(CvArr*) cvReshapeMatND( const CvArr* arr,$/;"	p	signature:( const CvArr* arr, int sizeof_header, CvArr* header, int new_cn, int new_dims, int* new_sizes )
cvReshapeND	/usr/include/opencv/cxcore.h	407;"	d
cvResize	/usr/include/opencv/cv.h	/^CVAPI(void)  cvResize( const CvArr* src, CvArr* dst,$/;"	p	signature:( const CvArr* src, CvArr* dst, int interpolation CV_DEFAULT( CV_INTER_LINEAR ))
cvResizeWindow	/usr/include/opencv/highgui.h	/^CVAPI(void) cvResizeWindow( const char* name, int width, int height );$/;"	p	signature:( const char* name, int width, int height )
cvRestoreMemStoragePos	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvRestoreMemStoragePos( CvMemStorage* storage, CvMemStoragePos* pos );$/;"	p	signature:( CvMemStorage* storage, CvMemStoragePos* pos )
cvRetrieveFrame	/usr/include/opencv/highgui.h	/^CVAPI(IplImage*) cvRetrieveFrame( CvCapture* capture );$/;"	p	signature:( CvCapture* capture )
cvRodrigues	/usr/include/opencv/cvcompat.h	/^CV_INLINE void  cvRodrigues( CvMat* rotation_matrix, CvMat* rotation_vector,$/;"	f	signature:( CvMat* rotation_matrix, CvMat* rotation_vector, CvMat* jacobian, int conv_type )
cvRodrigues2	/usr/include/opencv/cv.h	/^CVAPI(int) cvRodrigues2( const CvMat* src, CvMat* dst,$/;"	p	signature:( const CvMat* src, CvMat* dst, CvMat* jacobian CV_DEFAULT(0) )
cvRound	/usr/include/opencv/cxtypes.h	/^CV_INLINE  int  cvRound( double value )$/;"	f	signature:( double value )
cvRunHaarClassifierCascade	/usr/include/opencv/cv.h	/^CVAPI(int) cvRunHaarClassifierCascade( CvHaarClassifierCascade* cascade,$/;"	p	signature:( CvHaarClassifierCascade* cascade, CvPoint pt, int start_stage CV_DEFAULT(0))
cvRunningAvg	/usr/include/opencv/cv.h	/^CVAPI(void)  cvRunningAvg( const CvArr* image, CvArr* acc, double alpha,$/;"	p	signature:( const CvArr* image, CvArr* acc, double alpha, const CvArr* mask CV_DEFAULT(NULL) )
cvRunningAvgMask	/usr/include/opencv/cvcompat.h	121;"	d
cvSVBkSb	/usr/include/opencv/cxcore.h	/^CVAPI(void)   cvSVBkSb( const CvArr* W, const CvArr* U,$/;"	p	signature:( const CvArr* W, const CvArr* U, const CvArr* V, const CvArr* B, CvArr* X, int flags )
cvSVD	/usr/include/opencv/cxcore.h	/^CVAPI(void)   cvSVD( CvArr* A, CvArr* W, CvArr* U CV_DEFAULT(NULL),$/;"	p	signature:( CvArr* A, CvArr* W, CvArr* U CV_DEFAULT(NULL), CvArr* V CV_DEFAULT(NULL), int flags CV_DEFAULT(0))
cvSampleLine	/usr/include/opencv/cv.h	/^CVAPI(int)  cvSampleLine( const CvArr* image, CvPoint pt1, CvPoint pt2, void* buffer,$/;"	p	signature:( const CvArr* image, CvPoint pt1, CvPoint pt2, void* buffer, int connectivity CV_DEFAULT(8))
cvSave	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvSave( const char* filename, const void* struct_ptr,$/;"	p	signature:( const char* filename, const void* struct_ptr, const char* name CV_DEFAULT(NULL), const char* comment CV_DEFAULT(NULL), CvAttrList attributes CV_DEFAULT(cvAttrList()))
cvSaveImage	/usr/include/opencv/highgui.h	/^CVAPI(int) cvSaveImage( const char* filename, const CvArr* image );$/;"	p	signature:( const char* filename, const CvArr* image )
cvSaveMemStoragePos	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvSaveMemStoragePos( const CvMemStorage* storage, CvMemStoragePos* pos );$/;"	p	signature:( const CvMemStorage* storage, CvMemStoragePos* pos )
cvScalar	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvScalar  cvScalar( double val0, double val1 CV_DEFAULT(0),$/;"	f	signature:( double val0, double val1 CV_DEFAULT(0), double val2 CV_DEFAULT(0), double val3 CV_DEFAULT(0))
cvScalarAll	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvScalar  cvScalarAll( double val0123 )$/;"	f	signature:( double val0123 )
cvScalarToRawData	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvScalarToRawData( const CvScalar* scalar, void* data, int type,$/;"	p	signature:( const CvScalar* scalar, void* data, int type, int extend_to_12 CV_DEFAULT(0) )
cvScale	/usr/include/opencv/cxcore.h	479;"	d
cvScaleAdd	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvScaleAdd( const CvArr* src1, CvScalar scale,$/;"	p	signature:( const CvArr* src1, CvScalar scale, const CvArr* src2, CvArr* dst )
cvSegmentImage	/usr/include/opencv/cvaux.h	/^CVAPI(CvSeq*) cvSegmentImage( const CvArr* srcarr, CvArr* dstarr,$/;"	p	signature:( const CvArr* srcarr, CvArr* dstarr, double canny_threshold, double ffill_threshold, CvMemStorage* storage )
cvSegmentMotion	/usr/include/opencv/cv.h	/^CVAPI(CvSeq*)  cvSegmentMotion( const CvArr* mhi, CvArr* seg_mask,$/;"	p	signature:( const CvArr* mhi, CvArr* seg_mask, CvMemStorage* storage, double timestamp, double seg_thresh )
cvSeqElemIdx	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvSeqElemIdx( const CvSeq* seq, const void* element,$/;"	p	signature:( const CvSeq* seq, const void* element, CvSeqBlock** block CV_DEFAULT(NULL) )
cvSeqInsert	/usr/include/opencv/cxcore.h	/^CVAPI(char*)  cvSeqInsert( CvSeq* seq, int before_index,$/;"	p	signature:( CvSeq* seq, int before_index, void* element CV_DEFAULT(NULL))
cvSeqInsertSlice	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvSeqInsertSlice( CvSeq* seq, int before_index, const CvArr* from_arr );$/;"	p	signature:( CvSeq* seq, int before_index, const CvArr* from_arr )
cvSeqInvert	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvSeqInvert( CvSeq* seq );$/;"	p	signature:( CvSeq* seq )
cvSeqPartition	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvSeqPartition( const CvSeq* seq, CvMemStorage* storage,$/;"	p	signature:( const CvSeq* seq, CvMemStorage* storage, CvSeq** labels, CvCmpFunc is_equal, void* userdata )
cvSeqPop	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvSeqPop( CvSeq* seq, void* element CV_DEFAULT(NULL));$/;"	p	signature:( CvSeq* seq, void* element CV_DEFAULT(NULL))
cvSeqPopFront	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvSeqPopFront( CvSeq* seq, void* element CV_DEFAULT(NULL));$/;"	p	signature:( CvSeq* seq, void* element CV_DEFAULT(NULL))
cvSeqPopMulti	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvSeqPopMulti( CvSeq* seq, void* elements,$/;"	p	signature:( CvSeq* seq, void* elements, int count, int in_front CV_DEFAULT(0) )
cvSeqPush	/usr/include/opencv/cxcore.h	/^CVAPI(char*)  cvSeqPush( CvSeq* seq, void* element CV_DEFAULT(NULL));$/;"	p	signature:( CvSeq* seq, void* element CV_DEFAULT(NULL))
cvSeqPushFront	/usr/include/opencv/cxcore.h	/^CVAPI(char*)  cvSeqPushFront( CvSeq* seq, void* element CV_DEFAULT(NULL));$/;"	p	signature:( CvSeq* seq, void* element CV_DEFAULT(NULL))
cvSeqPushMulti	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvSeqPushMulti( CvSeq* seq, void* elements,$/;"	p	signature:( CvSeq* seq, void* elements, int count, int in_front CV_DEFAULT(0) )
cvSeqRemove	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvSeqRemove( CvSeq* seq, int index );$/;"	p	signature:( CvSeq* seq, int index )
cvSeqRemoveSlice	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvSeqRemoveSlice( CvSeq* seq, CvSlice slice );$/;"	p	signature:( CvSeq* seq, CvSlice slice )
cvSeqSearch	/usr/include/opencv/cxcore.h	/^CVAPI(char*) cvSeqSearch( CvSeq* seq, const void* elem, CvCmpFunc func,$/;"	p	signature:( CvSeq* seq, const void* elem, CvCmpFunc func, int is_sorted, int* elem_idx, void* userdata CV_DEFAULT(NULL) )
cvSeqSlice	/usr/include/opencv/cxcore.h	/^CVAPI(CvSeq*) cvSeqSlice( const CvSeq* seq, CvSlice slice,$/;"	p	signature:( const CvSeq* seq, CvSlice slice, CvMemStorage* storage CV_DEFAULT(NULL), int copy_data CV_DEFAULT(0))
cvSeqSort	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvSeqSort( CvSeq* seq, CvCmpFunc func, void* userdata CV_DEFAULT(NULL) );$/;"	p	signature:( CvSeq* seq, CvCmpFunc func, void* userdata CV_DEFAULT(NULL) )
cvSet	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvSet( CvArr* arr, CvScalar value,$/;"	p	signature:( CvArr* arr, CvScalar value, const CvArr* mask CV_DEFAULT(NULL) )
cvSet1D	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvSet1D( CvArr* arr, int idx0, CvScalar value );$/;"	p	signature:( CvArr* arr, int idx0, CvScalar value )
cvSet2D	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvSet2D( CvArr* arr, int idx0, int idx1, CvScalar value );$/;"	p	signature:( CvArr* arr, int idx0, int idx1, CvScalar value )
cvSet3D	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvSet3D( CvArr* arr, int idx0, int idx1, int idx2, CvScalar value );$/;"	p	signature:( CvArr* arr, int idx0, int idx1, int idx2, CvScalar value )
cvSetAdd	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvSetAdd( CvSet* set_header, CvSetElem* elem CV_DEFAULT(NULL),$/;"	p	signature:( CvSet* set_header, CvSetElem* elem CV_DEFAULT(NULL), CvSetElem** inserted_elem CV_DEFAULT(NULL) )
cvSetAt	/usr/include/opencv/cvcompat.h	349;"	d
cvSetCaptureProperty	/usr/include/opencv/highgui.h	/^CVAPI(int)    cvSetCaptureProperty( CvCapture* capture, int property_id, double value );$/;"	p	signature:( CvCapture* capture, int property_id, double value )
cvSetData	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvSetData( CvArr* arr, void* data, int step );$/;"	p	signature:( CvArr* arr, void* data, int step )
cvSetErrMode	/usr/include/opencv/cxcore.h	/^CVAPI(int) cvSetErrMode( int mode );$/;"	p	signature:( int mode )
cvSetErrStatus	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvSetErrStatus( int status );$/;"	p	signature:( int status )
cvSetHistBinRanges	/usr/include/opencv/cv.h	/^CVAPI(void)  cvSetHistBinRanges( CvHistogram* hist, float** ranges,$/;"	p	signature:( CvHistogram* hist, float** ranges, int uniform CV_DEFAULT(1))
cvSetHistThresh	/usr/include/opencv/cvcompat.h	123;"	d
cvSetIPLAllocators	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvSetIPLAllocators( Cv_iplCreateImageHeader create_header,$/;"	p	signature:( Cv_iplCreateImageHeader create_header, Cv_iplAllocateImageData allocate_data, Cv_iplDeallocate deallocate, Cv_iplCreateROI create_roi, Cv_iplCloneImage clone_image )
cvSetIdentity	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvSetIdentity( CvArr* mat, CvScalar value CV_DEFAULT(cvRealScalar(1)) );$/;"	p	signature:( CvArr* mat, CvScalar value CV_DEFAULT(cvRealScalar(1)) )
cvSetImageCOI	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvSetImageCOI( IplImage* image, int coi );$/;"	p	signature:( IplImage* image, int coi )
cvSetImageData	/usr/include/opencv/cvcompat.h	99;"	d
cvSetImageIOFunctions	/usr/include/opencv/cxcore.hpp	/^CVAPI(int) cvSetImageIOFunctions( CvLoadImageFunc _load_image, CvLoadImageMFunc _load_image_m,$/;"	p	signature:( CvLoadImageFunc _load_image, CvLoadImageMFunc _load_image_m, CvSaveImageFunc _save_image, CvShowImageFunc _show_image )
cvSetImageROI	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvSetImageROI( IplImage* image, CvRect rect );$/;"	p	signature:( IplImage* image, CvRect rect )
cvSetImagesForHaarClassifierCascade	/usr/include/opencv/cv.h	/^CVAPI(void) cvSetImagesForHaarClassifierCascade( CvHaarClassifierCascade* cascade,$/;"	p	signature:( CvHaarClassifierCascade* cascade, const CvArr* sum, const CvArr* sqsum, const CvArr* tilted_sum, double scale )
cvSetMouseCallback	/usr/include/opencv/highgui.h	/^CVAPI(void) cvSetMouseCallback( const char* window_name, CvMouseCallback on_mouse,$/;"	p	signature:( const char* window_name, CvMouseCallback on_mouse, void* param CV_DEFAULT(NULL))
cvSetND	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvSetND( CvArr* arr, const int* idx, CvScalar value );$/;"	p	signature:( CvArr* arr, const int* idx, CvScalar value )
cvSetNew	/usr/include/opencv/cxcore.h	/^CV_INLINE  CvSetElem* cvSetNew( CvSet* set_header )$/;"	f	signature:( CvSet* set_header )
cvSetNumThreads	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvSetNumThreads( int threads CV_DEFAULT(0) );$/;"	p	signature:( int threads CV_DEFAULT(0) )
cvSetPostprocessFuncWin32	/usr/include/opencv/highgui.h	/^CVAPI(void) cvSetPostprocessFuncWin32( CvWin32WindowCallback on_postprocess );$/;"	p	signature:( CvWin32WindowCallback on_postprocess )
cvSetPreprocessFuncWin32	/usr/include/opencv/highgui.h	/^CVAPI(void) cvSetPreprocessFuncWin32( CvWin32WindowCallback on_preprocess );$/;"	p	signature:( CvWin32WindowCallback on_preprocess )
cvSetReal1D	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvSetReal1D( CvArr* arr, int idx0, double value );$/;"	p	signature:( CvArr* arr, int idx0, double value )
cvSetReal2D	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvSetReal2D( CvArr* arr, int idx0, int idx1, double value );$/;"	p	signature:( CvArr* arr, int idx0, int idx1, double value )
cvSetReal3D	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvSetReal3D( CvArr* arr, int idx0,$/;"	p	signature:( CvArr* arr, int idx0, int idx1, int idx2, double value )
cvSetRealND	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvSetRealND( CvArr* arr, const int* idx, double value );$/;"	p	signature:( CvArr* arr, const int* idx, double value )
cvSetRemove	/usr/include/opencv/cxcore.h	/^CVAPI(void)   cvSetRemove( CvSet* set_header, int index );$/;"	p	signature:( CvSet* set_header, int index )
cvSetRemoveByPtr	/usr/include/opencv/cxcore.h	/^CV_INLINE  void cvSetRemoveByPtr( CvSet* set_header, void* elem )$/;"	f	signature:( CvSet* set_header, void* elem )
cvSetSeqBlockSize	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvSetSeqBlockSize( CvSeq* seq, int delta_elems );$/;"	p	signature:( CvSeq* seq, int delta_elems )
cvSetSeqReaderPos	/usr/include/opencv/cxcore.h	/^CVAPI(void)   cvSetSeqReaderPos( CvSeqReader* reader, int index,$/;"	p	signature:( CvSeqReader* reader, int index, int is_relative CV_DEFAULT(0))
cvSetTrackbarPos	/usr/include/opencv/highgui.h	/^CVAPI(void) cvSetTrackbarPos( const char* trackbar_name, const char* window_name, int pos );$/;"	p	signature:( const char* trackbar_name, const char* window_name, int pos )
cvSetZero	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvSetZero( CvArr* arr );$/;"	p	signature:( CvArr* arr )
cvShowImage	/usr/include/opencv/highgui.h	/^CVAPI(void) cvShowImage( const char* name, const CvArr* image );$/;"	p	signature:( const char* name, const CvArr* image )
cvShowVecSamples	/usr/include/opencv/cvhaartraining.h	/^void cvShowVecSamples( const char* filename, int winwidth, int winheight, double scale );$/;"	p	signature:( const char* filename, int winwidth, int winheight, double scale )
cvSize	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvSize  cvSize( int width, int height )$/;"	f	signature:( int width, int height )
cvSize2D32f	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvSize2D32f  cvSize2D32f( double width, double height )$/;"	f	signature:( double width, double height )
cvSlice	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvSlice  cvSlice( int start, int end )$/;"	f	signature:( int start, int end )
cvSliceLength	/usr/include/opencv/cxcore.h	/^CVAPI(int) cvSliceLength( CvSlice slice, const CvSeq* seq );$/;"	p	signature:( CvSlice slice, const CvSeq* seq )
cvSmooth	/usr/include/opencv/cv.h	/^CVAPI(void) cvSmooth( const CvArr* src, CvArr* dst,$/;"	p	signature:( const CvArr* src, CvArr* dst, int smoothtype CV_DEFAULT(CV_GAUSSIAN), int param1 CV_DEFAULT(3), int param2 CV_DEFAULT(0), double param3 CV_DEFAULT(0), double param4 CV_DEFAULT(0))
cvSnakeImage	/usr/include/opencv/cv.h	/^CVAPI(void)  cvSnakeImage( const IplImage* image, CvPoint* points,$/;"	p	signature:( const IplImage* image, CvPoint* points, int length, float* alpha, float* beta, float* gamma, int coeff_usage, CvSize win, CvTermCriteria criteria, int calc_gradient CV_DEFAULT(1))
cvSobel	/usr/include/opencv/cv.h	/^CVAPI(void) cvSobel( const CvArr* src, CvArr* dst,$/;"	p	signature:( const CvArr* src, CvArr* dst, int xorder, int yorder, int aperture_size CV_DEFAULT(3))
cvSolve	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvSolve( const CvArr* src1, const CvArr* src2, CvArr* dst,$/;"	p	signature:( const CvArr* src1, const CvArr* src2, CvArr* dst, int method CV_DEFAULT(CV_LU))
cvSolveCubic	/usr/include/opencv/cxcore.h	/^CVAPI(int) cvSolveCubic( const CvMat* coeffs, CvMat* roots );$/;"	p	signature:( const CvMat* coeffs, CvMat* roots )
cvSplit	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvSplit( const CvArr* src, CvArr* dst0, CvArr* dst1,$/;"	p	signature:( const CvArr* src, CvArr* dst0, CvArr* dst1, CvArr* dst2, CvArr* dst3 )
cvSqrt	/usr/include/opencv/cxtypes.h	262;"	d
cvSquareAcc	/usr/include/opencv/cv.h	/^CVAPI(void)  cvSquareAcc( const CvArr* image, CvArr* sqsum,$/;"	p	signature:( const CvArr* image, CvArr* sqsum, const CvArr* mask CV_DEFAULT(NULL) )
cvSquareAccMask	/usr/include/opencv/cvcompat.h	119;"	d
cvStackAlloc	/usr/include/opencv/cxmisc.h	138;"	d
cvStartAppendToSeq	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvStartAppendToSeq( CvSeq* seq, CvSeqWriter* writer );$/;"	p	signature:( CvSeq* seq, CvSeqWriter* writer )
cvStartFindContours	/usr/include/opencv/cv.h	/^CVAPI(CvContourScanner)  cvStartFindContours( CvArr* image, CvMemStorage* storage,$/;"	p	signature:( CvArr* image, CvMemStorage* storage, int header_size CV_DEFAULT(sizeof(CvContour)), int mode CV_DEFAULT(CV_RETR_LIST), int method CV_DEFAULT(CV_CHAIN_APPROX_SIMPLE), CvPoint offset CV_DEFAULT(cvPoint(0,0)))
cvStartNextStream	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvStartNextStream( CvFileStorage* fs );$/;"	p	signature:( CvFileStorage* fs )
cvStartReadChainPoints	/usr/include/opencv/cv.h	/^CVAPI(void) cvStartReadChainPoints( CvChain* chain, CvChainPtReader* reader );$/;"	p	signature:( CvChain* chain, CvChainPtReader* reader )
cvStartReadRawData	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvStartReadRawData( const CvFileStorage* fs, const CvFileNode* src,$/;"	p	signature:( const CvFileStorage* fs, const CvFileNode* src, CvSeqReader* reader )
cvStartReadSeq	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvStartReadSeq( const CvSeq* seq, CvSeqReader* reader,$/;"	p	signature:( const CvSeq* seq, CvSeqReader* reader, int reverse CV_DEFAULT(0) )
cvStartScanGraph	/usr/include/opencv/cvcompat.h	/^CV_INLINE void  cvStartScanGraph( CvGraph* graph, CvGraphScanner* scanner,$/;"	f	signature:( CvGraph* graph, CvGraphScanner* scanner, CvGraphVtx* vtx CV_DEFAULT(NULL), int mask CV_DEFAULT(CV_GRAPH_ALL_ITEMS))
cvStartWindowThread	/usr/include/opencv/highgui.h	/^CVAPI(int) cvStartWindowThread( void );$/;"	p	signature:( void )
cvStartWriteSeq	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvStartWriteSeq( int seq_flags, int header_size,$/;"	p	signature:( int seq_flags, int header_size, int elem_size, CvMemStorage* storage, CvSeqWriter* writer )
cvStartWriteStruct	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvStartWriteStruct( CvFileStorage* fs, const char* name,$/;"	p	signature:( CvFileStorage* fs, const char* name, int struct_flags, const char* type_name CV_DEFAULT(NULL), CvAttrList attributes CV_DEFAULT(cvAttrList()))
cvStdErrReport	/usr/include/opencv/cxcore.h	/^CVAPI(int) cvStdErrReport( int status, const char* func_name, const char* err_msg,$/;"	p	signature:( int status, const char* func_name, const char* err_msg, const char* file_name, int line, void* userdata )
cvSub	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvSub( const CvArr* src1, const CvArr* src2, CvArr* dst,$/;"	p	signature:( const CvArr* src1, const CvArr* src2, CvArr* dst, const CvArr* mask CV_DEFAULT(NULL))
cvSubRS	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvSubRS( const CvArr* src, CvScalar value, CvArr* dst,$/;"	p	signature:( const CvArr* src, CvScalar value, CvArr* dst, const CvArr* mask CV_DEFAULT(NULL))
cvSubS	/usr/include/opencv/cxcore.h	/^CV_INLINE  void  cvSubS( const CvArr* src, CvScalar value, CvArr* dst,$/;"	f	signature:( const CvArr* src, CvScalar value, CvArr* dst, const CvArr* mask CV_DEFAULT(NULL))
cvSubdiv2DEdgeDst	/usr/include/opencv/cv.h	/^CV_INLINE  CvSubdiv2DPoint*  cvSubdiv2DEdgeDst( CvSubdiv2DEdge edge )$/;"	f	signature:( CvSubdiv2DEdge edge )
cvSubdiv2DEdgeOrg	/usr/include/opencv/cv.h	/^CV_INLINE  CvSubdiv2DPoint*  cvSubdiv2DEdgeOrg( CvSubdiv2DEdge edge )$/;"	f	signature:( CvSubdiv2DEdge edge )
cvSubdiv2DGetEdge	/usr/include/opencv/cv.h	/^CV_INLINE  CvSubdiv2DEdge  cvSubdiv2DGetEdge( CvSubdiv2DEdge edge, CvNextEdgeType type )$/;"	f	signature:( CvSubdiv2DEdge edge, CvNextEdgeType type )
cvSubdiv2DLocate	/usr/include/opencv/cv.h	/^CVAPI(CvSubdiv2DPointLocation)  cvSubdiv2DLocate($/;"	p	signature:( CvSubdiv2D* subdiv, CvPoint2D32f pt, CvSubdiv2DEdge* edge, CvSubdiv2DPoint** vertex CV_DEFAULT(NULL) )
cvSubdiv2DNextEdge	/usr/include/opencv/cv.h	/^CV_INLINE  CvSubdiv2DEdge  cvSubdiv2DNextEdge( CvSubdiv2DEdge edge )$/;"	f	signature:( CvSubdiv2DEdge edge )
cvSubdiv2DRotateEdge	/usr/include/opencv/cv.h	/^CV_INLINE  CvSubdiv2DEdge  cvSubdiv2DRotateEdge( CvSubdiv2DEdge edge, int rotate )$/;"	f	signature:( CvSubdiv2DEdge edge, int rotate )
cvSubdiv2DSymEdge	/usr/include/opencv/cv.h	/^CV_INLINE  CvSubdiv2DEdge  cvSubdiv2DSymEdge( CvSubdiv2DEdge edge )$/;"	f	signature:( CvSubdiv2DEdge edge )
cvSubdivDelaunay2DInsert	/usr/include/opencv/cv.h	/^CVAPI(CvSubdiv2DPoint*)  cvSubdivDelaunay2DInsert( CvSubdiv2D* subdiv, CvPoint2D32f pt);$/;"	p	signature:( CvSubdiv2D* subdiv, CvPoint2D32f pt)
cvSubstituteContour	/usr/include/opencv/cv.h	/^CVAPI(void)   cvSubstituteContour( CvContourScanner scanner, CvSeq* new_contour );$/;"	p	signature:( CvContourScanner scanner, CvSeq* new_contour )
cvSum	/usr/include/opencv/cxcore.h	/^CVAPI(CvScalar)  cvSum( const CvArr* arr );$/;"	p	signature:( const CvArr* arr )
cvSumPixels	/usr/include/opencv/cvcompat.h	/^CV_INLINE double  cvSumPixels( const CvArr* image )$/;"	f	signature:( const CvArr* image )
cvT	/usr/include/opencv/cxcore.h	721;"	d
cvTermCriteria	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvTermCriteria  cvTermCriteria( int type, int max_iter, double epsilon )$/;"	f	signature:( int type, int max_iter, double epsilon )
cvTestSeqAddIntensityVariation	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS void cvTestSeqAddIntensityVariation(CvTestSeq* pTestSeq, float DI_per_frame, float MinI, float MaxI);$/;"	p	signature:(CvTestSeq* pTestSeq, float DI_per_frame, float MinI, float MaxI)
cvTestSeqAddNoise	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS void cvTestSeqAddNoise(CvTestSeq* pTestSeq, int noise_type = CV_NOISE_NONE, double noise_ampl = 0);$/;"	p	signature:(CvTestSeq* pTestSeq, int noise_type = CV_NOISE_NONE, double noise_ampl = 0)
cvTestSeqFrameNum	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS int cvTestSeqFrameNum(CvTestSeq* pTestSeq);$/;"	p	signature:(CvTestSeq* pTestSeq)
cvTestSeqGetFGMask	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS IplImage* cvTestSeqGetFGMask(CvTestSeq* pTestSeq);$/;"	p	signature:(CvTestSeq* pTestSeq)
cvTestSeqGetImage	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS IplImage* cvTestSeqGetImage(CvTestSeq* pTestSeq);$/;"	p	signature:(CvTestSeq* pTestSeq)
cvTestSeqGetImageSize	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS CvSize cvTestSeqGetImageSize(CvTestSeq* pTestSeq);$/;"	p	signature:(CvTestSeq* pTestSeq)
cvTestSeqGetObjectNum	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS int cvTestSeqGetObjectNum(CvTestSeq* pTestSeq);$/;"	p	signature:(CvTestSeq* pTestSeq)
cvTestSeqGetObjectPos	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS int cvTestSeqGetObjectPos(CvTestSeq* pTestSeq, int ObjIndex, CvPoint2D32f* pPos);$/;"	p	signature:(CvTestSeq* pTestSeq, int ObjIndex, CvPoint2D32f* pPos)
cvTestSeqGetObjectSize	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS int cvTestSeqGetObjectSize(CvTestSeq* pTestSeq, int ObjIndex, CvPoint2D32f* pSize);$/;"	p	signature:(CvTestSeq* pTestSeq, int ObjIndex, CvPoint2D32f* pSize)
cvTestSeqQueryFrame	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS IplImage* cvTestSeqQueryFrame(CvTestSeq* pTestSeq);$/;"	p	signature:(CvTestSeq* pTestSeq)
cvTestSeqSetFrame	/usr/include/opencv/cvvidsurv.hpp	/^CV_EXPORTS void cvTestSeqSetFrame(CvTestSeq* pTestSeq, int n);$/;"	p	signature:(CvTestSeq* pTestSeq, int n)
cvThreshHist	/usr/include/opencv/cv.h	/^CVAPI(void)  cvThreshHist( CvHistogram* hist, double threshold );$/;"	p	signature:( CvHistogram* hist, double threshold )
cvThreshold	/usr/include/opencv/cv.h	/^CVAPI(void)  cvThreshold( const CvArr*  src, CvArr*  dst,$/;"	p	signature:( const CvArr* src, CvArr* dst, double threshold, double max_value, int threshold_type )
cvTrace	/usr/include/opencv/cxcore.h	/^CVAPI(CvScalar) cvTrace( const CvArr* mat );$/;"	p	signature:( const CvArr* mat )
cvTrackFace	/usr/include/opencv/cvaux.h	/^CVAPI(int) cvTrackFace( CvFaceTracker* pFaceTracker, IplImage* imgGray,$/;"	p	signature:( CvFaceTracker* pFaceTracker, IplImage* imgGray, CvRect* pRects, int nRects, CvPoint* ptRotate, double* dbAngleRotate)
cvTransform	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvTransform( const CvArr* src, CvArr* dst,$/;"	p	signature:( const CvArr* src, CvArr* dst, const CvMat* transmat, const CvMat* shiftvec CV_DEFAULT(NULL))
cvTranspose	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvTranspose( const CvArr* src, CvArr* dst );$/;"	p	signature:( const CvArr* src, CvArr* dst )
cvTreeToNodeSeq	/usr/include/opencv/cxcore.h	/^CVAPI(CvSeq*) cvTreeToNodeSeq( const void* first, int header_size,$/;"	p	signature:( const void* first, int header_size, CvMemStorage* storage )
cvTriangleArea	/usr/include/opencv/cv.h	/^CV_INLINE  double  cvTriangleArea( CvPoint2D32f a, CvPoint2D32f b, CvPoint2D32f c )$/;"	f	signature:( CvPoint2D32f a, CvPoint2D32f b, CvPoint2D32f c )
cvTypeOf	/usr/include/opencv/cxcore.h	/^CVAPI(CvTypeInfo*) cvTypeOf( const void* struct_ptr );$/;"	p	signature:( const void* struct_ptr )
cvUnDistort	/usr/include/opencv/cvcompat.h	/^CV_INLINE void  cvUnDistort( const CvArr* src, CvArr* dst,$/;"	f	signature:( const CvArr* src, CvArr* dst, const CvArr* undistortion_map, int CV_UNREFERENCED(interpolate) )
cvUnDistortOnce	/usr/include/opencv/cvcompat.h	/^CV_INLINE void cvUnDistortOnce( const CvArr* src, CvArr* dst,$/;"	f	signature:( const CvArr* src, CvArr* dst, const float* intrinsic_matrix, const float* distortion_coeffs, int CV_UNREFERENCED(interpolate) )
cvUndistort2	/usr/include/opencv/cv.h	/^CVAPI(void) cvUndistort2( const CvArr* src, CvArr* dst,$/;"	p	signature:( const CvArr* src, CvArr* dst, const CvMat* intrinsic_matrix, const CvMat* distortion_coeffs )
cvUniformImgSegm	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvUniformImgSegm( CvImgObsInfo* obs_info, CvEHMM* ehmm );$/;"	p	signature:( CvImgObsInfo* obs_info, CvEHMM* ehmm )
cvUnregisterType	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvUnregisterType( const char* type_name );$/;"	p	signature:( const char* type_name )
cvUnsupportedFormat	/usr/include/opencv/cxmisc.h	237;"	d
cvUpdateBGStatModel	/usr/include/opencv/cvaux.h	/^CV_INLINE int cvUpdateBGStatModel( IplImage* current_frame, CvBGStatModel*  bg_model )$/;"	f	signature:( IplImage* current_frame, CvBGStatModel* bg_model )
cvUpdateMHIByTime	/usr/include/opencv/cvcompat.h	116;"	d
cvUpdateMotionHistory	/usr/include/opencv/cv.h	/^CVAPI(void)    cvUpdateMotionHistory( const CvArr* silhouette, CvArr* mhi,$/;"	p	signature:( const CvArr* silhouette, CvArr* mhi, double timestamp, double duration )
cvUseOptimized	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvUseOptimized( int on_off );$/;"	p	signature:( int on_off )
cvVoronoiDiagramFromContour	/usr/include/opencv/cvaux.h	/^CVAPI(int)  cvVoronoiDiagramFromContour(CvSeq* ContourSeq,$/;"	p	signature:(CvSeq* ContourSeq, CvVoronoiDiagram2D** VoronoiDiagram, CvMemStorage* VoronoiStorage, CvLeeParameters contour_type CV_DEFAULT(CV_LEE_INT), int contour_orientation CV_DEFAULT(-1), int attempt_number CV_DEFAULT(10))
cvVoronoiDiagramFromImage	/usr/include/opencv/cvaux.h	/^CVAPI(int)  cvVoronoiDiagramFromImage(IplImage* pImage,$/;"	p	signature:(IplImage* pImage, CvSeq** ContourSeq, CvVoronoiDiagram2D** VoronoiDiagram, CvMemStorage* VoronoiStorage, CvLeeParameters regularization_method CV_DEFAULT(CV_LEE_NON), float approx_precision CV_DEFAULT(CV_LEE_AUTO))
cvWaitKey	/usr/include/opencv/highgui.h	/^CVAPI(int) cvWaitKey(int delay CV_DEFAULT(0));$/;"	p	signature:(int delay CV_DEFAULT(0))
cvWarpAffine	/usr/include/opencv/cv.h	/^CVAPI(void)  cvWarpAffine( const CvArr* src, CvArr* dst, const CvMat* map_matrix,$/;"	p	signature:( const CvArr* src, CvArr* dst, const CvMat* map_matrix, int flags CV_DEFAULT(CV_INTER_LINEAR+CV_WARP_FILL_OUTLIERS), CvScalar fillval CV_DEFAULT(cvScalarAll(0)) )
cvWarpPerspective	/usr/include/opencv/cv.h	/^CVAPI(void)  cvWarpPerspective( const CvArr* src, CvArr* dst, const CvMat* map_matrix,$/;"	p	signature:( const CvArr* src, CvArr* dst, const CvMat* map_matrix, int flags CV_DEFAULT(CV_INTER_LINEAR+CV_WARP_FILL_OUTLIERS), CvScalar fillval CV_DEFAULT(cvScalarAll(0)) )
cvWarpPerspectiveQMatrix	/usr/include/opencv/cvcompat.h	896;"	d
cvWatershed	/usr/include/opencv/cv.h	/^CVAPI(void) cvWatershed( const CvArr* image, CvArr* markers );$/;"	p	signature:( const CvArr* image, CvArr* markers )
cvWrite	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvWrite( CvFileStorage* fs, const char* name, const void* ptr,$/;"	p	signature:( CvFileStorage* fs, const char* name, const void* ptr, CvAttrList attributes CV_DEFAULT(cvAttrList()))
cvWriteComment	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvWriteComment( CvFileStorage* fs, const char* comment,$/;"	p	signature:( CvFileStorage* fs, const char* comment, int eol_comment )
cvWriteFileNode	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvWriteFileNode( CvFileStorage* fs, const char* new_node_name,$/;"	p	signature:( CvFileStorage* fs, const char* new_node_name, const CvFileNode* node, int embed )
cvWriteFrame	/usr/include/opencv/highgui.h	/^CVAPI(int) cvWriteFrame( CvVideoWriter* writer, const IplImage* image );$/;"	p	signature:( CvVideoWriter* writer, const IplImage* image )
cvWriteInt	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvWriteInt( CvFileStorage* fs, const char* name, int value );$/;"	p	signature:( CvFileStorage* fs, const char* name, int value )
cvWriteRawData	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvWriteRawData( CvFileStorage* fs, const void* src,$/;"	p	signature:( CvFileStorage* fs, const void* src, int len, const char* dt )
cvWriteReal	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvWriteReal( CvFileStorage* fs, const char* name, double value );$/;"	p	signature:( CvFileStorage* fs, const char* name, double value )
cvWriteString	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvWriteString( CvFileStorage* fs, const char* name,$/;"	p	signature:( CvFileStorage* fs, const char* name, const char* str, int quote CV_DEFAULT(0) )
cvWriteStruct	/usr/include/opencv/cvvidsurv.hpp	/^void inline cvWriteStruct(CvFileStorage* fs, char* name, void* addr, char* desc, int num=1)$/;"	f	signature:(CvFileStorage* fs, char* name, void* addr, char* desc, int num=1)
cvWriteToAVI	/usr/include/opencv/highgui.h	316;"	d
cvXor	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvXor( const CvArr* src1, const CvArr* src2,$/;"	p	signature:( const CvArr* src1, const CvArr* src2, CvArr* dst, const CvArr* mask CV_DEFAULT(NULL))
cvXorS	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvXorS( const CvArr* src, CvScalar value,$/;"	p	signature:( const CvArr* src, CvScalar value, CvArr* dst, const CvArr* mask CV_DEFAULT(NULL))
cvZero	/usr/include/opencv/cxcore.h	450;"	d
cv_Tn	/usr/include/opencv/ml.h	/^    int* cv_Tn;$/;"	m	struct:CvDTreeNode	access:public
cv_folds	/usr/include/opencv/ml.h	/^    int   cv_folds;$/;"	m	struct:CvDTreeParams	access:public
cv_heap	/usr/include/opencv/ml.h	/^    CvSet* cv_heap;$/;"	m	struct:CvDTreeTrainData	access:public
cv_node_error	/usr/include/opencv/ml.h	/^    double* cv_node_error;$/;"	m	struct:CvDTreeNode	access:public
cv_node_risk	/usr/include/opencv/ml.h	/^    double* cv_node_risk;$/;"	m	struct:CvDTreeNode	access:public
cv_stricmp	/usr/include/opencv/cvvidsurv.hpp	52;"	d
cv_stricmp	/usr/include/opencv/cvvidsurv.hpp	55;"	d
cv_strnicmp	/usr/include/opencv/cvvidsurv.hpp	53;"	d
cv_strnicmp	/usr/include/opencv/cvvidsurv.hpp	56;"	d
cvbCartToPolar	/usr/include/opencv/cvcompat.h	/^CV_INLINE void  cvbCartToPolar( const float* y, const float* x,$/;"	f	signature:( const float* y, const float* x, float* magnitude, float* angle, int len )
cvbFastArctan	/usr/include/opencv/cvcompat.h	/^CV_INLINE void  cvbFastArctan( const float* y, const float* x,$/;"	f	signature:( const float* y, const float* x, float* angle, int len )
cvbFastExp	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvbFastExp( const float* x, double* y, int len )$/;"	f	signature:( const float* x, double* y, int len )
cvbFastLog	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvbFastLog( const double* x, float* y, int len )$/;"	f	signature:( const double* x, float* y, int len )
cvbInvSqrt	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvbInvSqrt( const float* x, float* y, int len )$/;"	f	signature:( const float* x, float* y, int len )
cvbRand	/usr/include/opencv/cvcompat.h	/^CV_INLINE void cvbRand( CvRandState* state, float* dst, int len )$/;"	f	signature:( CvRandState* state, float* dst, int len )
cvbReciprocal	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvbReciprocal( const float* x, float* y, int len )$/;"	f	signature:( const float* x, float* y, int len )
cvbSqrt	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvbSqrt( const float* x, float* y, int len )$/;"	f	signature:( const float* x, float* y, int len )
cvmAdd	/usr/include/opencv/cvcompat.h	363;"	d
cvmAlloc	/usr/include/opencv/cvcompat.h	102;"	d
cvmAllocArray	/usr/include/opencv/cvcompat.h	104;"	d
cvmCopy	/usr/include/opencv/cvcompat.h	365;"	d
cvmCrossProduct	/usr/include/opencv/cvcompat.h	371;"	d
cvmDet	/usr/include/opencv/cvcompat.h	375;"	d
cvmDotProduct	/usr/include/opencv/cvcompat.h	370;"	d
cvmEigenVV	/usr/include/opencv/cvcompat.h	374;"	d
cvmFree	/usr/include/opencv/cvcompat.h	103;"	d
cvmFreeArray	/usr/include/opencv/cvcompat.h	105;"	d
cvmGet	/usr/include/opencv/cxtypes.h	/^CV_INLINE  double  cvmGet( const CvMat* mat, int row, int col )$/;"	f	signature:( const CvMat* mat, int row, int col )
cvmInvert	/usr/include/opencv/cvcompat.h	368;"	d
cvmMahalanobis	/usr/include/opencv/cvcompat.h	369;"	d
cvmMul	/usr/include/opencv/cvcompat.h	366;"	d
cvmMulTransposed	/usr/include/opencv/cvcompat.h	373;"	d
cvmPerspectiveProject	/usr/include/opencv/cvcompat.h	/^CV_INLINE void cvmPerspectiveProject( const CvMat* mat, const CvArr* src, CvArr* dst )$/;"	f	signature:( const CvMat* mat, const CvArr* src, CvArr* dst )
cvmScale	/usr/include/opencv/cvcompat.h	376;"	d
cvmSet	/usr/include/opencv/cxtypes.h	/^CV_INLINE  void  cvmSet( CvMat* mat, int row, int col, double value )$/;"	f	signature:( CvMat* mat, int row, int col, double value )
cvmSetIdentity	/usr/include/opencv/cvcompat.h	362;"	d
cvmSetZero	/usr/include/opencv/cvcompat.h	361;"	d
cvmSub	/usr/include/opencv/cvcompat.h	364;"	d
cvmTrace	/usr/include/opencv/cvcompat.h	372;"	d
cvmTranspose	/usr/include/opencv/cvcompat.h	367;"	d
cvvAddSearchPath	/usr/include/opencv/highgui.h	326;"	d
cvvConvertImage	/usr/include/opencv/highgui.h	329;"	d
cvvCreateTrackbar	/usr/include/opencv/highgui.h	323;"	d
cvvDestroyWindow	/usr/include/opencv/highgui.h	322;"	d
cvvInitSystem	/usr/include/opencv/highgui.h	318;"	d
cvvLoadImage	/usr/include/opencv/highgui.h	324;"	d
cvvNamedWindow	/usr/include/opencv/highgui.h	319;"	d
cvvResizeWindow	/usr/include/opencv/highgui.h	321;"	d
cvvSaveImage	/usr/include/opencv/highgui.h	325;"	d
cvvShowImage	/usr/include/opencv/highgui.h	320;"	d
cvvWaitKey	/usr/include/opencv/highgui.h	327;"	d
cvvWaitKeyEx	/usr/include/opencv/highgui.h	328;"	d
cyrillic	/usr/include/opencv/cxcore.h	/^    const int*  cyrillic;$/;"	m	struct:CvFont	access:public
d	gui.h	/^	double d; $/;"	m	struct:GUI_Panel	access:public
data	/usr/include/opencv/cvaux.h	/^    void* data;$/;"	m	union:__anon1	access:public
data	/usr/include/opencv/cxcore.hpp	/^    const uchar* data() const { return image ? (const uchar*)image->imageData : 0; }$/;"	f	class:CvImage	access:public	signature:() const
data	/usr/include/opencv/cxcore.hpp	/^    const uchar* data() const { return matrix ? matrix->data.ptr : 0; }$/;"	f	class:CvMatrix	access:public	signature:() const
data	/usr/include/opencv/cxcore.hpp	/^    uchar* data() { return image ? (uchar*)image->imageData : 0; }$/;"	f	class:CvImage	access:public	signature:()
data	/usr/include/opencv/cxcore.hpp	/^    uchar* data() { return matrix ? matrix->data.ptr : 0; }$/;"	f	class:CvMatrix	access:public	signature:()
data	/usr/include/opencv/cxtypes.h	/^    char*  data;              \/* pointer to the first element of the block *\/$/;"	m	struct:CvSeqBlock	access:public
data	/usr/include/opencv/cxtypes.h	/^    } data;$/;"	m	struct:CvFileNode	typeref:union:CvFileNode::__anon19	access:public
data	/usr/include/opencv/cxtypes.h	/^    } data;$/;"	m	struct:CvMat	typeref:union:CvMat::__anon13	access:public
data	/usr/include/opencv/cxtypes.h	/^    } data;$/;"	m	struct:CvMatND	typeref:union:CvMatND::__anon16	access:public
data	/usr/include/opencv/ml.h	/^    CvDTreeTrainData* data;$/;"	m	class:CvBoost	access:protected
data	/usr/include/opencv/ml.h	/^    CvDTreeTrainData* data;$/;"	m	class:CvDTree	access:protected
data	/usr/include/opencv/ml.h	/^    CvDTreeTrainData* data;$/;"	m	class:CvRTrees	access:protected
data	/usr/include/opencv/ml.h	/^    float* data;$/;"	m	struct:CvSVMKernelRow	access:public
data	/usr/include/opencv/ml.h	/^    } data;$/;"	m	struct:CvVectors	typeref:union:CvVectors::__anon20	access:public
dataOrder	/usr/include/opencv/cxtypes.h	/^    int  dataOrder;     \/* 0 - interleaved color channels, 1 - separate color channels.$/;"	m	struct:_IplImage	access:public
data_origin	geometry_structures.h	/^	GEOMETRY_DATA_ORIGIN data_origin;    \/\/ where does this point come from (automatically generated, user submitted, ...)$/;"	m	struct:Point	access:public
data_root	/usr/include/opencv/ml.h	/^    CvDTreeNode* data_root;$/;"	m	struct:CvDTreeTrainData	access:public
db	/usr/include/opencv/cxtypes.h	/^        double* db;$/;"	m	union:CvMat::__anon13	access:public
db	/usr/include/opencv/cxtypes.h	/^        double* db;$/;"	m	union:CvMatND::__anon16	access:public
db	/usr/include/opencv/ml.h	/^        double** db;$/;"	m	union:CvVectors::__anon20	access:public
debug	core_debug.cpp	/^void debug(const char * message) $/;"	f	signature:(const char * message)
debug	core_debug.h	/^void debug(const char * message);$/;"	p	signature:(const char * message)
debug_initialize	application.cpp	/^bool debug_initialize()$/;"	f	signature:()
debug_initialize	application.h	/^bool debug_initialize();$/;"	p	signature:()
debug_print_Ps	tool_selection.cpp	/^void debug_print_Ps()$/;"	f	signature:()
debug_print_Ps	tool_selection.h	/^void debug_print_Ps();$/;"	p	signature:()
debug_save_initial_solution	tool_selection.cpp	/^void debug_save_initial_solution() $/;"	f	signature:()
debug_save_initial_solution	tool_selection.h	/^void debug_save_initial_solution();$/;"	p	signature:()
debug_save_vertices	tool_selection.cpp	/^void debug_save_vertices()$/;"	f	signature:()
debug_save_vertices	tool_selection.h	/^void debug_save_vertices();$/;"	p	signature:()
debugging_title	gui.h	/^	const char * debugging_title;$/;"	m	struct:GUI_Panel	access:public
decision_func	/usr/include/opencv/ml.h	/^    CvSVMDecisionFunc* decision_func;$/;"	m	class:CvSVM	access:protected
decoration	ui_context.h	/^	Context_Decoration decoration;$/;"	m	struct:Context_Item	access:public
default_func_addr	/usr/include/opencv/cxtypes.h	/^    void* default_func_addr;$/;"	m	struct:CvPluginFuncInfo	access:public
default_model_name	/usr/include/opencv/ml.h	/^    const char* default_model_name;$/;"	m	class:CvStatModel	access:protected
deg2rad	core_math_routines.cpp	/^double deg2rad(const double d) $/;"	f	signature:(const double d)
deg2rad	core_math_routines.h	/^double deg2rad(const double d);$/;"	p	signature:(const double d)
degree	/usr/include/opencv/ml.h	/^    double      degree; \/\/ for poly$/;"	m	struct:CvSVMParams	access:public
delay	ui_context.h	/^	double delay, timer;$/;"	m	struct:Context_State	access:public
delta	/usr/include/opencv/cvaux.h	/^    float         alpha1, alpha2, alpha3, delta, T, minArea;$/;"	m	struct:CvFGDStatModelParams	access:public
delta_time	application.cpp	/^double delta_time; \/\/ extern$/;"	v
deltas	/usr/include/opencv/cvtypes.h	/^    char      deltas[8][2];$/;"	m	struct:CvChainPtReader	access:public
depth	/usr/include/opencv/cvtypes.h	/^    float depth; \/* distance between the farthest point and the convex hull *\/$/;"	m	struct:CvConvexityDefect	access:public
depth	/usr/include/opencv/cxcore.hpp	/^    int depth() const { return image ? image->depth : 0; }$/;"	f	class:CvImage	access:public	signature:() const
depth	/usr/include/opencv/cxcore.hpp	/^    int depth() const { return matrix ? CV_MAT_DEPTH(matrix->type) : 0; }$/;"	f	class:CvMatrix	access:public	signature:() const
depth	/usr/include/opencv/cxtypes.h	/^    int  depth;         \/* pixel depth in bits: IPL_DEPTH_8U, IPL_DEPTH_8S, IPL_DEPTH_16S,$/;"	m	struct:_IplImage	access:public
depth	/usr/include/opencv/ml.h	/^    int depth;$/;"	m	struct:CvDTreeNode	access:public
depth_point	/usr/include/opencv/cvtypes.h	/^    CvPoint* depth_point; \/* the farthest from the convex hull point within the defect *\/$/;"	m	struct:CvConvexityDefect	access:public
description	core_debug.cpp	/^	const char * description, * file, * line;$/;"	m	struct:Allocated_Memory	file:	access:public
detach	/usr/include/opencv/cxcore.hpp	/^    void detach()$/;"	f	class:CvImage	access:public	signature:()
detected_edges	geometry_structures.cpp	/^std::map<int, std::map<int, unsigned int> > detected_edges; \/\/ debug$/;"	v
dim	/usr/include/opencv/cxtypes.h	/^    dim[CV_MAX_DIM];$/;"	m	struct:CvMatND	typeref:struct:CvMatND::__anon17	access:public
dims	/usr/include/opencv/cxcore.h	/^    int dims; \/* number of dimensions to iterate *\/$/;"	m	struct:CvNArrayIterator	access:public
dims	/usr/include/opencv/cxtypes.h	/^    int dims;$/;"	m	struct:CvMatND	access:public
dims	/usr/include/opencv/cxtypes.h	/^    int dims;$/;"	m	struct:CvSparseMat	access:public
dims	/usr/include/opencv/ml.h	/^    int dims, count;$/;"	m	struct:CvVectors	access:public
direction	/usr/include/opencv/ml.h	/^    CvMat* direction;$/;"	m	struct:CvDTreeTrainData	access:public
directory	geometry_loader.h	/^	char * filename, * directory;$/;"	m	struct:geometry_loader_SAX_state	access:public
disabled	gui.h	/^	bool focus, disabled;$/;"	m	struct:GUI_Panel	access:public
distance_sq_2	core_math_routines.cpp	/^double distance_sq_2(const double * a, const double * b)$/;"	f	signature:(const double * a, const double * b)
distance_sq_2	core_math_routines.cpp	/^double distance_sq_2(const double x1, const double y1, const double x2, const double y2)$/;"	f	signature:(const double x1, const double y1, const double x2, const double y2)
distance_sq_2	core_math_routines.h	/^double distance_sq_2(const double * a, const double * b);$/;"	p	signature:(const double * a, const double * b)
distance_sq_2	core_math_routines.h	/^double distance_sq_2(const double x1, const double y1, const double x2, const double y2);$/;"	p	signature:(const double x1, const double y1, const double x2, const double y2)
distance_sq_3	core_math_routines.cpp	/^double distance_sq_3(const double * a, const double * b)$/;"	f	signature:(const double * a, const double * b)
distance_sq_3	core_math_routines.h	/^double distance_sq_3(const double * a, const double * b);$/;"	p	signature:(const double * a, const double * b)
distortion	/usr/include/opencv/cvaux.h	/^    float   distortion[4]; \/* distortion coefficients - two coefficients for radial distortion$/;"	m	struct:CvCamera	access:public
distortion	/usr/include/opencv/cvaux.h	/^    float distortion[4];$/;"	m	struct:__anon6	access:public
disttype	/usr/include/opencv/cvcompat.h	/^    int       disttype; \/* distribution type *\/$/;"	m	struct:CvRandState	access:public
div_glview	ui_state.h	/^		* window, * pane, * pane_tools, * div_tools, * div_glview, $/;"	m	struct:UI_State	access:public
div_selections	ui_state.h	/^		* div_selections, * div_tabs, * vbox_selections, * vbox_tabs, $/;"	m	struct:UI_State	access:public
div_tabs	ui_state.h	/^		* div_selections, * div_tabs, * vbox_selections, * vbox_tabs, $/;"	m	struct:UI_State	access:public
div_toolbar	ui_state.h	/^		* div_toolbar, * toolbar, * list;$/;"	m	struct:UI_State	access:public
div_tools	ui_state.h	/^		* window, * pane, * pane_tools, * div_tools, * div_glview, $/;"	m	struct:UI_State	access:public
do_train	/usr/include/opencv/ml.h	/^    virtual bool do_train( const CvMat* _subsample_idx );$/;"	p	class:CvDTree	access:protected	signature:( const CvMat* _subsample_idx )
done	core_image_loader.h	/^	bool done;$/;"	m	struct:Image_Loader_Request	access:public
dot_3	core_math_routines.cpp	/^double dot_3(const double * a, const double * b) $/;"	f	signature:(const double * a, const double * b)
dot_3	core_math_routines.h	/^double dot_3(const double * a, const double * b);$/;"	p	signature:(const double * a, const double * b)
dot_3xyz	core_math_routines.cpp	/^double dot_3xyz(const double * a, const double x, const double y, const double z) $/;"	f	signature:(const double * a, const double x, const double y, const double z)
dot_3xyz	core_math_routines.h	/^double dot_3xyz(const double * a, const double x, const double y, const double z);$/;"	p	signature:(const double * a, const double x, const double y, const double z)
dragging	tool_core.h	/^	Tool_Dragging_Event_Handler dragging; $/;"	m	struct:Tool	access:public
dragging_done	tool_core.h	/^	Tool_Dragging_Done_Event_Handler dragging_done;$/;"	m	struct:Tool	access:public
dst	/usr/include/opencv/cxcore.h	/^    CvGraphVtx* dst;       \/* current graph edge destination vertex *\/$/;"	m	struct:CvGraphScanner	access:public
dst_type	/usr/include/opencv/cv.hpp	/^    int min_depth, src_type, dst_type, work_type;$/;"	m	class:CvBaseImageFilter	access:protected
dualview	ui_state.h	/^	size_t dualview;$/;"	m	struct:UI_State	access:public
dualview_set	ui_state.h	/^	bool dualview_set;$/;"	m	struct:UI_State	access:public
dx	/usr/include/opencv/cxcore.h	/^    float       dx; \/* horizontal interval between letters *\/$/;"	m	struct:CvFont	access:public
dyn_found	core_structures.cpp	/^bool dyn_found(const size_t index)$/;"	f	signature:(const size_t index)
dyn_found	core_structures.h	/^bool dyn_found(const size_t index);$/;"	p	signature:(const size_t index)
edge	/usr/include/opencv/cxcore.h	/^    CvGraphEdge* edge;     \/* current edge *\/$/;"	m	struct:CvGraphScanner	access:public
edge_weights	/usr/include/opencv/cvaux.h	/^    float* edge_weights;$/;"	m	struct:CvCliqueFinder	access:public
effective_size	core_debug.cpp	/^	size_t effective_size;$/;"	m	struct:Allocated_Memory	file:	access:public
effective_x1	gui.h	/^	int effective_x1, effective_y1, effective_x2, effective_y2;$/;"	m	struct:GUI_Panel	access:public
effective_x2	gui.h	/^	int effective_x1, effective_y1, effective_x2, effective_y2;$/;"	m	struct:GUI_Panel	access:public
effective_y1	gui.h	/^	int effective_x1, effective_y1, effective_x2, effective_y2;$/;"	m	struct:GUI_Panel	access:public
effective_y2	gui.h	/^	int effective_x1, effective_y1, effective_x2, effective_y2;$/;"	m	struct:GUI_Panel	access:public
effectively_hidden	gui.h	/^		effectively_hidden \/\/ panel is hasn't been displayed in last rendering either because $/;"	m	struct:GUI_Panel	access:public
egvals	/usr/include/opencv/cvaux.h	/^    float egvals[2];$/;"	m	struct:CvContourOrientation	access:public
egvects	/usr/include/opencv/cvaux.h	/^    float egvects[4];$/;"	m	struct:CvContourOrientation	access:public
ehmm	/usr/include/opencv/cvaux.h	/^        struct CvEHMM* ehmm; \/* pointer to an embedded model or NULL, if it is a leaf *\/$/;"	m	union:CvEHMM::__anon2	typeref:struct:CvEHMM::__anon2::CvEHMM	access:public
el_shape	/usr/include/opencv/cv.hpp	/^    int el_shape;$/;"	m	class:CvMorphology	access:protected
el_sparse	/usr/include/opencv/cv.hpp	/^    uchar* el_sparse;$/;"	m	class:CvMorphology	access:protected
el_sparse_count	/usr/include/opencv/cv.hpp	/^    int el_sparse_count;$/;"	m	class:CvMorphology	access:protected
element	/usr/include/opencv/cv.hpp	/^    CvMat *element;$/;"	m	class:CvMorphology	access:protected
end	/usr/include/opencv/cvtypes.h	/^    CvPoint* end; \/* point of the contour where the defect ends *\/$/;"	m	struct:CvConvexityDefect	access:public
end	tool_core.h	/^	Tool_End_Event_Handler end;$/;"	m	struct:Tool	access:public
end1	/usr/include/opencv/cvvidsurv.hpp	/^    int end1,end2;$/;"	m	struct:CvTracksTimePos	access:public
end2	/usr/include/opencv/cvvidsurv.hpp	/^    int end1,end2;$/;"	m	struct:CvTracksTimePos	access:public
end_index	/usr/include/opencv/cxtypes.h	/^    int  start_index, end_index;$/;"	m	struct:CvSlice	access:public
ensemble	/usr/include/opencv/ml.h	/^    CvBoost* ensemble;$/;"	m	class:CvBoostTree	access:protected
enum_labels	tool_core.h	/^	const char * * enum_labels;$/;"	m	struct:Tool_Parameter	access:public
enum_widget	tool_core.h	/^	GUI_Panel * real_widget, * int_widget, * enum_widget, * bool_widget;$/;"	m	struct:Tool_Parameter	access:public
epipole	/usr/include/opencv/cvaux.h	/^    CvPoint3D32f epipole[2];$/;"	m	struct:CvStereoCamera	access:public
eps	/usr/include/opencv/ml.h	/^    double eps;$/;"	m	class:CvSVMSolver	access:public
epsilon	/usr/include/opencv/cxtypes.h	/^    double epsilon;$/;"	m	struct:CvTermCriteria	access:public
err	/usr/include/opencv/cxtypes.h	/^    int  err;$/;"	m	struct:CvLineIterator	access:public
error	core_state.h	/^	CORE_ERROR error;$/;"	m	struct:Core_State	access:public
error_cov_post	/usr/include/opencv/cvtypes.h	/^    CvMat* error_cov_post;      \/* posteriori error estimate covariance matrix (P(k)):$/;"	m	struct:CvKalman	access:public
error_cov_pre	/usr/include/opencv/cvtypes.h	/^    CvMat* error_cov_pre;       \/* priori error estimate covariance matrix (P'(k)):$/;"	m	struct:CvKalman	access:public
etalonParamCount	/usr/include/opencv/cvaux.h	/^    int     etalonParamCount;$/;"	m	class:CvCalibFilter	access:protected
etalonParams	/usr/include/opencv/cvaux.h	/^    double* etalonParams;$/;"	m	class:CvCalibFilter	access:protected
etalonPointCount	/usr/include/opencv/cvaux.h	/^    int     etalonPointCount;$/;"	m	class:CvCalibFilter	access:protected
etalonPoints	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f* etalonPoints;$/;"	m	class:CvCalibFilter	access:protected
etalonType	/usr/include/opencv/cvaux.h	/^    CvCalibEtalonType  etalonType;$/;"	m	class:CvCalibFilter	access:protected
event	gui.h	/^	SDL_Event * event;$/;"	m	struct:GUI_Context	access:public
event_cancelled	gui.h	/^	bool event_cancelled;$/;"	m	struct:GUI_Context	access:public
f	/usr/include/opencv/cxtypes.h	/^        double f; \/* scalar floating-point number *\/$/;"	m	union:CvFileNode::__anon19	access:public
f	/usr/include/opencv/cxtypes.h	/^    double f;$/;"	m	union:Cv64suf	access:public
f	/usr/include/opencv/cxtypes.h	/^    float f;$/;"	m	union:Cv32suf	access:public
f	geometry_structures.h	/^	double f;              \/\/ focal length $/;"	m	struct:Shot	access:public
f_param1	/usr/include/opencv/ml.h	/^    double f_param1, f_param2;$/;"	m	class:CvANN_MLP	access:protected
f_param2	/usr/include/opencv/ml.h	/^    double f_param1, f_param2;$/;"	m	class:CvANN_MLP	access:protected
fetched_int	tool_core.h	/^	int fetched_int;$/;"	m	struct:Tool_Parameter	access:public
fetched_real	tool_core.h	/^	double fetched_real; $/;"	m	struct:Tool_Parameter	access:public
file	core_debug.cpp	/^	const char * description, * file, * line;$/;"	m	struct:Allocated_Memory	file:	access:public
filename	core_image_loader.h	/^	const char * filename;$/;"	m	struct:Image_Loader_Shot	access:public
filename	geometry_loader.h	/^	char * filename, * directory;$/;"	m	struct:geometry_loader_SAX_state	access:public
fill_cyclic_buffer	/usr/include/opencv/cv.hpp	/^    int fill_cyclic_buffer( const uchar* src, int src_step,$/;"	p	class:CvMorphology	access:protected	signature:( const uchar* src, int src_step, int y0, int y1, int y2 )
fill_cyclic_buffer	/usr/include/opencv/cv.hpp	/^    virtual int fill_cyclic_buffer( const uchar* src, int src_step,$/;"	p	class:CvBaseImageFilter	access:protected	signature:( const uchar* src, int src_step, int y, int y1, int y2 )
film_back	geometry_structures.h	/^	double film_back;      \/\/ CCD size in mm$/;"	m	struct:Shot	access:public
finalized	tool_core.h	/^	bool finalized;$/;"	m	struct:Tools_State	access:public
find_best_split	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_best_split( CvDTreeNode* n );$/;"	p	class:CvDTree	access:protected	signature:( CvDTreeNode* n )
find_best_split	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_best_split( CvDTreeNode* n );$/;"	p	class:CvForestTree	access:protected	signature:( CvDTreeNode* n )
find_nearest	/usr/include/opencv/ml.h	/^    virtual float find_nearest( const CvMat* _samples, int k, CvMat* results=0,$/;"	p	class:CvKNearest	access:public	signature:( const CvMat* _samples, int k, CvMat* results=0, const float** neighbors=0, CvMat* neighbor_responses=0, CvMat* dist=0 ) const
find_neighbors_direct	/usr/include/opencv/ml.h	/^    virtual void find_neighbors_direct( const CvMat* _samples, int k, int start, int end,$/;"	p	class:CvKNearest	access:protected	signature:( const CvMat* _samples, int k, int start, int end, float* neighbor_responses, const float** neighbors, float* dist ) const
find_split_cat_class	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_split_cat_class( CvDTreeNode* n, int vi );$/;"	p	class:CvBoostTree	access:protected	signature:( CvDTreeNode* n, int vi )
find_split_cat_class	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_split_cat_class( CvDTreeNode* n, int vi );$/;"	p	class:CvDTree	access:protected	signature:( CvDTreeNode* n, int vi )
find_split_cat_reg	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_split_cat_reg( CvDTreeNode* n, int vi );$/;"	p	class:CvBoostTree	access:protected	signature:( CvDTreeNode* n, int vi )
find_split_cat_reg	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_split_cat_reg( CvDTreeNode* n, int vi );$/;"	p	class:CvDTree	access:protected	signature:( CvDTreeNode* n, int vi )
find_split_ord_class	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_split_ord_class( CvDTreeNode* n, int vi );$/;"	p	class:CvBoostTree	access:protected	signature:( CvDTreeNode* n, int vi )
find_split_ord_class	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_split_ord_class( CvDTreeNode* n, int vi );$/;"	p	class:CvDTree	access:protected	signature:( CvDTreeNode* n, int vi )
find_split_ord_reg	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_split_ord_reg( CvDTreeNode* n, int vi );$/;"	p	class:CvBoostTree	access:protected	signature:( CvDTreeNode* n, int vi )
find_split_ord_reg	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_split_ord_reg( CvDTreeNode* n, int vi );$/;"	p	class:CvDTree	access:protected	signature:( CvDTreeNode* n, int vi )
find_surrogate_split_cat	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_surrogate_split_cat( CvDTreeNode* n, int vi );$/;"	p	class:CvBoostTree	access:protected	signature:( CvDTreeNode* n, int vi )
find_surrogate_split_cat	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_surrogate_split_cat( CvDTreeNode* n, int vi );$/;"	p	class:CvDTree	access:protected	signature:( CvDTreeNode* n, int vi )
find_surrogate_split_ord	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_surrogate_split_ord( CvDTreeNode* n, int vi );$/;"	p	class:CvBoostTree	access:protected	signature:( CvDTreeNode* n, int vi )
find_surrogate_split_ord	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* find_surrogate_split_ord( CvDTreeNode* n, int vi );$/;"	p	class:CvDTree	access:protected	signature:( CvDTreeNode* n, int vi )
finite_shots_count	ui_visualization.h	/^	size_t finite_shots_count; $/;"	m	struct:Visualization_State	access:public
first	/usr/include/opencv/cxcore.hpp	/^    static CvModuleInfo* first;$/;"	m	struct:CvModule	access:public
first	/usr/include/opencv/cxcore.hpp	/^    static CvTypeInfo* first;$/;"	m	struct:CvType	access:public
first_film_back	geometry_loader.h	/^	double first_film_back;$/;"	m	struct:geometry_loader_SAX_state	access:public
first_shot_id	geometry_structures.h	/^	size_t first_shot_id;$/;"	m	struct:Calibration_Fundamental_Matrix	access:public
fixp	/usr/include/opencv/cvaux.h	/^    int* fixp; \/\/node with minimal disconnections$/;"	m	struct:CvCliqueFinder	access:public
fl	/usr/include/opencv/cxtypes.h	/^        float* fl;$/;"	m	union:CvMat::__anon13	access:public
fl	/usr/include/opencv/cxtypes.h	/^        float* fl;$/;"	m	union:CvMatND::__anon16	access:public
fl	/usr/include/opencv/ml.h	/^        float** fl;$/;"	m	union:CvVectors::__anon20	access:public
flConfidence	/usr/include/opencv/cvtypes.h	/^    float* flConfidence;    \/* Confidence for each Sample            *\/$/;"	m	struct:CvConDensation	access:public
flCumulative	/usr/include/opencv/cvtypes.h	/^    float* flCumulative;    \/* Cumulative confidence                 *\/$/;"	m	struct:CvConDensation	access:public
flNewSamples	/usr/include/opencv/cvtypes.h	/^    float** flNewSamples;   \/* temporary array of the Sample Vectors *\/$/;"	m	struct:CvConDensation	access:public
flSamples	/usr/include/opencv/cvtypes.h	/^    float** flSamples;      \/* arr of the Sample Vectors             *\/$/;"	m	struct:CvConDensation	access:public
flags	/usr/include/opencv/cvtypes.h	/^    int  flags;$/;"	m	struct:CvHaarClassifierCascade	access:public
flags	/usr/include/opencv/cxtypes.h	/^    int flags;$/;"	m	struct:CvTypeInfo	access:public
fn_2d	/usr/include/opencv/cxmisc.h	/^    void*   fn_2d[33];$/;"	m	struct:CvBtFuncTable	access:public
fn_2d	/usr/include/opencv/cxmisc.h	/^    void*   fn_2d[CV_DEPTH_MAX*CV_CN_MAX];$/;"	m	struct:CvBigFuncTable	access:public
fn_2d	/usr/include/opencv/cxmisc.h	/^    void*   fn_2d[CV_DEPTH_MAX];$/;"	m	struct:CvFuncTable	access:public
focal_length	/usr/include/opencv/cvaux.h	/^    float focal_length[2];$/;"	m	struct:__anon6	access:public
focus	gui.h	/^	bool focus, disabled;$/;"	m	struct:GUI_Panel	access:public
font	gui.h	/^	CvFont font;$/;"	m	struct:GUI_Context	access:public
font_face	/usr/include/opencv/cxcore.h	/^    int         font_face; \/* =CV_FONT_* *\/$/;"	m	struct:CvFont	access:public
forest	/usr/include/opencv/ml.h	/^    CvRTrees* forest;$/;"	m	class:CvForestTree	access:protected
fovx	geometry_structures.h	/^	double fovx, fovy;     \/\/ field of view (x axis and y axis in degrees)$/;"	m	struct:Shot	access:public
fovy	geometry_structures.h	/^	double fovx, fovy;     \/\/ field of view (x axis and y axis in degrees)$/;"	m	struct:Shot	access:public
framesAccepted	/usr/include/opencv/cvaux.h	/^    int     framesAccepted;$/;"	m	class:CvCalibFilter	access:protected
framesTotal	/usr/include/opencv/cvaux.h	/^    int     framesTotal;$/;"	m	class:CvCalibFilter	access:protected
free_memory	core_debug.cpp	/^void free_memory(void * p) $/;"	f	signature:(void * p)
free_memory	core_debug.h	/^void free_memory(void * p);$/;"	p	signature:(void * p)
free_node	/usr/include/opencv/ml.h	/^    virtual void free_node( CvDTreeNode* node );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( CvDTreeNode* node )
free_node_data	/usr/include/opencv/ml.h	/^    virtual void free_node_data( CvDTreeNode* node );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( CvDTreeNode* node )
free_prune_data	/usr/include/opencv/ml.h	/^    virtual void free_prune_data(bool cut_tree);$/;"	p	class:CvDTree	access:protected	signature:(bool cut_tree)
free_space	/usr/include/opencv/cxtypes.h	/^    int free_space;  \/* free space in the current block *\/$/;"	m	struct:CvMemStorage	access:public
free_space	/usr/include/opencv/cxtypes.h	/^    int free_space;$/;"	m	struct:CvMemStoragePos	access:public
free_train_data	/usr/include/opencv/ml.h	/^    virtual void free_train_data();$/;"	p	struct:CvDTreeTrainData	access:public	signature:()
free_tree	/usr/include/opencv/ml.h	/^    virtual void free_tree();$/;"	p	class:CvDTree	access:protected	signature:()
full	core_image_loader.h	/^	IplImage * full;$/;"	m	struct:Image_Loader_Shot	access:public
full_counter	core_image_loader.h	/^	int full_counter, full_unprocessed_counter; $/;"	m	struct:Image_Loader_Shot	access:public
full_texture	core_image_loader.h	/^	GLuint full_texture; $/;"	m	struct:Image_Loader_Shot	access:public
full_unprocessed_counter	core_image_loader.h	/^	int full_counter, full_unprocessed_counter; $/;"	m	struct:Image_Loader_Shot	access:public
func_addr	/usr/include/opencv/cxtypes.h	/^    void** func_addr;$/;"	m	struct:CvPluginFuncInfo	access:public
func_names	/usr/include/opencv/cxtypes.h	/^    const char* func_names;$/;"	m	struct:CvPluginFuncInfo	access:public
func_tab	/usr/include/opencv/cxtypes.h	/^    CvPluginFuncInfo* func_tab;$/;"	m	struct:CvModuleInfo	access:public
function_call	tool_core.h	/^	Tool_Function_Call function_call;   \/\/ menu can trigger function call$/;"	m	struct:Tool_Menu_Item	access:public
fundMatr	/usr/include/opencv/cvaux.h	/^    float fundMatr[9]; \/* fundamental matrix *\/$/;"	m	struct:CvStereoCamera	access:public
g_point	/usr/include/opencv/cvaux.h	/^    CvGaussBGPoint*            g_point;    $/;"	m	struct:CvGaussBGModel	access:public
g_values	/usr/include/opencv/cvaux.h	/^    CvGaussBGValues* g_values;$/;"	m	struct:CvGaussBGPoint	access:public
gain	/usr/include/opencv/cvtypes.h	/^    CvMat* gain;                \/* Kalman gain matrix (K(k)):$/;"	m	struct:CvKalman	access:public
gamma	/usr/include/opencv/ml.h	/^    double      gamma;  \/\/ for poly\/rbf\/sigmoid$/;"	m	struct:CvSVMParams	access:public
geometry_build_shots_relations	geometry_structures.cpp	/^void geometry_build_shots_relations()$/;"	f	signature:()
geometry_build_shots_relations	geometry_structures.h	/^void geometry_build_shots_relations();$/;"	p	signature:()
geometry_build_vertices_incidence	geometry_structures.cpp	/^void geometry_build_vertices_incidence()$/;"	f	signature:()
geometry_build_vertices_incidence	geometry_structures.h	/^void geometry_build_vertices_incidence();$/;"	p	signature:()
geometry_calibration_from_P	geometry_routines.cpp	/^bool geometry_calibration_from_P(const size_t shot_id)$/;"	f	signature:(const size_t shot_id)
geometry_calibration_from_P	geometry_routines.h	/^bool geometry_calibration_from_P(const size_t shot_id);$/;"	p	signature:(const size_t shot_id)
geometry_calibration_from_decomposed_matrices	geometry_routines.cpp	/^void geometry_calibration_from_decomposed_matrices(const size_t shot_id) $/;"	f	signature:(const size_t shot_id)
geometry_calibration_from_decomposed_matrices	geometry_routines.h	/^void geometry_calibration_from_decomposed_matrices(const size_t shot_id);$/;"	p	signature:(const size_t shot_id)
geometry_delete_point	geometry_structures.cpp	/^void geometry_delete_point(size_t shot_id, size_t point_id) \/\/ todo remove it from contours$/;"	f	signature:(size_t shot_id, size_t point_id)
geometry_delete_point	geometry_structures.h	/^void geometry_delete_point(size_t shot_id, size_t point_id);$/;"	p	signature:(size_t shot_id, size_t point_id)
geometry_delete_polygon	geometry_structures.cpp	/^void geometry_delete_polygon(const size_t polygon_id) $/;"	f	signature:(const size_t polygon_id)
geometry_delete_polygon	geometry_structures.h	/^void geometry_delete_polygon(const size_t polygon_id);$/;"	p	signature:(const size_t polygon_id)
geometry_delete_vertex	geometry_structures.cpp	/^void geometry_delete_vertex(const size_t vertex_id)$/;"	f	signature:(const size_t vertex_id)
geometry_delete_vertex	geometry_structures.h	/^void geometry_delete_vertex(size_t vertex_id);$/;"	p	signature:(size_t vertex_id)
geometry_export_rzml	geometry_export.cpp	/^bool geometry_export_rzml(const char * filename, Shots & shots)$/;"	f	signature:(const char * filename, Shots & shots)
geometry_export_rzml	geometry_export.h	/^bool geometry_export_rzml(const char * filename, Shots & shots);$/;"	p	signature:(const char * filename, Shots & shots)
geometry_export_sandy3d	geometry_export.cpp	/^bool geometry_export_sandy3d(const char * filename, Vertices & vertices, Polygons_3d & polygons)$/;"	f	signature:(const char * filename, Vertices & vertices, Polygons_3d & polygons)
geometry_export_sandy3d	geometry_export.h	/^bool geometry_export_sandy3d(const char * filename, Vertices & vertices, Polygons_3d & polygons);$/;"	p	signature:(const char * filename, Vertices & vertices, Polygons_3d & polygons)
geometry_export_vrml	geometry_export.cpp	/^bool geometry_export_vrml(const char * filename, Vertices & vertices, Polygons_3d & polygons, bool export_vertices \/*= true*\/, bool export_polygons \/*= true*\/, size_t restrict_vertices_by_group \/*= 0*\/)$/;"	f	signature:(const char * filename, Vertices & vertices, Polygons_3d & polygons, bool export_vertices , bool export_polygons , size_t restrict_vertices_by_group )
geometry_export_vrml	geometry_export.h	/^bool geometry_export_vrml(const char * filename, Vertices & vertices, Polygons_3d & polygons, bool export_vertices = false, bool export_polygons = true, size_t restrict_vertices_by_group = 0);$/;"	p	signature:(const char * filename, Vertices & vertices, Polygons_3d & polygons, bool export_vertices = false, bool export_polygons = true, size_t restrict_vertices_by_group = 0)
geometry_export_vrml_calibration	geometry_export.cpp	/^bool geometry_export_vrml_calibration(const char * filename, Calibration &calibration) $/;"	f	signature:(const char * filename, Calibration &calibration)
geometry_export_vrml_calibration	geometry_export.h	/^bool geometry_export_vrml_calibration(const char * filename, Calibration &calibration);$/;"	p	signature:(const char * filename, Calibration &calibration)
geometry_extract_all_textures	geometry_textures.cpp	/^void geometry_extract_all_textures()$/;"	f	signature:()
geometry_extract_all_textures	geometry_textures.h	/^void geometry_extract_all_textures();$/;"	p	signature:()
geometry_extract_texture	geometry_textures.cpp	/^void geometry_extract_texture(const size_t polygon_id)$/;"	f	signature:(const size_t polygon_id)
geometry_extract_texture	geometry_textures.h	/^void geometry_extract_texture(const size_t polygon_id);$/;"	p	signature:(const size_t polygon_id)
geometry_get_point_x	geometry_structures.cpp	/^double geometry_get_point_x(size_t shot_id, size_t point_id)$/;"	f	signature:(size_t shot_id, size_t point_id)
geometry_get_point_x	geometry_structures.h	/^double geometry_get_point_x(size_t shot_id, size_t point_id);$/;"	p	signature:(size_t shot_id, size_t point_id)
geometry_get_point_y	geometry_structures.cpp	/^double geometry_get_point_y(size_t shot_id, size_t point_id)$/;"	f	signature:(size_t shot_id, size_t point_id)
geometry_get_point_y	geometry_structures.h	/^double geometry_get_point_y(size_t shot_id, size_t point_id);$/;"	p	signature:(size_t shot_id, size_t point_id)
geometry_initialize	geometry_structures.cpp	/^bool geometry_initialize()$/;"	f	signature:()
geometry_initialize	geometry_structures.h	/^bool geometry_initialize();$/;"	p	signature:()
geometry_lattice_test	geometry_routines.cpp	/^bool geometry_lattice_test(const size_t shot_id)$/;"	f	signature:(const size_t shot_id)
geometry_lattice_test	geometry_routines.h	/^bool geometry_lattice_test(const size_t shot_id);$/;"	p	signature:(const size_t shot_id)
geometry_load_project	geometry_loader.cpp	/^bool geometry_load_project(const char * filename)$/;"	f	signature:(const char * filename)
geometry_load_project	geometry_loader.h	/^bool geometry_load_project(const char * filename);$/;"	p	signature:(const char * filename)
geometry_loader	geometry_loader.cpp	/^void geometry_loader(const char * xml_filename, Shots & shots)$/;"	f	signature:(const char * xml_filename, Shots & shots)
geometry_loader	geometry_loader.h	/^void geometry_loader(const char * xml_filename, Shots & shots);$/;"	p	signature:(const char * xml_filename, Shots & shots)
geometry_loader_SAX_characters	geometry_loader.cpp	/^void geometry_loader_SAX_characters(geometry_loader_SAX_state * state, const xmlChar * cdata, int len)$/;"	f	signature:(geometry_loader_SAX_state * state, const xmlChar * cdata, int len)
geometry_loader_SAX_characters	geometry_loader.h	/^void geometry_loader_SAX_characters(geometry_loader_SAX_state * state, const xmlChar * cdata, int len);$/;"	p	signature:(geometry_loader_SAX_state * state, const xmlChar * cdata, int len)
geometry_loader_SAX_end_element	geometry_loader.cpp	/^void geometry_loader_SAX_end_element(geometry_loader_SAX_state * state, const xmlChar * name)$/;"	f	signature:(geometry_loader_SAX_state * state, const xmlChar * name)
geometry_loader_SAX_end_element	geometry_loader.h	/^void geometry_loader_SAX_end_element(geometry_loader_SAX_state * state, const xmlChar * name);$/;"	p	signature:(geometry_loader_SAX_state * state, const xmlChar * name)
geometry_loader_SAX_start_element	geometry_loader.cpp	/^void geometry_loader_SAX_start_element(geometry_loader_SAX_state * state, const xmlChar * name, const xmlChar ** attrs)$/;"	f	signature:(geometry_loader_SAX_state * state, const xmlChar * name, const xmlChar ** attrs)
geometry_loader_SAX_start_element	geometry_loader.h	/^void geometry_loader_SAX_start_element(geometry_loader_SAX_state * state, const xmlChar * name, const xmlChar ** attrs);$/;"	p	signature:(geometry_loader_SAX_state * state, const xmlChar * name, const xmlChar ** attrs)
geometry_loader_SAX_state	geometry_loader.h	/^struct geometry_loader_SAX_state$/;"	s
geometry_loader_SAX_state::current_shot	geometry_loader.h	/^	Shot * current_shot;$/;"	m	struct:geometry_loader_SAX_state	access:public
geometry_loader_SAX_state::directory	geometry_loader.h	/^	char * filename, * directory;$/;"	m	struct:geometry_loader_SAX_state	access:public
geometry_loader_SAX_state::filename	geometry_loader.h	/^	char * filename, * directory;$/;"	m	struct:geometry_loader_SAX_state	access:public
geometry_loader_SAX_state::first_film_back	geometry_loader.h	/^	double first_film_back;$/;"	m	struct:geometry_loader_SAX_state	access:public
geometry_loader_SAX_state::points_count	geometry_loader.h	/^	size_t points_count; $/;"	m	struct:geometry_loader_SAX_state	access:public
geometry_loader_SAX_state::shots	geometry_loader.h	/^	Shots * shots;$/;"	m	struct:geometry_loader_SAX_state	access:public
geometry_loader_SAX_state::vertices	geometry_loader.h	/^	Vertices * vertices; $/;"	m	struct:geometry_loader_SAX_state	access:public
geometry_loader_add_shot	geometry_loader.cpp	/^bool geometry_loader_add_shot(const char * filename) \/\/ note that we're being inconsistent here by not passing reference to shots structure, but we can't do that since we manipulate it by geometry_new_shot - isn't this a bigger problem? $/;"	f	signature:(const char * filename)
geometry_loader_add_shot	geometry_loader.h	/^bool geometry_loader_add_shot(const char * filename);$/;"	p	signature:(const char * filename)
geometry_loader_contours	geometry_loader.cpp	/^bool geometry_loader_contours(const char * txt_filename, Shots & shots) $/;"	f	signature:(const char * txt_filename, Shots & shots)
geometry_loader_contours	geometry_loader.h	/^bool geometry_loader_contours(const char * txt_filename, Shots & shots);$/;"	p	signature:(const char * txt_filename, Shots & shots)
geometry_loader_ifl	geometry_loader.cpp	/^bool geometry_loader_ifl(const char * filename) \/\/ note the same inconsistency as in geometry_loader_add_shot$/;"	f	signature:(const char * filename)
geometry_loader_ifl	geometry_loader.h	/^bool geometry_loader_ifl(const char * filename);$/;"	p	signature:(const char * filename)
geometry_loader_points	geometry_loader.cpp	/^bool geometry_loader_points(const char * pictures_filename, const char * tracks_filename, Shots & shots, Vertices & vertices, size_t group \/*= 0*\/)$/;"	f	signature:(const char * pictures_filename, const char * tracks_filename, Shots & shots, Vertices & vertices, size_t group )
geometry_loader_points	geometry_loader.h	/^bool geometry_loader_points(const char * pictures_filename, const char * tracks_filename, Shots & shots, Vertices & vertices, size_t group = 0);$/;"	p	signature:(const char * pictures_filename, const char * tracks_filename, Shots & shots, Vertices & vertices, size_t group = 0)
geometry_loader_points_guess_filepair	geometry_loader.cpp	/^bool geometry_loader_points_guess_filepair(char * const filename)$/;"	f	signature:(char * const filename)
geometry_loader_points_guess_filepair	geometry_loader.h	/^bool geometry_loader_points_guess_filepair(char * const filename);$/;"	p	signature:(char * const filename)
geometry_loader_rz3	geometry_loader.cpp	/^bool geometry_loader_rz3(const char * xml_filename, Shots & shots)$/;"	f	signature:(const char * xml_filename, Shots & shots)
geometry_loader_rz3	geometry_loader.h	/^bool geometry_loader_rz3(const char * xml_filename, Shots & shots);$/;"	p	signature:(const char * xml_filename, Shots & shots)
geometry_loader_vertices	geometry_loader.cpp	/^bool geometry_loader_vertices(const char * txt_filename, Vertices & vertices, size_t group \/*= 0*\/) $/;"	f	signature:(const char * txt_filename, Vertices & vertices, size_t group )
geometry_loader_vertices	geometry_loader.h	/^bool geometry_loader_vertices(const char * txt_filename, Vertices & vertices, size_t group = 0);$/;"	p	signature:(const char * txt_filename, Vertices & vertices, size_t group = 0)
geometry_new_point	geometry_structures.cpp	/^bool geometry_new_point(size_t & point_id, double x, double y, size_t shot_id, size_t vertex_id)$/;"	f	signature:(size_t & point_id, double x, double y, size_t shot_id, size_t vertex_id)
geometry_new_point	geometry_structures.h	/^bool geometry_new_point(size_t & point_id, double x, double y, size_t shot_id, size_t vertex_id);$/;"	p	signature:(size_t & point_id, double x, double y, size_t shot_id, size_t vertex_id)
geometry_new_polygon	geometry_structures.cpp	/^bool geometry_new_polygon(size_t & id)$/;"	f	signature:(size_t & id)
geometry_new_polygon	geometry_structures.h	/^bool geometry_new_polygon(size_t & id);$/;"	p	signature:(size_t & id)
geometry_new_shot	geometry_structures.cpp	/^bool geometry_new_shot(size_t & shot)$/;"	f	signature:(size_t & shot)
geometry_new_shot	geometry_structures.h	/^bool geometry_new_shot(size_t & shot);$/;"	p	signature:(size_t & shot)
geometry_new_vertex	geometry_structures.cpp	/^bool geometry_new_vertex(size_t & id) $/;"	f	signature:(size_t & id)
geometry_new_vertex	geometry_structures.h	/^bool geometry_new_vertex(size_t & id);$/;"	p	signature:(size_t & id)
geometry_point_vertex_incidence	geometry_structures.cpp	/^void geometry_point_vertex_incidence(size_t shot_id, size_t point_id, size_t vertex_id)$/;"	f	signature:(size_t shot_id, size_t point_id, size_t vertex_id)
geometry_point_vertex_incidence	geometry_structures.h	/^void geometry_point_vertex_incidence(size_t shot_id, size_t point_id, size_t vertex_id);$/;"	p	signature:(size_t shot_id, size_t point_id, size_t vertex_id)
geometry_point_xy	geometry_structures.cpp	/^void geometry_point_xy(size_t shot_id, size_t point_id, double x, double y)$/;"	f	signature:(size_t shot_id, size_t point_id, double x, double y)
geometry_point_xy	geometry_structures.h	/^void geometry_point_xy(size_t shot_id, size_t point_id, double x, double y);$/;"	p	signature:(size_t shot_id, size_t point_id, double x, double y)
geometry_polygon_add_vertex	geometry_structures.cpp	/^bool geometry_polygon_add_vertex(size_t polygon_id, size_t vertex_index) $/;"	f	signature:(size_t polygon_id, size_t vertex_index)
geometry_polygon_add_vertex	geometry_structures.h	/^bool geometry_polygon_add_vertex(size_t polygon_id, size_t vertex_index);$/;"	p	signature:(size_t polygon_id, size_t vertex_index)
geometry_process_data	geometry_loader.cpp	/^void geometry_process_data(Shots shots)$/;"	f	signature:(Shots shots)
geometry_process_data	geometry_loader.h	/^void geometry_process_data(Shots shots);$/;"	p	signature:(Shots shots)
geometry_release	geometry_structures.cpp	/^void geometry_release()$/;"	f	signature:()
geometry_release	geometry_structures.h	/^void geometry_release();$/;"	p	signature:()
geometry_release_shot	geometry_structures.cpp	/^void geometry_release_shot(Shot * & shot) $/;"	f	signature:(Shot * & shot)
geometry_release_shot	geometry_structures.h	/^void geometry_release_shot(Shot * & shot);$/;"	p	signature:(Shot * & shot)
geometry_release_shot_calibration	geometry_structures.cpp	/^void geometry_release_shot_calibration(size_t shot_id)$/;"	f	signature:(size_t shot_id)
geometry_release_shot_calibration	geometry_structures.h	/^void geometry_release_shot_calibration(size_t shot_id);$/;"	p	signature:(size_t shot_id)
geometry_release_shots_calibrations	geometry_structures.cpp	/^void geometry_release_shots_calibrations() $/;"	f	signature:()
geometry_release_shots_calibrations	geometry_structures.h	/^void geometry_release_shots_calibrations();$/;"	p	signature:()
geometry_save	geometry_export.cpp	/^bool geometry_save(const char * filename)$/;"	f	signature:(const char * filename)
geometry_save	geometry_export.h	/^bool geometry_save(const char * filename);$/;"	p	signature:(const char * filename)
geometry_shot_new_calibration_containers	geometry_structures.cpp	/^bool geometry_shot_new_calibration_containers(const size_t shot_id)$/;"	f	signature:(const size_t shot_id)
geometry_shot_new_calibration_containers	geometry_structures.h	/^bool geometry_shot_new_calibration_containers(const size_t shot_id);$/;"	p	signature:(const size_t shot_id)
geometry_sort_double_indices_primary	geometry_structures.cpp	/^void geometry_sort_double_indices_primary(Double_Indices * indices) $/;"	f	signature:(Double_Indices * indices)
geometry_sort_double_indices_primary	geometry_structures.h	/^void geometry_sort_double_indices_primary(Double_Indices * indices);$/;"	p	signature:(Double_Indices * indices)
geometry_sort_double_indices_primary_comparator	geometry_structures.cpp	/^int geometry_sort_double_indices_primary_comparator(const void * pi, const void * pj) $/;"	f	signature:(const void * pi, const void * pj)
geometry_sort_double_indices_primary_comparator	geometry_structures.h	/^int geometry_sort_double_indices_primary_comparator(const void * pi, const void * pj);$/;"	p	signature:(const void * pi, const void * pj)
geometry_sort_double_indices_primary_comparator_desc	geometry_structures.cpp	/^int geometry_sort_double_indices_primary_comparator_desc(const void * pi, const void * pj) $/;"	f	signature:(const void * pi, const void * pj)
geometry_sort_double_indices_primary_comparator_desc	geometry_structures.h	/^int geometry_sort_double_indices_primary_comparator_desc(const void * pi, const void * pj);$/;"	p	signature:(const void * pi, const void * pj)
geometry_sort_double_indices_primary_desc	geometry_structures.cpp	/^void geometry_sort_double_indices_primary_desc(Double_Indices * indices) $/;"	f	signature:(Double_Indices * indices)
geometry_sort_double_indices_primary_desc	geometry_structures.h	/^void geometry_sort_double_indices_primary_desc(Double_Indices * indices);$/;"	p	signature:(Double_Indices * indices)
geometry_sort_double_indices_secondary	geometry_structures.cpp	/^void geometry_sort_double_indices_secondary(Double_Indices * indices) $/;"	f	signature:(Double_Indices * indices)
geometry_sort_double_indices_secondary	geometry_structures.h	/^void geometry_sort_double_indices_secondary(Double_Indices * indices);$/;"	p	signature:(Double_Indices * indices)
geometry_sort_double_indices_secondary_comparator	geometry_structures.cpp	/^int geometry_sort_double_indices_secondary_comparator(const void * pi, const void * pj) $/;"	f	signature:(const void * pi, const void * pj)
geometry_sort_double_indices_secondary_comparator	geometry_structures.h	/^int geometry_sort_double_indices_secondary_comparator(const void * pi, const void * pj);$/;"	p	signature:(const void * pi, const void * pj)
geometry_sort_double_indices_secondary_comparator_desc	geometry_structures.cpp	/^int geometry_sort_double_indices_secondary_comparator_desc(const void * pi, const void * pj) $/;"	f	signature:(const void * pi, const void * pj)
geometry_sort_double_indices_secondary_comparator_desc	geometry_structures.h	/^int geometry_sort_double_indices_secondary_comparator_desc(const void * pi, const void * pj);$/;"	p	signature:(const void * pi, const void * pj)
geometry_sort_double_indices_secondary_desc	geometry_structures.cpp	/^void geometry_sort_double_indices_secondary_desc(Double_Indices * indices) $/;"	f	signature:(Double_Indices * indices)
geometry_sort_double_indices_secondary_desc	geometry_structures.h	/^void geometry_sort_double_indices_secondary_desc(Double_Indices * indices);$/;"	p	signature:(Double_Indices * indices)
get_active_var_mask	/usr/include/opencv/ml.h	/^    CvMat* get_active_var_mask();$/;"	p	class:CvRTrees	access:public	signature:()
get_anchor	/usr/include/opencv/cv.hpp	/^    CvPoint get_anchor() const { return anchor; }$/;"	f	class:CvBaseImageFilter	access:public	signature:() const
get_back_project	/usr/include/opencv/cvaux.hpp	/^    virtual IplImage* get_back_project()$/;"	f	class:CvCamShiftTracker	access:public	signature:()
get_cat_var_data	/usr/include/opencv/ml.h	/^    virtual int* get_cat_var_data( CvDTreeNode* n, int vi );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( CvDTreeNode* n, int vi )
get_center	/usr/include/opencv/cvaux.hpp	/^    CvPoint2D32f get_center() const \/\/ center of the object$/;"	f	class:CvCamShiftTracker	access:public	signature:() const
get_child_buf_idx	/usr/include/opencv/ml.h	/^    virtual int get_child_buf_idx( CvDTreeNode* n );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( CvDTreeNode* n )
get_class_labels	/usr/include/opencv/ml.h	/^    virtual int* get_class_labels( CvDTreeNode* n );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( CvDTreeNode* n )
get_covs	/usr/include/opencv/ml.h	/^    const CvMat** get_covs() const;$/;"	p	class:CvEM	access:public	signature:() const
get_data	/usr/include/opencv/ml.h	/^    CvDTreeTrainData* get_data();$/;"	p	class:CvDTree	access:public	signature:()
get_dst_type	/usr/include/opencv/cv.hpp	/^    int get_dst_type() const { return dst_type; }$/;"	f	class:CvBaseImageFilter	access:public	signature:() const
get_element	/usr/include/opencv/cv.hpp	/^    const CvMat* get_element() const { return element; }$/;"	f	class:CvMorphology	access:public	signature:() const
get_element_shape	/usr/include/opencv/cv.hpp	/^    int get_element_shape() const { return el_shape; }$/;"	f	class:CvMorphology	access:public	signature:() const
get_element_sparse_buf	/usr/include/opencv/cv.hpp	/^    uchar* get_element_sparse_buf() { return el_sparse; }$/;"	f	class:CvMorphology	access:public	signature:()
get_element_sparse_count	/usr/include/opencv/cv.hpp	/^    int get_element_sparse_count() const { return el_sparse_count; }$/;"	f	class:CvMorphology	access:public	signature:() const
get_hist_dims	/usr/include/opencv/cvaux.hpp	/^    int     get_hist_dims( int* dims = 0 ) const \/\/ returns number of histogram dimensions and sets$/;"	f	class:CvCamShiftTracker	access:public	signature:( int* dims = 0 ) const
get_kernel	/usr/include/opencv/cv.hpp	/^    const CvMat* get_kernel() const { return kernel; }$/;"	f	class:CvLinearFilter	access:public	signature:() const
get_kernel_size	/usr/include/opencv/cv.hpp	/^    CvSize get_kernel_size() const { return ksize; }$/;"	f	class:CvBaseImageFilter	access:public	signature:() const
get_kernel_sparse_buf	/usr/include/opencv/cv.hpp	/^    uchar* get_kernel_sparse_buf() { return k_sparse; }$/;"	f	class:CvLinearFilter	access:public	signature:()
get_kernel_sparse_count	/usr/include/opencv/cv.hpp	/^    int get_kernel_sparse_count() const { return k_sparse_count; }$/;"	f	class:CvLinearFilter	access:public	signature:() const
get_labels	/usr/include/opencv/ml.h	/^    virtual int* get_labels( CvDTreeNode* n );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( CvDTreeNode* n )
get_layer_count	/usr/include/opencv/ml.h	/^    int get_layer_count() { return layer_sizes ? layer_sizes->cols : 0; }$/;"	f	class:CvANN_MLP	access:public	signature:()
get_layer_sizes	/usr/include/opencv/ml.h	/^    const CvMat* get_layer_sizes() { return layer_sizes; }$/;"	f	class:CvANN_MLP	access:public	signature:()
get_length	/usr/include/opencv/cvaux.hpp	/^    float   get_length() const \/\/ the larger linear size of the object$/;"	f	class:CvCamShiftTracker	access:public	signature:() const
get_max_ch_val	/usr/include/opencv/cvaux.hpp	/^    int     get_max_ch_val( int channel ) const \/\/ get the maximum allowed value of the specified channel$/;"	f	class:CvCamShiftTracker	access:public	signature:( int channel ) const
get_max_k	/usr/include/opencv/ml.h	/^    int get_max_k() const;$/;"	p	class:CvKNearest	access:public	signature:() const
get_means	/usr/include/opencv/ml.h	/^    const CvMat* get_means() const;$/;"	p	class:CvEM	access:public	signature:() const
get_min_ch_val	/usr/include/opencv/cvaux.hpp	/^    int     get_min_ch_val( int channel ) const \/\/ get the minimum allowed value of the specified channel$/;"	f	class:CvCamShiftTracker	access:public	signature:( int channel ) const
get_nclusters	/usr/include/opencv/ml.h	/^    int get_nclusters() const;$/;"	p	class:CvEM	access:public	signature:() const
get_num_classes	/usr/include/opencv/ml.h	/^    int get_num_classes() const;$/;"	p	struct:CvDTreeTrainData	access:public	signature:() const
get_num_valid	/usr/include/opencv/ml.h	/^    int get_num_valid(int vi) { return num_valid ? num_valid[vi] : sample_count; }$/;"	f	struct:CvDTreeNode	access:public	signature:(int vi)
get_operation	/usr/include/opencv/cv.hpp	/^    int get_operation() const { return operation; }$/;"	f	class:CvMorphology	access:public	signature:() const
get_ord_responses	/usr/include/opencv/ml.h	/^    virtual float* get_ord_responses( CvDTreeNode* n );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( CvDTreeNode* n )
get_ord_var_data	/usr/include/opencv/ml.h	/^    virtual CvPair32s32f* get_ord_var_data( CvDTreeNode* n, int vi );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( CvDTreeNode* n, int vi )
get_orientation	/usr/include/opencv/cvaux.hpp	/^    float   get_orientation() const \/\/ orientation of the object in degrees $/;"	f	class:CvCamShiftTracker	access:public	signature:() const
get_params	/usr/include/opencv/ml.h	/^    const CvBoostParams& get_params() const;$/;"	p	class:CvBoost	access:public	signature:() const
get_probs	/usr/include/opencv/ml.h	/^    const CvMat* get_probs() const;$/;"	p	class:CvEM	access:public	signature:() const
get_proximity	/usr/include/opencv/ml.h	/^    virtual float get_proximity( const CvMat* sample1, const CvMat* sample2,$/;"	p	class:CvRTrees	access:public	signature:( const CvMat* sample1, const CvMat* sample2, const CvMat* missing1 = 0, const CvMat* missing2 = 0 ) const
get_pruned_tree_idx	/usr/include/opencv/ml.h	/^    int get_pruned_tree_idx() const;$/;"	p	class:CvDTree	access:public	signature:() const
get_rng	/usr/include/opencv/ml.h	/^    CvRNG* get_rng();$/;"	p	class:CvRTrees	access:public	signature:()
get_root	/usr/include/opencv/ml.h	/^    const CvDTreeNode* get_root() const;$/;"	p	class:CvDTree	access:public	signature:() const
get_row	/usr/include/opencv/ml.h	/^    virtual float* get_row( int i, float* dst );$/;"	p	class:CvSVMSolver	access:public	signature:( int i, float* dst )
get_row_base	/usr/include/opencv/ml.h	/^    virtual float* get_row_base( int i, bool* _existed );$/;"	p	class:CvSVMSolver	access:public	signature:( int i, bool* _existed )
get_row_func	/usr/include/opencv/ml.h	/^    GetRow get_row_func;$/;"	m	class:CvSVMSolver	access:public
get_row_one_class	/usr/include/opencv/ml.h	/^    virtual float* get_row_one_class( int i, float* row, float* dst, bool existed );$/;"	p	class:CvSVMSolver	access:public	signature:( int i, float* row, float* dst, bool existed )
get_row_svc	/usr/include/opencv/ml.h	/^    virtual float* get_row_svc( int i, float* row, float* dst, bool existed );$/;"	p	class:CvSVMSolver	access:public	signature:( int i, float* row, float* dst, bool existed )
get_row_svr	/usr/include/opencv/ml.h	/^    virtual float* get_row_svr( int i, float* row, float* dst, bool existed );$/;"	p	class:CvSVMSolver	access:public	signature:( int i, float* row, float* dst, bool existed )
get_sample_count	/usr/include/opencv/ml.h	/^    int get_sample_count() const;$/;"	p	class:CvKNearest	access:public	signature:() const
get_scale	/usr/include/opencv/cv.hpp	/^    double get_scale() const { return scale; }$/;"	f	class:CvBoxFilter	access:public	signature:() const
get_src_type	/usr/include/opencv/cv.hpp	/^    int get_src_type() const { return src_type; }$/;"	f	class:CvBaseImageFilter	access:public	signature:() const
get_subtree_weights	/usr/include/opencv/ml.h	/^    CvMat* get_subtree_weights();$/;"	p	class:CvBoost	access:public	signature:()
get_sum_buf	/usr/include/opencv/cv.hpp	/^    uchar* get_sum_buf() { return sum; }$/;"	f	class:CvBoxFilter	access:public	signature:()
get_sum_count_ptr	/usr/include/opencv/cv.hpp	/^    int* get_sum_count_ptr() { return &sum_count; }$/;"	f	class:CvBoxFilter	access:public	signature:()
get_support_vector	/usr/include/opencv/ml.h	/^    virtual const float* get_support_vector(int i) const;$/;"	p	class:CvSVM	access:public	signature:(int i) const
get_support_vector_count	/usr/include/opencv/ml.h	/^    virtual int get_support_vector_count() const;$/;"	p	class:CvSVM	access:public	signature:() const
get_threshold	/usr/include/opencv/cvaux.hpp	/^    int     get_threshold() const \/\/ thresholding value that applied to back project$/;"	f	class:CvCamShiftTracker	access:public	signature:() const
get_tree	/usr/include/opencv/ml.h	/^    CvForestTree* get_tree(int i) const;$/;"	p	class:CvRTrees	access:public	signature:(int i) const
get_tree_count	/usr/include/opencv/ml.h	/^    int get_tree_count() const;$/;"	p	class:CvRTrees	access:public	signature:() const
get_var_count	/usr/include/opencv/ml.h	/^    int get_var_count() const { return var_idx ? var_idx->cols : var_all; }$/;"	f	class:CvSVM	access:public	signature:() const
get_var_count	/usr/include/opencv/ml.h	/^    int get_var_count() const;$/;"	p	class:CvKNearest	access:public	signature:() const
get_var_count	/usr/include/opencv/ml.h	/^    virtual int get_var_count() const {return data ? data->var_count : 0;}$/;"	f	class:CvForestTree	access:public	signature:() const
get_var_importance	/usr/include/opencv/ml.h	/^    virtual const CvMat* get_var_importance();$/;"	p	class:CvDTree	access:public	signature:()
get_var_importance	/usr/include/opencv/ml.h	/^    virtual const CvMat* get_var_importance();$/;"	p	class:CvRTrees	access:public	signature:()
get_var_type	/usr/include/opencv/ml.h	/^    int get_var_type(int vi) const;$/;"	p	struct:CvDTreeTrainData	access:public	signature:(int vi) const
get_vectors	/usr/include/opencv/ml.h	/^    virtual void get_vectors( const CvMat* _subsample_idx,$/;"	p	struct:CvDTreeTrainData	access:public	signature:( const CvMat* _subsample_idx, float* values, uchar* missing, float* responses, bool get_class_idx=false )
get_weak_predictors	/usr/include/opencv/ml.h	/^    CvSeq* get_weak_predictors();$/;"	p	class:CvBoost	access:public	signature:()
get_weak_response	/usr/include/opencv/ml.h	/^    CvMat* get_weak_response();$/;"	p	class:CvBoost	access:public	signature:()
get_weights	/usr/include/opencv/ml.h	/^    CvMat* get_weights();$/;"	p	class:CvBoost	access:public	signature:()
get_weights	/usr/include/opencv/ml.h	/^    const CvMat* get_weights() const;$/;"	p	class:CvEM	access:public	signature:() const
get_weights	/usr/include/opencv/ml.h	/^    double* get_weights(int layer)$/;"	f	class:CvANN_MLP	access:public	signature:(int layer)
get_width	/usr/include/opencv/cv.hpp	/^    int get_width() const { return prev_x_range.end_index - prev_x_range.start_index; }$/;"	f	class:CvBaseImageFilter	access:public	signature:() const
get_width	/usr/include/opencv/cvaux.hpp	/^    float   get_width() const \/\/ the smaller linear size of the object$/;"	f	class:CvCamShiftTracker	access:public	signature:() const
get_window	/usr/include/opencv/cvaux.hpp	/^    CvRect get_window() const \/\/ bounding rectangle for the object$/;"	f	class:CvCamShiftTracker	access:public	signature:() const
get_work_params	/usr/include/opencv/cv.hpp	/^    virtual void get_work_params();$/;"	p	class:CvBaseImageFilter	access:protected	signature:()
get_work_params	/usr/include/opencv/cv.hpp	/^    void get_work_params();$/;"	p	class:CvLaplaceFilter	access:protected	signature:()
get_work_type	/usr/include/opencv/cv.hpp	/^    int get_work_type() const { return work_type; }$/;"	f	class:CvBaseImageFilter	access:public	signature:() const
get_work_var_count	/usr/include/opencv/ml.h	/^    int get_work_var_count() const;$/;"	p	struct:CvDTreeTrainData	access:public	signature:() const
get_x_filter_func	/usr/include/opencv/cv.hpp	/^    CvRowFilterFunc get_x_filter_func() const { return x_func; }$/;"	f	class:CvBaseImageFilter	access:public	signature:() const
get_x_kernel	/usr/include/opencv/cv.hpp	/^    const CvMat* get_x_kernel() const { return kx; }$/;"	f	class:CvSepFilter	access:public	signature:() const
get_x_kernel_flags	/usr/include/opencv/cv.hpp	/^    int get_x_kernel_flags() const { return kx_flags; }$/;"	f	class:CvSepFilter	access:public	signature:() const
get_y_filter_func	/usr/include/opencv/cv.hpp	/^    CvColumnFilterFunc get_y_filter_func() const { return y_func; }$/;"	f	class:CvBaseImageFilter	access:public	signature:() const
get_y_kernel	/usr/include/opencv/cv.hpp	/^    const CvMat* get_y_kernel() const { return ky; }$/;"	f	class:CvSepFilter	access:public	signature:() const
get_y_kernel_flags	/usr/include/opencv/cv.hpp	/^    int get_y_kernel_flags() const { return ky_flags; }$/;"	f	class:CvSepFilter	access:public	signature:() const
gl	ui_state.h	/^		* root_panel, * top, * side, * gl, * side_top, * side_bottom, $/;"	m	struct:UI_State	access:public
gl_texture_id	core_image_loader.h	/^	GLuint gl_texture_id;$/;"	m	struct:Image_Loader_Request	access:public
gl_texture_max_x	core_image_loader.h	/^	double gl_texture_min_x, gl_texture_min_y, gl_texture_max_x, gl_texture_max_y;$/;"	m	struct:Image_Loader_Request	access:public
gl_texture_max_y	core_image_loader.h	/^	double gl_texture_min_x, gl_texture_min_y, gl_texture_max_x, gl_texture_max_y;$/;"	m	struct:Image_Loader_Request	access:public
gl_texture_min_x	core_image_loader.h	/^	double gl_texture_min_x, gl_texture_min_y, gl_texture_max_x, gl_texture_max_y;$/;"	m	struct:Image_Loader_Request	access:public
gl_texture_min_y	core_image_loader.h	/^	double gl_texture_min_x, gl_texture_min_y, gl_texture_max_x, gl_texture_max_y;$/;"	m	struct:Image_Loader_Request	access:public
gl_texture_quality	core_image_loader.h	/^	Image_Loader_Quality gl_texture_quality;$/;"	m	struct:Image_Loader_Request	access:public
global_lock	core_image_loader.cpp	/^static pthread_mutex_t global_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
glview_render	gui.h	/^	GUI_GLView_Render glview_render;$/;"	m	struct:GUI_Panel	access:public
graph	/usr/include/opencv/cvaux.h	/^    CvGraph* graph;$/;"	m	struct:CvCliqueFinder	access:public
graph	/usr/include/opencv/cxcore.h	/^    CvGraph* graph;        \/* the graph *\/$/;"	m	struct:CvGraphScanner	access:public
grayImg	/usr/include/opencv/cvaux.h	/^    CvMat*  grayImg;$/;"	m	class:CvCalibFilter	access:protected
greek	/usr/include/opencv/cxcore.h	/^    const int*  greek;$/;"	m	struct:CvFont	access:public
ground	ui_visualization.h	/^	double * ground;     \/\/ homogeneous coordinates of ground plane (inhomogeneous part, i.e. first 3 values, $/;"	m	struct:Visualization_State	access:public
ground_POI	ui_visualization.h	/^	double ground_POI[3];    \/\/ point of interest $/;"	m	struct:Visualization_State	access:public
ground_POI_dragging_start	ui_state.h	/^	double ground_POI_dragging_start[3];                              \/\/ changing camera position in ground inspection mode $/;"	m	struct:UI_State	access:public
ground_alpha	ui_visualization.h	/^	double ground_alpha, ground_phi, ground_distance; \/\/ distance and angles used to orient in space while in ground plane inspection$/;"	m	struct:Visualization_State	access:public
ground_alpha_dragging_speed	ui_state.h	/^	double ground_phi_dragging_speed, ground_alpha_dragging_speed;    \/\/ todo $/;"	m	struct:UI_State	access:public
ground_alpha_dragging_start	ui_state.h	/^	double ground_phi_dragging_start, ground_alpha_dragging_start;    \/\/ changing camera angle in ground inspection mode$/;"	m	struct:UI_State	access:public
ground_axis_x	ui_visualization.h	/^	double ground_axis_x[3], ground_axis_y[3], ground_axis_z[3];    \/\/ perpendicular unit vectors lying on ground plane and specifying $/;"	m	struct:Visualization_State	access:public
ground_axis_y	ui_visualization.h	/^	double ground_axis_x[3], ground_axis_y[3], ground_axis_z[3];    \/\/ perpendicular unit vectors lying on ground plane and specifying $/;"	m	struct:Visualization_State	access:public
ground_axis_z	ui_visualization.h	/^	double ground_axis_x[3], ground_axis_y[3], ground_axis_z[3];    \/\/ perpendicular unit vectors lying on ground plane and specifying $/;"	m	struct:Visualization_State	access:public
ground_camera_movement_speed	ui_state.h	/^	const double ground_camera_movement_speed;$/;"	m	struct:UI_State	access:public
ground_distance	ui_visualization.h	/^	double ground_alpha, ground_phi, ground_distance; \/\/ distance and angles used to orient in space while in ground plane inspection$/;"	m	struct:Visualization_State	access:public
ground_mode	ui_visualization.h	/^	bool ground_mode;    \/\/ ground inspection is on\/off$/;"	m	struct:Visualization_State	access:public
ground_phi	ui_visualization.h	/^	double ground_alpha, ground_phi, ground_distance; \/\/ distance and angles used to orient in space while in ground plane inspection$/;"	m	struct:Visualization_State	access:public
ground_phi_dragging_speed	ui_state.h	/^	double ground_phi_dragging_speed, ground_alpha_dragging_speed;    \/\/ todo $/;"	m	struct:UI_State	access:public
ground_phi_dragging_start	ui_state.h	/^	double ground_phi_dragging_start, ground_alpha_dragging_start;    \/\/ changing camera angle in ground inspection mode$/;"	m	struct:UI_State	access:public
group	geometry_structures.h	/^	size_t group;                \/\/ vertex can be a part of group$/;"	m	struct:Vertex	access:public
groups	ui_state.h	/^	Groups groups;$/;"	m	struct:UI_State	access:public
grow_forest	/usr/include/opencv/ml.h	/^    bool grow_forest( const CvTermCriteria term_crit );$/;"	p	class:CvRTrees	access:protected	signature:( const CvTermCriteria term_crit )
gui_aux_menu_hide	gui.cpp	/^void gui_aux_menu_hide(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_below	gui.cpp	/^void gui_below(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_below	gui.h	/^void gui_below(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_below_fill	gui.cpp	/^void gui_below_fill(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_below_fill	gui.h	/^void gui_below_fill(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_below_hfill	gui.cpp	/^void gui_below_hfill(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_below_hfill	gui.h	/^void gui_below_hfill(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_below_left_vfill	gui.cpp	/^void gui_below_left_vfill(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_below_left_vfill	gui.h	/^void gui_below_left_vfill(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_below_left_vfill_rest	gui.cpp	/^void gui_below_left_vfill_rest(GUI_Panel * panel) $/;"	f	signature:(GUI_Panel * panel)
gui_below_left_vfill_rest	gui.h	/^void gui_below_left_vfill_rest(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_below_on_the_right_fill	gui.cpp	/^void gui_below_on_the_right_fill(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_below_on_the_right_fill	gui.h	/^void gui_below_on_the_right_fill(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_button_event_mousedown	gui.cpp	/^void gui_button_event_mousedown(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_button_event_mousedown	gui.h	/^void gui_button_event_mousedown(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_calculate_coordinates	gui.cpp	/^void gui_calculate_coordinates()$/;"	f	signature:()
gui_calculate_coordinates	gui.h	/^void gui_calculate_coordinates();$/;"	p	signature:()
gui_cancel_event	gui.cpp	/^void gui_cancel_event()$/;"	f	signature:()
gui_cancel_event	gui.h	/^void gui_cancel_event(); \/\/ currently unused$/;"	p	signature:()
gui_caption_discard	gui.cpp	/^void gui_caption_discard(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_caption_discard	gui.h	/^void gui_caption_discard(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_caption_discard_opengl_texture	gui.cpp	/^void gui_caption_discard_opengl_texture(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_caption_discard_opengl_texture	gui.h	/^void gui_caption_discard_opengl_texture(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_caption_render	gui.cpp	/^void gui_caption_render(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_caption_render	gui.h	/^void gui_caption_render(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_checkbox_event_mousedown	gui.cpp	/^void gui_checkbox_event_mousedown(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_checkbox_event_mousedown	gui.h	/^void gui_checkbox_event_mousedown(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_context	gui.cpp	/^GUI_Context gui_context;$/;"	v
gui_fill	gui.cpp	/^void gui_fill(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_fill	gui.h	/^void gui_fill(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_get_checkbox	gui.cpp	/^bool gui_get_checkbox(GUI_Panel * checkbox) \/\/ todo we might want to unify the gui_is_* and gui_get_* naming conventions$/;"	f	signature:(GUI_Panel * checkbox)
gui_get_checkbox	gui.h	/^bool gui_get_checkbox(GUI_Panel * checkbox);$/;"	p	signature:(GUI_Panel * checkbox)
gui_get_height	gui.cpp	/^int gui_get_height(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_get_height	gui.h	/^int gui_get_height(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_get_radio_value	gui.cpp	/^int gui_get_radio_value(GUI_Panel * radio)$/;"	f	signature:(GUI_Panel * radio)
gui_get_radio_value	gui.h	/^int gui_get_radio_value(GUI_Panel * radio);$/;"	p	signature:(GUI_Panel * radio)
gui_get_root_panel	gui.cpp	/^GUI_Panel * gui_get_root_panel()$/;"	f	signature:()
gui_get_root_panel	gui.h	/^GUI_Panel * gui_get_root_panel();$/;"	p	signature:()
gui_get_width	gui.cpp	/^int gui_get_width(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_get_width	gui.h	/^int gui_get_width(GUI_Panel * panel); $/;"	p	signature:(GUI_Panel * panel)
gui_glview_event_render	gui.cpp	/^void gui_glview_event_render(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_glview_event_render	gui.h	/^void gui_glview_event_render(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_helper_initialize	gui.cpp	/^bool gui_helper_initialize(const int width, const int height)$/;"	f	signature:(const int width, const int height)
gui_helper_initialize	gui.h	/^bool gui_helper_initialize(const int width, const int height);$/;"	p	signature:(const int width, const int height)
gui_helper_initialize_opengl	gui.cpp	/^bool gui_helper_initialize_opengl()$/;"	f	signature:()
gui_helper_initialize_opengl	gui.h	/^bool gui_helper_initialize_opengl(); $/;"	p	signature:()
gui_helper_initialize_sdl	gui.cpp	/^bool gui_helper_initialize_sdl(const int width, const int height)$/;"	f	signature:(const int width, const int height)
gui_helper_initialize_sdl	gui.h	/^bool gui_helper_initialize_sdl(int width, int height);$/;"	p	signature:(int width, int height)
gui_helper_opengl_adjust_size	gui.cpp	/^void gui_helper_opengl_adjust_size(int width, int height)$/;"	f	signature:(int width, int height)
gui_helper_opengl_adjust_size	gui.h	/^void gui_helper_opengl_adjust_size(const int width, const int height);$/;"	p	signature:(const int width, const int height)
gui_initialize	gui.cpp	/^void gui_initialize()$/;"	f	signature:()
gui_initialize	gui.h	/^void gui_initialize();$/;"	p	signature:()
gui_is_panel_disabled	gui.cpp	/^bool gui_is_panel_disabled(const GUI_Panel * panel)$/;"	f	signature:(const GUI_Panel * panel)
gui_is_panel_disabled	gui.h	/^bool gui_is_panel_disabled(const GUI_Panel * panel);$/;"	p	signature:(const GUI_Panel * panel)
gui_is_panel_visible	gui.cpp	/^bool gui_is_panel_visible(const GUI_Panel * panel)$/;"	f	signature:(const GUI_Panel * panel)
gui_is_panel_visible	gui.h	/^bool gui_is_panel_visible(const GUI_Panel * panel);$/;"	p	signature:(const GUI_Panel * panel)
gui_left_vfill	gui.cpp	/^void gui_left_vfill(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_left_vfill	gui.h	/^void gui_left_vfill(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_make_glview	gui.cpp	/^void gui_make_glview(GUI_Panel * panel, GUI_GLView_Render render)$/;"	f	signature:(GUI_Panel * panel, GUI_GLView_Render render)
gui_make_glview	gui.h	/^void gui_make_glview(GUI_Panel * panel, GUI_GLView_Render render);$/;"	p	signature:(GUI_Panel * panel, GUI_GLView_Render render)
gui_make_menu	gui.cpp	/^void gui_make_menu(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_make_menu	gui.h	/^void gui_make_menu(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_menu_event_mousedown	gui.cpp	/^void gui_menu_event_mousedown(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_menu_event_mousedown	gui.h	/^void gui_menu_event_mousedown(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_menu_event_mousedownout	gui.cpp	/^void gui_menu_event_mousedownout(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_menu_event_mousedownout	gui.h	/^void gui_menu_event_mousedownout(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_new_button	gui.cpp	/^GUI_Panel * gui_new_button(GUI_Panel * parent, GUI_Panel * sibling, const char * caption, GUI_Event button_clicked)$/;"	f	signature:(GUI_Panel * parent, GUI_Panel * sibling, const char * caption, GUI_Event button_clicked)
gui_new_button	gui.h	/^GUI_Panel * gui_new_button(GUI_Panel * parent, GUI_Panel * sibling, const char * caption, GUI_Event button_clicked);$/;"	p	signature:(GUI_Panel * parent, GUI_Panel * sibling, const char * caption, GUI_Event button_clicked)
gui_new_checkbox	gui.cpp	/^GUI_Panel * gui_new_checkbox(GUI_Panel * parent, GUI_Panel * sibling, const char * caption)$/;"	f	signature:(GUI_Panel * parent, GUI_Panel * sibling, const char * caption)
gui_new_checkbox	gui.h	/^GUI_Panel * gui_new_checkbox(GUI_Panel * parent, GUI_Panel * sibling, const char * caption);$/;"	p	signature:(GUI_Panel * parent, GUI_Panel * sibling, const char * caption)
gui_new_hseparator	gui.cpp	/^GUI_Panel * gui_new_hseparator(GUI_Panel * parent, GUI_Panel * sibling)$/;"	f	signature:(GUI_Panel * parent, GUI_Panel * sibling)
gui_new_hseparator	gui.h	/^GUI_Panel * gui_new_hseparator(GUI_Panel * parent, GUI_Panel * sibling);$/;"	p	signature:(GUI_Panel * parent, GUI_Panel * sibling)
gui_new_label	gui.cpp	/^GUI_Panel * gui_new_label(GUI_Panel * parent, GUI_Panel * sibling, const char * caption)$/;"	f	signature:(GUI_Panel * parent, GUI_Panel * sibling, const char * caption)
gui_new_label	gui.h	/^GUI_Panel * gui_new_label(GUI_Panel * parent, GUI_Panel * sibling, const char * caption);$/;"	p	signature:(GUI_Panel * parent, GUI_Panel * sibling, const char * caption)
gui_new_menu_item	gui.cpp	/^GUI_Panel * gui_new_menu_item(GUI_Panel * parent, char * caption)$/;"	f	signature:(GUI_Panel * parent, char * caption)
gui_new_menu_item	gui.h	/^GUI_Panel * gui_new_menu_item(GUI_Panel * parent, char * caption);$/;"	p	signature:(GUI_Panel * parent, char * caption)
gui_new_panel	gui.cpp	/^GUI_Panel * gui_new_panel(GUI_Panel * parent, GUI_Panel * sibling, GUI_Positioner positioner, const char * debugging_title)$/;"	f	signature:(GUI_Panel * parent, GUI_Panel * sibling, GUI_Positioner positioner, const char * debugging_title)
gui_new_panel	gui.h	/^GUI_Panel * gui_new_panel(GUI_Panel * parent, GUI_Panel * sibling, GUI_Positioner positioner, const char * debugging_title = NULL);$/;"	p	signature:(GUI_Panel * parent, GUI_Panel * sibling, GUI_Positioner positioner, const char * debugging_title = NULL)
gui_new_radio_button	gui.cpp	/^GUI_Panel * gui_new_radio_button(GUI_Panel * parent, GUI_Panel * sibling, GUI_Panel * group, const char * caption)$/;"	f	signature:(GUI_Panel * parent, GUI_Panel * sibling, GUI_Panel * group, const char * caption)
gui_new_radio_button	gui.h	/^GUI_Panel * gui_new_radio_button(GUI_Panel * parent, GUI_Panel * sibling, GUI_Panel * group, const char * caption);$/;"	p	signature:(GUI_Panel * parent, GUI_Panel * sibling, GUI_Panel * group, const char * caption)
gui_new_radio_group	gui.cpp	/^GUI_Panel * gui_new_radio_group(GUI_Panel * parent)$/;"	f	signature:(GUI_Panel * parent)
gui_new_radio_group	gui.h	/^GUI_Panel * gui_new_radio_group(GUI_Panel * parent);$/;"	p	signature:(GUI_Panel * parent)
gui_new_tab	gui.cpp	/^GUI_Panel * gui_new_tab(GUI_Panel * tabs_container, const char * title)$/;"	f	signature:(GUI_Panel * tabs_container, const char * title)
gui_new_tab	gui.h	/^GUI_Panel * gui_new_tab(GUI_Panel * tabs_container, const char * title);$/;"	p	signature:(GUI_Panel * tabs_container, const char * title)
gui_new_tabs	gui.cpp	/^GUI_Panel * gui_new_tabs(GUI_Panel * parent, GUI_Panel * sibling, GUI_Positioner positioner)$/;"	f	signature:(GUI_Panel * parent, GUI_Panel * sibling, GUI_Positioner positioner)
gui_new_tabs	gui.h	/^GUI_Panel * gui_new_tabs(GUI_Panel * parent, GUI_Panel * sibling, GUI_Positioner positioner);$/;"	p	signature:(GUI_Panel * parent, GUI_Panel * sibling, GUI_Positioner positioner)
gui_no_position	gui.cpp	/^void gui_no_position(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_no_position	gui.h	/^void gui_no_position(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_on_the_right	gui.cpp	/^void gui_on_the_right(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_on_the_right	gui.h	/^void gui_on_the_right(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_on_the_right_vfill	gui.cpp	/^void gui_on_the_right_vfill(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_on_the_right_vfill	gui.h	/^void gui_on_the_right_vfill(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_opengl_display_text	gui.cpp	/^void gui_opengl_display_text($/;"	f	signature:( GLuint texture_id, int texture_width, int texture_height, int width, int height, double x, double y, double alpha )
gui_opengl_display_text	gui.h	/^void gui_opengl_display_text($/;"	p	signature:( GLuint texture_id, int texture_width, int texture_height, int width, int height, double x, double y, double alpha )
gui_opengl_vertex	gui.cpp	/^void gui_opengl_vertex(double x, double y) $/;"	f	signature:(double x, double y)
gui_opengl_vertex	gui.h	/^void gui_opengl_vertex(double x, double y);$/;"	p	signature:(double x, double y)
gui_radio_event_mousedown	gui.cpp	/^void gui_radio_event_mousedown(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_radio_event_mousedown	gui.h	/^void gui_radio_event_mousedown(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_release	gui.cpp	/^void gui_release()$/;"	f	signature:()
gui_release	gui.h	/^void gui_release();$/;"	p	signature:()
gui_render	gui.cpp	/^void gui_render()$/;"	f	signature:()
gui_render	gui.h	/^void gui_render();$/;"	p	signature:()
gui_resolve_event	gui.cpp	/^bool gui_resolve_event(SDL_Event * event)$/;"	f	signature:(SDL_Event * event)
gui_resolve_event	gui.h	/^bool gui_resolve_event(SDL_Event * event);$/;"	p	signature:(SDL_Event * event)
gui_resolve_mousebuttondown	gui.cpp	/^bool gui_resolve_mousebuttondown(SDL_Event * event)$/;"	f	signature:(SDL_Event * event)
gui_resolve_mousebuttondown	gui.h	/^bool gui_resolve_mousebuttondown(SDL_Event * event);$/;"	p	signature:(SDL_Event * event)
gui_resolve_mousebuttonup	gui.cpp	/^bool gui_resolve_mousebuttonup(SDL_Event * event)$/;"	f	signature:(SDL_Event * event)
gui_resolve_mousebuttonup	gui.h	/^bool gui_resolve_mousebuttonup(SDL_Event * event);$/;"	p	signature:(SDL_Event * event)
gui_resolve_mousemotion	gui.cpp	/^bool gui_resolve_mousemotion(SDL_Event * event) $/;"	f	signature:(SDL_Event * event)
gui_resolve_mousemotion	gui.h	/^bool gui_resolve_mousemotion(SDL_Event * event);$/;"	p	signature:(SDL_Event * event)
gui_set_bottom_margin	gui.cpp	/^void gui_set_bottom_margin(GUI_Panel * panel, const int margin)$/;"	f	signature:(GUI_Panel * panel, const int margin)
gui_set_bottom_margin	gui.h	/^void gui_set_bottom_margin(GUI_Panel * panel, const int margin); $/;"	p	signature:(GUI_Panel * panel, const int margin)
gui_set_checkbox	gui.cpp	/^void gui_set_checkbox(GUI_Panel * checkbox, bool value)$/;"	f	signature:(GUI_Panel * checkbox, bool value)
gui_set_checkbox	gui.h	/^void gui_set_checkbox(GUI_Panel * checkbox, bool value);$/;"	p	signature:(GUI_Panel * checkbox, bool value)
gui_set_debugging_title	gui.cpp	/^void gui_set_debugging_title(GUI_Panel * panel, const char * debugging_title)$/;"	f	signature:(GUI_Panel * panel, const char * debugging_title)
gui_set_debugging_title	gui.h	/^void gui_set_debugging_title(GUI_Panel * panel, const char * debugging_title);$/;"	p	signature:(GUI_Panel * panel, const char * debugging_title)
gui_set_disabled	gui.cpp	/^void gui_set_disabled(GUI_Panel * panel, const bool value)$/;"	f	signature:(GUI_Panel * panel, const bool value)
gui_set_disabled	gui.h	/^void gui_set_disabled(GUI_Panel * panel, const bool value);$/;"	p	signature:(GUI_Panel * panel, const bool value)
gui_set_height	gui.cpp	/^void gui_set_height(GUI_Panel * panel, const int height)$/;"	f	signature:(GUI_Panel * panel, const int height)
gui_set_height	gui.h	/^void gui_set_height(GUI_Panel * panel, const int height);$/;"	p	signature:(GUI_Panel * panel, const int height)
gui_set_left_margin	gui.cpp	/^void gui_set_left_margin(GUI_Panel * panel, const int margin)$/;"	f	signature:(GUI_Panel * panel, const int margin)
gui_set_left_margin	gui.h	/^void gui_set_left_margin(GUI_Panel * panel, const int margin); $/;"	p	signature:(GUI_Panel * panel, const int margin)
gui_set_margins	gui.cpp	/^void gui_set_margins(GUI_Panel * panel, const int top, const int right, const int bottom, const int left)$/;"	f	signature:(GUI_Panel * panel, const int top, const int right, const int bottom, const int left)
gui_set_margins	gui.h	/^void gui_set_margins(GUI_Panel * panel, const int top = 0, const int right = 0, const int bottom = 0, const int left = 0);$/;"	p	signature:(GUI_Panel * panel, const int top = 0, const int right = 0, const int bottom = 0, const int left = 0)
gui_set_menu_action	gui.cpp	/^void gui_set_menu_action(GUI_Panel * panel, GUI_Event event)$/;"	f	signature:(GUI_Panel * panel, GUI_Event event)
gui_set_menu_action	gui.h	/^void gui_set_menu_action(GUI_Panel * panel, GUI_Event event);$/;"	p	signature:(GUI_Panel * panel, GUI_Event event)
gui_set_panel_visible	gui.cpp	/^void gui_set_panel_visible(GUI_Panel * panel, bool visibility)$/;"	f	signature:(GUI_Panel * panel, bool visibility)
gui_set_panel_visible	gui.h	/^void gui_set_panel_visible(GUI_Panel * panel, bool visibility);$/;"	p	signature:(GUI_Panel * panel, bool visibility)
gui_set_right_margin	gui.cpp	/^void gui_set_right_margin(GUI_Panel * panel, const int margin)$/;"	f	signature:(GUI_Panel * panel, const int margin)
gui_set_right_margin	gui.h	/^void gui_set_right_margin(GUI_Panel * panel, const int margin); $/;"	p	signature:(GUI_Panel * panel, const int margin)
gui_set_size	gui.cpp	/^void gui_set_size(const int width, const int height)$/;"	f	signature:(const int width, const int height)
gui_set_size	gui.h	/^void gui_set_size(const int width, const int height); $/;"	p	signature:(const int width, const int height)
gui_set_style	gui.cpp	/^void gui_set_style(GUI_Panel * panel, GUI_Render rendering_function)$/;"	f	signature:(GUI_Panel * panel, GUI_Render rendering_function)
gui_set_style	gui.h	/^void gui_set_style(GUI_Panel * panel, GUI_Render rendering_function);$/;"	p	signature:(GUI_Panel * panel, GUI_Render rendering_function)
gui_set_top_margin	gui.cpp	/^void gui_set_top_margin(GUI_Panel * panel, const int margin)$/;"	f	signature:(GUI_Panel * panel, const int margin)
gui_set_top_margin	gui.h	/^void gui_set_top_margin(GUI_Panel * panel, const int margin); $/;"	p	signature:(GUI_Panel * panel, const int margin)
gui_set_width	gui.cpp	/^void gui_set_width(GUI_Panel * panel, const int width)$/;"	f	signature:(GUI_Panel * panel, const int width)
gui_set_width	gui.h	/^void gui_set_width(GUI_Panel * panel, const int width);$/;"	p	signature:(GUI_Panel * panel, const int width)
gui_style_background	gui_style.cpp	/^void gui_style_background(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_style_background	gui_style.h	/^void gui_style_background(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_style_button	gui_style.cpp	/^void gui_style_button(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_style_button	gui_style.h	/^void gui_style_button(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_style_checkbox	gui_style.cpp	/^void gui_style_checkbox(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_style_checkbox	gui_style.h	/^void gui_style_checkbox(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_style_label	gui_style.cpp	/^void gui_style_label(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_style_label	gui_style.h	/^void gui_style_label(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_style_menu_item	gui_style.cpp	/^void gui_style_menu_item(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_style_menu_item	gui_style.h	/^void gui_style_menu_item(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_style_radio	gui_style.cpp	/^void gui_style_radio(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_style_radio	gui_style.h	/^void gui_style_radio(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_style_separator	gui_style.cpp	/^void gui_style_separator(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_style_separator	gui_style.h	/^void gui_style_separator(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_style_tab_button	gui_style.cpp	/^void gui_style_tab_button(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_style_tab_button	gui_style.h	/^void gui_style_tab_button(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_style_tab_content	gui_style.cpp	/^void gui_style_tab_content(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_style_tab_content	gui_style.h	/^void gui_style_tab_content(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_tab_event_mousedown	gui.cpp	/^void gui_tab_event_mousedown(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_tab_event_mousedown	gui.h	/^void gui_tab_event_mousedown(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_top_hfill	gui.cpp	/^void gui_top_hfill(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
gui_top_hfill	gui.h	/^void gui_top_hfill(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
gui_upload_opengl_texture	gui.cpp	/^GLuint gui_upload_opengl_texture(IplImage * image)$/;"	f	signature:(IplImage * image)
gui_upload_opengl_texture	gui.h	/^GLuint gui_upload_opengl_texture(IplImage * image);$/;"	p	signature:(IplImage * image)
h	/usr/include/opencv/cvvidsurv.hpp	/^    float   w,h; \/* blob sizes      *\/$/;"	m	struct:CvBlob	access:public
haar_feature	/usr/include/opencv/cvtypes.h	/^    CvHaarFeature* haar_feature;$/;"	m	struct:CvHaarClassifier	access:public
hashsize	/usr/include/opencv/cxtypes.h	/^    int hashsize;$/;"	m	struct:CvSparseMat	access:public
hashtable	/usr/include/opencv/cxtypes.h	/^    void** hashtable;$/;"	m	struct:CvSparseMat	access:public
hashval	/usr/include/opencv/cxtypes.h	/^    unsigned hashval;$/;"	m	struct:CvSparseNode	access:public
hashval	/usr/include/opencv/cxtypes.h	/^    unsigned hashval;$/;"	m	struct:CvStringHashNode	access:public
have_labels	/usr/include/opencv/ml.h	/^    bool have_labels, have_priors;$/;"	m	struct:CvDTreeTrainData	access:public
have_priors	/usr/include/opencv/ml.h	/^    bool have_labels, have_priors;$/;"	m	struct:CvDTreeTrainData	access:public
have_subsample	/usr/include/opencv/ml.h	/^    bool have_subsample;$/;"	m	class:CvBoost	access:protected
hdr	/usr/include/opencv/cxcore.h	/^    CvMatND* hdr[CV_MAX_ARR]; \/* pointers to the headers of the$/;"	m	struct:CvNArrayIterator	access:public
hdr_refcount	/usr/include/opencv/cxtypes.h	/^    int hdr_refcount;$/;"	m	struct:CvMat	access:public
hdr_refcount	/usr/include/opencv/cxtypes.h	/^    int hdr_refcount;$/;"	m	struct:CvMatND	access:public
hdr_refcount	/usr/include/opencv/cxtypes.h	/^    int hdr_refcount;$/;"	m	struct:CvSparseMat	access:public
header_size	/usr/include/opencv/cxtypes.h	/^    int header_size;$/;"	m	struct:CvTypeInfo	access:public
heap	/usr/include/opencv/cxtypes.h	/^    struct CvSet* heap;$/;"	m	struct:CvSparseMat	typeref:struct:CvSparseMat::CvSet	access:public
height	/usr/include/opencv/cvcompat.h	/^    int     height;                 \/* height of the image  ( in pixels )               *\/$/;"	m	struct:_CvPixelPosition8u	access:public
height	/usr/include/opencv/cvcompat.h	/^    int     height;$/;"	m	struct:_CvPixelPosition32f	access:public
height	/usr/include/opencv/cvcompat.h	/^    int     height;$/;"	m	struct:_CvPixelPosition8s	access:public
height	/usr/include/opencv/cxcore.hpp	/^    int height() const { return image ? image->height : 0; }$/;"	f	class:CvImage	access:public	signature:() const
height	/usr/include/opencv/cxtypes.h	/^        int height;$/;"	m	union:CvMat::__anon14	access:public
height	/usr/include/opencv/cxtypes.h	/^    float height;$/;"	m	struct:CvSize2D32f	access:public
height	/usr/include/opencv/cxtypes.h	/^    int  height;        \/* image height in pixels *\/$/;"	m	struct:_IplImage	access:public
height	/usr/include/opencv/cxtypes.h	/^    int  height;$/;"	m	struct:_IplROI	access:public
height	/usr/include/opencv/cxtypes.h	/^    int height;$/;"	m	struct:CvRect	access:public
height	/usr/include/opencv/cxtypes.h	/^    int height;$/;"	m	struct:__anon18	access:public
height	core_image_loader.h	/^	int width, height;$/;"	m	struct:Image_Loader_Shot	access:public
height	geometry_structures.h	/^	int width, height;     \/\/ size of image plane in pixels $/;"	m	struct:Shot	access:public
height	gui.h	/^	int width, height;$/;"	m	struct:GUI_Context	access:public
height	gui.h	/^	int width, height;$/;"	m	struct:GUI_Panel	access:public
height	tool_matching.h	/^	int width, height; \/\/ size of loaded shot $/;"	m	struct:Matching_Shot	access:public
height	ui_context.h	/^	double x, y, width, height;$/;"	m	struct:Context_Item	access:public
hid_cascade	/usr/include/opencv/cvtypes.h	/^    CvHidHaarClassifierCascade* hid_cascade;$/;"	m	struct:CvHaarClassifierCascade	access:public
hidden	gui.h	/^		hidden, \/\/ panel is hidden $/;"	m	struct:GUI_Panel	access:public
hidden	ui_state.h	/^	bool hidden;    \/\/ true if the group is hidden$/;"	m	struct:Group	access:public
hint	tool_core.h	/^	char hint[2000];    \/\/ short help text$/;"	m	struct:Tool	access:public
hscale	/usr/include/opencv/cxcore.h	/^    float       hscale, vscale;$/;"	m	struct:CvFont	access:public
hu1	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
hu2	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
hu3	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
hu4	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
hu5	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
hu6	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
hu7	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
i	/usr/include/opencv/cxtypes.h	/^        int i;    \/* scalar integer number *\/$/;"	m	union:CvFileNode::__anon19	access:public
i	/usr/include/opencv/cxtypes.h	/^        int* i;$/;"	m	union:CvMat::__anon13	access:public
i	/usr/include/opencv/cxtypes.h	/^        int* i;$/;"	m	union:CvMatND::__anon16	access:public
i	/usr/include/opencv/cxtypes.h	/^    int i;$/;"	m	union:Cv32suf	access:public
i	/usr/include/opencv/cxtypes.h	/^    int64 i;$/;"	m	union:Cv64suf	access:public
i	/usr/include/opencv/ml.h	/^    int i;$/;"	m	struct:CvPair32s32f	access:public
i	gui.h	/^	int i; $/;"	m	struct:GUI_Panel	access:public
i	tool_matching.cpp	/^	size_t i; \/\/ index of parent for children, size for root nodes$/;"	m	struct:Matching_UF_Node	file:	access:public
icons	ui_state.h	/^	SDL_Surface * icons;$/;"	m	struct:UI_State	access:public
icvComCoeffForLine	/usr/include/opencv/cvaux.h	/^CVAPI(int) icvComCoeffForLine(   CvPoint2D64d point1,$/;"	p	signature:( CvPoint2D64d point1, CvPoint2D64d point2, CvPoint2D64d point3, CvPoint2D64d point4, CvMatr64d camMatr1, CvMatr64d rotMatr1, CvMatr64d transVect1, CvMatr64d camMatr2, CvMatr64d rotMatr2, CvMatr64d transVect2, CvStereoLineCoeff* coeffs, int* needSwapCameras)
icvCompute3DPoint	/usr/include/opencv/cvaux.h	/^CVAPI(int) icvCompute3DPoint(    double alpha,double betta,$/;"	p	signature:( double alpha,double betta, CvStereoLineCoeff* coeffs, CvPoint3D64d* point)
icvComputeCoeffForStereo	/usr/include/opencv/cvaux.h	/^CVAPI(int) icvComputeCoeffForStereo(  CvStereoCamera* stereoCamera);$/;"	p	signature:( CvStereoCamera* stereoCamera)
icvComputeRestStereoParams	/usr/include/opencv/cvaux.h	/^CVAPI(int) icvComputeRestStereoParams(CvStereoCamera *stereoparams);$/;"	p	signature:(CvStereoCamera *stereoparams)
icvComputeStereoLineCoeffs	/usr/include/opencv/cvaux.h	/^CVAPI(int) icvComputeStereoLineCoeffs(   CvPoint3D64d pointA,$/;"	p	signature:( CvPoint3D64d pointA, CvPoint3D64d pointB, CvPoint3D64d pointCam1, double gamma, CvStereoLineCoeff* coeffs)
icvComputeStereoParamsForCameras	/usr/include/opencv/cvaux.h	/^CVAPI(void) icvComputeStereoParamsForCameras(CvStereoCamera* stereoCamera);$/;"	p	signature:(CvStereoCamera* stereoCamera)
icvComputeeInfiniteProject1	/usr/include/opencv/cvaux.h	/^CVAPI(void) icvComputeeInfiniteProject1(CvMatr64d    rotMatr,$/;"	p	signature:(CvMatr64d rotMatr, CvMatr64d camMatr1, CvMatr64d camMatr2, CvPoint2D32f point1, CvPoint2D32f *point2)
icvComputeeInfiniteProject2	/usr/include/opencv/cvaux.h	/^CVAPI(void) icvComputeeInfiniteProject2(CvMatr64d    rotMatr,$/;"	p	signature:(CvMatr64d rotMatr, CvMatr64d camMatr1, CvMatr64d camMatr2, CvPoint2D32f* point1, CvPoint2D32f point2)
icvConvertPointSystem	/usr/include/opencv/cvaux.h	/^CVAPI(int) icvConvertPointSystem(CvPoint3D64d  M2,$/;"	p	signature:(CvPoint3D64d M2, CvPoint3D64d* M1, CvMatr64d rotMatr, CvMatr64d transVect )
icvConvertWarpCoordinates	/usr/include/opencv/cvaux.h	/^CVAPI(int) icvConvertWarpCoordinates(double coeffs[3][3],$/;"	p	signature:(double coeffs[3][3], CvPoint2D32f* cameraPoint, CvPoint2D32f* warpPoint, int direction)
icvCreateConvertMatrVect	/usr/include/opencv/cvaux.h	/^CVAPI(int) icvCreateConvertMatrVect( CvMatr64d     rotMatr1,$/;"	p	signature:( CvMatr64d rotMatr1, CvMatr64d transVect1, CvMatr64d rotMatr2, CvMatr64d transVect2, CvMatr64d convRotMatr, CvMatr64d convTransVect)
icvCreateIsometricImage	/usr/include/opencv/cvaux.h	/^CVAPI(IplImage*) icvCreateIsometricImage( IplImage* src, IplImage* dst,$/;"	p	signature:( IplImage* src, IplImage* dst, int desired_depth, int desired_num_channels )
icvDefinePointPosition	/usr/include/opencv/cvaux.h	/^CVAPI(float) icvDefinePointPosition(CvPoint2D32f point1,CvPoint2D32f point2,CvPoint2D32f point);$/;"	p	signature:(CvPoint2D32f point1,CvPoint2D32f point2,CvPoint2D32f point)
icvDrawMosaic	/usr/include/opencv/cvaux.h	/^CVAPI(void)  icvDrawMosaic( CvSubdiv2D* subdiv, IplImage* src, IplImage* dst );$/;"	p	signature:( CvSubdiv2D* subdiv, IplImage* src, IplImage* dst )
icvGetAngleLine	/usr/include/opencv/cvaux.h	/^CVAPI(int) icvGetAngleLine( CvPoint2D64d startPoint, CvSize imageSize,CvPoint2D64d *point1,CvPoint2D64d *point2);$/;"	p	signature:( CvPoint2D64d startPoint, CvSize imageSize,CvPoint2D64d *point1,CvPoint2D64d *point2)
icvGetCoefForPiece	/usr/include/opencv/cvaux.h	/^CVAPI(void) icvGetCoefForPiece(   CvPoint2D64d p_start,CvPoint2D64d p_end,$/;"	p	signature:( CvPoint2D64d p_start,CvPoint2D64d p_end, double *a,double *b,double *c, int* result)
icvGetCrossDirectDirect	/usr/include/opencv/cvaux.h	/^CVAPI(void) icvGetCrossDirectDirect(  CvVect64d direct1,CvVect64d direct2,$/;"	p	signature:( CvVect64d direct1,CvVect64d direct2, CvPoint2D64d *cross,int* result)
icvGetCrossLineDirect	/usr/include/opencv/cvaux.h	/^CVAPI(int) icvGetCrossLineDirect(CvPoint2D32f p1,CvPoint2D32f p2,float a,float b,float c,CvPoint2D32f* cross);$/;"	p	signature:(CvPoint2D32f p1,CvPoint2D32f p2,float a,float b,float c,CvPoint2D32f* cross)
icvGetCrossLines	/usr/include/opencv/cvaux.h	/^CVAPI(int) icvGetCrossLines(CvPoint3D64d point11,CvPoint3D64d point12,$/;"	p	signature:(CvPoint3D64d point11,CvPoint3D64d point12, CvPoint3D64d point21,CvPoint3D64d point22, CvPoint3D64d* midPoint)
icvGetCrossPieceDirect	/usr/include/opencv/cvaux.h	/^CVAPI(void) icvGetCrossPieceDirect(   CvPoint2D64d p_start,CvPoint2D64d p_end,$/;"	p	signature:( CvPoint2D64d p_start,CvPoint2D64d p_end, double a,double b,double c, CvPoint2D64d *cross,int* result)
icvGetCrossPiecePiece	/usr/include/opencv/cvaux.h	/^CVAPI(void) icvGetCrossPiecePiece( CvPoint2D64d p1_start,CvPoint2D64d p1_end,$/;"	p	signature:( CvPoint2D64d p1_start,CvPoint2D64d p1_end, CvPoint2D64d p2_start,CvPoint2D64d p2_end, CvPoint2D64d* cross, int* result)
icvGetCrossPieceVector	/usr/include/opencv/cvaux.h	/^CVAPI(int) icvGetCrossPieceVector(CvPoint2D32f p1_start,CvPoint2D32f p1_end,CvPoint2D32f v2_start,CvPoint2D32f v2_end,CvPoint2D32f *cross);$/;"	p	signature:(CvPoint2D32f p1_start,CvPoint2D32f p1_end,CvPoint2D32f v2_start,CvPoint2D32f v2_end,CvPoint2D32f *cross)
icvGetCrossRectDirect	/usr/include/opencv/cvaux.h	/^CVAPI(void) icvGetCrossRectDirect(    CvSize imageSize,$/;"	p	signature:( CvSize imageSize, double a,double b,double c, CvPoint2D64d *start,CvPoint2D64d *end, int* result)
icvGetCutPiece	/usr/include/opencv/cvaux.h	/^CVAPI(void) icvGetCutPiece(   CvVect64d areaLineCoef1,CvVect64d areaLineCoef2,$/;"	p	signature:( CvVect64d areaLineCoef1,CvVect64d areaLineCoef2, CvPoint2D64d epipole, CvSize imageSize, CvPoint2D64d* point11,CvPoint2D64d* point12, CvPoint2D64d* point21,CvPoint2D64d* point22, int* result)
icvGetDirectionForPoint	/usr/include/opencv/cvaux.h	/^CVAPI(int) icvGetDirectionForPoint(  CvPoint2D64d point,$/;"	p	signature:( CvPoint2D64d point, CvMatr64d camMatr, CvPoint3D64d* direct)
icvGetDistanceFromPointToDirect	/usr/include/opencv/cvaux.h	/^CVAPI(void) icvGetDistanceFromPointToDirect( CvPoint2D64d point,CvVect64d lineCoef,double*dist);$/;"	p	signature:( CvPoint2D64d point,CvVect64d lineCoef,double*dist)
icvGetMiddleAnglePoint	/usr/include/opencv/cvaux.h	/^CVAPI(void) icvGetMiddleAnglePoint(   CvPoint2D64d basePoint,$/;"	p	signature:( CvPoint2D64d basePoint, CvPoint2D64d point1,CvPoint2D64d point2, CvPoint2D64d* midPoint)
icvGetNormalDirect	/usr/include/opencv/cvaux.h	/^CVAPI(void) icvGetNormalDirect(CvVect64d direct,CvPoint2D64d point,CvVect64d normDirect);$/;"	p	signature:(CvVect64d direct,CvPoint2D64d point,CvVect64d normDirect)
icvGetPieceLength	/usr/include/opencv/cvaux.h	/^CVAPI(void) icvGetPieceLength(CvPoint2D64d point1,CvPoint2D64d point2,double* dist);$/;"	p	signature:(CvPoint2D64d point1,CvPoint2D64d point2,double* dist)
icvGetPieceLength3D	/usr/include/opencv/cvaux.h	/^CVAPI(void) icvGetPieceLength3D(CvPoint3D64d point1,CvPoint3D64d point2,double* dist);$/;"	p	signature:(CvPoint3D64d point1,CvPoint3D64d point2,double* dist)
icvGetQuadsTransform	/usr/include/opencv/cvaux.h	/^CVAPI(void) icvGetQuadsTransform( CvSize        imageSize,$/;"	p	signature:( CvSize imageSize, CvMatr64d camMatr1, CvMatr64d rotMatr1, CvVect64d transVect1, CvMatr64d camMatr2, CvMatr64d rotMatr2, CvVect64d transVect2, CvSize* warpSize, double quad1[4][2], double quad2[4][2], CvMatr64d fundMatr, CvPoint3D64d* epipole1, CvPoint3D64d* epipole2 )
icvGetQuadsTransformStruct	/usr/include/opencv/cvaux.h	/^CVAPI(void) icvGetQuadsTransformStruct(  CvStereoCamera* stereoCamera);$/;"	p	signature:( CvStereoCamera* stereoCamera)
icvGetSymPoint3D	/usr/include/opencv/cvaux.h	/^CVAPI(int) icvGetSymPoint3D(  CvPoint3D64d pointCorner,$/;"	p	signature:( CvPoint3D64d pointCorner, CvPoint3D64d point1, CvPoint3D64d point2, CvPoint3D64d *pointSym2)
icvGetVect	/usr/include/opencv/cvaux.h	/^CVAPI(double) icvGetVect(CvPoint2D64d basePoint,CvPoint2D64d point1,CvPoint2D64d point2);$/;"	p	signature:(CvPoint2D64d basePoint,CvPoint2D64d point1,CvPoint2D64d point2)
icvProjectPointToDirect	/usr/include/opencv/cvaux.h	/^CVAPI(void) icvProjectPointToDirect(  CvPoint2D64d point,CvVect64d lineCoeff,$/;"	p	signature:( CvPoint2D64d point,CvVect64d lineCoeff, CvPoint2D64d* projectPoint)
icvProjectPointToImage	/usr/include/opencv/cvaux.h	/^CVAPI(void) icvProjectPointToImage(   CvPoint3D64d point,$/;"	p	signature:( CvPoint3D64d point, CvMatr64d camMatr,CvMatr64d rotMatr,CvVect64d transVect, CvPoint2D64d* projPoint)
icvSqDist2D32f	/usr/include/opencv/cvaux.h	/^CV_INLINE double icvSqDist2D32f( CvPoint2D32f pt1, CvPoint2D32f pt2 )$/;"	f	signature:( CvPoint2D32f pt1, CvPoint2D32f pt2 )
icvStereoCalibration	/usr/include/opencv/cvaux.h	/^CVAPI(int) icvStereoCalibration( int numImages,$/;"	p	signature:( int numImages, int* nums, CvSize imageSize, CvPoint2D32f* imagePoints1, CvPoint2D32f* imagePoints2, CvPoint3D32f* objectPoints, CvStereoCamera* stereoparams )
icvSubdiv2DCheck	/usr/include/opencv/cvaux.h	/^CVAPI(int)   icvSubdiv2DCheck( CvSubdiv2D* subdiv );$/;"	p	signature:( CvSubdiv2D* subdiv )
id	/usr/include/opencv/cvaux.h	/^    int id;$/;"	m	struct:__anon3	access:public
id	/usr/include/opencv/cvaux.h	/^    int id;$/;"	m	struct:__anon4	access:public
id	core_image_loader.h	/^	size_t id, time;$/;"	m	struct:Image_Loader_Request_Handle	access:public
idxoffset	/usr/include/opencv/cxtypes.h	/^    int idxoffset;$/;"	m	struct:CvSparseMat	access:public
image	/usr/include/opencv/cxcore.hpp	/^    IplImage* image;$/;"	m	class:CvImage	access:protected
image	core_image_loader.h	/^	IplImage * image;$/;"	m	struct:Image_Loader_Request	access:public
imageData	/usr/include/opencv/cxtypes.h	/^    char *imageData;  \/* pointer to aligned image data *\/$/;"	m	struct:_IplImage	access:public
imageDataOrigin	/usr/include/opencv/cxtypes.h	/^    char *imageDataOrigin; \/* pointer to very origin of image data$/;"	m	struct:_IplImage	access:public
imageId	/usr/include/opencv/cxtypes.h	/^    void  *imageId;     \/* ditto *\/$/;"	m	struct:_IplImage	access:public
imageSize	/usr/include/opencv/cxtypes.h	/^    int  imageSize;     \/* image data size in bytes$/;"	m	struct:_IplImage	access:public
image_filename	geometry_structures.h	/^	char * image_filename; \/\/ image's filename, all changes should be also sent to image_loader$/;"	m	struct:Shot	access:public
image_loaded_flush_suggested	core_image_loader.cpp	/^void image_loaded_flush_suggested() $/;"	f	signature:()
image_loaded_flush_suggested	core_image_loader.h	/^void image_loaded_flush_suggested();$/;"	p	signature:()
image_loader_cache_full_count	core_image_loader.cpp	/^static unsigned int image_loader_cache_full_count;$/;"	v	file:
image_loader_cache_low_count	core_image_loader.cpp	/^static unsigned int image_loader_cache_low_count;$/;"	v	file:
image_loader_cancel_all_requests	core_image_loader.cpp	/^void image_loader_cancel_all_requests() $/;"	f	signature:()
image_loader_cancel_all_requests	core_image_loader.h	/^void image_loader_cancel_all_requests();$/;"	p	signature:()
image_loader_cancel_request	core_image_loader.cpp	/^void image_loader_cancel_request(Image_Loader_Request_Handle * handle) $/;"	f	signature:(Image_Loader_Request_Handle * handle)
image_loader_cancel_request	core_image_loader.h	/^void image_loader_cancel_request(Image_Loader_Request_Handle * handle);$/;"	p	signature:(Image_Loader_Request_Handle * handle)
image_loader_flush_texture_ids	core_image_loader.cpp	/^void image_loader_flush_texture_ids() $/;"	f	signature:()
image_loader_flush_texture_ids	core_image_loader.h	/^void image_loader_flush_texture_ids();$/;"	p	signature:()
image_loader_free_full	core_image_loader.cpp	/^void image_loader_free_full()$/;"	f	signature:()
image_loader_free_full	core_image_loader.h	/^void image_loader_free_full();$/;"	p	signature:()
image_loader_free_ids	core_image_loader.cpp	/^static size_t image_loader_free_ids[IMAGE_LOADER_MAX_REQUESTS];$/;"	v	file:
image_loader_free_ids_counter	core_image_loader.cpp	/^static size_t image_loader_free_ids_counter;$/;"	v	file:
image_loader_free_low	core_image_loader.cpp	/^void image_loader_free_low()$/;"	f	signature:()
image_loader_free_low	core_image_loader.h	/^void image_loader_free_low();$/;"	p	signature:()
image_loader_full_counter	core_image_loader.cpp	/^static size_t image_loader_full_counter, image_loader_low_counter;$/;"	v	file:
image_loader_get_original_dimensions	core_image_loader.cpp	/^void image_loader_get_original_dimensions(Image_Loader_Request_Handle handle, int * width, int * height) $/;"	f	signature:(Image_Loader_Request_Handle handle, int * width, int * height)
image_loader_get_original_dimensions	core_image_loader.h	/^void image_loader_get_original_dimensions(Image_Loader_Request_Handle handle, int * width, int * height);$/;"	p	signature:(Image_Loader_Request_Handle handle, int * width, int * height)
image_loader_initialize	core_image_loader.cpp	/^bool image_loader_initialize(const int cache_full_count, const int cache_low_count) $/;"	f	signature:(const int cache_full_count, const int cache_low_count)
image_loader_initialize	core_image_loader.h	/^bool image_loader_initialize(const int cache_full_count, const int cache_low_count);$/;"	p	signature:(const int cache_full_count, const int cache_low_count)
image_loader_low_counter	core_image_loader.cpp	/^static size_t image_loader_full_counter, image_loader_low_counter;$/;"	v	file:
image_loader_new_request	core_image_loader.cpp	/^Image_Loader_Request_Handle image_loader_new_request($/;"	f	signature:( const size_t shot_id, const char * const filename, const Image_Loader_Quality quality, const Image_Loader_Content content , const double x , const double y , const double sx , const double sy , const bool fake )
image_loader_new_request	core_image_loader.h	/^Image_Loader_Request_Handle image_loader_new_request($/;"	p	signature:( const size_t shot_id, const char * const filename, const Image_Loader_Quality quality, const Image_Loader_Content content = IMAGE_LOADER_ALL, const double x = -1, const double y = -1, const double sx = -1, const double sy = -1, const bool fake = false )
image_loader_nonempty_handle	core_image_loader.cpp	/^bool image_loader_nonempty_handle(Image_Loader_Request_Handle handle)$/;"	f	signature:(Image_Loader_Request_Handle handle)
image_loader_nonempty_handle	core_image_loader.h	/^bool image_loader_nonempty_handle(Image_Loader_Request_Handle handle);$/;"	p	signature:(Image_Loader_Request_Handle handle)
image_loader_opengl_upload_ready	core_image_loader.cpp	/^bool image_loader_opengl_upload_ready($/;"	f	signature:( Image_Loader_Request_Handle handle, GLuint * texture, double * texture_min_x , double * texture_min_y , double * texture_max_x , double * texture_max_y )
image_loader_opengl_upload_ready	core_image_loader.h	/^bool image_loader_opengl_upload_ready($/;"	p	signature:( Image_Loader_Request_Handle handle, GLuint * texture, double * texture_min_x = NULL, double * texture_min_y = NULL, double * texture_max_x = NULL, double * texture_max_y = NULL )
image_loader_opengl_upload_ready_dual	core_image_loader.cpp	/^bool image_loader_opengl_upload_ready_dual($/;"	f	signature:( Image_Loader_Request_Handle handle, GLuint * full_texture, GLuint * low_texture, double * texture_min_x , double * texture_min_y , double * texture_max_x , double * texture_max_y )
image_loader_opengl_upload_ready_dual	core_image_loader.h	/^bool image_loader_opengl_upload_ready_dual($/;"	p	signature:( Image_Loader_Request_Handle handle, GLuint * full_texture, GLuint * low_texture, double * texture_min_x = NULL, double * texture_min_y = NULL, double * texture_max_x = NULL, double * texture_max_y = NULL )
image_loader_release	core_image_loader.cpp	/^void image_loader_release()$/;"	f	signature:()
image_loader_release	core_image_loader.h	/^void image_loader_release();$/;"	p	signature:()
image_loader_request	geometry_structures.h	/^	Image_Loader_Request_Handle image_loader_request; $/;"	m	struct:Shot	access:public
image_loader_request	geometry_structures.h	/^	Image_Loader_Request_Handle image_loader_request;$/;"	m	struct:Polygon_3d	access:public
image_loader_request_ready	core_image_loader.cpp	/^bool image_loader_request_ready(Image_Loader_Request_Handle handle) $/;"	f	signature:(Image_Loader_Request_Handle handle)
image_loader_request_ready	core_image_loader.h	/^bool image_loader_request_ready(Image_Loader_Request_Handle handle);$/;"	p	signature:(Image_Loader_Request_Handle handle)
image_loader_request_ready_nolock	core_image_loader.cpp	/^static bool image_loader_request_ready_nolock(Image_Loader_Request_Handle handle) $/;"	f	file:	signature:(Image_Loader_Request_Handle handle)
image_loader_request_ready_nolock	core_image_loader.h	/^static bool image_loader_request_ready_nolock(Image_Loader_Request_Handle handle);$/;"	p	signature:(Image_Loader_Request_Handle handle)
image_loader_requests	core_image_loader.cpp	/^static Image_Loader_Requests image_loader_requests; $/;"	v	file:
image_loader_resolve_request	core_image_loader.cpp	/^void image_loader_resolve_request(const size_t request_id)$/;"	f	signature:(const size_t request_id)
image_loader_resolve_request	core_image_loader.h	/^void image_loader_resolve_request(const size_t request_id);$/;"	p	signature:(const size_t request_id)
image_loader_shots	core_image_loader.cpp	/^static Image_Loader_Shots image_loader_shots;$/;"	v	file:
image_loader_terminate	core_image_loader.cpp	/^static bool image_loader_terminate;$/;"	v	file:
image_loader_thread	core_image_loader.cpp	/^static pthread_t image_loader_thread;$/;"	v	file:
image_loader_thread_function	core_image_loader.cpp	/^void * image_loader_thread_function(void * arg)$/;"	f	signature:(void * arg)
image_loader_thread_function	core_image_loader.h	/^void * image_loader_thread_function(void * arg);$/;"	p	signature:(void * arg)
image_loader_time	core_image_loader.cpp	/^static size_t image_loader_time;$/;"	v	file:
image_loader_unprocessed_counter	core_image_loader.cpp	/^static size_t image_loader_unprocessed_counter;$/;"	v	file:
image_loader_upload_to_opengl	core_image_loader.cpp	/^void image_loader_upload_to_opengl(Image_Loader_Request_Handle handle) $/;"	f	signature:(Image_Loader_Request_Handle handle)
image_loader_upload_to_opengl	core_image_loader.h	/^void image_loader_upload_to_opengl(Image_Loader_Request_Handle handle);$/;"	p	signature:(Image_Loader_Request_Handle handle)
imax	/usr/include/opencv/cvaux.h	/^    int imax, imin;$/;"	m	struct:CvContourOrientation	access:public
imgSize	/usr/include/opencv/cvaux.h	/^    CvSize  imgSize;$/;"	m	class:CvCalibFilter	access:protected
imgSize	/usr/include/opencv/cvaux.h	/^    float   imgSize[2]; \/* size of the camera view, used during calibration *\/$/;"	m	struct:CvCamera	access:public
imin	/usr/include/opencv/cvaux.h	/^    int imax, imin;$/;"	m	struct:CvContourOrientation	access:public
impl	/usr/include/opencv/cvvidsurv.hpp	/^    class CvObjectDetectorImpl* impl;$/;"	m	class:CvObjectDetector	typeref:class:CvObjectDetector::CvObjectDetectorImpl	access:protected
index	/usr/include/opencv/cxcore.h	/^    int      index;        \/* the lower bound of certainly visited vertices *\/$/;"	m	struct:CvGraphScanner	access:public
index	ui_core.h	/^	size_t index; $/;"	m	struct:UI_Section_Meta	access:public
index	ui_core.h	/^	size_t index; $/;"	m	struct:UI_Shot_Meta	access:public
index	ui_core.h	/^	size_t index;$/;"	m	struct:UI_Meta	access:public
index1	/usr/include/opencv/cvaux.h	/^    int index1;$/;"	m	struct:CvLCMEdge	access:public
index2	/usr/include/opencv/cvaux.h	/^    int index2;$/;"	m	struct:CvLCMEdge	access:public
info	/usr/include/opencv/cxcore.hpp	/^    CvModuleInfo* info;$/;"	m	struct:CvModule	access:public
info	/usr/include/opencv/cxcore.hpp	/^    CvTypeInfo* info;$/;"	m	struct:CvType	access:public
info	/usr/include/opencv/cxtypes.h	/^    struct CvTypeInfo* info; \/* type information$/;"	m	struct:CvFileNode	typeref:struct:CvFileNode::CvTypeInfo	access:public
info_status	geometry_structures.h	/^	GEOMETRY_IMAGE_INFO_STATUS info_status; \/\/ how reliably do we know the information about width and height of the image $/;"	m	struct:Shot	access:public
init	/usr/include/opencv/cv.hpp	/^    virtual void init( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvBaseImageFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, bool _is_separable, CvSize _ksize, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
init	/usr/include/opencv/cv.hpp	/^    virtual void init( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvBoxFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, bool _normalized, CvSize _ksize, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
init	/usr/include/opencv/cv.hpp	/^    virtual void init( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvLaplaceFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, bool _is_separable, CvSize _ksize, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
init	/usr/include/opencv/cv.hpp	/^    virtual void init( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvLaplaceFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, bool _normalized, int _ksize, int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
init	/usr/include/opencv/cv.hpp	/^    virtual void init( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvLaplaceFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, const CvMat* _kx, const CvMat* _ky, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
init	/usr/include/opencv/cv.hpp	/^    virtual void init( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvLinearFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, bool _is_separable, CvSize _ksize, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
init	/usr/include/opencv/cv.hpp	/^    virtual void init( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvLinearFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, const CvMat* _kernel, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
init	/usr/include/opencv/cv.hpp	/^    virtual void init( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvMorphology	access:public	signature:( int _max_width, int _src_type, int _dst_type, bool _is_separable, CvSize _ksize, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
init	/usr/include/opencv/cv.hpp	/^    virtual void init( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvSepFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, bool _is_separable, CvSize _ksize, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
init	/usr/include/opencv/cv.hpp	/^    virtual void init( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvSepFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, const CvMat* _kx, const CvMat* _ky, CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
init	/usr/include/opencv/cv.hpp	/^    virtual void init( int _operation, int _max_width, int _src_dst_type,$/;"	p	class:CvMorphology	access:public	signature:( int _operation, int _max_width, int _src_dst_type, int _element_shape, CvMat* _element, CvSize _ksize=cvSize(0,0), CvPoint _anchor=cvPoint(-1,-1), int _border_mode=IPL_BORDER_REPLICATE, CvScalar _border_value=cvScalarAll(0) )
init_auto	/usr/include/opencv/ml.h	/^    virtual void init_auto( const CvVectors& samples );$/;"	p	class:CvEM	access:protected	signature:( const CvVectors& samples )
init_binary_element	/usr/include/opencv/cv.hpp	/^    static void init_binary_element( CvMat* _element, int _element_shape,$/;"	p	class:CvMorphology	access:public	signature:( CvMat* _element, int _element_shape, CvPoint _anchor=cvPoint(-1,-1) )
init_deriv	/usr/include/opencv/cv.hpp	/^    virtual void init_deriv( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvSepFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, int dx, int dy, int aperture_size, int flags=0 )
init_em	/usr/include/opencv/ml.h	/^    virtual void init_em( const CvVectors& train_data );$/;"	p	class:CvEM	access:protected	signature:( const CvVectors& train_data )
init_gaussian	/usr/include/opencv/cv.hpp	/^    virtual void init_gaussian( int _max_width, int _src_type, int _dst_type,$/;"	p	class:CvSepFilter	access:public	signature:( int _max_width, int _src_type, int _dst_type, int gaussian_size, double sigma )
init_gaussian_kernel	/usr/include/opencv/cv.hpp	/^    static void init_gaussian_kernel( CvMat* kernel, double sigma=-1 );$/;"	p	class:CvSepFilter	access:public	signature:( CvMat* kernel, double sigma=-1 )
init_scharr_kernel	/usr/include/opencv/cv.hpp	/^    static void init_scharr_kernel( CvMat* _kx, CvMat* _ky, int dx, int dy, int flags=0 );$/;"	p	class:CvSepFilter	access:public	signature:( CvMat* _kx, CvMat* _ky, int dx, int dy, int flags=0 )
init_sobel_kernel	/usr/include/opencv/cv.hpp	/^    static void init_sobel_kernel( CvMat* _kx, CvMat* _ky, int dx, int dy, int flags=0 );$/;"	p	class:CvSepFilter	access:public	signature:( CvMat* _kx, CvMat* _ky, int dx, int dy, int flags=0 )
init_weights	/usr/include/opencv/ml.h	/^    virtual void init_weights();$/;"	p	class:CvANN_MLP	access:protected	signature:()
initialization	application.cpp	/^bool initialization()$/;"	f	signature:()
initialization	application.h	/^bool initialization();$/;"	p	signature:()
inlier	geometry_structures.h	/^	signed char inlier; \/\/ determines if this point is inlier (= 1) or outlier (= 0),$/;"	m	struct:Calibration_Point_Meta	access:public
inside_2d_interval	core_math_routines.cpp	/^bool inside_2d_interval(const double x, const double y, const double x1, const double y1, const double x2, const double y2) $/;"	f	signature:(const double x, const double y, const double x1, const double y1, const double x2, const double y2)
inside_2d_interval	core_math_routines.h	/^bool inside_2d_interval(const double x, const double y, const double x1, const double y1, const double x2, const double y2);$/;"	p	signature:(const double x, const double y, const double x1, const double y1, const double x2, const double y2)
inside_interval	core_math_routines.cpp	/^bool inside_interval(const double value, double boundary1, double boundary2) $/;"	f	signature:(const double value, double boundary1, double boundary2)
inside_interval	core_math_routines.h	/^bool inside_interval(const double value, double boundary1, double boundary2);$/;"	p	signature:(const double value, double boundary1, double boundary2)
inside_open_interval	core_math_routines.cpp	/^bool inside_open_interval(const double value, double boundary1, double boundary2) $/;"	f	signature:(const double value, double boundary1, double boundary2)
inside_open_interval	core_math_routines.h	/^bool inside_open_interval(const double value, double boundary1, double boundary2);$/;"	p	signature:(const double value, double boundary1, double boundary2)
inspection_camera_movement_speed	ui_state.h	/^	const double inspection_camera_movement_speed;    \/\/ movement speed (in space units per second)$/;"	m	struct:UI_State	access:public
inspection_camera_rotation_speed	ui_state.h	/^	const double inspection_camera_rotation_speed;    \/\/ rotation speed (in radians per second)$/;"	m	struct:UI_State	access:public
inspection_clear_keys	ui_state.h	/^	bool * inspection_clear_keys, * shot_clear_keys, * overview_clear_keys;    \/\/ determines which key states should be automatically cleared$/;"	m	struct:UI_State	access:public
int64	/usr/include/opencv/cxtypes.h	/^typedef __int64 int64;$/;"	t
int64	/usr/include/opencv/cxtypes.h	/^typedef long long int64;$/;"	t
int_widget	tool_core.h	/^	GUI_Panel * real_widget, * int_widget, * enum_widget, * bool_widget;$/;"	m	struct:Tool_Parameter	access:public
interface_filesystem_cleanup_filename	interface_filesystem.cpp	/^char * interface_filesystem_cleanup_filename(const char * fn, const char * directory)$/;"	f	signature:(const char * fn, const char * directory)
interface_filesystem_cleanup_filename	interface_filesystem.h	/^char * interface_filesystem_cleanup_filename(const char * fn, const char * directory);$/;"	p	signature:(const char * fn, const char * directory)
interface_filesystem_cleanup_windows_filename	interface_filesystem.cpp	/^char * interface_filesystem_cleanup_windows_filename(const char * filename) $/;"	f	signature:(const char * filename)
interface_filesystem_cleanup_windows_filename	interface_filesystem.h	/^char * interface_filesystem_cleanup_windows_filename(const char * filename);$/;"	p	signature:(const char * filename)
interface_filesystem_compare_filenames	interface_filesystem.cpp	/^bool interface_filesystem_compare_filenames(const char * f1, const char * f2) $/;"	f	signature:(const char * f1, const char * f2)
interface_filesystem_compare_filenames	interface_filesystem.h	/^bool interface_filesystem_compare_filenames(const char * f1, const char * f2);$/;"	p	signature:(const char * f1, const char * f2)
interface_filesystem_dirpath	interface_filesystem.cpp	/^char * interface_filesystem_dirpath(const char * const filename)$/;"	f	signature:(const char * const filename)
interface_filesystem_dirpath	interface_filesystem.h	/^char * interface_filesystem_dirpath(const char * const filename);$/;"	p	signature:(const char * const filename)
interface_filesystem_extract_filename	interface_filesystem.cpp	/^char * interface_filesystem_extract_filename(const char * filename)$/;"	f	signature:(const char * filename)
interface_filesystem_extract_filename	interface_filesystem.h	/^char * interface_filesystem_extract_filename(const char * filename);$/;"	p	signature:(const char * filename)
interface_filesystem_is_relative	interface_filesystem.cpp	/^bool interface_filesystem_is_relative(const char * filename) $/;"	f	signature:(const char * filename)
interface_filesystem_is_relative	interface_filesystem.h	/^bool interface_filesystem_is_relative(const char * filename);$/;"	p	signature:(const char * filename)
interface_filesystem_realviz_filename	interface_filesystem.cpp	/^char * interface_filesystem_realviz_filename(const char * filename) $/;"	f	signature:(const char * filename)
interface_filesystem_realviz_filename	interface_filesystem.h	/^char * interface_filesystem_realviz_filename(const char * filename);$/;"	p	signature:(const char * filename)
internal_calibration	geometry_structures.h	/^	CvMat * projection, * rotation, * translation, * internal_calibration;$/;"	m	struct:Shot	access:public
inv_eigen_values	/usr/include/opencv/ml.h	/^    CvMat* inv_eigen_values;$/;"	m	class:CvEM	access:protected
inv_eigen_values	/usr/include/opencv/ml.h	/^    CvMat** inv_eigen_values;$/;"	m	class:CvNormalBayesClassifier	access:protected
inv_sqrt_m00	/usr/include/opencv/cvtypes.h	/^    double  inv_sqrt_m00; \/* m00 != 0 ? 1\/sqrt(m00) : 0 *\/$/;"	m	struct:CvMoments	access:public
inv_var	/usr/include/opencv/cvaux.h	/^    float* inv_var;     \/* square root of inversed variances corresp. to each mixture*\/$/;"	m	struct:CvEHMMState	access:public
inversed	/usr/include/opencv/ml.h	/^    int inversed;$/;"	m	struct:CvDTreeSplit	access:public
iplHeight	/usr/include/opencv/highgui.h	/^CV_INLINE int iplHeight( const IplImage* img )$/;"	f	signature:( const IplImage* img )
iplHeight	/usr/include/opencv/highgui.h	/^CV_INLINE int iplHeight( const IplImage* img );$/;"	p	signature:( const IplImage* img )
iplWidth	/usr/include/opencv/highgui.h	/^CV_INLINE int iplWidth( const IplImage* img )$/;"	f	signature:( const IplImage* img )
iplWidth	/usr/include/opencv/highgui.h	/^CV_INLINE int iplWidth( const IplImage* img );$/;"	p	signature:( const IplImage* img )
isCalibrated	/usr/include/opencv/cvaux.h	/^    bool    isCalibrated;$/;"	m	class:CvCalibFilter	access:protected
is_basic_laplacian	/usr/include/opencv/cv.hpp	/^    bool is_basic_laplacian() const { return basic_laplacian; }$/;"	f	class:CvLaplaceFilter	access:public	signature:() const
is_classifier	/usr/include/opencv/ml.h	/^    bool is_classifier;$/;"	m	struct:CvDTreeTrainData	access:public
is_instance	/usr/include/opencv/cxtypes.h	/^    CvIsInstanceFunc is_instance;$/;"	m	struct:CvTypeInfo	access:public
is_normalized	/usr/include/opencv/cv.hpp	/^    bool is_normalized() const { return normalized; }$/;"	f	class:CvBoxFilter	access:public	signature:() const
is_normalized	/usr/include/opencv/cv.hpp	/^    bool is_normalized() const { return normalized; }$/;"	f	class:CvLaplaceFilter	access:public	signature:() const
is_obj_without_holes	/usr/include/opencv/cvaux.h	/^    int           Lc, N1c, N2c, Lcc, N1cc, N2cc, is_obj_without_holes, perform_morphing;$/;"	m	struct:CvFGDStatModelParams	access:public
is_regression	/usr/include/opencv/ml.h	/^    bool is_regression() const;$/;"	p	class:CvKNearest	access:public	signature:() const
is_separable	/usr/include/opencv/cv.hpp	/^    bool is_separable;$/;"	m	class:CvBaseImageFilter	access:protected
is_trained_dyn_model	/usr/include/opencv/cvaux.h	/^    uchar                 is_trained_dyn_model;$/;"	m	struct:CvBGPixelStat	access:public
is_trained_st_model	/usr/include/opencv/cvaux.h	/^    uchar                 is_trained_st_model;$/;"	m	struct:CvBGPixelStat	access:public
is_valid	/usr/include/opencv/cxcore.hpp	/^    bool is_valid() { return image != 0; }$/;"	f	class:CvImage	access:public	signature:()
is_valid	/usr/include/opencv/cxcore.hpp	/^    bool is_valid() { return matrix != 0; }$/;"	f	class:CvMatrix	access:public	signature:()
item_id	geometry_structures.h	/^	size_t item_id;                  \/\/ item's id$/;"	m	struct:Selected_Item	access:public
item_type	geometry_structures.h	/^	GEOMETRY_ITEM_TYPE item_type;    \/\/ type of selected item (vertex, point, polygon, ...)$/;"	m	struct:Selected_Item	access:public
items	ui_context.h	/^	Context_Items items;$/;"	m	struct:Context_State	access:public
k	/usr/include/opencv/cvaux.h	/^    int k; \/\/stack size$/;"	m	struct:CvCliqueFinder	access:public
k	/usr/include/opencv/cvcompat.h	/^                                const float* A, const float* k,$/;"	v
k_sparse	/usr/include/opencv/cv.hpp	/^    uchar* k_sparse;$/;"	m	class:CvLinearFilter	access:protected
k_sparse_count	/usr/include/opencv/cv.hpp	/^    int k_sparse_count;$/;"	m	class:CvLinearFilter	access:protected
kd_tree	geometry_structures.h	/^	kd_node * kd_tree;     \/\/ root node of kd-tree containing nodes$/;"	m	struct:Shot	access:public
kernel	/usr/include/opencv/cv.hpp	/^    CvMat *kernel;$/;"	m	class:CvLinearFilter	access:protected
kernel	/usr/include/opencv/ml.h	/^    CvSVMKernel* kernel;$/;"	m	class:CvSVM	access:protected
kernel	/usr/include/opencv/ml.h	/^    CvSVMKernel* kernel;$/;"	m	class:CvSVMSolver	access:public
kernel_type	/usr/include/opencv/ml.h	/^    int         kernel_type;$/;"	m	struct:CvSVMParams	access:public
key_pressed	tool_core.h	/^	Tool_Key_Pressed_Event_Handler key_pressed;$/;"	m	struct:Tool	access:public
key_state	ui_state.h	/^	Uint8 * keys, * key_state; \/\/ pointer to array containing keys' state info (supplied by SDL)$/;"	m	struct:UI_State	access:public
keyboard_focus	core_state.h	/^	bool keyboard_focus;$/;"	m	struct:Core_State	access:public
keypoints	geometry_structures.h	/^	feature * keypoints;   \/\/ SIFT keypoints$/;"	m	struct:Shot	access:public
keypoints_count	geometry_structures.h	/^	int keypoints_count;$/;"	m	struct:Shot	access:public
keys	ui_state.h	/^	Uint8 * keys, * key_state; \/\/ pointer to array containing keys' state info (supplied by SDL)$/;"	m	struct:UI_State	access:public
keys_length	ui_state.h	/^	int keys_length; \/\/ length of the keys_state array$/;"	m	struct:UI_State	access:public
kmeans	/usr/include/opencv/ml.h	/^    virtual void kmeans( const CvVectors& train_data, int nclusters,$/;"	p	class:CvEM	access:protected	signature:( const CvVectors& train_data, int nclusters, CvMat* labels, CvTermCriteria criteria, const CvMat* means )
ksize	/usr/include/opencv/cv.hpp	/^    CvSize ksize;$/;"	m	class:CvBaseImageFilter	access:protected
kx	/usr/include/opencv/cv.hpp	/^    CvMat *kx, *ky;$/;"	m	class:CvSepFilter	access:protected
kx_flags	/usr/include/opencv/cv.hpp	/^    int kx_flags, ky_flags;$/;"	m	class:CvSepFilter	access:protected
ky	/usr/include/opencv/cv.hpp	/^    CvMat *kx, *ky;$/;"	m	class:CvSepFilter	access:protected
ky_flags	/usr/include/opencv/cv.hpp	/^    int kx_flags, ky_flags;$/;"	m	class:CvSepFilter	access:protected
last	/usr/include/opencv/cxcore.hpp	/^    static CvModuleInfo* last;$/;"	m	struct:CvModule	access:public
last	/usr/include/opencv/cxcore.hpp	/^    static CvTypeInfo* last;$/;"	m	struct:CvType	access:public
last_ticks	core_state.h	/^	Uint32 ticks, last_ticks;$/;"	m	struct:Core_State	access:public
latestCounts	/usr/include/opencv/cvaux.h	/^    int     latestCounts[MAX_CAMERAS];$/;"	m	class:CvCalibFilter	access:protected
latestPoints	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f* latestPoints[MAX_CAMERAS];$/;"	m	class:CvCalibFilter	access:protected
layer_sizes	/usr/include/opencv/ml.h	/^    CvMat* layer_sizes;$/;"	m	class:CvANN_MLP	access:protected
left	/usr/include/opencv/cvtypes.h	/^    int* left;$/;"	m	struct:CvHaarClassifier	access:public
left	/usr/include/opencv/ml.h	/^    CvDTreeNode* left;$/;"	m	struct:CvDTreeNode	access:public
len	/usr/include/opencv/cxtypes.h	/^    int len;$/;"	m	struct:CvString	access:public
len1	/usr/include/opencv/cvvidsurv.hpp	/^    int len1,len2;$/;"	m	struct:CvTracksTimePos	access:public
len2	/usr/include/opencv/cvvidsurv.hpp	/^    int len1,len2;$/;"	m	struct:CvTracksTimePos	access:public
level	/usr/include/opencv/cvaux.h	/^    int level; \/* 0 - lowest(i.e its states are real states), ..... *\/$/;"	m	struct:CvEHMM	access:public
level	/usr/include/opencv/cxcore.h	/^    int level;$/;"	m	struct:CvTreeNodeIterator	access:public
line	core_debug.cpp	/^	const char * description, * file, * line;$/;"	m	struct:Allocated_Memory	file:	access:public
lineCoeffs	/usr/include/opencv/cvaux.h	/^    CvStereoLineCoeff* lineCoeffs;$/;"	m	struct:CvStereoCamera	access:public
line_type	/usr/include/opencv/cxcore.h	/^    int         line_type;$/;"	m	struct:CvFont	access:public
line_width	interface_opengl.h	/^	float color[3], line_width, point_size, opacity;$/;"	m	struct:Drawing_Style	access:public
linear_combination_23	core_math_routines.cpp	/^void linear_combination_23(const double * a, const double * b,$/;"	f	signature:(const double * a, const double * b, const double xa, const double xb, double * result)
linear_combination_23	core_math_routines.h	/^void linear_combination_23(const double * a, const double * b,$/;"	p	signature:(const double * a, const double * b, const double xa, const double xb, double * result)
linear_combination_33	core_math_routines.cpp	/^void linear_combination_33(const double * a, const double * b, const double * c, $/;"	f	signature:(const double * a, const double * b, const double * c, const double xa, const double xb, const double xc, double * result)
linear_combination_33	core_math_routines.h	/^void linear_combination_33(const double * a, const double * b, const double * c, $/;"	p	signature:(const double * a, const double * b, const double * c, const double xa, const double xb, const double xc, double * result)
linear_combination_43	core_math_routines.cpp	/^void linear_combination_43(const double * a, const double * b, const double * c, const double * d, $/;"	f	signature:(const double * a, const double * b, const double * c, const double * d, const double xa, const double xb, const double xc, const double xd, double * result)
linear_combination_43	core_math_routines.h	/^void linear_combination_43(const double * a, const double * b, const double * c, const double * d, $/;"	p	signature:(const double * a, const double * b, const double * c, const double * d, const double xa, const double xb, const double xc, const double xd, double * result)
list	ui_state.h	/^		* div_toolbar, * toolbar, * list;$/;"	m	struct:UI_State	access:public
list_id	ui_core.h	/^	int list_id;    \/\/ id in table displaying the list of all pictures$/;"	m	struct:UI_Shot_Meta	access:public
load	/usr/include/opencv/cxcore.hpp	/^    bool load( const char* filename, const char* imgname=0, int color=-1 );$/;"	p	class:CvImage	access:public	signature:( const char* filename, const char* imgname=0, int color=-1 )
load	/usr/include/opencv/cxcore.hpp	/^    bool load( const char* filename, const char* matname=0, int color=-1 );$/;"	p	class:CvMatrix	access:public	signature:( const char* filename, const char* matname=0, int color=-1 )
load	/usr/include/opencv/ml.h	/^    virtual void load( const char* filename, const char* name=0 );$/;"	p	class:CvStatModel	access:public	signature:( const char* filename, const char* name=0 )
loaded_from	/usr/include/opencv/cxtypes.h	/^    int loaded_from;$/;"	m	struct:CvPluginFuncInfo	access:public
lock	core_image_loader.h	/^	pthread_mutex_t lock;$/;"	m	struct:Image_Loader_Request	access:public
log_likelihood	/usr/include/opencv/ml.h	/^    double log_likelihood;$/;"	m	class:CvEM	access:protected
log_var_val	/usr/include/opencv/cvaux.h	/^    float* log_var_val; \/* sum of 0.5 (LN2PI + ln(variance[i]) ) for i=1,n *\/$/;"	m	struct:CvEHMMState	access:public
log_weight_div_det	/usr/include/opencv/ml.h	/^    CvMat* log_weight_div_det;$/;"	m	class:CvEM	access:protected
low	core_image_loader.h	/^	IplImage * low; $/;"	m	struct:Image_Loader_Shot	access:public
low_counter	core_image_loader.h	/^	int low_counter, low_unprocessed_counter;$/;"	m	struct:Image_Loader_Shot	access:public
low_texture	core_image_loader.h	/^	GLuint low_texture;$/;"	m	struct:Image_Loader_Shot	access:public
low_unprocessed_counter	core_image_loader.h	/^	int low_counter, low_unprocessed_counter;$/;"	m	struct:Image_Loader_Shot	access:public
lru_list	/usr/include/opencv/ml.h	/^    CvSVMKernelRow lru_list;$/;"	m	class:CvSVMSolver	access:public
m	/usr/include/opencv/cvtypes.h	/^    float m[3][3];$/;"	m	struct:CvMatrix3	access:public
m00	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
m01	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
m02	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
m03	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
m10	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
m11	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
m12	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
m20	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
m21	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
m30	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
m_Wnd	/usr/include/opencv/cvvidsurv.hpp	/^    int         m_Wnd;$/;"	m	class:CvVSModule	access:protected
m_back_project	/usr/include/opencv/cvaux.hpp	/^    IplImage*  m_back_project;$/;"	m	class:CvCamShiftTracker	access:protected
m_box	/usr/include/opencv/cvaux.hpp	/^    CvBox2D    m_box;$/;"	m	class:CvCamShiftTracker	access:protected
m_color_planes	/usr/include/opencv/cvaux.hpp	/^    IplImage*  m_color_planes[CV_MAX_DIM];$/;"	m	class:CvCamShiftTracker	access:protected
m_comp	/usr/include/opencv/cvaux.hpp	/^    CvConnectedComp m_comp;$/;"	m	class:CvCamShiftTracker	access:protected
m_hist	/usr/include/opencv/cvaux.hpp	/^    CvHistogram* m_hist;$/;"	m	class:CvCamShiftTracker	access:protected
m_hist_ranges	/usr/include/opencv/cvaux.hpp	/^    float*     m_hist_ranges[CV_MAX_DIM];$/;"	m	class:CvCamShiftTracker	access:protected
m_hist_ranges_data	/usr/include/opencv/cvaux.hpp	/^    float      m_hist_ranges_data[CV_MAX_DIM][2];$/;"	m	class:CvCamShiftTracker	access:protected
m_image	/usr/include/opencv/cvvidsurv.hpp	/^    IplImage* m_image;    $/;"	m	class:CvImageDrawer	access:protected
m_img	/usr/include/opencv/highgui.h	/^    IplImage*  m_img;$/;"	m	class:CvvImage	access:protected
m_mask	/usr/include/opencv/cvaux.hpp	/^    IplImage*  m_mask;$/;"	m	class:CvCamShiftTracker	access:protected
m_max_ch_val	/usr/include/opencv/cvaux.hpp	/^    int        m_max_ch_val[CV_MAX_DIM];$/;"	m	class:CvCamShiftTracker	access:protected
m_min_ch_val	/usr/include/opencv/cvaux.hpp	/^    int        m_min_ch_val[CV_MAX_DIM];$/;"	m	class:CvCamShiftTracker	access:protected
m_pElemFormat	/usr/include/opencv/cvvidsurv.hpp	/^    char            m_pElemFormat[1024];$/;"	m	class:CvBlobSeq	access:protected
m_pMem	/usr/include/opencv/cvvidsurv.hpp	/^    CvMemStorage*   m_pMem;$/;"	m	class:CvBlobSeq	access:protected
m_pMem	/usr/include/opencv/cvvidsurv.hpp	/^    CvMemStorage*   m_pMem;$/;"	m	class:CvBlobTrackSeq	access:protected
m_pModuleName	/usr/include/opencv/cvvidsurv.hpp	/^    char*       m_pModuleName;$/;"	m	class:CvVSModule	access:private
m_pModuleTypeName	/usr/include/opencv/cvvidsurv.hpp	/^    char*       m_pModuleTypeName;$/;"	m	class:CvVSModule	access:private
m_pNickName	/usr/include/opencv/cvvidsurv.hpp	/^    char*       m_pNickName;$/;"	m	class:CvVSModule	access:private
m_pParamList	/usr/include/opencv/cvvidsurv.hpp	/^    CvDefParam*   m_pParamList;$/;"	m	class:CvVSModule	access:private
m_pSeq	/usr/include/opencv/cvvidsurv.hpp	/^    CvSeq*          m_pSeq;$/;"	m	class:CvBlobSeq	access:protected
m_pSeq	/usr/include/opencv/cvvidsurv.hpp	/^    CvSeq*          m_pSeq;$/;"	m	class:CvBlobTrackSeq	access:protected
m_shape	/usr/include/opencv/cvvidsurv.hpp	/^    CvDrawShape m_shape[16];$/;"	m	class:CvImageDrawer	access:protected
m_temp	/usr/include/opencv/cvaux.hpp	/^    IplImage*  m_temp;$/;"	m	class:CvCamShiftTracker	access:protected
m_threshold	/usr/include/opencv/cvaux.hpp	/^    int        m_threshold;$/;"	m	class:CvCamShiftTracker	access:protected
main	main.cpp	/^int main(int argc, char* argv[])$/;"	f	signature:(int argc, char* argv[])
main_loop	application.cpp	/^bool main_loop()$/;"	f	signature:()
main_loop	application.h	/^bool main_loop(); $/;"	p	signature:()
make_y_border	/usr/include/opencv/cv.hpp	/^    virtual void make_y_border( int row_count, int top_rows, int bottom_rows );$/;"	p	class:CvBaseImageFilter	access:protected	signature:( int row_count, int top_rows, int bottom_rows )
map	/usr/include/opencv/cxtypes.h	/^        CvFileNodeHash* map; \/* map (collection of named file nodes) *\/$/;"	m	union:CvFileNode::__anon19	access:public
margin_bottom	gui.h	/^	int margin_top, margin_bottom, margin_left, margin_right;$/;"	m	struct:GUI_Panel	access:public
margin_left	gui.h	/^	int margin_top, margin_bottom, margin_left, margin_right;$/;"	m	struct:GUI_Panel	access:public
margin_right	gui.h	/^	int margin_top, margin_bottom, margin_left, margin_right;$/;"	m	struct:GUI_Panel	access:public
margin_top	gui.h	/^	int margin_top, margin_bottom, margin_left, margin_right;$/;"	m	struct:GUI_Panel	access:public
mask	/usr/include/opencv/cxcore.h	/^    int      mask;         \/* event mask *\/$/;"	m	struct:CvGraphScanner	access:public
maskROI	/usr/include/opencv/cxtypes.h	/^    struct _IplImage *maskROI; \/* must be NULL *\/$/;"	m	struct:_IplImage	typeref:struct:_IplImage::_IplImage	access:public
mat	/usr/include/opencv/cvaux.h	/^    float mat[4][4];              \/* maps camera coordinates to world coordinates *\/$/;"	m	struct:__anon5	access:public
mat	/usr/include/opencv/cxtypes.h	/^    CvMatND mat; \/* embedded matrix header for array histograms *\/$/;"	m	struct:CvHistogram	access:public
mat	/usr/include/opencv/cxtypes.h	/^    CvSparseMat* mat;$/;"	m	struct:CvSparseMatIterator	access:public
match_sum	/usr/include/opencv/cvaux.h	/^    int         match_sum;$/;"	m	struct:CvGaussBGValues	access:public
matching	geometry_structures.h	/^	void * matching;       \/\/ additional info for matching tool$/;"	m	struct:Shot	access:public
matching_extract_features	tool_matching.cpp	/^void matching_extract_features(const double max_size)$/;"	f	signature:(const double max_size)
matching_extract_features	tool_matching.cpp	/^void matching_extract_features(const double max_width);$/;"	p	file:	signature:(const double max_width)
matching_extract_tracks	tool_matching.cpp	/^void matching_extract_tracks(const double fsor_limit, const bool use_ransac, const bool include_unverified, const double epipolar_distance_threshold, Matching_UF_Nodes & uf_nodes, const int topology, const int neighbours)$/;"	f	signature:(const double fsor_limit, const bool use_ransac, const bool include_unverified, const double epipolar_distance_threshold, Matching_UF_Nodes & uf_nodes, const int topology, const int neighbours)
matching_extract_tracks	tool_matching.cpp	/^void matching_extract_tracks(const double fsor_limit, const bool use_ransac, const bool include_unverified, const double epipolar_distance_threshold, Matching_UF_Nodes & uf_nodes, const int topology, const int neighbours);$/;"	p	file:	signature:(const double fsor_limit, const bool use_ransac, const bool include_unverified, const double epipolar_distance_threshold, Matching_UF_Nodes & uf_nodes, const int topology, const int neighbours)
matching_features_union	tool_matching.cpp	/^void matching_features_union(Matching_UF_Nodes & nodes, feature * first, feature * second)$/;"	f	signature:(Matching_UF_Nodes & nodes, feature * first, feature * second)
matching_features_union	tool_matching.cpp	/^void matching_features_union(Matching_UF_Nodes & nodes, feature * first, feature * second);$/;"	p	file:	signature:(Matching_UF_Nodes & nodes, feature * first, feature * second)
matching_find_parent_node	tool_matching.cpp	/^size_t matching_find_parent_node(Matching_UF_Nodes & nodes, feature * first, bool & found);$/;"	p	file:	signature:(Matching_UF_Nodes & nodes, feature * first, bool & found)
matching_find_parent_node	tool_matching.cpp	/^size_t matching_find_parent_node(Matching_UF_Nodes & nodes, feature * node, bool & found) $/;"	f	signature:(Matching_UF_Nodes & nodes, feature * node, bool & found)
matching_method_labels	tool_matching.cpp	/^static const char * matching_method_labels[] = { "SIFT", "SIFT+MSER", NULL };$/;"	v	file:
matching_remove_conflicting_tracks	tool_matching.cpp	/^void matching_remove_conflicting_tracks()$/;"	f	signature:()
matching_remove_conflicting_tracks	tool_matching.cpp	/^void matching_remove_conflicting_tracks();$/;"	p	file:	signature:()
matching_resolution_labels	tool_matching.cpp	/^static const char * matching_resolution_labels[] = { "medium (up to 1600px)", "high (up to 2048px)", "low (up to 1024px)", NULL }; $/;"	v	file:
matching_resolution_values	tool_matching.cpp	/^static const int matching_resolution_values[] = { 1600, 2048, 1024, NULL };$/;"	v	file:
matching_topology_labels	tool_matching.cpp	/^static const char * matching_topology_labels[] = { "All pairs (unordered set of images)", "Just neighbours (linear sequence)", NULL };$/;"	v	file:
matrix	/usr/include/opencv/cvaux.h	/^    float   matrix[9]; \/* intinsic camera parameters:  [ fx 0 cx; 0 fy cy; 0 0 1 ] *\/$/;"	m	struct:CvCamera	access:public
matrix	/usr/include/opencv/cxcore.hpp	/^    CvMat* matrix;$/;"	m	class:CvMatrix	access:protected
max	/usr/include/opencv/cvaux.h	/^    float max, min; \/\/ minimum and maximum projections$/;"	m	struct:CvContourOrientation	access:public
maxPoints	/usr/include/opencv/cvaux.h	/^    int     maxPoints;$/;"	m	class:CvCalibFilter	access:protected
max_buf_sz	/usr/include/opencv/ml.h	/^    int max_count, max_buf_sz;$/;"	m	class:CvANN_MLP	access:protected
max_c_count	/usr/include/opencv/ml.h	/^    int sample_count, var_all, var_count, max_c_count;$/;"	m	struct:CvDTreeTrainData	access:public
max_categories	/usr/include/opencv/ml.h	/^    int   max_categories;$/;"	m	struct:CvDTreeParams	access:public
max_count	/usr/include/opencv/ml.h	/^    int max_count, max_buf_sz;$/;"	m	class:CvANN_MLP	access:protected
max_depth	/usr/include/opencv/ml.h	/^    int   max_depth;$/;"	m	struct:CvDTreeParams	access:public
max_dev	ui_visualization.h	/^	double shots_T_mean[3], shots_T_deviation[3], max_dev;    \/\/ mean and variance of the cameras' positions$/;"	m	struct:Visualization_State	access:public
max_iter	/usr/include/opencv/cxtypes.h	/^    int    max_iter;$/;"	m	struct:CvTermCriteria	access:public
max_iter	/usr/include/opencv/ml.h	/^    int max_iter;$/;"	m	class:CvSVMSolver	access:public
max_k	/usr/include/opencv/ml.h	/^    int max_k, var_count;$/;"	m	class:CvKNearest	access:protected
max_ky	/usr/include/opencv/cv.hpp	/^    int max_ky, border_mode;$/;"	m	class:CvBaseImageFilter	access:protected
max_level	/usr/include/opencv/cxcore.h	/^    int max_level;$/;"	m	struct:CvTreeNodeIterator	access:public
max_rows	/usr/include/opencv/cv.hpp	/^    int top_rows, bottom_rows, max_rows;$/;"	m	class:CvBaseImageFilter	access:protected
max_val	/usr/include/opencv/ml.h	/^    double min_val, max_val, min_val1, max_val1;$/;"	m	class:CvANN_MLP	access:protected
max_val1	/usr/include/opencv/ml.h	/^    double min_val, max_val, min_val1, max_val1;$/;"	m	class:CvANN_MLP	access:protected
max_value	core_math_routines.cpp	/^double max_value(const double x, const double y)$/;"	f	signature:(const double x, const double y)
max_value	core_math_routines.h	/^double max_value(const double x, const double y);$/;"	p	signature:(const double x, const double y)
max_width	/usr/include/opencv/cv.hpp	/^    int max_width;$/;"	m	class:CvBaseImageFilter	access:protected
maxlr	/usr/include/opencv/ml.h	/^    double maxlr;$/;"	m	struct:CvDTreeNode	access:public
mean	/usr/include/opencv/cvaux.h	/^    double      mean[CV_BGFG_MOG_NCOLORS];$/;"	m	struct:CvGaussBGValues	access:public
means	/usr/include/opencv/ml.h	/^    CvMat* means;$/;"	m	class:CvEM	access:protected
means	/usr/include/opencv/ml.h	/^    const CvMat* means;$/;"	m	struct:CvEMParams	access:public
meanshift_profile	/usr/include/opencv/cvvidsurv.hpp	/^    int     meanshift_profile;$/;"	m	struct:CvBlobTrackerParamMS	access:public
measurement_matrix	/usr/include/opencv/cvtypes.h	/^    CvMat* measurement_matrix;  \/* measurement matrix (H) *\/$/;"	m	struct:CvKalman	access:public
measurement_noise_cov	/usr/include/opencv/cvtypes.h	/^    CvMat* measurement_noise_cov; \/* measurement noise covariance matrix (R) *\/$/;"	m	struct:CvKalman	access:public
menu_first_child	gui.h	/^	GUI_Panel * menu_first_child, * menu_sibling, * menu_parent;$/;"	m	struct:GUI_Panel	access:public
menu_item	tool_core.h	/^	GUI_Panel * menu_item;              \/\/ pointer to GUI element $/;"	m	struct:Tool_Menu_Item	access:public
menu_items	tool_core.h	/^	Tool_Menu_Items menu_items;$/;"	m	struct:Tools_State	access:public
menu_parent	gui.h	/^	GUI_Panel * menu_first_child, * menu_sibling, * menu_parent;$/;"	m	struct:GUI_Panel	access:public
menu_sibling	gui.h	/^	GUI_Panel * menu_first_child, * menu_sibling, * menu_parent;$/;"	m	struct:GUI_Panel	access:public
menu_type	gui.h	/^	GUI_Menu_Type menu_type;$/;"	m	struct:GUI_Panel	access:public
min	/usr/include/opencv/cvaux.h	/^    float max, min; \/\/ minimum and maximum projections$/;"	m	struct:CvContourOrientation	access:public
minArea	/usr/include/opencv/cvaux.h	/^    double  bg_threshold, std_threshold, minArea;$/;"	m	struct:CvGaussBGStatModelParams	access:public
minArea	/usr/include/opencv/cvaux.h	/^    float         alpha1, alpha2, alpha3, delta, T, minArea;$/;"	m	struct:CvFGDStatModelParams	access:public
min_depth	/usr/include/opencv/cv.hpp	/^    int min_depth, src_type, dst_type, work_type;$/;"	m	class:CvBaseImageFilter	access:protected
min_sample_count	/usr/include/opencv/ml.h	/^    int   min_sample_count;$/;"	m	struct:CvDTreeParams	access:public
min_val	/usr/include/opencv/ml.h	/^    double min_val, max_val, min_val1, max_val1;$/;"	m	class:CvANN_MLP	access:protected
min_val1	/usr/include/opencv/ml.h	/^    double min_val, max_val, min_val1, max_val1;$/;"	m	class:CvANN_MLP	access:protected
min_value	core_math_routines.cpp	/^double min_value(const double x, const double y) $/;"	f	signature:(const double x, const double y)
min_value	core_math_routines.h	/^double min_value(const double x, const double y);$/;"	p	signature:(const double x, const double y)
minus_delta	/usr/include/opencv/cxtypes.h	/^    int  minus_delta;$/;"	m	struct:CvLineIterator	access:public
minus_step	/usr/include/opencv/cxtypes.h	/^    int  minus_step;$/;"	m	struct:CvLineIterator	access:public
mix	/usr/include/opencv/cvaux.h	/^    int* mix;  \/* number of mixture to which observation belong *\/$/;"	m	struct:CvImgObsInfo	access:public
mode	ui_state.h	/^	UI_Mode mode, previous_mode;$/;"	m	struct:UI_State	access:public
mode_affinity	tool_core.h	/^	UI_Mode mode_affinity;    \/\/ in which mode is this tool available?$/;"	m	struct:Tool	access:public
mouse_button	ui_state.h	/^	Uint8 mouse_button;$/;"	m	struct:UI_State	access:public
mouse_down	tool_core.h	/^	Tool_Mouse_Down_Event_Handler mouse_down;$/;"	m	struct:Tool	access:public
mouse_down	ui_state.h	/^	bool mouse_down;$/;"	m	struct:UI_State	access:public
mouse_down_ticks	ui_state.h	/^	Uint32 mouse_down_ticks, mouse_dragging_ticks;$/;"	m	struct:UI_State	access:public
mouse_down_x	ui_state.h	/^	int mouse_x, mouse_y, mouse_down_x, mouse_down_y;$/;"	m	struct:UI_State	access:public
mouse_down_y	ui_state.h	/^	int mouse_x, mouse_y, mouse_down_x, mouse_down_y;$/;"	m	struct:UI_State	access:public
mouse_dragging_ticks	ui_state.h	/^	Uint32 mouse_down_ticks, mouse_dragging_ticks;$/;"	m	struct:UI_State	access:public
mouse_focus	core_state.h	/^	bool mouse_focus;$/;"	m	struct:Core_State	access:public
mouse_no_dragging	ui_state.h	/^	bool mouse_no_dragging;$/;"	m	struct:UI_State	access:public
mouse_over	ui_state.h	/^	bool mouse_over;$/;"	m	struct:UI_State	access:public
mouse_x	ui_state.h	/^	int mouse_x, mouse_y, mouse_down_x, mouse_down_y;$/;"	m	struct:UI_State	access:public
mouse_y	ui_state.h	/^	int mouse_x, mouse_y, mouse_down_x, mouse_down_y;$/;"	m	struct:UI_State	access:public
move	tool_core.h	/^	Tool_Move_Event_Handler move;$/;"	m	struct:Tool	access:public
mu	/usr/include/opencv/cvaux.h	/^    float* mu;          \/*mean vectors corresponding to each mixture*\/$/;"	m	struct:CvEHMMState	access:public
mu02	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
mu03	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
mu11	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
mu12	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
mu20	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
mu21	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
mu30	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
mul_3	core_math_routines.cpp	/^void mul_3(const double x, const double * a, double * result) $/;"	f	signature:(const double x, const double * a, double * result)
mul_3	core_math_routines.h	/^void mul_3(const double x, const double * a, double * result);$/;"	p	signature:(const double x, const double * a, double * result)
mvg_assemble_projection_matrix	mvg_decomposition.cpp	/^void mvg_assemble_projection_matrix(CvMat * internal_calibration, CvMat * rotation, CvMat * translation, CvMat * projection)$/;"	f	signature:(CvMat * internal_calibration, CvMat * rotation, CvMat * translation, CvMat * projection)
mvg_assemble_projection_matrix	mvg_decomposition.h	/^void mvg_assemble_projection_matrix(CvMat * internal_calibration, CvMat * rotation, CvMat * translation, CvMat * projection);$/;"	p	signature:(CvMat * internal_calibration, CvMat * rotation, CvMat * translation, CvMat * projection)
mvg_autocalibration	mvg_autocalibration.cpp	/^bool mvg_autocalibration(CvMat ** Ps, double * principal_points, const size_t n, CvMat ** Xs, const size_t m)$/;"	f	signature:(CvMat ** Ps, double * principal_points, const size_t n, CvMat ** Xs, const size_t m)
mvg_autocalibration	mvg_autocalibration.h	/^bool mvg_autocalibration(CvMat ** Ps, double * principal_points, const size_t n, CvMat ** Xs, const size_t m);$/;"	p	signature:(CvMat ** Ps, double * principal_points, const size_t n, CvMat ** Xs, const size_t m)
mvg_autocalibration_2	mvg_autocalibration.cpp	/^bool mvg_autocalibration_2(CvMat ** Ps, double * principal_points, const size_t n, CvMat ** Xs, const size_t m, CvMat ** pi_infinity \/*= NULL*\/, bool affine \/*= false*\/)$/;"	f	signature:(CvMat ** Ps, double * principal_points, const size_t n, CvMat ** Xs, const size_t m, CvMat ** pi_infinity , bool affine )
mvg_autocalibration_2	mvg_autocalibration.h	/^bool mvg_autocalibration_2(CvMat ** Ps, double * principal_points, const size_t n, CvMat ** Xs, const size_t m, CvMat ** pi_infinity = NULL, bool affine = false);$/;"	p	signature:(CvMat ** Ps, double * principal_points, const size_t n, CvMat ** Xs, const size_t m, CvMat ** pi_infinity = NULL, bool affine = false)
mvg_bucket_size	mvg_matching.cpp	/^int mvg_bucket_size = 0;$/;"	v
mvg_buckets_compare	mvg_matching.cpp	/^int mvg_buckets_compare(const void * p_f1, const void * p_f2) $/;"	f	signature:(const void * p_f1, const void * p_f2)
mvg_build_buckets	mvg_matching.cpp	/^size_t * mvg_build_buckets(MVG_FEATURE * features, const double scale, size_t count, int bucket_size, int buckets_x, int buckets_y) $/;"	f	signature:(MVG_FEATURE * features, const double scale, size_t count, int bucket_size, int buckets_x, int buckets_y)
mvg_build_buckets	mvg_matching.h	/^size_t * mvg_build_buckets($/;"	p	signature:( MVG_FEATURE * features, const double scale, size_t count, int bucket_size, int buckets_x, int buckets_y )
mvg_calculate_F_from_Ps	mvg_camera.cpp	/^bool mvg_calculate_F_from_Ps(CvMat * P1, CvMat * P2, CvMat * F) $/;"	f	signature:(CvMat * P1, CvMat * P2, CvMat * F)
mvg_calculate_F_from_Ps	mvg_camera.h	/^bool mvg_calculate_F_from_Ps(CvMat * P1, CvMat * P2, CvMat * F);$/;"	p	signature:(CvMat * P1, CvMat * P2, CvMat * F)
mvg_canonical_P	mvg_camera.cpp	/^void mvg_canonical_P(CvMat * P) $/;"	f	signature:(CvMat * P)
mvg_extract_Ps_from_F	mvg_camera.cpp	/^bool mvg_extract_Ps_from_F(CvMat * F, CvMat * P1, CvMat * P2)$/;"	f	signature:(CvMat * F, CvMat * P1, CvMat * P2)
mvg_extract_Ps_from_F	mvg_camera.h	/^bool mvg_extract_Ps_from_F(CvMat * F, CvMat * P1, CvMat * P2);$/;"	p	signature:(CvMat * F, CvMat * P1, CvMat * P2)
mvg_finite_projection_matrix_decomposition	mvg_decomposition.cpp	/^bool mvg_finite_projection_matrix_decomposition(CvMat * const P, CvMat * const K, CvMat * const R, CvMat * const T)$/;"	f	signature:(CvMat * const P, CvMat * const K, CvMat * const R, CvMat * const T)
mvg_finite_projection_matrix_decomposition	mvg_decomposition.h	/^bool mvg_finite_projection_matrix_decomposition(CvMat * const P, CvMat * const K, CvMat * const R, CvMat * const T);$/;"	p	signature:(CvMat * const P, CvMat * const K, CvMat * const R, CvMat * const T)
mvg_guided_matching	mvg_matching.cpp	/^size_t mvg_guided_matching($/;"	f	signature:( MVG_FEATURE * features1, const size_t count1, const int width1, const int height1, const double scale1, MVG_FEATURE * features2, const size_t count2, const int width2, const int height2, const double scale2, CvMat * F, const double threshold, const double fsor_threshold, int * matches )
mvg_guided_matching	mvg_matching.h	/^size_t mvg_guided_matching($/;"	p	signature:( MVG_FEATURE * features1, const size_t count1, const int width1, const int height1, const double scale1, MVG_FEATURE * features2, const size_t count2, const int width2, const int height2, const double scale2, CvMat * F, const double threshold, const double fsor_threshold, int * matches )
mvg_guided_matching_translation	mvg_matching.cpp	/^size_t mvg_guided_matching_translation($/;"	f	signature:( MVG_FEATURE * features1, const size_t count1, const int width1, const int height1, const double scale1, MVG_FEATURE * features2, const size_t count2, const int width2, const int height2, const double scale2, const double T_x, const double T_y, const double threshold, const double fsor_threshold, int * matches )
mvg_guided_matching_translation	mvg_matching.h	/^size_t mvg_guided_matching_translation($/;"	p	signature:( MVG_FEATURE * features1, const size_t count1, const int width1, const int height1, const double scale1, MVG_FEATURE * features2, const size_t count2, const int width2, const int height2, const double scale2, const double T_x, const double T_y, const double threshold, const double fsor_threshold, int * matches )
mvg_index_buckets	mvg_matching.cpp	/^size_t * mvg_index_buckets(MVG_FEATURE * features, double scale, size_t count, int bucket_size, int bucket_cols, int bucket_rows)$/;"	f	signature:(MVG_FEATURE * features, double scale, size_t count, int bucket_size, int bucket_cols, int bucket_rows)
mvg_index_buckets	mvg_matching.h	/^size_t * mvg_index_buckets($/;"	p	signature:( MVG_FEATURE * features, double scale, size_t count, int bucket_size, int bucket_cols, int bucket_rows )
mvg_normalize_points	mvg_normalization.cpp	/^bool mvg_normalize_points(CvMat * points, CvMat * H, double * output_scale) $/;"	f	signature:(CvMat * points, CvMat * H, double * output_scale)
mvg_normalize_points	mvg_normalization.h	/^bool mvg_normalize_points(CvMat * points, CvMat * H, double * output_scale = NULL);$/;"	p	signature:(CvMat * points, CvMat * H, double * output_scale = NULL)
mvg_point_in_front_of_camera	mvg_camera.cpp	/^bool mvg_point_in_front_of_camera(CvMat * P, CvMat * X) $/;"	f	signature:(CvMat * P, CvMat * X)
mvg_point_in_front_of_camera	mvg_camera.h	/^bool mvg_point_in_front_of_camera(CvMat * P, CvMat * X);$/;"	p	signature:(CvMat * P, CvMat * X)
mvg_projective_depth	mvg_camera.cpp	/^double mvg_projective_depth(CvMat * P, CvMat * X) $/;"	f	signature:(CvMat * P, CvMat * X)
mvg_projective_depth	mvg_camera.h	/^double mvg_projective_depth(CvMat * P, CvMat * X);$/;"	p	signature:(CvMat * P, CvMat * X)
mvg_resection_RANSAC	mvg_resection.cpp	/^bool mvg_resection_RANSAC($/;"	f	signature:( const CvMat * const vertices, const CvMat * const projected, CvMat * const P, CvMat * const K, CvMat * const R, CvMat * const T, bool normalize_A , const int trials , const double threshold , bool * inliers )
mvg_resection_RANSAC	mvg_resection.h	/^bool mvg_resection_RANSAC($/;"	p	signature:( const CvMat * const vertices, const CvMat * const projected, CvMat * const P, CvMat * const K, CvMat * const R, CvMat * const T, bool normalize_A = false, const int trials = 500, const double threshold = 4.0, bool * inliers = NULL )
mvg_resection_SVD	mvg_resection.cpp	/^bool mvg_resection_SVD($/;"	f	signature:( const CvMat * const vertices, const CvMat * const projected, CvMat * const P, CvMat * const K, CvMat * const R, CvMat * const T, bool normalize_A, int * samples , int ns )
mvg_resection_SVD	mvg_resection.h	/^bool mvg_resection_SVD($/;"	p	signature:( const CvMat * const vertices, const CvMat * const projected, CvMat * const P, CvMat * const K, CvMat * const R, CvMat * const T, bool normalize_A, int * samples = NULL, int ns = -1 )
mvg_restrict_calibration_matrix	mvg_resection.cpp	/^bool mvg_restrict_calibration_matrix(CvMat * const K, const bool zero_skew, const bool square_pixels) $/;"	f	signature:(CvMat * const K, const bool zero_skew, const bool square_pixels)
mvg_restrict_calibration_matrix	mvg_resection.h	/^bool mvg_restrict_calibration_matrix(CvMat * const K, const bool zero_skew, const bool square_pixels);$/;"	p	signature:(CvMat * const K, const bool zero_skew, const bool square_pixels)
mvg_scale	mvg_matching.cpp	/^double mvg_scale = 0;$/;"	v
mvg_triangulation_RANSAC	mvg_triangulation.cpp	/^CvMat * mvg_triangulation_RANSAC($/;"	f	signature:( const CvMat * projection_matrices[], const CvMat * projected_points, const bool affine, const bool normalize_A , const int min_inliers_to_triangulate , const int min_inliers_to_triangulate_weaker , const int trials , const double threshold , bool * inliers )
mvg_triangulation_RANSAC	mvg_triangulation.h	/^CvMat * mvg_triangulation_RANSAC($/;"	p	signature:( const CvMat * projection_matrices[], const CvMat * projected_points, const bool affine, const bool normalize_A = false, const int min_inliers_to_triangulate = MVG_MIN_INLIERS_TO_TRIANGULATE, const int min_inliers_to_triangulate_weaker = MVG_MIN_INLIERS_TO_TRIANGULATE_WEAKER, const int trials = MVG_RANSAC_TRIANGULATION_TRIALS, const double threshold = MVG_MEASUREMENT_THRESHOLD, bool * inliers = NULL )
mvg_triangulation_SVD	mvg_triangulation.cpp	/^CvMat * mvg_triangulation_SVD($/;"	f	signature:( const CvMat * projection_matrices[], const CvMat * projected_points, bool normalize_A , const unsigned int min_points , int * samples , int ns )
mvg_triangulation_SVD	mvg_triangulation.h	/^CvMat * mvg_triangulation_SVD($/;"	p	signature:( const CvMat * projection_matrices[], const CvMat * projected_points, bool normalize_A = false, const unsigned int min_points = 2, int * samples = NULL, int ns = -1 )
mvg_triangulation_SVD_affine	mvg_triangulation.cpp	/^CvMat * mvg_triangulation_SVD_affine($/;"	f	signature:( const CvMat * projection_matrices[], const CvMat * projected_points, bool normalize_A , const unsigned int min_points , int * samples , int ns )
mvg_triangulation_SVD_affine	mvg_triangulation.h	/^CvMat * mvg_triangulation_SVD_affine($/;"	p	signature:( const CvMat * projection_matrices[], const CvMat * projected_points, bool normalize_A = false, const unsigned int min_points = 2, int * samples = NULL, int ns = -1 )
nChannels	/usr/include/opencv/cxtypes.h	/^    int  nChannels;     \/* Most of OpenCV functions support 1,2,3 or 4 channels *\/$/;"	m	struct:_IplImage	access:public
nCols	/usr/include/opencv/cxtypes.h	/^    int  nCols;$/;"	m	struct:_IplConvKernel	access:public
nCols	/usr/include/opencv/cxtypes.h	/^    int  nCols;$/;"	m	struct:_IplConvKernelFP	access:public
nRows	/usr/include/opencv/cxtypes.h	/^    int  nRows;$/;"	m	struct:_IplConvKernel	access:public
nRows	/usr/include/opencv/cxtypes.h	/^    int  nRows;$/;"	m	struct:_IplConvKernelFP	access:public
nShiftR	/usr/include/opencv/cxtypes.h	/^    int  nShiftR;$/;"	m	struct:_IplConvKernel	access:public
nSize	/usr/include/opencv/cxtypes.h	/^    int  nSize;         \/* sizeof(IplImage) *\/$/;"	m	struct:_IplImage	access:public
n_gauss	/usr/include/opencv/cvaux.h	/^    int     n_gauss;$/;"	m	struct:CvGaussBGStatModelParams	access:public
nactive_vars	/usr/include/opencv/ml.h	/^    int nactive_vars;$/;"	m	struct:CvRTParams	access:public
name	/usr/include/opencv/cxtypes.h	/^    const char* name;$/;"	m	struct:CvModuleInfo	access:public
name	geometry_structures.h	/^	char * name;           \/\/ user-assigned name$/;"	m	struct:Shot	access:public
nclasses	/usr/include/opencv/ml.h	/^    int nclasses;$/;"	m	class:CvRTrees	access:protected
nclusters	/usr/include/opencv/ml.h	/^    int nclusters;$/;"	m	struct:CvEMParams	access:public
ne	/usr/include/opencv/cvaux.h	/^    int* ne;$/;"	m	struct:CvCliqueFinder	access:public
nearest_point_on_plane	core_math_routines.cpp	/^void nearest_point_on_plane(const double * plane, const double * point, double * result)$/;"	f	signature:(const double * plane, const double * point, double * result)
nearest_point_on_plane	core_math_routines.h	/^void nearest_point_on_plane(const double * plane, const double * point, double * result);$/;"	p	signature:(const double * plane, const double * point, double * result)
nearly_zero	core_math_routines.cpp	/^bool nearly_zero(const double x) $/;"	f	signature:(const double x)
nearly_zero	core_math_routines.h	/^bool nearly_zero(const double x);$/;"	p	signature:(const double x)
needSwapCameras	/usr/include/opencv/cvaux.h	/^    int needSwapCameras;\/* flag set to 1 if need to swap cameras for good reconstruction *\/$/;"	m	struct:CvStereoCamera	access:public
negate	core_math_routines.cpp	/^void negate(bool & b) $/;"	f	signature:(bool & b)
negate	core_math_routines.h	/^void negate(bool & b);$/;"	p	signature:(bool & b)
neighbors	/usr/include/opencv/cvtypes.h	/^    int neighbors;$/;"	m	struct:CvAvgComp	access:public
new_node	/usr/include/opencv/ml.h	/^    virtual CvDTreeNode* new_node( CvDTreeNode* parent, int count,$/;"	p	struct:CvDTreeTrainData	access:public	signature:( CvDTreeNode* parent, int count, int storage_idx, int offset )
new_point_created	tool_points.cpp	/^	bool new_point_created;$/;"	m	struct:Tool_Points	file:	access:public
new_split_cat	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* new_split_cat( int vi, float quality );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( int vi, float quality )
new_split_ord	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* new_split_ord( int vi, float cmp_val,$/;"	p	struct:CvDTreeTrainData	access:public	signature:( int vi, float cmp_val, int split_point, int inversed, float quality )
next	/usr/include/opencv/cvaux.h	/^    struct CvVoronoiSite2D *next[2];$/;"	m	struct:CvVoronoiSite2D	typeref:struct:CvVoronoiSite2D::CvVoronoiSite2D	access:public
next	/usr/include/opencv/cvtypes.h	/^    int next;$/;"	m	struct:CvHaarStageClassifier	access:public
next	/usr/include/opencv/cvvidsurv.hpp	/^    struct CvDefParam*    next;$/;"	m	struct:CvDefParam	typeref:struct:CvDefParam::CvDefParam	access:public
next	/usr/include/opencv/cxtypes.h	/^    struct CvAttrList* next; \/* pointer to next chunk of the attributes list *\/$/;"	m	struct:CvAttrList	typeref:struct:CvAttrList::CvAttrList	access:public
next	/usr/include/opencv/cxtypes.h	/^    struct CvMemBlock*  next;$/;"	m	struct:CvMemBlock	typeref:struct:CvMemBlock::CvMemBlock	access:public
next	/usr/include/opencv/cxtypes.h	/^    struct CvModuleInfo* next;$/;"	m	struct:CvModuleInfo	typeref:struct:CvModuleInfo::CvModuleInfo	access:public
next	/usr/include/opencv/cxtypes.h	/^    struct CvSeqBlock*  next; \/* next sequence block *\/$/;"	m	struct:CvSeqBlock	typeref:struct:CvSeqBlock::CvSeqBlock	access:public
next	/usr/include/opencv/cxtypes.h	/^    struct CvSparseNode* next;$/;"	m	struct:CvSparseNode	typeref:struct:CvSparseNode::CvSparseNode	access:public
next	/usr/include/opencv/cxtypes.h	/^    struct CvStringHashNode* next;$/;"	m	struct:CvStringHashNode	typeref:struct:CvStringHashNode::CvStringHashNode	access:public
next	/usr/include/opencv/cxtypes.h	/^    struct CvTypeInfo* next;$/;"	m	struct:CvTypeInfo	typeref:struct:CvTypeInfo::CvTypeInfo	access:public
next	/usr/include/opencv/ml.h	/^    CvDTreeSplit* next;$/;"	m	struct:CvDTreeSplit	access:public
next	/usr/include/opencv/ml.h	/^    CvSVMKernelRow* next;$/;"	m	struct:CvSVMKernelRow	access:public
next	/usr/include/opencv/ml.h	/^    CvVectors* next;$/;"	m	struct:CvVectors	access:public
noOfSigBits	/usr/include/opencv/cvvidsurv.hpp	/^    int     noOfSigBits;$/;"	m	struct:CvBlobTrackerParamMS	access:public
nod	/usr/include/opencv/cvaux.h	/^    int* nod;$/;"	m	struct:CvCliqueFinder	access:public
node	/usr/include/opencv/cxcore.h	/^    const void* node;$/;"	m	struct:CvTreeNodeIterator	access:public
node	/usr/include/opencv/cxtypes.h	/^    CvSparseNode* node;$/;"	m	struct:CvSparseMatIterator	access:public
node_heap	/usr/include/opencv/ml.h	/^    CvSet* node_heap;$/;"	m	struct:CvDTreeTrainData	access:public
node_risk	/usr/include/opencv/ml.h	/^    double node_risk, tree_risk, tree_error;$/;"	m	struct:CvDTreeNode	access:public
normalize_angle	core_math_routines.cpp	/^double normalize_angle(double a) $/;"	f	signature:(double a)
normalize_angle	core_math_routines.h	/^double normalize_angle(double a);$/;"	p	signature:(double a)
normalize_inhomogeneous_part	core_math_routines.cpp	/^void normalize_inhomogeneous_part(double * v, size_t length) $/;"	f	signature:(double * v, size_t length)
normalize_inhomogeneous_part	core_math_routines.h	/^void normalize_inhomogeneous_part(double * v, size_t length);$/;"	p	signature:(double * v, size_t length)
normalize_vector	core_math_routines.cpp	/^void normalize_vector(double * x, size_t length) $/;"	f	signature:(double * x, size_t length)
normalize_vector	core_math_routines.h	/^void normalize_vector(double * x, size_t length);$/;"	p	signature:(double * x, size_t length)
normalized	/usr/include/opencv/cv.hpp	/^    bool normalized;$/;"	m	class:CvBoxFilter	access:protected
normalized	/usr/include/opencv/cv.hpp	/^    bool normalized;$/;"	m	class:CvLaplaceFilter	access:protected
nsamples	/usr/include/opencv/ml.h	/^    int nsamples;$/;"	m	class:CvRTrees	access:protected
ntrees	/usr/include/opencv/ml.h	/^    int ntrees;$/;"	m	class:CvRTrees	access:protected
nu	/usr/include/opencv/ml.h	/^    double      nu; \/\/ for CV_SVM_NU_SVC, CV_SVM_ONE_CLASS, and CV_SVM_NU_SVR$/;"	m	struct:CvSVMParams	access:public
num_mix	/usr/include/opencv/cvaux.h	/^    int num_mix;        \/*number of mixtures in this state*\/$/;"	m	struct:CvEHMMState	access:public
num_states	/usr/include/opencv/cvaux.h	/^    int num_states; \/* number of HMM states *\/$/;"	m	struct:CvEHMM	access:public
num_valid	/usr/include/opencv/ml.h	/^    int* num_valid;$/;"	m	struct:CvDTreeNode	access:public
number_of_chunks	core_debug.cpp	/^const size_t number_of_chunks = 500000;$/;"	v
nv_heap	/usr/include/opencv/ml.h	/^    CvSet* nv_heap;$/;"	m	struct:CvDTreeTrainData	access:public
nx	geometry_structures.h	/^	double nx, ny, nz;           \/\/ vertex normal$/;"	m	struct:Vertex	access:public
ny	geometry_structures.h	/^	double nx, ny, nz;           \/\/ vertex normal$/;"	m	struct:Vertex	access:public
nz	geometry_structures.h	/^	double nx, ny, nz;           \/\/ vertex normal$/;"	m	struct:Vertex	access:public
obj	/usr/include/opencv/ml.h	/^    double obj;$/;"	m	struct:CvSVMSolutionInfo	access:public
obs	/usr/include/opencv/cvaux.h	/^    float* obs;\/\/consequtive observations$/;"	m	struct:CvImgObsInfo	access:public
obsProb	/usr/include/opencv/cvaux.h	/^    float** obsProb; \/* if level == 0 - array of brob matrices corresponding to hmm$/;"	m	struct:CvEHMM	access:public
obs_size	/usr/include/opencv/cvaux.h	/^    int obs_size;$/;"	m	struct:CvImgObsInfo	access:public
obs_x	/usr/include/opencv/cvaux.h	/^    int obs_x;$/;"	m	struct:CvImgObsInfo	access:public
obs_y	/usr/include/opencv/cvaux.h	/^    int obs_y;$/;"	m	struct:CvImgObsInfo	access:public
offset	/usr/include/opencv/ml.h	/^    int offset;$/;"	m	struct:CvDTreeNode	access:public
on_buttonaction	gui.h	/^		on_mouseup, on_menuitemaction, on_buttonaction;$/;"	m	struct:GUI_Panel	access:public
on_focus	gui.h	/^		on_focus, on_unfocus, on_mousemove, on_mousedown, on_mousedownout, $/;"	m	struct:GUI_Panel	access:public
on_menuitemaction	gui.h	/^		on_mouseup, on_menuitemaction, on_buttonaction;$/;"	m	struct:GUI_Panel	access:public
on_mousedown	gui.h	/^		on_focus, on_unfocus, on_mousemove, on_mousedown, on_mousedownout, $/;"	m	struct:GUI_Panel	access:public
on_mousedownout	gui.h	/^		on_focus, on_unfocus, on_mousemove, on_mousedown, on_mousedownout, $/;"	m	struct:GUI_Panel	access:public
on_mousemove	gui.h	/^		on_focus, on_unfocus, on_mousemove, on_mousedown, on_mousedownout, $/;"	m	struct:GUI_Panel	access:public
on_mouseup	gui.h	/^		on_mouseup, on_menuitemaction, on_buttonaction;$/;"	m	struct:GUI_Panel	access:public
on_render	gui.h	/^	GUI_Render on_render;$/;"	m	struct:GUI_Panel	access:public
on_unfocus	gui.h	/^		on_focus, on_unfocus, on_mousemove, on_mousedown, on_mousedownout, $/;"	m	struct:GUI_Panel	access:public
oob_error	/usr/include/opencv/ml.h	/^    double oob_error;$/;"	m	class:CvRTrees	access:protected
opacity	interface_opengl.h	/^	float color[3], line_width, point_size, opacity;$/;"	m	struct:Drawing_Style	access:public
opencv_begin	interface_opencv.cpp	/^void opencv_begin()$/;"	f	signature:()
opencv_begin	interface_opencv.h	/^void opencv_begin();$/;"	p	signature:()
opencv_create_I_matrix	interface_opencv.cpp	/^CvMat * opencv_create_I_matrix(const size_t n) $/;"	f	signature:(const size_t n)
opencv_create_I_matrix	interface_opencv.h	/^CvMat * opencv_create_I_matrix(const size_t n);$/;"	p	signature:(const size_t n)
opencv_create_cross_product_matrix	interface_opencv.cpp	/^CvMat * opencv_create_cross_product_matrix(CvMat * x) $/;"	f	signature:(CvMat * x)
opencv_create_cross_product_matrix	interface_opencv.h	/^CvMat * opencv_create_cross_product_matrix(CvMat * x);$/;"	p	signature:(CvMat * x)
opencv_create_exp_image	interface_opencv.cpp	/^IplImage * opencv_create_exp_image(const int width, const int height, const int depth, const int channels) $/;"	f	signature:(const int width, const int height, const int depth, const int channels)
opencv_create_exp_image	interface_opencv.h	/^IplImage * opencv_create_exp_image(const int width, const int height, const int depth, const int channels);$/;"	p	signature:(const int width, const int height, const int depth, const int channels)
opencv_create_matrix	interface_opencv.cpp	/^CvMat * opencv_create_matrix(const size_t rows, const size_t cols) $/;"	f	signature:(const size_t rows, const size_t cols)
opencv_create_matrix	interface_opencv.cpp	/^CvMat * opencv_create_matrix(const size_t rows, const size_t cols, double * data)$/;"	f	signature:(const size_t rows, const size_t cols, double * data)
opencv_create_matrix	interface_opencv.h	/^CvMat * opencv_create_matrix(const size_t rows, const size_t cols);$/;"	p	signature:(const size_t rows, const size_t cols)
opencv_create_matrix	interface_opencv.h	/^CvMat * opencv_create_matrix(const size_t rows, const size_t cols, double data[]);$/;"	p	signature:(const size_t rows, const size_t cols, double data[])
opencv_create_rotation_matrix_from_euler	interface_opencv.cpp	/^CvMat * opencv_create_rotation_matrix_from_euler(const double euler[], bool reverse_order)$/;"	f	signature:(const double euler[], bool reverse_order)
opencv_create_rotation_matrix_from_euler	interface_opencv.h	/^CvMat * opencv_create_rotation_matrix_from_euler(const double euler[], bool reverse_order = true);$/;"	p	signature:(const double euler[], bool reverse_order = true)
opencv_create_rotation_matrix_x	interface_opencv.cpp	/^CvMat * opencv_create_rotation_matrix_x(const double angle)$/;"	f	signature:(const double angle)
opencv_create_rotation_matrix_x	interface_opencv.h	/^CvMat * opencv_create_rotation_matrix_x(const double angle);$/;"	p	signature:(const double angle)
opencv_create_rotation_matrix_y	interface_opencv.cpp	/^CvMat * opencv_create_rotation_matrix_y(const double angle)$/;"	f	signature:(const double angle)
opencv_create_rotation_matrix_y	interface_opencv.h	/^CvMat * opencv_create_rotation_matrix_y(const double angle);$/;"	p	signature:(const double angle)
opencv_create_rotation_matrix_z	interface_opencv.cpp	/^CvMat * opencv_create_rotation_matrix_z(const double angle)$/;"	f	signature:(const double angle)
opencv_create_rotation_matrix_z	interface_opencv.h	/^CvMat * opencv_create_rotation_matrix_z(const double angle);$/;"	p	signature:(const double angle)
opencv_create_substitute_image	interface_opencv.cpp	/^IplImage * opencv_create_substitute_image() $/;"	f	signature:()
opencv_create_substitute_image	interface_opencv.h	/^IplImage * opencv_create_substitute_image();$/;"	p	signature:()
opencv_create_vector	interface_opencv.cpp	/^CvMat * opencv_create_vector(const double a[], const size_t length)$/;"	f	signature:(const double a[], const size_t length)
opencv_create_vector	interface_opencv.h	/^CvMat * opencv_create_vector(const double a[], const size_t length);$/;"	p	signature:(const double a[], const size_t length)
opencv_debug	interface_opencv.cpp	/^void opencv_debug(const char * title, CvMat * A) $/;"	f	signature:(const char * title, CvMat * A)
opencv_debug	interface_opencv.h	/^void opencv_debug(const char * title, CvMat * A);$/;"	p	signature:(const char * title, CvMat * A)
opencv_downsize	interface_opencv.cpp	/^void opencv_downsize(IplImage ** img, const int max_size)$/;"	f	signature:(IplImage ** img, const int max_size)
opencv_downsize	interface_opencv.h	/^void opencv_downsize(IplImage ** img, const int max_size);$/;"	p	signature:(IplImage ** img, const int max_size)
opencv_downsize_copy	interface_opencv.cpp	/^IplImage * opencv_downsize_copy(IplImage * img, const int max_size)$/;"	f	signature:(IplImage * img, const int max_size)
opencv_downsize_copy	interface_opencv.h	/^IplImage * opencv_downsize_copy(IplImage * img, const int max_size);$/;"	p	signature:(IplImage * img, const int max_size)
opencv_end	interface_opencv.cpp	/^void opencv_end()$/;"	f	signature:()
opencv_end	interface_opencv.h	/^void opencv_end();$/;"	p	signature:()
opencv_epipolar	interface_opencv.cpp	/^void opencv_epipolar(const CvMat * const F, const double x, const double y, double & a, double & b, double & c)$/;"	f	signature:(const CvMat * const F, const double x, const double y, double & a, double & b, double & c)
opencv_epipolar	interface_opencv.h	/^void opencv_epipolar(const CvMat * const F, const double x, const double y, double & a, double & b, double & c);$/;"	p	signature:(const CvMat * const F, const double x, const double y, double & a, double & b, double & c)
opencv_left_null_vector	interface_opencv.cpp	/^CvMat * opencv_left_null_vector(CvMat * A) $/;"	f	signature:(CvMat * A)
opencv_left_null_vector	interface_opencv.h	/^CvMat * opencv_left_null_vector(CvMat * A);$/;"	p	signature:(CvMat * A)
opencv_load_image	interface_opencv.cpp	/^IplImage * opencv_load_image(const char * filename, const int max_size) $/;"	f	signature:(const char * filename, const int max_size)
opencv_load_image	interface_opencv.h	/^IplImage * opencv_load_image(const char * filename, const int max_size);$/;"	p	signature:(const char * filename, const int max_size)
opencv_lock	interface_opencv.cpp	/^static pthread_mutex_t opencv_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
opencv_normalize	interface_opencv.cpp	/^void opencv_normalize(CvMat * x) $/;"	f	signature:(CvMat * x)
opencv_normalize	interface_opencv.h	/^void opencv_normalize(CvMat * x);$/;"	p	signature:(CvMat * x)
opencv_normalize_homogeneous	interface_opencv.cpp	/^void opencv_normalize_homogeneous(CvMat * x) $/;"	f	signature:(CvMat * x)
opencv_normalize_homogeneous	interface_opencv.h	/^void opencv_normalize_homogeneous(CvMat * x);$/;"	p	signature:(CvMat * x)
opencv_normalize_inhomogeneous	interface_opencv.cpp	/^void opencv_normalize_inhomogeneous(CvMat * x) $/;"	f	signature:(CvMat * x)
opencv_normalize_inhomogeneous	interface_opencv.h	/^void opencv_normalize_inhomogeneous(CvMat * x);$/;"	p	signature:(CvMat * x)
opencv_pip	interface_opencv.cpp	/^bool opencv_pip(const double x, const double y, const CvMat * polygon)$/;"	f	signature:(const double x, const double y, const CvMat * polygon)
opencv_pip	interface_opencv.h	/^bool opencv_pip(const double x, const double y, const CvMat * polygon);$/;"	p	signature:(const double x, const double y, const CvMat * polygon)
opencv_rescale_homogeneous_vector	interface_opencv.cpp	/^void opencv_rescale_homogeneous_vector(CvMat * X) $/;"	f	signature:(CvMat * X)
opencv_rescale_homogeneous_vector	interface_opencv.h	/^void opencv_rescale_homogeneous_vector(CvMat * X);$/;"	p	signature:(CvMat * X)
opencv_right_null_vector	interface_opencv.cpp	/^CvMat * opencv_right_null_vector(CvMat * A) $/;"	f	signature:(CvMat * A)
opencv_right_null_vector	interface_opencv.h	/^CvMat * opencv_right_null_vector(CvMat * A);$/;"	p	signature:(CvMat * A)
opencv_rotation_matrix_to_angles	interface_opencv.cpp	/^void opencv_rotation_matrix_to_angles(const CvMat * const R, double & ax, double & ay, double & az) $/;"	f	signature:(const CvMat * const R, double & ax, double & ay, double & az)
opencv_rotation_matrix_to_angles	interface_opencv.h	/^void opencv_rotation_matrix_to_angles(const CvMat * const R, double & ax, double & ay, double & az);$/;"	p	signature:(const CvMat * const R, double & ax, double & ay, double & az)
opencv_vertex_projection_visualization	interface_opencv.cpp	/^void opencv_vertex_projection_visualization(const CvMat * const P, const CvMat * X, double reprojection[])$/;"	f	signature:(const CvMat * const P, const CvMat * X, double reprojection[])
opencv_vertex_projection_visualization	interface_opencv.cpp	/^void opencv_vertex_projection_visualization(const CvMat * const P, const double x, const double y, const double z, const double w, double reprojection[])$/;"	f	signature:(const CvMat * const P, const double x, const double y, const double z, const double w, double reprojection[])
opencv_vertex_projection_visualization	interface_opencv.cpp	/^void opencv_vertex_projection_visualization(const CvMat * const P, const double x, const double y, const double z, double reprojection[])$/;"	f	signature:(const CvMat * const P, const double x, const double y, const double z, double reprojection[])
opencv_vertex_projection_visualization	interface_opencv.h	/^void opencv_vertex_projection_visualization(const CvMat * const P, const CvMat * X, double reprojection[]);$/;"	p	signature:(const CvMat * const P, const CvMat * X, double reprojection[])
opencv_vertex_projection_visualization	interface_opencv.h	/^void opencv_vertex_projection_visualization(const CvMat * const P, const double x, const double y, const double z, const double w, double reprojection[]);$/;"	p	signature:(const CvMat * const P, const double x, const double y, const double z, const double w, double reprojection[])
opencv_vertex_projection_visualization	interface_opencv.h	/^void opencv_vertex_projection_visualization(const CvMat * const P, const double x, const double y, const double z, double reprojection[]);$/;"	p	signature:(const CvMat * const P, const double x, const double y, const double z, double reprojection[])
opengl_2d_mode	interface_opengl.cpp	/^void opengl_2d_mode(double x1, double y1, double x2, double y2)$/;"	f	signature:(double x1, double y1, double x2, double y2)
opengl_2d_mode	interface_opengl.h	/^void opengl_2d_mode(double x1, double y1, double x2, double y2);$/;"	p	signature:(double x1, double y1, double x2, double y2)
opengl_drawing_style	interface_opengl.cpp	/^void opengl_drawing_style(const Drawing_Style & style) $/;"	f	signature:(const Drawing_Style & style)
opengl_drawing_style	interface_opengl.h	/^void opengl_drawing_style(const Drawing_Style & style);$/;"	p	signature:(const Drawing_Style & style)
opengl_end_2d_mode	interface_opengl.cpp	/^void opengl_end_2d_mode()$/;"	f	signature:()
opengl_end_2d_mode	interface_opengl.h	/^void opengl_end_2d_mode();$/;"	p	signature:()
opengl_modelview	ui_visualization.h	/^	GLdouble opengl_modelview[16], opengl_projection[16]; $/;"	m	struct:Visualization_State	access:public
opengl_projection	ui_visualization.h	/^	GLdouble opengl_modelview[16], opengl_projection[16]; $/;"	m	struct:Visualization_State	access:public
opengl_push_attribs	interface_opengl.cpp	/^void opengl_push_attribs()$/;"	f	signature:()
opengl_push_attribs	interface_opengl.h	/^void opengl_push_attribs();$/;"	p	signature:()
opengl_viewport	ui_visualization.h	/^	int opengl_viewport[4];$/;"	m	struct:Visualization_State	access:public
operation	/usr/include/opencv/cv.hpp	/^    int operation;$/;"	m	class:CvMorphology	access:protected
operator =	/usr/include/opencv/cxcore.hpp	/^    CvImage& operator = (const CvImage& img)$/;"	f	class:CvImage	access:public	signature:(const CvImage& img)
operator =	/usr/include/opencv/cxcore.hpp	/^    CvMatrix& operator = (const CvMatrix& _m)$/;"	f	class:CvMatrix	access:public	signature:(const CvMatrix& _m)
operator CvMat*	/usr/include/opencv/cxcore.hpp	/^    operator CvMat* () { return matrix; }$/;"	f	class:CvMatrix	access:public	signature:()
operator IplImage*	/usr/include/opencv/cxcore.hpp	/^    operator IplImage* () { return image; }$/;"	f	class:CvImage	access:public	signature:()
operator const CvMat*	/usr/include/opencv/cxcore.hpp	/^    operator const CvMat* () const { return matrix; }$/;"	f	class:CvMatrix	access:public	signature:() const
operator const IplImage*	/usr/include/opencv/cxcore.hpp	/^    operator const IplImage* () const { return image; }$/;"	f	class:CvImage	access:public	signature:() const
option_hide_automatic	tool_selection.cpp	/^bool option_show_dualview, option_thumbs_only_for_selected, option_hide_automatic;$/;"	v
option_show_dualview	tool_selection.cpp	/^bool option_show_dualview, option_thumbs_only_for_selected, option_hide_automatic;$/;"	v
option_thumbs_only_for_selected	tool_selection.cpp	/^bool option_show_dualview, option_thumbs_only_for_selected, option_hide_automatic;$/;"	v
ord	/usr/include/opencv/ml.h	/^        ord;$/;"	m	union:CvDTreeSplit::__anon25	typeref:struct:CvDTreeSplit::__anon25::__anon26	access:public
ord_var_count	/usr/include/opencv/ml.h	/^    int ord_var_count, cat_var_count;$/;"	m	struct:CvDTreeTrainData	access:public
order	tool_core.h	/^	unsigned short int order[20];       \/\/ order of items in menu $/;"	m	struct:Tool_Menu_Item	access:public
orig_response	/usr/include/opencv/ml.h	/^    CvMat* orig_response;$/;"	m	class:CvBoost	access:protected
orig_window_size	/usr/include/opencv/cvtypes.h	/^    CvSize orig_window_size;$/;"	m	struct:CvHaarClassifierCascade	access:public
origin	/usr/include/opencv/cxcore.hpp	/^    int origin() const { return image ? image->origin : 0; }$/;"	f	class:CvImage	access:public	signature:() const
origin	/usr/include/opencv/cxtypes.h	/^    CvPoint  origin;$/;"	m	struct:CvChain	access:public
origin	/usr/include/opencv/cxtypes.h	/^    int  origin;        \/* 0 - top-left origin,$/;"	m	struct:_IplImage	access:public
overview_clear_keys	ui_state.h	/^	bool * inspection_clear_keys, * shot_clear_keys, * overview_clear_keys;    \/\/ determines which key states should be automatically cleared$/;"	m	struct:UI_State	access:public
p	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f p; \/\/ pgruebele: So we do not loose precision, this needs to be float$/;"	m	struct:__anon3	access:public
p	/usr/include/opencv/cvaux.h	/^    CvPoint3D32f p;             \/\/ location of the tracked object$/;"	m	struct:__anon4	access:public
p	/usr/include/opencv/ml.h	/^    double      p; \/\/ for CV_SVM_EPS_SVR$/;"	m	struct:CvSVMParams	access:public
p	core_debug.cpp	/^	void * p;$/;"	m	struct:Allocated_Memory	file:	access:public
p	gui.h	/^	void * p;$/;"	m	struct:GUI_Panel	access:public
p1	/usr/include/opencv/cvtypes.h	/^    CvPoint p1;            \/* the first point of the binary tree root segment *\/$/;"	m	struct:CvContourTree	access:public
p2	/usr/include/opencv/cvtypes.h	/^    CvPoint p2;            \/* the last point of the binary tree root segment *\/$/;"	m	struct:CvContourTree	access:public
pBD	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobDetector*         pBD; \/* existed blob detector module$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
pBT	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobTracker*          pBT; \/* existed blob tracking module$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
pBTA	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobTrackAnalysis*    pBTA; \/* existed blob trajectory analysis module *\/$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
pBTGen	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobTrackGen*         pBTGen; \/* existed blob trajectory generator,$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
pBTPP	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobTrackPostProc*    pBTPP; \/* existed blob trajectory postprocessing module$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
pBlobSeq	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobSeq*  pBlobSeq;$/;"	m	struct:CvBlobTrack	access:public
pComment	/usr/include/opencv/cvvidsurv.hpp	/^    char*               pComment;$/;"	m	struct:CvDefParam	access:public
pDouble	/usr/include/opencv/cvvidsurv.hpp	/^    double*             pDouble;$/;"	m	struct:CvDefParam	access:public
pFG	/usr/include/opencv/cvvidsurv.hpp	/^    CvFGDetector*           pFG; \/* FGDetector module, if this filed is NULL the Process FG mask is used *\/$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
pFloat	/usr/include/opencv/cvvidsurv.hpp	/^    float*              pFloat;$/;"	m	struct:CvDefParam	access:public
pInt	/usr/include/opencv/cvvidsurv.hpp	/^    int*                pInt;$/;"	m	struct:CvDefParam	access:public
pName	/usr/include/opencv/cvvidsurv.hpp	/^    char*               pName;$/;"	m	struct:CvDefParam	access:public
pStr	/usr/include/opencv/cvvidsurv.hpp	/^    char**              pStr;$/;"	m	struct:CvDefParam	access:public
pair_relations	geometry_structures.h	/^	Shot_Pair_Relations pair_relations;$/;"	m	struct:Shot_Relations	access:public
pane	ui_state.h	/^		* window, * pane, * pane_tools, * div_tools, * div_glview, $/;"	m	struct:UI_State	access:public
pane_tools	ui_state.h	/^		* window, * pane, * pane_tools, * div_tools, * div_glview, $/;"	m	struct:UI_State	access:public
panels	gui.h	/^	GUI_Panel * panels[GUI_MAX_PANELS];$/;"	m	struct:GUI_Context	access:public
panels_count	gui.h	/^	size_t panels_count;$/;"	m	struct:GUI_Context	access:public
param	/usr/include/opencv/cvcompat.h	/^    CvScalar  param[2]; \/* parameters of RNG *\/$/;"	m	struct:CvRandState	access:public
parameters	tool_core.h	/^	Tool_Parameters parameters;$/;"	m	struct:Tool	access:public
params	/usr/include/opencv/cvaux.h	/^    CvFGDStatModelParams   params;$/;"	m	struct:CvFGDStatModel	access:public
params	/usr/include/opencv/cvaux.h	/^    CvGaussBGStatModelParams   params;    $/;"	m	struct:CvGaussBGModel	access:public
params	/usr/include/opencv/ml.h	/^    CvANN_MLP_TrainParams params;$/;"	m	class:CvANN_MLP	access:protected
params	/usr/include/opencv/ml.h	/^    CvBoostParams params;    $/;"	m	class:CvBoost	access:protected
params	/usr/include/opencv/ml.h	/^    CvDTreeParams params;$/;"	m	struct:CvDTreeTrainData	access:public
params	/usr/include/opencv/ml.h	/^    CvEMParams params;$/;"	m	class:CvEM	access:protected
params	/usr/include/opencv/ml.h	/^    CvSVMParams params;$/;"	m	class:CvSVM	access:protected
params	/usr/include/opencv/ml.h	/^    const CvSVMParams* params;$/;"	m	class:CvSVMSolver	access:public
params	/usr/include/opencv/ml.h	/^    const CvSVMParams* params;$/;"	m	struct:CvSVMKernel	access:public
parent	/usr/include/opencv/cvtypes.h	/^    int parent;$/;"	m	struct:CvHaarStageClassifier	access:public
parent	/usr/include/opencv/cxtypes.h	/^    struct  CvMemStorage* parent; \/* borrows new blocks from *\/$/;"	m	struct:CvMemStorage	typeref:struct:CvMemStorage::CvMemStorage	access:public
parent	/usr/include/opencv/ml.h	/^    CvDTreeNode* parent;$/;"	m	struct:CvDTreeNode	access:public
parent	gui.h	/^	GUI_Panel * parent, * sibling;$/;"	m	struct:GUI_Panel	access:public
partial_calibration	geometry_structures.h	/^	bool partial_calibration; \/\/ current partial calibration has estimate of this camera's calibration matrix $/;"	m	struct:Shot	access:public
path	tool_core.h	/^	char * path;                        \/\/ path in menu $/;"	m	struct:Tool_Menu_Item	access:public
perform_morphing	/usr/include/opencv/cvaux.h	/^    int           Lc, N1c, N2c, Lcc, N1cc, N2cc, is_obj_without_holes, perform_morphing;$/;"	m	struct:CvFGDStatModelParams	access:public
pi_infinity	geometry_structures.h	/^	CvMat * pi_infinity;$/;"	m	struct:Calibration	access:public
pix_size	/usr/include/opencv/cxcore.hpp	/^    int pix_size() const { return image ? ((image->depth & 255)>>3)*image->nChannels : 0; }$/;"	f	class:CvImage	access:public	signature:() const
pix_size	/usr/include/opencv/cxcore.hpp	/^    int pix_size() const { return matrix ? CV_ELEM_SIZE(matrix->type) : 0; }$/;"	f	class:CvMatrix	access:public	signature:() const
pixel_stat	/usr/include/opencv/cvaux.h	/^    CvBGPixelStat*         pixel_stat;$/;"	m	struct:CvFGDStatModel	access:public
plane_from_three_points	core_math_routines.cpp	/^bool plane_from_three_points(const double * a, const double * b, const double * c, double * normal)$/;"	f	signature:(const double * a, const double * b, const double * c, double * normal)
plane_from_three_points	core_math_routines.h	/^bool plane_from_three_points(const double * a, const double * b, const double * c, double * normal);$/;"	p	signature:(const double * a, const double * b, const double * c, double * normal)
plus_delta	/usr/include/opencv/cxtypes.h	/^    int  plus_delta;$/;"	m	struct:CvLineIterator	access:public
plus_step	/usr/include/opencv/cxtypes.h	/^    int  plus_step;$/;"	m	struct:CvLineIterator	access:public
point_of_focus	ui_visualization.h	/^	double point_of_focus[3];    \/\/ position of the point on which user camera is focused $/;"	m	struct:Visualization_State	access:public
point_size	interface_opengl.h	/^	float color[3], line_width, point_size, opacity;$/;"	m	struct:Drawing_Style	access:public
points	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f* points[MAX_CAMERAS];$/;"	m	class:CvCalibFilter	access:protected
points	geometry_structures.h	/^	Points points;         \/\/ 2d points $/;"	m	struct:Shot	access:public
points_count	geometry_loader.h	/^	size_t points_count; $/;"	m	struct:geometry_loader_SAX_state	access:public
points_fill_context_menu	tool_points.cpp	/^void points_fill_context_menu(bool enforce_recretion = false)$/;"	f	signature:(bool enforce_recretion = false)
points_meta	geometry_structures.h	/^	Calibration_Points_Meta points_meta;$/;"	m	struct:Calibration_Camera	access:public
polygons	geometry_structures.cpp	/^Polygons_3d polygons; \/\/ 3d polygons $/;"	v
positioner	gui.h	/^	GUI_Positioner positioner;$/;"	m	struct:GUI_Panel	access:public
positive_x	ui_context.h	/^	bool positive_x, positive_y; \/\/ direction in which the window is shown $/;"	m	struct:Context_State	access:public
positive_y	ui_context.h	/^	bool positive_x, positive_y; \/\/ direction in which the window is shown $/;"	m	struct:Context_State	access:public
pp_x	geometry_structures.h	/^	double pp_x;           \/\/ principal point x coordinate (percentage of image size) $/;"	m	struct:Shot	access:public
pp_y	geometry_structures.h	/^	double pp_y;           \/\/ principal point y coordinate ...$/;"	m	struct:Shot	access:public
predict	/usr/include/opencv/ml.h	/^    virtual CvDTreeNode* predict( const CvMat* _sample, const CvMat* _missing_data_mask=0,$/;"	p	class:CvDTree	access:public	signature:( const CvMat* _sample, const CvMat* _missing_data_mask=0, bool preprocessed_input=false ) const
predict	/usr/include/opencv/ml.h	/^    virtual float predict( const CvMat* _inputs,$/;"	p	class:CvANN_MLP	access:public	signature:( const CvMat* _inputs, CvMat* _outputs ) const
predict	/usr/include/opencv/ml.h	/^    virtual float predict( const CvMat* _sample ) const;$/;"	p	class:CvSVM	access:public	signature:( const CvMat* _sample ) const
predict	/usr/include/opencv/ml.h	/^    virtual float predict( const CvMat* _sample, const CvMat* _missing=0,$/;"	p	class:CvBoost	access:public	signature:( const CvMat* _sample, const CvMat* _missing=0, CvMat* weak_responses=0, CvSlice slice=CV_WHOLE_SEQ, bool raw_mode=false ) const
predict	/usr/include/opencv/ml.h	/^    virtual float predict( const CvMat* _samples, CvMat* results=0 ) const;$/;"	p	class:CvNormalBayesClassifier	access:public	signature:( const CvMat* _samples, CvMat* results=0 ) const
predict	/usr/include/opencv/ml.h	/^    virtual float predict( const CvMat* sample, CvMat* probs ) const;$/;"	p	class:CvEM	access:public	signature:( const CvMat* sample, CvMat* probs ) const
predict	/usr/include/opencv/ml.h	/^    virtual float predict( const CvMat* sample, const CvMat* missing = 0 ) const;$/;"	p	class:CvRTrees	access:public	signature:( const CvMat* sample, const CvMat* missing = 0 ) const
prepare_to_train	/usr/include/opencv/ml.h	/^    virtual bool prepare_to_train( const CvMat* _inputs, const CvMat* _outputs,$/;"	p	class:CvANN_MLP	access:protected	signature:( const CvMat* _inputs, const CvMat* _outputs, const CvMat* _sample_weights, const CvMat* _sample_idx, CvVectors* _ivecs, CvVectors* _ovecs, double** _sw, int _flags )
prev	/usr/include/opencv/cxtypes.h	/^    struct CvMemBlock*  prev;$/;"	m	struct:CvMemBlock	typeref:struct:CvMemBlock::CvMemBlock	access:public
prev	/usr/include/opencv/cxtypes.h	/^    struct CvSeqBlock*  prev; \/* previous sequence block *\/$/;"	m	struct:CvSeqBlock	typeref:struct:CvSeqBlock::CvSeqBlock	access:public
prev	/usr/include/opencv/cxtypes.h	/^    struct CvTypeInfo* prev;$/;"	m	struct:CvTypeInfo	typeref:struct:CvTypeInfo::CvTypeInfo	access:public
prev	/usr/include/opencv/ml.h	/^    CvSVMKernelRow* prev;$/;"	m	struct:CvSVMKernelRow	access:public
prev_frame	/usr/include/opencv/cvaux.h	/^    IplImage*              prev_frame;$/;"	m	struct:CvFGDStatModel	access:public
prev_width	/usr/include/opencv/cv.hpp	/^    int prev_width;$/;"	m	class:CvBaseImageFilter	access:protected
prev_x_range	/usr/include/opencv/cv.hpp	/^    CvSlice prev_x_range;$/;"	m	class:CvBaseImageFilter	access:protected
previous_mode	ui_state.h	/^	UI_Mode mode, previous_mode;$/;"	m	struct:UI_State	access:public
primary	geometry_structures.h	/^	size_t primary, secondary; $/;"	m	struct:Double_Index	access:public
principal_point	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f principal_point; \/* copied from intrinsics so this structure *\/$/;"	m	struct:__anon5	access:public
principal_point	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f principal_point;$/;"	m	struct:__anon6	access:public
priors	/usr/include/opencv/ml.h	/^    CvMat* priors;$/;"	m	struct:CvDTreeTrainData	access:public
priors	/usr/include/opencv/ml.h	/^    const float* priors;$/;"	m	struct:CvDTreeParams	access:public
priors_mult	/usr/include/opencv/ml.h	/^    CvMat* priors_mult;$/;"	m	struct:CvDTreeTrainData	access:public
probs	/usr/include/opencv/ml.h	/^    CvMat* probs;$/;"	m	class:CvEM	access:protected
probs	/usr/include/opencv/ml.h	/^    const CvMat* probs;$/;"	m	struct:CvEMParams	access:public
process	/usr/include/opencv/cv.hpp	/^    virtual int process( const CvMat* _src, CvMat* _dst,$/;"	p	class:CvBaseImageFilter	access:public	signature:( const CvMat* _src, CvMat* _dst, CvRect _src_roi=cvRect(0,0,-1,-1), CvPoint _dst_origin=cvPoint(0,0), int _flags=0 )
process_events	tool_core.h	/^	Tool_Process_Events process_events;    \/\/ decides whether or not to actually process user input in some situation$/;"	m	struct:Tool	access:public
process_noise_cov	/usr/include/opencv/cvtypes.h	/^    CvMat* process_noise_cov;   \/* process noise covariance matrix (Q) *\/$/;"	m	struct:CvKalman	access:public
processed_vertex_stage	ui_state.h	/^	int processed_vertex_stage;$/;"	m	struct:UI_State	access:public
productsum	/usr/include/opencv/ml.h	/^    CvMat** productsum;$/;"	m	class:CvNormalBayesClassifier	access:protected
projection	geometry_structures.h	/^	CvMat * projection, * rotation, * translation, * internal_calibration;$/;"	m	struct:Shot	access:public
prune	/usr/include/opencv/ml.h	/^    virtual void prune( CvSlice slice );$/;"	p	class:CvBoost	access:public	signature:( CvSlice slice )
prune_cv	/usr/include/opencv/ml.h	/^    virtual void prune_cv();$/;"	p	class:CvDTree	access:protected	signature:()
pruned_tree_idx	/usr/include/opencv/ml.h	/^    int pruned_tree_idx;$/;"	m	class:CvDTree	access:protected
pt	/usr/include/opencv/cvtypes.h	/^    CvPoint   pt;$/;"	m	struct:CvChainPtReader	access:public
ptr	/usr/include/opencv/cxcore.h	/^    uchar* ptr[CV_MAX_ARR]; \/* pointers to the array slices *\/$/;"	m	struct:CvNArrayIterator	access:public
ptr	/usr/include/opencv/cxtypes.h	/^        uchar* ptr;$/;"	m	union:CvMat::__anon13	access:public
ptr	/usr/include/opencv/cxtypes.h	/^        uchar* ptr;$/;"	m	union:CvMatND::__anon16	access:public
ptr	/usr/include/opencv/cxtypes.h	/^    CvPoint2D32f* ptr;$/;"	m	struct:CvGraphVtx2D	access:public
ptr	/usr/include/opencv/cxtypes.h	/^    char* ptr;$/;"	m	struct:CvString	access:public
ptr	/usr/include/opencv/cxtypes.h	/^    uchar* ptr;$/;"	m	struct:CvLineIterator	access:public
ptr	/usr/include/opencv/ml.h	/^        uchar** ptr;$/;"	m	union:CvVectors::__anon20	access:public
publish_2_view_reconstruction_data	geometry_publish.cpp	/^bool publish_2_view_reconstruction_data($/;"	f	signature:( const size_t shot_id1, const size_t shot_id2, CvMat ** points1, CvMat ** points2, size_t ** points1_indices, size_t ** points2_indices )
publish_2_view_reconstruction_data	geometry_publish.h	/^bool publish_2_view_reconstruction_data($/;"	p	signature:( const size_t shot_id1, const size_t shot_id2, CvMat ** points1, CvMat ** points2, size_t ** points1_indices, size_t ** points2_indices )
publish_polygon	geometry_publish.cpp	/^CvMat * publish_polygon(const size_t shot_id, const size_t polygon_id)$/;"	f	signature:(const size_t shot_id, const size_t polygon_id)
publish_polygon	geometry_publish.h	/^CvMat * publish_polygon(const size_t shot_id, const size_t polygon_id);$/;"	p	signature:(const size_t shot_id, const size_t polygon_id)
publish_resection_data_from_calibration	geometry_publish.cpp	/^bool publish_resection_data_from_calibration($/;"	f	signature:( const size_t calibration_id, const size_t shot_id, CvMat ** points, CvMat ** vertices, size_t ** points_indices )
publish_resection_data_from_calibration	geometry_publish.h	/^bool publish_resection_data_from_calibration($/;"	p	signature:( const size_t calibration_id, const size_t shot_id, CvMat ** points, CvMat ** vertices, size_t ** points_indices )
publish_triangulation_data	geometry_publish.cpp	/^bool publish_triangulation_data($/;"	f	signature:( const Vertex_Incidence & incidence, size_t vertex_id, const CvMat * * & projection_matrices, CvMat * & points, bool * shots_to_use )
publish_triangulation_data	geometry_publish.h	/^bool publish_triangulation_data($/;"	p	signature:( const Vertex_Incidence & incidence, size_t vertex_id, const CvMat * * & projection_matrices, CvMat * & points, bool * shots_to_use )
publish_triangulation_data_from_calibration	geometry_publish.cpp	/^bool publish_triangulation_data_from_calibration($/;"	f	signature:( const size_t calibration_id, const Vertex_Incidence & incidence, size_t vertex_id, const CvMat * * & projection_matrices, CvMat * & points, size_t * & indices )
publish_triangulation_data_from_calibration	geometry_publish.h	/^bool publish_triangulation_data_from_calibration($/;"	p	signature:( const size_t calibration_id, const Vertex_Incidence & incidence, size_t vertex_id, const CvMat * * & projection_matrices, CvMat * & points, size_t * & indices )
px	gui.h	/^	double px, py; \/\/ pixel width and height$/;"	m	struct:GUI_Context	access:public
py	gui.h	/^	double px, py; \/\/ pixel width and height$/;"	m	struct:GUI_Context	access:public
q	mvg_autocalibration.cpp	/^double q(CvMat * P, int i, int j, int c)$/;"	f	signature:(CvMat * P, int i, int j, int c)
q	mvg_autocalibration.h	/^double q(CvMat * P, int i, int j, int c);$/;"	p	signature:(CvMat * P, int i, int j, int c)
quad	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f quad[2][4]; \/* coordinates of destination quadrangle after$/;"	m	struct:CvStereoCamera	access:public
quality	/usr/include/opencv/ml.h	/^    float quality;$/;"	m	struct:CvDTreeSplit	access:public
quality	core_image_loader.h	/^	Image_Loader_Quality quality;$/;"	m	struct:Image_Loader_Request	access:public
query	/usr/include/opencv/cvaux.hpp	/^    float query( int* bin ) const$/;"	f	class:CvCamShiftTracker	access:public	signature:( int* bin ) const
query_count_points_by_vertex	geometry_queries.cpp	/^size_t query_count_points_by_vertex(const size_t vertex_id) $/;"	f	signature:(const size_t vertex_id)
query_count_points_by_vertex	geometry_queries.h	/^size_t query_count_points_by_vertex(const size_t vertex_id);$/;"	p	signature:(const size_t vertex_id)
query_count_reconstructed_points_on_shot	geometry_queries.cpp	/^size_t query_count_reconstructed_points_on_shot(const size_t shot_id) $/;"	f	signature:(const size_t shot_id)
query_count_reconstructed_points_on_shot	geometry_queries.h	/^size_t query_count_reconstructed_points_on_shot(const size_t shot_id);$/;"	p	signature:(const size_t shot_id)
query_find_point_on_shot_by_vertex_id	geometry_queries.cpp	/^bool query_find_point_on_shot_by_vertex_id(size_t shot_id, size_t vertex_id, size_t & point_id)$/;"	f	signature:(size_t shot_id, size_t vertex_id, size_t & point_id)
query_find_point_on_shot_by_vertex_id	geometry_queries.h	/^bool query_find_point_on_shot_by_vertex_id(size_t shot_id, size_t vertex_id, size_t & point_id);$/;"	p	signature:(size_t shot_id, size_t vertex_id, size_t & point_id)
query_is_contour_reconstructed	geometry_queries.cpp	/^bool query_is_contour_reconstructed(const Contour & contour, const Points & points, const Vertices & vertices) $/;"	f	signature:(const Contour & contour, const Points & points, const Vertices & vertices)
query_is_contour_reconstructed	geometry_queries.h	/^bool query_is_contour_reconstructed(const Contour & contour, const Points & points, const Vertices & vertices);$/;"	p	signature:(const Contour & contour, const Points & points, const Vertices & vertices)
query_is_polygon_reconstructed	geometry_queries.cpp	/^bool query_is_polygon_reconstructed(const Polygon_3d & polygon, const Vertices & vertices)$/;"	f	signature:(const Polygon_3d & polygon, const Vertices & vertices)
query_is_polygon_reconstructed	geometry_queries.h	/^bool query_is_polygon_reconstructed(const Polygon_3d & polygon, const Vertices & vertices);$/;"	p	signature:(const Polygon_3d & polygon, const Vertices & vertices)
query_nearest_point	geometry_queries.cpp	/^double query_nearest_point(const size_t shot_id, const double x, const double y, size_t & point_id, bool skipping_auto \/*= false*\/)$/;"	f	signature:(const size_t shot_id, const double x, const double y, size_t & point_id, bool skipping_auto )
query_nearest_point	geometry_queries.h	/^double query_nearest_point(const size_t shot_id, const double x, const double y, size_t & point_id, bool skipping_auto = false);$/;"	p	signature:(const size_t shot_id, const double x, const double y, size_t & point_id, bool skipping_auto = false)
r	/usr/include/opencv/cvtypes.h	/^        CvRect r;$/;"	m	struct:CvHaarFeature::__anon32	access:public
r	/usr/include/opencv/ml.h	/^    double r;   \/\/ for Solver_NU$/;"	m	struct:CvSVMSolutionInfo	access:public
rad2deg	core_math_routines.cpp	/^double rad2deg(const double a) $/;"	f	signature:(const double a)
rad2deg	core_math_routines.h	/^double rad2deg(const double a);$/;"	p	signature:(const double a)
radio_next	gui.h	/^	GUI_Panel * radio_next, * radio_parent;$/;"	m	struct:GUI_Panel	access:public
radio_parent	gui.h	/^	GUI_Panel * radio_next, * radio_parent;$/;"	m	struct:GUI_Panel	access:public
read	/usr/include/opencv/cxcore.hpp	/^    bool read( CvFileStorage* fs, const char* mapname, const char* imgname );$/;"	p	class:CvImage	access:public	signature:( CvFileStorage* fs, const char* mapname, const char* imgname )
read	/usr/include/opencv/cxcore.hpp	/^    bool read( CvFileStorage* fs, const char* mapname, const char* matname );$/;"	p	class:CvMatrix	access:public	signature:( CvFileStorage* fs, const char* mapname, const char* matname )
read	/usr/include/opencv/cxcore.hpp	/^    bool read( CvFileStorage* fs, const char* seqname, int idx );$/;"	p	class:CvImage	access:public	signature:( CvFileStorage* fs, const char* seqname, int idx )
read	/usr/include/opencv/cxcore.hpp	/^    bool read( CvFileStorage* fs, const char* seqname, int idx );$/;"	p	class:CvMatrix	access:public	signature:( CvFileStorage* fs, const char* seqname, int idx )
read	/usr/include/opencv/cxtypes.h	/^    CvReadFunc read;$/;"	m	struct:CvTypeInfo	access:public
read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* fs, CvFileNode* node );$/;"	p	class:CvANN_MLP	access:public	signature:( CvFileStorage* fs, CvFileNode* node )
read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* fs, CvFileNode* node );$/;"	p	class:CvBoostTree	access:public	signature:( CvFileStorage* fs, CvFileNode* node )
read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* fs, CvFileNode* node );$/;"	p	class:CvDTree	access:public	signature:( CvFileStorage* fs, CvFileNode* node )
read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* fs, CvFileNode* node );$/;"	p	class:CvForestTree	access:public	signature:( CvFileStorage* fs, CvFileNode* node )
read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* fs, CvFileNode* node );$/;"	p	class:CvRTrees	access:public	signature:( CvFileStorage* fs, CvFileNode* node )
read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* fs, CvFileNode* node, CvRTrees* forest, CvDTreeTrainData* _data );$/;"	p	class:CvForestTree	access:public	signature:( CvFileStorage* fs, CvFileNode* node, CvRTrees* forest, CvDTreeTrainData* _data )
read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* fs, CvFileNode* node,$/;"	p	class:CvBoostTree	access:public	signature:( CvFileStorage* fs, CvFileNode* node, CvBoost* ensemble, CvDTreeTrainData* _data )
read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* fs, CvFileNode* node,$/;"	p	class:CvBoostTree	access:public	signature:( CvFileStorage* fs, CvFileNode* node, CvDTreeTrainData* data )
read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* fs, CvFileNode* node,$/;"	p	class:CvDTree	access:public	signature:( CvFileStorage* fs, CvFileNode* node, CvDTreeTrainData* data )
read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* fs, CvFileNode* node,$/;"	p	class:CvForestTree	access:public	signature:( CvFileStorage* fs, CvFileNode* node, CvDTreeTrainData* data )
read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* storage, CvFileNode* node );$/;"	p	class:CvBoost	access:public	signature:( CvFileStorage* storage, CvFileNode* node )
read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* storage, CvFileNode* node );$/;"	p	class:CvNormalBayesClassifier	access:public	signature:( CvFileStorage* storage, CvFileNode* node )
read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* storage, CvFileNode* node );$/;"	p	class:CvSVM	access:public	signature:( CvFileStorage* storage, CvFileNode* node )
read	/usr/include/opencv/ml.h	/^    virtual void read( CvFileStorage* storage, CvFileNode* node );$/;"	p	class:CvStatModel	access:public	signature:( CvFileStorage* storage, CvFileNode* node )
read_node	/usr/include/opencv/ml.h	/^    virtual CvDTreeNode* read_node( CvFileStorage* fs, CvFileNode* node, CvDTreeNode* parent );$/;"	p	class:CvDTree	access:protected	signature:( CvFileStorage* fs, CvFileNode* node, CvDTreeNode* parent )
read_params	/usr/include/opencv/ml.h	/^    virtual void read_params( CvFileStorage* fs, CvFileNode* node );$/;"	p	class:CvANN_MLP	access:protected	signature:( CvFileStorage* fs, CvFileNode* node )
read_params	/usr/include/opencv/ml.h	/^    virtual void read_params( CvFileStorage* fs, CvFileNode* node );$/;"	p	class:CvBoost	access:protected	signature:( CvFileStorage* fs, CvFileNode* node )
read_params	/usr/include/opencv/ml.h	/^    virtual void read_params( CvFileStorage* fs, CvFileNode* node );$/;"	p	class:CvSVM	access:protected	signature:( CvFileStorage* fs, CvFileNode* node )
read_params	/usr/include/opencv/ml.h	/^    virtual void read_params( CvFileStorage* fs, CvFileNode* node );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( CvFileStorage* fs, CvFileNode* node )
read_split	/usr/include/opencv/ml.h	/^    virtual CvDTreeSplit* read_split( CvFileStorage* fs, CvFileNode* node );$/;"	p	class:CvDTree	access:protected	signature:( CvFileStorage* fs, CvFileNode* node )
read_tree_nodes	/usr/include/opencv/ml.h	/^    virtual void read_tree_nodes( CvFileStorage* fs, CvFileNode* node );$/;"	p	class:CvDTree	access:protected	signature:( CvFileStorage* fs, CvFileNode* node )
real_widget	tool_core.h	/^	GUI_Panel * real_widget, * int_widget, * enum_widget, * bool_widget;$/;"	m	struct:Tool_Parameter	access:public
real_window_size	/usr/include/opencv/cvtypes.h	/^    CvSize real_window_size;$/;"	m	struct:CvHaarClassifierCascade	access:public
reconstructed	geometry_structures.h	/^	bool set, reconstructed;$/;"	m	struct:Vertex	access:public
rect	/usr/include/opencv/cvtypes.h	/^    CvRect rect;    \/* ROI of the component  *\/$/;"	m	struct:CvConnectedComp	access:public
rect	/usr/include/opencv/cvtypes.h	/^    CvRect rect;$/;"	m	struct:CvAvgComp	access:public
rect	/usr/include/opencv/cvtypes.h	/^    } rect[CV_HAAR_FEATURE_MAX];$/;"	m	struct:CvHaarFeature	typeref:struct:CvHaarFeature::__anon32	access:public
rectMap	/usr/include/opencv/cvaux.h	/^    CvMat*  rectMap[MAX_CAMERAS][2];$/;"	m	class:CvCalibFilter	access:protected
refcount	/usr/include/opencv/cxcore.hpp	/^    int* refcount;$/;"	m	class:CvImage	access:protected
refcount	/usr/include/opencv/cxtypes.h	/^    int* refcount;$/;"	m	struct:CvMat	access:public
refcount	/usr/include/opencv/cxtypes.h	/^    int* refcount;$/;"	m	struct:CvMatND	access:public
refcount	/usr/include/opencv/cxtypes.h	/^    int* refcount;$/;"	m	struct:CvSparseMat	access:public
refined	geometry_structures.h	/^	bool refined;$/;"	m	struct:Calibration	access:public
regression	/usr/include/opencv/ml.h	/^    bool regression;$/;"	m	class:CvKNearest	access:protected
regression_accuracy	/usr/include/opencv/ml.h	/^    float regression_accuracy;$/;"	m	struct:CvDTreeParams	access:public
relation	geometry_structures.h	/^	GEOMETRY_RELATION relation;          \/\/ type of correspondence$/;"	m	struct:Point	access:public
release	/usr/include/opencv/cxcore.hpp	/^    void release() { detach(); }$/;"	f	class:CvImage	access:public	signature:()
release	/usr/include/opencv/cxcore.hpp	/^    void release()$/;"	f	class:CvMatrix	access:public	signature:()
release	/usr/include/opencv/cxtypes.h	/^    CvReleaseFunc release;$/;"	m	struct:CvTypeInfo	access:public
release	application.cpp	/^bool release()$/;"	f	signature:()
release	application.h	/^bool release();$/;"	p	signature:()
report_error	application.cpp	/^bool report_error()$/;"	f	signature:()
report_error	application.h	/^bool report_error();$/;"	p	signature:()
report_invalid_chunk	core_debug.cpp	/^void report_invalid_chunk(const size_t id, const char * situation) $/;"	f	signature:(const size_t id, const char * situation)
report_invalid_chunk	core_debug.h	/^void report_invalid_chunk(const size_t id, const char * situation);$/;"	p	signature:(const size_t id, const char * situation)
request	ui_context.h	/^	Image_Loader_Request_Handle request;$/;"	m	struct:Context_Item	access:public
resected	geometry_structures.h	/^	bool resected;         \/\/ specific$/;"	m	struct:Shot	access:public
resection_refresh	tool_resection.cpp	/^void resection_refresh()$/;"	f	signature:()
reset_histogram	/usr/include/opencv/cvaux.hpp	/^    virtual void  reset_histogram();$/;"	p	class:CvCamShiftTracker	access:public	signature:()
reset_roi	/usr/include/opencv/cxcore.hpp	/^    void reset_roi() { cvResetImageROI(image); }$/;"	f	class:CvImage	access:public	signature:()
response	/usr/include/opencv/cvvidsurv.hpp	/^    float response;$/;"	m	struct:CvDetectedBlob	access:public
restriction	ui_state.h	/^	GEOMETRY_ITEM_TYPE restriction;    \/\/ group can be restricted to contain only some type of items (vertices, polygons, ...) \/\/ unused$/;"	m	struct:Group	access:public
rho	/usr/include/opencv/ml.h	/^    double rho;$/;"	m	struct:CvSVMDecisionFunc	access:public
rho	/usr/include/opencv/ml.h	/^    double rho;$/;"	m	struct:CvSVMSolutionInfo	access:public
right	/usr/include/opencv/cvtypes.h	/^    int* right;$/;"	m	struct:CvHaarClassifier	access:public
right	/usr/include/opencv/ml.h	/^    CvDTreeNode* right;$/;"	m	struct:CvDTreeNode	access:public
rng	/usr/include/opencv/ml.h	/^    CvRNG rng;$/;"	m	class:CvANN_MLP	access:protected
rng	/usr/include/opencv/ml.h	/^    CvRNG rng;$/;"	m	class:CvRTrees	access:protected
rng	/usr/include/opencv/ml.h	/^    CvRNG rng;$/;"	m	struct:CvDTreeTrainData	access:public
roi	/usr/include/opencv/cxcore.hpp	/^    CvRect roi() const$/;"	f	class:CvImage	access:public	signature:() const
roi	/usr/include/opencv/cxtypes.h	/^    struct _IplROI *roi;\/* image ROI. if NULL, the whole image is selected *\/$/;"	m	struct:_IplImage	typeref:struct:_IplImage::_IplROI	access:public
roi_row	/usr/include/opencv/cxcore.hpp	/^    const uchar* roi_row(int y) const$/;"	f	class:CvImage	access:public	signature:(int y) const
roi_row	/usr/include/opencv/cxcore.hpp	/^    uchar* roi_row(int y)$/;"	f	class:CvImage	access:public	signature:(int y)
roi_size	/usr/include/opencv/cxcore.hpp	/^    CvSize roi_size() const$/;"	f	class:CvImage	access:public	signature:() const
root	/usr/include/opencv/ml.h	/^    CvDTreeNode* root;$/;"	m	class:CvDTree	access:protected
root	tool_matching.cpp	/^	bool root; \/\/ is this root element $/;"	m	struct:Matching_UF_Node	file:	access:public
root_panel	gui.h	/^	GUI_Panel root_panel;$/;"	m	struct:GUI_Context	access:public
root_panel	ui_state.h	/^		* root_panel, * top, * side, * gl, * side_top, * side_bottom, $/;"	m	struct:UI_State	access:public
root_with_vertex	tool_matching.cpp	/^	bool root_with_vertex; \/\/ does this root element have created vertex? (in that case the value i holds it's vertex_id)$/;"	m	struct:Matching_UF_Node	file:	access:public
rotMatr	/usr/include/opencv/cvaux.h	/^    float   rotMatr[9];$/;"	m	struct:CvCamera	access:public
rotMatrix	/usr/include/opencv/cvaux.h	/^    float rotMatrix[9];$/;"	m	struct:CvStereoCamera	access:public
rotation	geometry_structures.h	/^	CvMat * projection, * rotation, * translation, * internal_calibration;$/;"	m	struct:Shot	access:public
row	/usr/include/opencv/cxcore.hpp	/^    const uchar* row(int i) const$/;"	f	class:CvMatrix	access:public	signature:(int i) const
row	/usr/include/opencv/cxcore.hpp	/^    uchar* row(int i) { return !matrix ? 0 : matrix->data.ptr + i*matrix->step; }$/;"	f	class:CvMatrix	access:public	signature:(int i)
rows	/usr/include/opencv/cv.hpp	/^    uchar** rows;$/;"	m	class:CvBaseImageFilter	access:protected
rows	/usr/include/opencv/cxcore.hpp	/^    int rows() const { return matrix ? matrix->rows : 0; }$/;"	f	class:CvMatrix	access:public	signature:() const
rows	/usr/include/opencv/cxtypes.h	/^        int rows;$/;"	m	union:CvMat::__anon14	access:public
rows	/usr/include/opencv/cxtypes.h	/^    int rows;$/;"	m	struct:CvMat	access:public
rows	/usr/include/opencv/ml.h	/^    CvSVMKernelRow* rows;$/;"	m	class:CvSVMSolver	access:public
rp_dw0	/usr/include/opencv/ml.h	/^    double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
rp_dw_max	/usr/include/opencv/ml.h	/^    double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
rp_dw_min	/usr/include/opencv/ml.h	/^    double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
rp_dw_minus	/usr/include/opencv/ml.h	/^    double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
rp_dw_plus	/usr/include/opencv/ml.h	/^    double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
run_em	/usr/include/opencv/ml.h	/^    virtual double run_em( const CvVectors& train_data );$/;"	p	class:CvEM	access:protected	signature:( const CvVectors& train_data )
running	core_state.h	/^	bool running;$/;"	m	struct:Core_State	access:public
s	/usr/include/opencv/cvaux.h	/^    int* s; \/\/for selected candidate$/;"	m	struct:CvCliqueFinder	access:public
s	/usr/include/opencv/cxtypes.h	/^        short* s;$/;"	m	union:CvMat::__anon13	access:public
s	/usr/include/opencv/cxtypes.h	/^        short* s;$/;"	m	union:CvMatND::__anon16	access:public
sample_count	/usr/include/opencv/ml.h	/^    int sample_count, var_all, var_count, max_c_count;$/;"	m	struct:CvDTreeTrainData	access:public
sample_count	/usr/include/opencv/ml.h	/^    int sample_count;$/;"	m	class:CvSVMSolver	access:public
sample_count	/usr/include/opencv/ml.h	/^    int sample_count;$/;"	m	struct:CvDTreeNode	access:public
sample_weights	/usr/include/opencv/ml.h	/^    CvMat* sample_weights;$/;"	m	class:CvANN_MLP	access:protected
samples	/usr/include/opencv/ml.h	/^    CvVectors* samples;$/;"	m	class:CvKNearest	access:protected
samples	/usr/include/opencv/ml.h	/^    const float** samples;$/;"	m	class:CvSVMSolver	access:public
save	/usr/include/opencv/cxcore.hpp	/^    void save( const char* filename, const char* imgname );$/;"	p	class:CvImage	access:public	signature:( const char* filename, const char* imgname )
save	/usr/include/opencv/cxcore.hpp	/^    void save( const char* filename, const char* matname );$/;"	p	class:CvMatrix	access:public	signature:( const char* filename, const char* matname )
save	/usr/include/opencv/ml.h	/^    virtual void save( const char* filename, const char* name=0 );$/;"	p	class:CvStatModel	access:public	signature:( const char* filename, const char* name=0 )
scale	/usr/include/opencv/cv.hpp	/^    double scale;$/;"	m	class:CvBoxFilter	access:protected
scale	/usr/include/opencv/cvtypes.h	/^    double scale;$/;"	m	struct:CvHaarClassifierCascade	access:public
scale	/usr/include/opencv/ml.h	/^    virtual void scale( double s );$/;"	p	class:CvBoostTree	access:public	signature:( double s )
scale_input	/usr/include/opencv/ml.h	/^    virtual void scale_input( const CvMat* _src, CvMat* _dst ) const;$/;"	p	class:CvANN_MLP	access:protected	signature:( const CvMat* _src, CvMat* _dst ) const
scale_output	/usr/include/opencv/ml.h	/^    virtual void scale_output( const CvMat* _src, CvMat* _dst ) const;$/;"	p	class:CvANN_MLP	access:protected	signature:( const CvMat* _src, CvMat* _dst ) const
sdl_alt_pressed	interface_sdl.cpp	/^bool sdl_alt_pressed() $/;"	f	signature:()
sdl_alt_pressed	interface_sdl.h	/^bool sdl_alt_pressed();$/;"	p	signature:()
sdl_clear_keys	interface_sdl.cpp	/^void sdl_clear_keys(Uint8 * keys, bool * clear_keys, size_t keys_length)$/;"	f	signature:(Uint8 * keys, bool * clear_keys, size_t keys_length)
sdl_clear_keys	interface_sdl.h	/^void sdl_clear_keys(Uint8 * keys, bool * clear_keys, size_t keys_length);$/;"	p	signature:(Uint8 * keys, bool * clear_keys, size_t keys_length)
sdl_ctrl_pressed	interface_sdl.cpp	/^bool sdl_ctrl_pressed() $/;"	f	signature:()
sdl_ctrl_pressed	interface_sdl.h	/^bool sdl_ctrl_pressed();$/;"	p	signature:()
sdl_initialize	interface_sdl.cpp	/^void sdl_initialize(int window_width, int window_height)$/;"	f	signature:(int window_width, int window_height)
sdl_initialize	interface_sdl.h	/^void sdl_initialize(int window_width, int window_height);$/;"	p	signature:(int window_width, int window_height)
sdl_map_rgb_vector	interface_sdl.cpp	/^Uint32 sdl_map_rgb_vector(const SDL_PixelFormat * const format, const double color[3])$/;"	f	signature:(const SDL_PixelFormat * const format, const double color[3])
sdl_map_rgb_vector	interface_sdl.h	/^Uint32 sdl_map_rgb_vector(const SDL_PixelFormat * const format, const double color[3]);$/;"	p	signature:(const SDL_PixelFormat * const format, const double color[3])
sdl_shift_pressed	interface_sdl.cpp	/^bool sdl_shift_pressed() $/;"	f	signature:()
sdl_shift_pressed	interface_sdl.h	/^bool sdl_shift_pressed();$/;"	p	signature:()
sdl_wheel_button	interface_sdl.cpp	/^bool sdl_wheel_button(int button) $/;"	f	signature:(int button)
sdl_wheel_button	interface_sdl.h	/^bool sdl_wheel_button(int button);$/;"	p	signature:(int button)
search_modules	/usr/include/opencv/cxtypes.h	/^    int search_modules;$/;"	m	struct:CvPluginFuncInfo	access:public
secondary	geometry_structures.h	/^	size_t primary, secondary; $/;"	m	struct:Double_Index	access:public
select_working_set	/usr/include/opencv/ml.h	/^    virtual bool select_working_set( int& i, int& j );$/;"	p	class:CvSVMSolver	access:public	signature:( int& i, int& j )
select_working_set_func	/usr/include/opencv/ml.h	/^    SelectWorkingSet select_working_set_func;$/;"	m	class:CvSVMSolver	access:public
select_working_set_nu_svm	/usr/include/opencv/ml.h	/^    virtual bool select_working_set_nu_svm( int& i, int& j );$/;"	p	class:CvSVMSolver	access:public	signature:( int& i, int& j )
selected	geometry_structures.h	/^	bool selected;                       \/\/ denotes if this point is selected$/;"	m	struct:Point	access:public
selected	geometry_structures.h	/^	bool selected;               \/\/ denotes if this contour is selected$/;"	m	struct:Contour	access:public
selected	geometry_structures.h	/^	bool selected;               \/\/ denotes if this polygon is selected$/;"	m	struct:Polygon_3d	access:public
selected	geometry_structures.h	/^	bool selected;               \/\/ denotes if this vertex is selected \/\/ todo move int UI item meta structure$/;"	m	struct:Vertex	access:public
selected	ui_core.h	/^	bool selected;$/;"	m	struct:UI_Shot_Meta	access:public
selection_list	ui_state.h	/^	Selected_Items selection_list;$/;"	m	struct:UI_State	access:public
selection_option_show_automatic_points	tool_selection.cpp	/^void selection_option_show_automatic_points()$/;"	f	signature:()
selection_option_show_automatic_points	tool_selection.h	/^void selection_option_show_automatic_points();$/;"	p	signature:()
selection_option_show_dualview	tool_selection.cpp	/^void selection_option_show_dualview()$/;"	f	signature:()
selection_option_show_dualview	tool_selection.h	/^void selection_option_show_dualview();$/;"	p	signature:()
selection_option_thumbs_only_for_selected	tool_selection.cpp	/^void selection_option_thumbs_only_for_selected()$/;"	f	signature:()
selection_option_thumbs_only_for_selected	tool_selection.h	/^void selection_option_thumbs_only_for_selected();$/;"	p	signature:()
seq	/usr/include/opencv/cxtypes.h	/^        CvSeq* seq; \/* sequence (ordered collection of file nodes) *\/$/;"	m	union:CvFileNode::__anon19	access:public
set	/usr/include/opencv/cxcore.hpp	/^    void set( CvMat* m, bool add_ref )$/;"	f	class:CvMatrix	access:public	signature:( CvMat* m, bool add_ref )
set	core_image_loader.h	/^	bool set;$/;"	m	struct:Image_Loader_Request	access:public
set	core_image_loader.h	/^	bool set;$/;"	m	struct:Image_Loader_Shot	access:public
set	geometry_structures.h	/^	bool set, reconstructed;$/;"	m	struct:Vertex	access:public
set	geometry_structures.h	/^	bool set; $/;"	m	struct:Calibration	access:public
set	geometry_structures.h	/^	bool set; $/;"	m	struct:Calibration_Camera	access:public
set	geometry_structures.h	/^	bool set; $/;"	m	struct:Calibration_Fundamental_Matrix	access:public
set	geometry_structures.h	/^	bool set; $/;"	m	struct:Calibration_Vertex	access:public
set	geometry_structures.h	/^	bool set; $/;"	m	struct:Contour	access:public
set	geometry_structures.h	/^	bool set; $/;"	m	struct:Double_Index	access:public
set	geometry_structures.h	/^	bool set; $/;"	m	struct:Index	access:public
set	geometry_structures.h	/^	bool set; $/;"	m	struct:Point	access:public
set	geometry_structures.h	/^	bool set; $/;"	m	struct:Shot_Pair_Relation	access:public
set	geometry_structures.h	/^	bool set; $/;"	m	struct:Shot_Relations	access:public
set	geometry_structures.h	/^	bool set; $/;"	m	struct:Vertex_Incidence	access:public
set	geometry_structures.h	/^	bool set;$/;"	m	struct:Calibration_Point_Meta	access:public
set	geometry_structures.h	/^	bool set;$/;"	m	struct:Polygon_3d	access:public
set	geometry_structures.h	/^	bool set;$/;"	m	struct:Selected_Item	access:public
set	geometry_structures.h	/^	bool set;$/;"	m	struct:Shot	access:public
set	tool_core.h	/^	bool set; $/;"	m	struct:Tool_Menu_Item	access:public
set	tool_core.h	/^	bool set;$/;"	m	struct:Tool_Parameter	access:public
set	tool_matching.cpp	/^	bool set;$/;"	m	struct:Matching_UF_Node	file:	access:public
set	ui_context.h	/^	bool set;$/;"	m	struct:Context_Item	access:public
set	ui_state.h	/^	bool set;$/;"	m	struct:Group	access:public
set_activ_func	/usr/include/opencv/ml.h	/^    virtual void set_activ_func( int _activ_func=SIGMOID_SYM,$/;"	p	class:CvANN_MLP	access:protected	signature:( int _activ_func=SIGMOID_SYM, double _f_param1=0, double _f_param2=0 )
set_coi	/usr/include/opencv/cxcore.hpp	/^    void set_coi(int coi) { cvSetImageCOI(image,coi); }$/;"	f	class:CvImage	access:public	signature:(int coi)
set_data	/usr/include/opencv/cxcore.hpp	/^    void set_data( void* data, int step=CV_AUTOSTEP )$/;"	f	class:CvMatrix	access:public	signature:( void* data, int step=CV_AUTOSTEP )
set_data	/usr/include/opencv/ml.h	/^    virtual void set_data( const CvMat* _train_data, int _tflag,$/;"	p	struct:CvDTreeTrainData	access:public	signature:( const CvMat* _train_data, int _tflag, const CvMat* _responses, const CvMat* _var_idx=0, const CvMat* _sample_idx=0, const CvMat* _var_type=0, const CvMat* _missing_mask=0, const CvDTreeParams& _params=CvDTreeParams(), bool _shared=false, bool _add_labels=false, bool _update_data=false )
set_hist_bin_range	/usr/include/opencv/cvaux.hpp	/^    bool    set_hist_bin_range( int dim, int min_val, int max_val );$/;"	p	class:CvCamShiftTracker	access:public	signature:( int dim, int min_val, int max_val )
set_hist_dims	/usr/include/opencv/cvaux.hpp	/^    bool    set_hist_dims( int c_dims, int* dims );\/\/ set the histogram parameters$/;"	p	class:CvCamShiftTracker	access:public	signature:( int c_dims, int* dims )
set_max_ch_val	/usr/include/opencv/cvaux.hpp	/^    bool    set_max_ch_val( int channel, int val ) \/\/ set the maximum allowed value of the specified channel$/;"	f	class:CvCamShiftTracker	access:public	signature:( int channel, int val )
set_min_ch_val	/usr/include/opencv/cvaux.hpp	/^    bool    set_min_ch_val( int channel, int val ) \/\/ set the minimum allowed value of the specified channel$/;"	f	class:CvCamShiftTracker	access:public	signature:( int channel, int val )
set_num_valid	/usr/include/opencv/ml.h	/^    void set_num_valid(int vi, int n) { if( num_valid ) num_valid[vi] = n; }$/;"	f	struct:CvDTreeNode	access:public	signature:(int vi, int n)
set_params	/usr/include/opencv/ml.h	/^    virtual bool set_params( const CvBoostParams& _params );$/;"	p	class:CvBoost	access:protected	signature:( const CvBoostParams& _params )
set_params	/usr/include/opencv/ml.h	/^    virtual bool set_params( const CvDTreeParams& params );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( const CvDTreeParams& params )
set_params	/usr/include/opencv/ml.h	/^    virtual bool set_params( const CvSVMParams& _params );$/;"	p	class:CvSVM	access:protected	signature:( const CvSVMParams& _params )
set_params	/usr/include/opencv/ml.h	/^    virtual void set_params( const CvEMParams& params,$/;"	p	class:CvEM	access:protected	signature:( const CvEMParams& params, const CvVectors& train_data )
set_postprocess_func	/usr/include/opencv/highgui.h	332;"	d
set_preprocess_func	/usr/include/opencv/highgui.h	331;"	d
set_roi	/usr/include/opencv/cxcore.hpp	/^    void set_roi(CvRect roi) { cvSetImageROI(image,roi); }$/;"	f	class:CvImage	access:public	signature:(CvRect roi)
set_threshold	/usr/include/opencv/cvaux.hpp	/^    bool    set_threshold( int threshold ) \/\/ threshold applied to the histogram bins$/;"	f	class:CvCamShiftTracker	access:public	signature:( int threshold )
set_window	/usr/include/opencv/cvaux.hpp	/^    bool    set_window( CvRect window)$/;"	f	class:CvCamShiftTracker	access:public	signature:( CvRect window)
sgn	core_math_routines.cpp	/^signed char sgn(const double x) $/;"	f	signature:(const double x)
sgn	core_math_routines.h	/^signed char sgn(const double x);$/;"	p	signature:(const double x)
shape	/usr/include/opencv/cvvidsurv.hpp	/^    enum {RECT, ELLIPSE} shape;$/;"	m	struct:CvDrawShape	typeref:enum:CvDrawShape::__anon33	access:public
shared	/usr/include/opencv/ml.h	/^    bool shared;$/;"	m	struct:CvDTreeTrainData	access:public
shear	/usr/include/opencv/cxcore.h	/^    float       shear; \/* slope coefficient: 0 - normal, >0 - italic *\/$/;"	m	struct:CvFont	access:public
shift1	/usr/include/opencv/cvvidsurv.hpp	/^    int shift1,shift2;$/;"	m	struct:CvTracksTimePos	access:public
shift2	/usr/include/opencv/cvvidsurv.hpp	/^    int shift1,shift2;$/;"	m	struct:CvTracksTimePos	access:public
shot_clear_keys	ui_state.h	/^	bool * inspection_clear_keys, * shot_clear_keys, * overview_clear_keys;    \/\/ determines which key states should be automatically cleared$/;"	m	struct:UI_State	access:public
shot_down_x	tool_selection.cpp	/^	double shot_down_x, shot_down_y;$/;"	m	struct:Tool_Selection	file:	access:public
shot_down_y	tool_selection.cpp	/^	double shot_down_x, shot_down_y;$/;"	m	struct:Tool_Selection	file:	access:public
shot_id	core_image_loader.h	/^	size_t shot_id;$/;"	m	struct:Image_Loader_Request	access:public
shot_id	geometry_structures.h	/^	size_t shot_id;                  \/\/ id of shot on which selected item is (if applicable) $/;"	m	struct:Selected_Item	access:public
shot_id	geometry_structures.h	/^	size_t shot_id; \/\/ id of the shot with this calibration $/;"	m	struct:Calibration_Camera	access:public
shot_id	ui_context.h	/^	size_t shot_id;$/;"	m	struct:Context_Item	access:public
shot_point_ids	geometry_structures.h	/^	Double_Indices shot_point_ids;$/;"	m	struct:Vertex_Incidence	access:public
shots	geometry_loader.h	/^	Shots * shots;$/;"	m	struct:geometry_loader_SAX_state	access:public
shots	geometry_structures.cpp	/^Shots shots; \/\/ shots$/;"	v
shots_T_deviation	ui_visualization.h	/^	double shots_T_mean[3], shots_T_deviation[3], max_dev;    \/\/ mean and variance of the cameras' positions$/;"	m	struct:Visualization_State	access:public
shots_T_mean	ui_visualization.h	/^	double shots_T_mean[3], shots_T_deviation[3], max_dev;    \/\/ mean and variance of the cameras' positions$/;"	m	struct:Visualization_State	access:public
shots_relations	geometry_structures.cpp	/^Shots_Relations shots_relations; \/\/ relations between groups of shots$/;"	v
show	/usr/include/opencv/cxcore.hpp	/^    void show( const char* window_name );$/;"	p	class:CvImage	access:public	signature:( const char* window_name )
show	/usr/include/opencv/cxcore.hpp	/^    void show( const char* window_name );$/;"	p	class:CvMatrix	access:public	signature:( const char* window_name )
sibling	gui.h	/^	GUI_Panel * parent, * sibling;$/;"	m	struct:GUI_Panel	access:public
side	ui_state.h	/^		* root_panel, * top, * side, * gl, * side_top, * side_bottom, $/;"	m	struct:UI_State	access:public
side_bottom	ui_state.h	/^		* root_panel, * top, * side, * gl, * side_top, * side_bottom, $/;"	m	struct:UI_State	access:public
side_top	ui_state.h	/^		* root_panel, * top, * side, * gl, * side_top, * side_bottom, $/;"	m	struct:UI_State	access:public
side_top_last	ui_state.h	/^		* side_top_last, * tabs$/;"	m	struct:UI_State	access:public
sigma	/usr/include/opencv/cvvidsurv.hpp	/^    float   sigma;$/;"	m	struct:CvBlobTrackerParamMS	access:public
signature	/usr/include/opencv/cxtypes.h	/^    int signature;$/;"	m	struct:CvMemStorage	access:public
size	/usr/include/opencv/cxcore.h	/^    CvSize size; \/* maximal common linear size: { width = size, height = 1 } *\/$/;"	m	struct:CvNArrayIterator	access:public
size	/usr/include/opencv/cxcore.hpp	/^    CvSize size() const { return image ? cvSize(image->width, image->height) : cvSize(0,0); }$/;"	f	class:CvImage	access:public	signature:() const
size	/usr/include/opencv/cxcore.hpp	/^    CvSize size() const$/;"	f	class:CvMatrix	access:public	signature:() const
size	/usr/include/opencv/cxtypes.h	/^        int size;$/;"	m	struct:CvMatND::__anon17	access:public
size	/usr/include/opencv/cxtypes.h	/^    CvSize2D32f  size;    \/* box width and length *\/$/;"	m	struct:CvBox2D	access:public
size	/usr/include/opencv/cxtypes.h	/^    int size[CV_MAX_DIM];$/;"	m	struct:CvSparseMat	access:public
solve_c_svc	/usr/include/opencv/ml.h	/^    virtual bool solve_c_svc( int count, int var_count, const float** samples, char* y,$/;"	p	class:CvSVMSolver	access:public	signature:( int count, int var_count, const float** samples, char* y, double Cp, double Cn, CvMemStorage* storage, CvSVMKernel* kernel, double* alpha, CvSVMSolutionInfo& si )
solve_eps_svr	/usr/include/opencv/ml.h	/^    virtual bool solve_eps_svr( int count, int var_count, const float** samples, const float* y,$/;"	p	class:CvSVMSolver	access:public	signature:( int count, int var_count, const float** samples, const float* y, CvMemStorage* storage, CvSVMKernel* kernel, double* alpha, CvSVMSolutionInfo& si )
solve_generic	/usr/include/opencv/ml.h	/^    virtual bool solve_generic( CvSVMSolutionInfo& si );$/;"	p	class:CvSVMSolver	access:public	signature:( CvSVMSolutionInfo& si )
solve_nu_svc	/usr/include/opencv/ml.h	/^    virtual bool solve_nu_svc( int count, int var_count, const float** samples, char* y,$/;"	p	class:CvSVMSolver	access:public	signature:( int count, int var_count, const float** samples, char* y, CvMemStorage* storage, CvSVMKernel* kernel, double* alpha, CvSVMSolutionInfo& si )
solve_nu_svr	/usr/include/opencv/ml.h	/^    virtual bool solve_nu_svr( int count, int var_count, const float** samples, const float* y,$/;"	p	class:CvSVMSolver	access:public	signature:( int count, int var_count, const float** samples, const float* y, CvMemStorage* storage, CvSVMKernel* kernel, double* alpha, CvSVMSolutionInfo& si )
solve_one_class	/usr/include/opencv/ml.h	/^    virtual bool solve_one_class( int count, int var_count, const float** samples,$/;"	p	class:CvSVMSolver	access:public	signature:( int count, int var_count, const float** samples, CvMemStorage* storage, CvSVMKernel* kernel, double* alpha, CvSVMSolutionInfo& si )
solver	/usr/include/opencv/ml.h	/^    CvSVMSolver* solver;$/;"	m	class:CvSVM	access:protected
split	/usr/include/opencv/ml.h	/^    CvDTreeSplit* split;$/;"	m	struct:CvDTreeNode	access:public
split_buf	/usr/include/opencv/ml.h	/^    CvMat* split_buf;$/;"	m	struct:CvDTreeTrainData	access:public
split_criteria	/usr/include/opencv/ml.h	/^    int split_criteria;$/;"	m	struct:CvBoostParams	access:public
split_heap	/usr/include/opencv/ml.h	/^    CvSet* split_heap;$/;"	m	struct:CvDTreeTrainData	access:public
split_node_data	/usr/include/opencv/ml.h	/^    virtual void split_node_data( CvDTreeNode* n );$/;"	p	class:CvDTree	access:protected	signature:( CvDTreeNode* n )
split_point	/usr/include/opencv/ml.h	/^            int split_point;$/;"	m	struct:CvDTreeSplit::__anon25::__anon26	access:public
sq	mvg_autocalibration.cpp	/^double sq(const double x) { return x * x; }$/;"	f	signature:(const double x)
sqr_value	core_math_routines.cpp	/^double sqr_value(const double x)$/;"	f	signature:(const double x)
sqr_value	core_math_routines.h	/^double sqr_value(const double x);$/;"	p	signature:(const double x)
src_type	/usr/include/opencv/cv.hpp	/^    int min_depth, src_type, dst_type, work_type;$/;"	m	class:CvBaseImageFilter	access:protected
stack	/usr/include/opencv/cxcore.h	/^    CvSeq*   stack;        \/* the graph vertex stack *\/$/;"	m	struct:CvGraphScanner	access:public
stack	/usr/include/opencv/cxcore.h	/^    int stack[CV_MAX_DIM]; \/* for internal use *\/$/;"	m	struct:CvNArrayIterator	access:public
stage_classifier	/usr/include/opencv/cvtypes.h	/^    CvHaarStageClassifier* stage_classifier;$/;"	m	struct:CvHaarClassifierCascade	access:public
start	/usr/include/opencv/cvtypes.h	/^    CvPoint* start; \/* point of the contour where the defect begins *\/$/;"	m	struct:CvConvexityDefect	access:public
start_index	/usr/include/opencv/cxtypes.h	/^    int    start_index;       \/* index of the first element in the block +$/;"	m	struct:CvSeqBlock	access:public
start_index	/usr/include/opencv/cxtypes.h	/^    int  start_index, end_index;$/;"	m	struct:CvSlice	access:public
start_process	/usr/include/opencv/cv.hpp	/^    virtual void start_process( CvSlice x_range, int width );$/;"	p	class:CvBaseImageFilter	access:protected	signature:( CvSlice x_range, int width )
start_process	/usr/include/opencv/cv.hpp	/^    virtual void start_process( CvSlice x_range, int width );$/;"	p	class:CvBoxFilter	access:protected	signature:( CvSlice x_range, int width )
start_process	/usr/include/opencv/cv.hpp	/^    void start_process( CvSlice x_range, int width );$/;"	p	class:CvMorphology	access:protected	signature:( CvSlice x_range, int width )
start_step	/usr/include/opencv/ml.h	/^    int start_step;$/;"	m	struct:CvEMParams	access:public
state	/usr/include/opencv/cvaux.h	/^        CvEHMMState* state; \/* if level == 0 points to real states array,$/;"	m	union:CvEHMM::__anon2	access:public
state	/usr/include/opencv/cvaux.h	/^    int* state;\/* arr of pairs superstate\/state to which observation belong *\/$/;"	m	struct:CvImgObsInfo	access:public
state	/usr/include/opencv/cvcompat.h	/^    CvRNG     state;    \/* RNG state (the current seed and carry)*\/$/;"	m	struct:CvRandState	access:public
state_post	/usr/include/opencv/cvtypes.h	/^    CvMat* state_post;          \/* corrected state (x(k)):$/;"	m	struct:CvKalman	access:public
state_pre	/usr/include/opencv/cvtypes.h	/^    CvMat* state_pre;           \/* predicted state (x'(k)):$/;"	m	struct:CvKalman	access:public
status	/usr/include/opencv/cvaux.h	/^    int status;$/;"	m	struct:CvCliqueFinder	access:public
std_threshold	/usr/include/opencv/cvaux.h	/^    double  bg_threshold, std_threshold, minArea;$/;"	m	struct:CvGaussBGStatModelParams	access:public
step	/usr/include/opencv/cvcompat.h	/^    int     step;                   \/* distance between lines ( in elements of single   *\/$/;"	m	struct:_CvPixelPosition8u	access:public
step	/usr/include/opencv/cvcompat.h	/^    int     step;$/;"	m	struct:_CvPixelPosition32f	access:public
step	/usr/include/opencv/cvcompat.h	/^    int     step;$/;"	m	struct:_CvPixelPosition8s	access:public
step	/usr/include/opencv/cxcore.hpp	/^    int step() const { return image ? image->widthStep : 0; }$/;"	f	class:CvImage	access:public	signature:() const
step	/usr/include/opencv/cxcore.hpp	/^    int step() const { return matrix ? matrix->step : 0; }$/;"	f	class:CvMatrix	access:public	signature:() const
step	/usr/include/opencv/cxtypes.h	/^        int step;$/;"	m	struct:CvMatND::__anon17	access:public
step	/usr/include/opencv/cxtypes.h	/^    int step;$/;"	m	struct:CvMat	access:public
step_arr	/usr/include/opencv/cvcompat.h	/^    int     step_arr[3];            \/* array: ( 0, -step, step ). It is used for        *\/$/;"	m	struct:_CvPixelPosition8u	access:public
step_arr	/usr/include/opencv/cvcompat.h	/^    int     step_arr[3];$/;"	m	struct:_CvPixelPosition32f	access:public
step_arr	/usr/include/opencv/cvcompat.h	/^    int     step_arr[3];$/;"	m	struct:_CvPixelPosition8s	access:public
stereo	/usr/include/opencv/cvaux.h	/^    CvStereoCamera stereo;$/;"	m	class:CvCalibFilter	access:protected
storage	/usr/include/opencv/cvaux.h	/^    CvMemStorage* storage;$/;"	m	class:CvCalibFilter	access:protected
storage	/usr/include/opencv/ml.h	/^    CvMemStorage* storage;$/;"	m	class:CvSVM	access:protected
storage	/usr/include/opencv/ml.h	/^    CvMemStorage* storage;$/;"	m	class:CvSVMSolver	access:public
str	/usr/include/opencv/cxtypes.h	/^        CvString str; \/* text string *\/$/;"	m	union:CvFileNode::__anon19	access:public
str	/usr/include/opencv/cxtypes.h	/^    CvString str;$/;"	m	struct:CvStringHashNode	access:public
strcmpi	portability.h	9;"	d
sub_3	core_math_routines.cpp	/^void sub_3(const double * a, const double * b, double * result) $/;"	f	signature:(const double * a, const double * b, double * result)
sub_3	core_math_routines.h	/^void sub_3(const double * a, const double * b, double * result);$/;"	p	signature:(const double * a, const double * b, double * result)
subsample_data	/usr/include/opencv/ml.h	/^    virtual CvDTreeNode* subsample_data( const CvMat* _subsample_idx );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( const CvMat* _subsample_idx )
subsample_mask	/usr/include/opencv/ml.h	/^    CvMat* subsample_mask;$/;"	m	class:CvBoost	access:protected
subset	/usr/include/opencv/ml.h	/^        int subset[2];$/;"	m	union:CvDTreeSplit::__anon25	access:public
subtree_weights	/usr/include/opencv/ml.h	/^    CvMat* subtree_weights;$/;"	m	class:CvBoost	access:protected
suggested	core_image_loader.h	/^	bool suggested;$/;"	m	struct:Image_Loader_Shot	access:public
sum	/usr/include/opencv/cv.hpp	/^    uchar* sum;$/;"	m	class:CvBoxFilter	access:protected
sum	/usr/include/opencv/ml.h	/^    CvMat** sum;$/;"	m	class:CvNormalBayesClassifier	access:protected
sum_count	/usr/include/opencv/cv.hpp	/^    int sum_count;$/;"	m	class:CvBoxFilter	access:protected
sum_response	/usr/include/opencv/ml.h	/^    CvMat* sum_response;$/;"	m	class:CvBoost	access:protected
surface	gui.h	/^	SDL_Surface * surface;$/;"	m	struct:GUI_Context	access:public
sv	/usr/include/opencv/ml.h	/^    float** sv;$/;"	m	class:CvSVM	access:protected
sv_count	/usr/include/opencv/ml.h	/^    int sv_count;$/;"	m	struct:CvSVMDecisionFunc	access:public
sv_index	/usr/include/opencv/ml.h	/^    int* sv_index;$/;"	m	struct:CvSVMDecisionFunc	access:public
sv_total	/usr/include/opencv/ml.h	/^    int sv_total;$/;"	m	class:CvSVM	access:protected
svm_type	/usr/include/opencv/ml.h	/^    int         svm_type;$/;"	m	struct:CvSVMParams	access:public
swap_bool	core_math_routines.cpp	/^void swap_bool(bool & a, bool & b) $/;"	f	signature:(bool & a, bool & b)
swap_bool	core_math_routines.h	/^void swap_bool(bool & a, bool & b);$/;"	p	signature:(bool & a, bool & b)
swap_double	core_math_routines.cpp	/^void swap_double(double & a, double & b) $/;"	f	signature:(double & a, double & b)
swap_double	core_math_routines.h	/^void swap_double(double & a, double & b);$/;"	p	signature:(double & a, double & b)
swap_size_t	core_math_routines.cpp	/^void swap_size_t(size_t & a, size_t & b) $/;"	f	signature:(size_t & a, size_t & b)
swap_size_t	core_math_routines.h	/^void swap_size_t(size_t & a, size_t & b);$/;"	p	signature:(size_t & a, size_t & b)
sx	core_image_loader.h	/^	double x, y, sx, sy;$/;"	m	struct:Image_Loader_Request	access:public
sy	core_image_loader.h	/^	double x, y, sx, sy;$/;"	m	struct:Image_Loader_Request	access:public
tab	tool_core.h	/^	GUI_Panel * tab, * tab_last;$/;"	m	struct:Tool	access:public
tab_complement	gui.h	/^	GUI_Panel * tab_complement, * tab_sibling, * tab_container;$/;"	m	struct:GUI_Panel	access:public
tab_container	gui.h	/^	GUI_Panel * tab_complement, * tab_sibling, * tab_container;$/;"	m	struct:GUI_Panel	access:public
tab_last	tool_core.h	/^	GUI_Panel * tab, * tab_last;$/;"	m	struct:Tool	access:public
tab_sibling	gui.h	/^	GUI_Panel * tab_complement, * tab_sibling, * tab_container;$/;"	m	struct:GUI_Panel	access:public
tabs	ui_state.h	/^		* side_top_last, * tabs$/;"	m	struct:UI_State	access:public
tag	/usr/include/opencv/cxtypes.h	/^    int tag;$/;"	m	struct:CvFileNode	access:public
temp1	/usr/include/opencv/cvtypes.h	/^    CvMat* temp1;               \/* temporary matrices *\/$/;"	m	struct:CvKalman	access:public
temp2	/usr/include/opencv/cvtypes.h	/^    CvMat* temp2;$/;"	m	struct:CvKalman	access:public
temp3	/usr/include/opencv/cvtypes.h	/^    CvMat* temp3;$/;"	m	struct:CvKalman	access:public
temp4	/usr/include/opencv/cvtypes.h	/^    CvMat* temp4;$/;"	m	struct:CvKalman	access:public
temp5	/usr/include/opencv/cvtypes.h	/^    CvMat* temp5;$/;"	m	struct:CvKalman	access:public
tempImg	/usr/include/opencv/cvaux.h	/^    CvMat*  tempImg;$/;"	m	class:CvCalibFilter	access:protected
temp_storage	/usr/include/opencv/ml.h	/^    CvMemStorage* temp_storage;$/;"	m	struct:CvDTreeTrainData	access:public
term_crit	/usr/include/opencv/ml.h	/^    CvTermCriteria term_crit; \/\/ termination criteria$/;"	m	struct:CvSVMParams	access:public
term_crit	/usr/include/opencv/ml.h	/^    CvTermCriteria term_crit;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
term_crit	/usr/include/opencv/ml.h	/^    CvTermCriteria term_crit;$/;"	m	struct:CvEMParams	access:public
term_crit	/usr/include/opencv/ml.h	/^    CvTermCriteria term_crit;$/;"	m	struct:CvRTParams	access:public
tex_x	geometry_structures.h	/^	double tex_x, tex_y;         \/\/ texture coordinates$/;"	m	struct:Vertex	access:public
tex_y	geometry_structures.h	/^	double tex_x, tex_y;         \/\/ texture coordinates$/;"	m	struct:Vertex	access:public
texture_coords	geometry_structures.h	/^	double * texture_coords;$/;"	m	struct:Polygon_3d	access:public
thickness	/usr/include/opencv/cxcore.h	/^    int         thickness; \/* letters thickness *\/$/;"	m	struct:CvFont	access:public
thresh	/usr/include/opencv/cxtypes.h	/^    float   thresh[CV_MAX_DIM][2]; \/* for uniform histograms *\/$/;"	m	struct:CvHistogram	access:public
thresh2	/usr/include/opencv/cxtypes.h	/^    float** thresh2; \/* for non-uniform histograms *\/$/;"	m	struct:CvHistogram	access:public
threshold	/usr/include/opencv/cvtypes.h	/^    float threshold;$/;"	m	struct:CvHaarStageClassifier	access:public
threshold	/usr/include/opencv/cvtypes.h	/^    float* threshold;$/;"	m	struct:CvHaarClassifier	access:public
ticks	core_state.h	/^	Uint32 ticks, last_ticks;$/;"	m	struct:Core_State	access:public
tileInfo	/usr/include/opencv/cxtypes.h	/^    struct _IplTileInfo *tileInfo; \/* ditto *\/$/;"	m	struct:_IplImage	typeref:struct:_IplImage::_IplTileInfo	access:public
tilted	/usr/include/opencv/cvtypes.h	/^    int  tilted;$/;"	m	struct:CvHaarFeature	access:public
time	core_image_loader.h	/^	size_t id, time;$/;"	m	struct:Image_Loader_Request_Handle	access:public
timer	ui_context.h	/^	double delay, timer;$/;"	m	struct:Context_State	access:public
title	tool_core.h	/^	char title[100];    \/\/ name of the tool$/;"	m	struct:Tool	access:public
title	tool_core.h	/^	const char * title;$/;"	m	struct:Tool_Parameter	access:public
title	ui_state.h	/^	char * title;   \/\/ user can assign arbitrary name to a group $/;"	m	struct:Group	access:public
tool	tool_core.h	/^	Tool * tool;                        \/\/ pointer to represented tool $/;"	m	struct:Tool_Menu_Item	access:public
tool_activate_handler	tool_core.cpp	/^void tool_activate_handler(GUI_Panel * event)$/;"	f	signature:(GUI_Panel * event)
tool_activate_handler	tool_core.h	/^void tool_activate_handler(GUI_Panel * event);$/;"	p	signature:(GUI_Panel * event)
tool_add_menu_item	tool_core.cpp	/^void tool_add_menu_item(const char * const menu_path, Tool_Action_Type action_type, Tool_Function_Call function_call)$/;"	f	signature:(const char * const menu_path, Tool_Action_Type action_type, Tool_Function_Call function_call)
tool_add_menu_item	tool_core.h	/^void tool_add_menu_item(const char * const menu_path, Tool_Action_Type action_type, Tool_Function_Call function_call);$/;"	p	signature:(const char * const menu_path, Tool_Action_Type action_type, Tool_Function_Call function_call)
tool_calibration	tool_calibration.cpp	/^Tool_Calibration tool_calibration;$/;"	v
tool_calibration_add_views	tool_calibration.cpp	/^void tool_calibration_add_views()$/;"	f	signature:()
tool_calibration_add_views	tool_calibration.h	/^void tool_calibration_add_views();$/;"	p	signature:()
tool_calibration_affine	tool_calibration.cpp	/^void tool_calibration_affine()$/;"	f	signature:()
tool_calibration_affine	tool_calibration.h	/^void tool_calibration_affine();$/;"	p	signature:()
tool_calibration_auto	tool_calibration.cpp	/^void tool_calibration_auto()$/;"	f	signature:()
tool_calibration_auto	tool_calibration.h	/^void tool_calibration_auto(); $/;"	p	signature:()
tool_calibration_auto_begin	tool_calibration.cpp	/^void tool_calibration_auto_begin()$/;"	f	signature:()
tool_calibration_auto_begin	tool_calibration.h	/^void tool_calibration_auto_begin();$/;"	p	signature:()
tool_calibration_auto_end	tool_calibration.cpp	/^void tool_calibration_auto_end()$/;"	f	signature:()
tool_calibration_auto_end	tool_calibration.h	/^void tool_calibration_auto_end(); $/;"	p	signature:()
tool_calibration_auto_step	tool_calibration.cpp	/^void tool_calibration_auto_step()$/;"	f	signature:()
tool_calibration_auto_step	tool_calibration.h	/^void tool_calibration_auto_step();$/;"	p	signature:()
tool_calibration_bundle	tool_calibration.cpp	/^void tool_calibration_bundle()$/;"	f	signature:()
tool_calibration_bundle	tool_calibration.h	/^void tool_calibration_bundle();$/;"	p	signature:()
tool_calibration_clear	tool_calibration.cpp	/^void tool_calibration_clear()$/;"	f	signature:()
tool_calibration_clear	tool_calibration.h	/^void tool_calibration_clear();$/;"	p	signature:()
tool_calibration_create	tool_calibration.cpp	/^void tool_calibration_create()$/;"	f	signature:()
tool_calibration_create	tool_calibration.h	/^void tool_calibration_create();$/;"	p	signature:()
tool_calibration_debug_export	tool_calibration.cpp	/^void tool_calibration_debug_export()$/;"	f	signature:()
tool_calibration_debug_export	tool_calibration.h	/^void tool_calibration_debug_export();$/;"	p	signature:()
tool_calibration_id	tool_calibration.cpp	/^static size_t tool_calibration_id;$/;"	v	file:
tool_calibration_metric	tool_calibration.cpp	/^void tool_calibration_metric()$/;"	f	signature:()
tool_calibration_metric	tool_calibration.h	/^void tool_calibration_metric();$/;"	p	signature:()
tool_calibration_next	tool_calibration.cpp	/^void tool_calibration_next()$/;"	f	signature:()
tool_calibration_next	tool_calibration.h	/^void tool_calibration_next();$/;"	p	signature:()
tool_calibration_pair	tool_calibration.cpp	/^void tool_calibration_pair()$/;"	f	signature:()
tool_calibration_pair	tool_calibration.h	/^void tool_calibration_pair();$/;"	p	signature:()
tool_calibration_prev	tool_calibration.cpp	/^void tool_calibration_prev()$/;"	f	signature:()
tool_calibration_prev	tool_calibration.h	/^void tool_calibration_prev();$/;"	p	signature:()
tool_calibration_refine	tool_calibration.cpp	/^void tool_calibration_refine()$/;"	f	signature:()
tool_calibration_refine	tool_calibration.h	/^void tool_calibration_refine();$/;"	p	signature:()
tool_calibration_refine_strict	tool_calibration.cpp	/^void tool_calibration_refine_strict()$/;"	f	signature:()
tool_calibration_refine_strict	tool_calibration.h	/^void tool_calibration_refine_strict();$/;"	p	signature:()
tool_calibration_refresh_UI	tool_calibration.cpp	/^void tool_calibration_refresh_UI()$/;"	f	signature:()
tool_calibration_triangulate	tool_calibration.cpp	/^void tool_calibration_triangulate()$/;"	f	signature:()
tool_calibration_triangulate	tool_calibration.h	/^void tool_calibration_triangulate();$/;"	p	signature:()
tool_calibration_triangulate_trusted	tool_calibration.cpp	/^void tool_calibration_triangulate_trusted()$/;"	f	signature:()
tool_calibration_triangulate_trusted	tool_calibration.h	/^void tool_calibration_triangulate_trusted();$/;"	p	signature:()
tool_calibration_use	tool_calibration.cpp	/^void tool_calibration_use()$/;"	f	signature:()
tool_calibration_use	tool_calibration.h	/^void tool_calibration_use();$/;"	p	signature:()
tool_choose_file	tool_core.cpp	/^char * tool_choose_file()$/;"	f	signature:()
tool_choose_file	tool_core.h	/^char * tool_choose_file();$/;"	p	signature:()
tool_choose_new_file	tool_core.cpp	/^char * tool_choose_new_file()$/;"	f	signature:()
tool_choose_new_file	tool_core.h	/^char * tool_choose_new_file();$/;"	p	signature:()
tool_coordinates_create	tool_coordinates.cpp	/^void tool_coordinates_create()$/;"	f	signature:()
tool_coordinates_create	tool_coordinates.h	/^void tool_coordinates_create();$/;"	p	signature:()
tool_create	tool_core.cpp	/^size_t tool_create(const UI_Mode mode_affinity, const char * const title, const char * const hint)$/;"	f	signature:(const UI_Mode mode_affinity, const char * const title, const char * const hint)
tool_create	tool_core.h	/^size_t tool_create(const UI_Mode mode_affinity, const char * const title, const char * const hint);$/;"	p	signature:(const UI_Mode mode_affinity, const char * const title, const char * const hint)
tool_create_button	tool_core.cpp	/^void tool_create_button(const char * const title, Tool_Function_Call function_call)$/;"	f	signature:(const char * const title, Tool_Function_Call function_call)
tool_create_button	tool_core.h	/^void tool_create_button(const char * const title, Tool_Function_Call function_call);$/;"	p	signature:(const char * const title, Tool_Function_Call function_call)
tool_create_label	tool_core.cpp	/^void tool_create_label(const char * const title)$/;"	f	signature:(const char * const title)
tool_create_label	tool_core.h	/^void tool_create_label(const char * const title);$/;"	p	signature:(const char * const title)
tool_create_separator	tool_core.cpp	/^void tool_create_separator()$/;"	f	signature:()
tool_create_separator	tool_core.h	/^void tool_create_separator();$/;"	p	signature:()
tool_create_tab	tool_core.cpp	/^void tool_create_tab(const char * const tab_title)$/;"	f	signature:(const char * const tab_title)
tool_create_tab	tool_core.h	/^void tool_create_tab(const char * const tab_title);$/;"	p	signature:(const char * const tab_title)
tool_down_x	ui_state.h	/^	double tool_x, tool_y, tool_down_x, tool_down_y;$/;"	m	struct:UI_State	access:public
tool_down_y	ui_state.h	/^	double tool_x, tool_y, tool_down_x, tool_down_y;$/;"	m	struct:UI_State	access:public
tool_edit	tool_edit.cpp	/^static Tool_Edit tool_edit;$/;"	v	file:
tool_edit_all_corresponding_points	tool_edit.cpp	/^void tool_edit_all_corresponding_points()$/;"	f	signature:()
tool_edit_create	tool_edit.cpp	/^void tool_edit_create() $/;"	f	signature:()
tool_edit_create	tool_edit.h	/^void tool_edit_create();$/;"	p	signature:()
tool_edit_deselect_all	tool_edit.cpp	/^void tool_edit_deselect_all()$/;"	f	signature:()
tool_edit_erase_all_vertices_and_points	tool_edit.cpp	/^void tool_edit_erase_all_vertices_and_points()$/;"	f	signature:()
tool_edit_erase_current_polygon	tool_edit.cpp	/^void tool_edit_erase_current_polygon()$/;"	f	signature:()
tool_edit_erase_selected_points	tool_edit.cpp	/^void tool_edit_erase_selected_points()$/;"	f	signature:()
tool_edit_inspection_mode	tool_edit.cpp	/^void tool_edit_inspection_mode()$/;"	f	signature:()
tool_edit_overview_mode	tool_edit.cpp	/^void tool_edit_overview_mode()$/;"	f	signature:()
tool_edit_reconstructed_points	tool_edit.cpp	/^void tool_edit_reconstructed_points()$/;"	f	signature:()
tool_edit_select_all_points	tool_edit.cpp	/^void tool_edit_select_all_points()$/;"	f	signature:()
tool_edit_select_points_on_current_shot	tool_edit.cpp	/^void tool_edit_select_points_on_current_shot()$/;"	f	signature:()
tool_edit_shot_mode	tool_edit.cpp	/^void tool_edit_shot_mode()$/;"	f	signature:()
tool_end_progressbar	tool_core.cpp	/^void tool_end_progressbar()$/;"	f	signature:()
tool_end_progressbar	tool_core.h	/^void tool_end_progressbar();$/;"	p	signature:()
tool_extrude_to_ground	tool_extrude.cpp	/^bool tool_extrude_to_ground(double * ground, Selected_Items * selected_vertices, size_t group \/*= 0*\/)$/;"	f	signature:(double * ground, Selected_Items * selected_vertices, size_t group )
tool_extrude_to_ground	tool_extrude.h	/^bool tool_extrude_to_ground(double * ground, Selected_Items * selected_vertices, size_t group = 0);$/;"	p	signature:(double * ground, Selected_Items * selected_vertices, size_t group = 0)
tool_fetch_parameters	tool_core.cpp	/^void tool_fetch_parameters(size_t tool_id)$/;"	f	signature:(size_t tool_id)
tool_fetch_parameters	tool_core.h	/^void tool_fetch_parameters(size_t tool_id);$/;"	p	signature:(size_t tool_id)
tool_file	tool_file.cpp	/^static Tool_File tool_file;$/;"	v	file:
tool_file_add_image	tool_file.cpp	/^void tool_file_add_image()$/;"	f	signature:()
tool_file_add_list_of_images	tool_file.cpp	/^void tool_file_add_list_of_images()$/;"	f	signature:()
tool_file_create	tool_file.cpp	/^void tool_file_create() $/;"	f	signature:()
tool_file_create	tool_file.h	/^void tool_file_create();$/;"	p	signature:()
tool_file_export_cameras	tool_file.cpp	/^void tool_file_export_cameras()$/;"	f	signature:()
tool_file_export_pointcloud	tool_file.cpp	/^void tool_file_export_pointcloud()$/;"	f	signature:()
tool_file_export_realviz_project	tool_file.cpp	/^void tool_file_export_realviz_project()$/;"	f	signature:()
tool_file_export_sandy3d	tool_file.cpp	/^void tool_file_export_sandy3d()$/;"	f	signature:()
tool_file_export_vrml	tool_file.cpp	/^void tool_file_export_vrml()$/;"	f	signature:()
tool_file_import_pointcloud	tool_file.cpp	/^void tool_file_import_pointcloud()$/;"	f	signature:()
tool_file_import_points	tool_file.cpp	/^void tool_file_import_points()$/;"	f	signature:()
tool_file_import_realviz_project	tool_file.cpp	/^void tool_file_import_realviz_project()$/;"	f	signature:()
tool_file_new	tool_file.cpp	/^void tool_file_new()$/;"	f	signature:()
tool_file_open_project	tool_file.cpp	/^void tool_file_open_project()$/;"	f	signature:()
tool_file_quit	tool_file.cpp	/^void tool_file_quit()$/;"	f	signature:()
tool_file_save_project	tool_file.cpp	/^void tool_file_save_project()$/;"	f	signature:()
tool_finalize	tool_core.cpp	/^void tool_finalize()$/;"	f	signature:()
tool_finalize	tool_core.h	/^void tool_finalize();$/;"	p	signature:()
tool_get_bool	tool_core.cpp	/^bool tool_get_bool(size_t tool_id, size_t parameter_id)$/;"	f	signature:(size_t tool_id, size_t parameter_id)
tool_get_bool	tool_core.h	/^bool tool_get_bool(size_t tool_id, size_t parameter_id);$/;"	p	signature:(size_t tool_id, size_t parameter_id)
tool_get_enum	tool_core.cpp	/^int tool_get_enum(size_t tool_id, size_t parameter_id)$/;"	f	signature:(size_t tool_id, size_t parameter_id)
tool_get_enum	tool_core.h	/^int tool_get_enum(size_t tool_id, size_t parameter_id);$/;"	p	signature:(size_t tool_id, size_t parameter_id)
tool_get_int	tool_core.cpp	/^int tool_get_int(size_t tool_id, size_t parameter_id)$/;"	f	signature:(size_t tool_id, size_t parameter_id)
tool_get_int	tool_core.h	/^int tool_get_int(size_t tool_id, size_t parameter_id);$/;"	p	signature:(size_t tool_id, size_t parameter_id)
tool_get_real	tool_core.cpp	/^double tool_get_real(size_t tool_id, size_t parameter_id)$/;"	f	signature:(size_t tool_id, size_t parameter_id)
tool_get_real	tool_core.h	/^double tool_get_real(size_t tool_id, size_t parameter_id);$/;"	p	signature:(size_t tool_id, size_t parameter_id)
tool_image_colorize	tool_image.cpp	/^void tool_image_colorize()$/;"	f	signature:()
tool_image_colorize	tool_image.h	/^void tool_image_colorize();$/;"	p	signature:()
tool_image_create	tool_image.cpp	/^void tool_image_create() $/;"	f	signature:()
tool_image_create	tool_image.h	/^void tool_image_create();$/;"	p	signature:()
tool_image_generate_textures	tool_image.cpp	/^void tool_image_generate_textures()$/;"	f	signature:()
tool_image_pinhole_deform	tool_image.cpp	/^void tool_image_pinhole_deform()$/;"	f	signature:()
tool_image_pinhole_deform	tool_image.h	/^void tool_image_pinhole_deform();$/;"	p	signature:()
tool_matching	tool_matching.cpp	/^static Tool_Matching tool_matching;$/;"	v	file:
tool_matching_create	tool_matching.cpp	/^void tool_matching_create() $/;"	f	signature:()
tool_matching_create	tool_matching.h	/^void tool_matching_create();$/;"	p	signature:()
tool_matching_id	tool_matching.cpp	/^static size_t tool_matching_id;$/;"	v	file:
tool_matching_refresh_UI	tool_matching.cpp	/^void tool_matching_refresh_UI()$/;"	f	signature:()
tool_matching_remove_conflicts	tool_matching.h	/^void tool_matching_remove_conflicts();$/;"	p	signature:()
tool_matching_standard	tool_matching.cpp	/^void tool_matching_standard() $/;"	f	signature:()
tool_matching_standard	tool_matching.h	/^void tool_matching_standard();$/;"	p	signature:()
tool_menu_common_path_parts	tool_core.cpp	/^int tool_menu_common_path_parts(const char * path1, const char * path2) $/;"	f	signature:(const char * path1, const char * path2)
tool_menu_common_path_parts	tool_core.h	/^int tool_menu_common_path_parts(const char * path1, const char * path2);$/;"	p	signature:(const char * path1, const char * path2)
tool_menu_item_pressed	tool_core.cpp	/^void tool_menu_item_pressed(GUI_Panel * event)$/;"	f	signature:(GUI_Panel * event)
tool_menu_item_pressed	tool_core.h	/^void tool_menu_item_pressed(GUI_Panel * event);$/;"	p	signature:(GUI_Panel * event)
tool_menu_items_comparator	tool_core.cpp	/^int tool_menu_items_comparator(const void * a, const void * b) $/;"	f	signature:(const void * a, const void * b)
tool_menu_items_comparator	tool_core.h	/^int tool_menu_items_comparator(const void * a, const void * b);$/;"	p	signature:(const void * a, const void * b)
tool_menu_path_prefix	tool_core.cpp	/^bool tool_menu_path_prefix(const char * path, const char * prefix, const char * prefix_end) $/;"	f	signature:(const char * path, const char * prefix, const char * prefix_end)
tool_menu_path_prefix	tool_core.h	/^bool tool_menu_path_prefix(const char * path, const char * prefix, const char * prefix_end);$/;"	p	signature:(const char * path, const char * prefix, const char * prefix_end)
tool_plane_extraction	tool_plane_extraction.cpp	/^double * tool_plane_extraction(Vertices & vertices, double threshold \/*= 0.5*\/, bool flatten_inliers \/*= false*\/, size_t group \/*= 0*\/)$/;"	f	signature:(Vertices & vertices, double threshold , bool flatten_inliers , size_t group )
tool_plane_extraction	tool_plane_extraction.h	/^double * tool_plane_extraction(Vertices & vertices, double threshold = 0.5, bool flatten_inliers = false, size_t group = 0);$/;"	p	signature:(Vertices & vertices, double threshold = 0.5, bool flatten_inliers = false, size_t group = 0)
tool_plane_extraction_subset	tool_plane_extraction.cpp	/^double * tool_plane_extraction_subset(Vertices & vertices, size_t * ids, size_t count)$/;"	f	signature:(Vertices & vertices, size_t * ids, size_t count)
tool_plane_extraction_subset	tool_plane_extraction.h	/^double * tool_plane_extraction_subset(Vertices & vertices, size_t * ids, size_t count);$/;"	p	signature:(Vertices & vertices, size_t * ids, size_t count)
tool_points	tool_points.cpp	/^static Tool_Points tool_points;$/;"	v	file:
tool_points_begin	tool_points.cpp	/^void tool_points_begin() $/;"	f	signature:()
tool_points_begin	tool_points.h	/^void tool_points_begin();$/;"	p	signature:()
tool_points_click	tool_points.cpp	/^void tool_points_click(double x, double y, int button) $/;"	f	signature:(double x, double y, int button)
tool_points_click	tool_points.h	/^void tool_points_click(double x, double y, int button);$/;"	p	signature:(double x, double y, int button)
tool_points_create	tool_points.cpp	/^void tool_points_create() $/;"	f	signature:()
tool_points_create	tool_points.h	/^void tool_points_create();$/;"	p	signature:()
tool_points_dragging	tool_points.cpp	/^void tool_points_dragging(double x, double y, int button)$/;"	f	signature:(double x, double y, int button)
tool_points_dragging	tool_points.h	/^void tool_points_dragging(double x, double y, int button);$/;"	p	signature:(double x, double y, int button)
tool_points_dragging_done	tool_points.cpp	/^void tool_points_dragging_done(double x1, double y1, double x2, double y2, int button)$/;"	f	signature:(double x1, double y1, double x2, double y2, int button)
tool_points_dragging_done	tool_points.h	/^void tool_points_dragging_done(double x1, double y1, double x2, double y2, int button);$/;"	p	signature:(double x1, double y1, double x2, double y2, int button)
tool_points_end	tool_points.cpp	/^void tool_points_end()$/;"	f	signature:()
tool_points_end	tool_points.h	/^void tool_points_end();$/;"	p	signature:()
tool_points_key	tool_points.cpp	/^void tool_points_key()$/;"	f	signature:()
tool_points_key	tool_points.h	/^void tool_points_key();$/;"	p	signature:()
tool_points_mouse_down	tool_points.cpp	/^bool tool_points_mouse_down(double x, double y, int button)$/;"	f	signature:(double x, double y, int button)
tool_points_mouse_down	tool_points.h	/^bool tool_points_mouse_down(double x, double y, int button);$/;"	p	signature:(double x, double y, int button)
tool_points_move	tool_points.cpp	/^void tool_points_move(double x, double y)$/;"	f	signature:(double x, double y)
tool_points_move	tool_points.h	/^void tool_points_move(double x, double y);$/;"	p	signature:(double x, double y)
tool_points_new	tool_points.cpp	/^bool tool_points_new(const double x, const double y, size_t & point_id)$/;"	f	signature:(const double x, const double y, size_t & point_id)
tool_points_refresh_UI	tool_points.cpp	/^void tool_points_refresh_UI()$/;"	f	signature:()
tool_polygons	tool_polygons.cpp	/^static Tool_Polygons tool_polygons;$/;"	v	file:
tool_polygons_begin	tool_polygons.cpp	/^void tool_polygons_begin() $/;"	f	signature:()
tool_polygons_begin	tool_polygons.h	/^void tool_polygons_begin();$/;"	p	signature:()
tool_polygons_click	tool_polygons.cpp	/^void tool_polygons_click(double x, double y, int button)$/;"	f	signature:(double x, double y, int button)
tool_polygons_click	tool_polygons.h	/^void tool_polygons_click(double x, double y, int button);$/;"	p	signature:(double x, double y, int button)
tool_polygons_create	tool_polygons.cpp	/^void tool_polygons_create() $/;"	f	signature:()
tool_polygons_create	tool_polygons.h	/^void tool_polygons_create();$/;"	p	signature:()
tool_polygons_dragging	tool_polygons.cpp	/^void tool_polygons_dragging(double x, double y, int button)$/;"	f	signature:(double x, double y, int button)
tool_polygons_dragging	tool_polygons.h	/^void tool_polygons_dragging(double x, double y, int button);$/;"	p	signature:(double x, double y, int button)
tool_polygons_dragging_done	tool_polygons.cpp	/^void tool_polygons_dragging_done(double x1, double y1, double x2, double y2, int button)$/;"	f	signature:(double x1, double y1, double x2, double y2, int button)
tool_polygons_dragging_done	tool_polygons.h	/^void tool_polygons_dragging_done(double x1, double y1, double x2, double y2, int button);$/;"	p	signature:(double x1, double y1, double x2, double y2, int button)
tool_polygons_end	tool_polygons.cpp	/^void tool_polygons_end()$/;"	f	signature:()
tool_polygons_end	tool_polygons.h	/^void tool_polygons_end();$/;"	p	signature:()
tool_polygons_key	tool_polygons.cpp	/^void tool_polygons_key()$/;"	f	signature:()
tool_polygons_key	tool_polygons.h	/^void tool_polygons_key();$/;"	p	signature:()
tool_polygons_mouse_down	tool_polygons.cpp	/^bool tool_polygons_mouse_down(double x, double y, int button)$/;"	f	signature:(double x, double y, int button)
tool_polygons_mouse_down	tool_polygons.h	/^bool tool_polygons_mouse_down(double x, double y, int button);$/;"	p	signature:(double x, double y, int button)
tool_polygons_move	tool_polygons.cpp	/^void tool_polygons_move(double x, double y)$/;"	f	signature:(double x, double y)
tool_polygons_move	tool_polygons.h	/^void tool_polygons_move(double x, double y);$/;"	p	signature:(double x, double y)
tool_register_bool	tool_core.cpp	/^void tool_register_bool(size_t id, const char * const title, int default_bool)$/;"	f	signature:(size_t id, const char * const title, int default_bool)
tool_register_bool	tool_core.h	/^void tool_register_bool(size_t id, const char * const title, int default_bool);$/;"	p	signature:(size_t id, const char * const title, int default_bool)
tool_register_enum	tool_core.cpp	/^void tool_register_enum(size_t id, const char * const title, const char * labels[])$/;"	f	signature:(size_t id, const char * const title, const char * labels[])
tool_register_enum	tool_core.h	/^void tool_register_enum(size_t id, const char * const title, const char * labels[]);$/;"	p	signature:(size_t id, const char * const title, const char * labels[])
tool_register_int	tool_core.cpp	/^void tool_register_int(size_t id, const char * const title, int default_int, int min, int max, int increment)$/;"	f	signature:(size_t id, const char * const title, int default_int, int min, int max, int increment)
tool_register_int	tool_core.h	/^void tool_register_int(size_t id, const char * const title, int default_int, int min, int max, int increment);$/;"	p	signature:(size_t id, const char * const title, int default_int, int min, int max, int increment)
tool_register_menu_function	tool_core.cpp	/^void tool_register_menu_function(const char * const menu_path, Tool_Function_Call function_call)$/;"	f	signature:(const char * const menu_path, Tool_Function_Call function_call)
tool_register_menu_function	tool_core.h	/^void tool_register_menu_function(const char * const menu_path, Tool_Function_Call function_call);$/;"	p	signature:(const char * const menu_path, Tool_Function_Call function_call)
tool_register_menu_void	tool_core.cpp	/^void tool_register_menu_void(const char * const menu_path) $/;"	f	signature:(const char * const menu_path)
tool_register_menu_void	tool_core.h	/^void tool_register_menu_void(const char * const menu_path);$/;"	p	signature:(const char * const menu_path)
tool_register_real	tool_core.cpp	/^void tool_register_real(size_t id, const char * const title, double default_real, double min, double max, double increment)$/;"	f	signature:(size_t id, const char * const title, double default_real, double min, double max, double increment)
tool_register_real	tool_core.h	/^void tool_register_real(size_t id, const char * const title, double default_real, double min, double max, double increment);$/;"	p	signature:(size_t id, const char * const title, double default_real, double min, double max, double increment)
tool_register_toolbar_button	tool_core.cpp	/^void tool_register_toolbar_button(const char * const toolbar_title) $/;"	f	signature:(const char * const toolbar_title)
tool_register_toolbar_button	tool_core.h	/^void tool_register_toolbar_button(const char * const toolbar_title);$/;"	p	signature:(const char * const toolbar_title)
tool_requires_current_shot	tool_core.cpp	/^bool tool_requires_current_shot()$/;"	f	signature:()
tool_requires_current_shot	tool_core.h	/^bool tool_requires_current_shot();$/;"	p	signature:()
tool_resection_all	tool_resection.cpp	/^void tool_resection_all()$/;"	f	signature:()
tool_resection_all	tool_resection.h	/^void tool_resection_all();$/;"	p	signature:()
tool_resection_all_enough	tool_resection.cpp	/^void tool_resection_all_enough()$/;"	f	signature:()
tool_resection_all_enough	tool_resection.h	/^void tool_resection_all_enough();$/;"	p	signature:()
tool_resection_all_lattice	tool_resection.cpp	/^void tool_resection_all_lattice()$/;"	f	signature:()
tool_resection_all_lattice	tool_resection.h	/^void tool_resection_all_lattice();$/;"	p	signature:()
tool_resection_all_uncalibrated	tool_resection.cpp	/^void tool_resection_all_uncalibrated()$/;"	f	signature:()
tool_resection_all_uncalibrated	tool_resection.h	/^void tool_resection_all_uncalibrated();$/;"	p	signature:()
tool_resection_create	tool_resection.cpp	/^void tool_resection_create() $/;"	f	signature:()
tool_resection_create	tool_resection.h	/^void tool_resection_create();$/;"	p	signature:()
tool_resection_current_camera	tool_resection.cpp	/^void tool_resection_current_camera()$/;"	f	signature:()
tool_resection_current_camera	tool_resection.h	/^void tool_resection_current_camera();$/;"	p	signature:()
tool_selection	tool_selection.cpp	/^static Tool_Selection tool_selection;$/;"	v	file:
tool_selection_begin	tool_selection.cpp	/^void tool_selection_begin() $/;"	f	signature:()
tool_selection_begin	tool_selection.h	/^void tool_selection_begin();$/;"	p	signature:()
tool_selection_click	tool_selection.cpp	/^void tool_selection_click(double x, double y, int button) $/;"	f	signature:(double x, double y, int button)
tool_selection_click	tool_selection.h	/^void tool_selection_click(double x, double y, int button);$/;"	p	signature:(double x, double y, int button)
tool_selection_create	tool_selection.cpp	/^void tool_selection_create()$/;"	f	signature:()
tool_selection_create	tool_selection.h	/^void tool_selection_create();$/;"	p	signature:()
tool_selection_dragging	tool_selection.cpp	/^void tool_selection_dragging(double x, double y, int button)$/;"	f	signature:(double x, double y, int button)
tool_selection_dragging	tool_selection.h	/^void tool_selection_dragging(double x, double y, int button);$/;"	p	signature:(double x, double y, int button)
tool_selection_dragging_done	tool_selection.cpp	/^void tool_selection_dragging_done(double x1, double y1, double x2, double y2, int button)$/;"	f	signature:(double x1, double y1, double x2, double y2, int button)
tool_selection_dragging_done	tool_selection.h	/^void tool_selection_dragging_done(double x1, double y1, double x2, double y2, int button);$/;"	p	signature:(double x1, double y1, double x2, double y2, int button)
tool_selection_end	tool_selection.cpp	/^void tool_selection_end()$/;"	f	signature:()
tool_selection_end	tool_selection.h	/^void tool_selection_end();$/;"	p	signature:()
tool_selection_key	tool_selection.cpp	/^void tool_selection_key() $/;"	f	signature:()
tool_selection_key	tool_selection.h	/^void tool_selection_key();$/;"	p	signature:()
tool_selection_mouse_down	tool_selection.cpp	/^bool tool_selection_mouse_down(double x, double y, int button)$/;"	f	signature:(double x, double y, int button)
tool_selection_mouse_down	tool_selection.h	/^bool tool_selection_mouse_down(double x, double y, int button);$/;"	p	signature:(double x, double y, int button)
tool_selection_move	tool_selection.cpp	/^void tool_selection_move(double x, double y)$/;"	f	signature:(double x, double y)
tool_selection_move	tool_selection.h	/^void tool_selection_move(double x, double y);$/;"	p	signature:(double x, double y)
tool_set_begin_handler	tool_core.cpp	/^void tool_set_begin_handler(const Tool_Begin_Event_Handler handler)$/;"	f	signature:(const Tool_Begin_Event_Handler handler)
tool_set_begin_handler	tool_core.h	/^void tool_set_begin_handler(const Tool_Begin_Event_Handler handler);$/;"	p	signature:(const Tool_Begin_Event_Handler handler)
tool_set_click_handler	tool_core.cpp	/^void tool_set_click_handler(const Tool_Click_Event_Handler handler)$/;"	f	signature:(const Tool_Click_Event_Handler handler)
tool_set_click_handler	tool_core.h	/^void tool_set_click_handler(const Tool_Click_Event_Handler handler);$/;"	p	signature:(const Tool_Click_Event_Handler handler)
tool_set_dragging_done_handler	tool_core.cpp	/^void tool_set_dragging_done_handler(const Tool_Dragging_Done_Event_Handler handler)$/;"	f	signature:(const Tool_Dragging_Done_Event_Handler handler)
tool_set_dragging_done_handler	tool_core.h	/^void tool_set_dragging_done_handler(const Tool_Dragging_Done_Event_Handler handler);$/;"	p	signature:(const Tool_Dragging_Done_Event_Handler handler)
tool_set_dragging_handler	tool_core.cpp	/^void tool_set_dragging_handler(const Tool_Dragging_Event_Handler handler)$/;"	f	signature:(const Tool_Dragging_Event_Handler handler)
tool_set_dragging_handler	tool_core.h	/^void tool_set_dragging_handler(const Tool_Dragging_Event_Handler handler);$/;"	p	signature:(const Tool_Dragging_Event_Handler handler)
tool_set_end_handler	tool_core.cpp	/^void tool_set_end_handler(const Tool_End_Event_Handler handler)$/;"	f	signature:(const Tool_End_Event_Handler handler)
tool_set_end_handler	tool_core.h	/^void tool_set_end_handler(const Tool_End_Event_Handler handler);$/;"	p	signature:(const Tool_End_Event_Handler handler)
tool_set_key_pressed_event_handler	tool_core.cpp	/^void tool_set_key_pressed_event_handler(const Tool_Key_Pressed_Event_Handler handler)$/;"	f	signature:(const Tool_Key_Pressed_Event_Handler handler)
tool_set_key_pressed_event_handler	tool_core.h	/^void tool_set_key_pressed_event_handler(const Tool_Key_Pressed_Event_Handler handler);$/;"	p	signature:(const Tool_Key_Pressed_Event_Handler handler)
tool_set_mouse_down_handler	tool_core.cpp	/^void tool_set_mouse_down_handler(const Tool_Mouse_Down_Event_Handler handler)$/;"	f	signature:(const Tool_Mouse_Down_Event_Handler handler)
tool_set_mouse_down_handler	tool_core.h	/^void tool_set_mouse_down_handler(const Tool_Mouse_Down_Event_Handler handler);$/;"	p	signature:(const Tool_Mouse_Down_Event_Handler handler)
tool_set_move_handler	tool_core.cpp	/^void tool_set_move_handler(const Tool_Move_Event_Handler handler)$/;"	f	signature:(const Tool_Move_Event_Handler handler)
tool_set_move_handler	tool_core.h	/^void tool_set_move_handler(const Tool_Move_Event_Handler handler);$/;"	p	signature:(const Tool_Move_Event_Handler handler)
tool_set_process_events_function	tool_core.cpp	/^void tool_set_process_events_function(const Tool_Process_Events process_events)$/;"	f	signature:(const Tool_Process_Events process_events)
tool_set_process_events_function	tool_core.h	/^void tool_set_process_events_function(const Tool_Process_Events process_events);$/;"	p	signature:(const Tool_Process_Events process_events)
tool_show_progress	tool_core.cpp	/^void tool_show_progress(double percentage)$/;"	f	signature:(double percentage)
tool_show_progress	tool_core.h	/^void tool_show_progress(double percentage); $/;"	p	signature:(double percentage)
tool_start_progressbar	tool_core.cpp	/^void tool_start_progressbar()$/;"	f	signature:()
tool_start_progressbar	tool_core.h	/^void tool_start_progressbar(); $/;"	p	signature:()
tool_tab_button_pressed	tool_core.cpp	/^void tool_tab_button_pressed(GUI_Panel * event)$/;"	f	signature:(GUI_Panel * event)
tool_tab_button_pressed	tool_core.h	/^void tool_tab_button_pressed(GUI_Panel * event);$/;"	p	signature:(GUI_Panel * event)
tool_triangulate_clear	tool_triangulation.cpp	/^void tool_triangulate_clear()$/;"	f	signature:()
tool_triangulate_clear	tool_triangulation.h	/^void tool_triangulate_clear();$/;"	p	signature:()
tool_triangulate_compute_normals	tool_triangulation.cpp	/^void tool_triangulate_compute_normals() $/;"	f	signature:()
tool_triangulate_compute_normals	tool_triangulation.h	/^void tool_triangulate_compute_normals();$/;"	p	signature:()
tool_triangulate_surface_reconstruction	tool_triangulation.cpp	/^void tool_triangulate_surface_reconstruction()$/;"	f	signature:()
tool_triangulate_vertices	tool_triangulation.cpp	/^void tool_triangulate_vertices()$/;"	f	signature:()
tool_triangulate_vertices	tool_triangulation.h	/^void tool_triangulate_vertices();$/;"	p	signature:()
tool_triangulate_vertices_trusted	tool_triangulation.cpp	/^void tool_triangulate_vertices_trusted() $/;"	f	signature:()
tool_triangulate_vertices_trusted	tool_triangulation.h	/^void tool_triangulate_vertices_trusted();$/;"	p	signature:()
tool_triangulate_vertices_user	tool_triangulation.cpp	/^void tool_triangulate_vertices_user()$/;"	f	signature:()
tool_triangulate_vertices_user	tool_triangulation.h	/^void tool_triangulate_vertices_user();$/;"	p	signature:()
tool_triangulate_vertices_using_selected_shots	tool_triangulation.cpp	/^void tool_triangulate_vertices_using_selected_shots()$/;"	f	signature:()
tool_triangulate_vertices_using_selected_shots	tool_triangulation.h	/^void tool_triangulate_vertices_using_selected_shots();$/;"	p	signature:()
tool_triangulation_create	tool_triangulation.cpp	/^void tool_triangulation_create() $/;"	f	signature:()
tool_triangulation_create	tool_triangulation.h	/^void tool_triangulation_create();$/;"	p	signature:()
tool_x	ui_state.h	/^	double tool_x, tool_y, tool_down_x, tool_down_y;$/;"	m	struct:UI_State	access:public
tool_y	ui_state.h	/^	double tool_x, tool_y, tool_down_x, tool_down_y;$/;"	m	struct:UI_State	access:public
toolbar	ui_state.h	/^		* div_toolbar, * toolbar, * list;$/;"	m	struct:UI_State	access:public
tools	tool_core.h	/^	Tool tools[100];$/;"	m	struct:Tools_State	access:public
tools_state	tool_core.cpp	/^Tools_State tools_state;$/;"	v
top	/usr/include/opencv/cxtypes.h	/^    CvMemBlock* top;   \/* current memory block - top of the stack *\/$/;"	m	struct:CvMemStorage	access:public
top	/usr/include/opencv/cxtypes.h	/^    CvMemBlock* top;$/;"	m	struct:CvMemStoragePos	access:public
top	ui_state.h	/^		* root_panel, * top, * side, * gl, * side_top, * side_bottom, $/;"	m	struct:UI_State	access:public
top_rows	/usr/include/opencv/cv.hpp	/^    int top_rows, bottom_rows, max_rows;$/;"	m	class:CvBaseImageFilter	access:protected
topline	/usr/include/opencv/cvcompat.h	/^    char*   topline;$/;"	m	struct:_CvPixelPosition8s	access:public
topline	/usr/include/opencv/cvcompat.h	/^    float*  topline;$/;"	m	struct:_CvPixelPosition32f	access:public
topline	/usr/include/opencv/cvcompat.h	/^    unsigned char*   topline;       \/* pointer to the start of the top pixel line       *\/$/;"	m	struct:_CvPixelPosition8u	access:public
total	/usr/include/opencv/ml.h	/^    int total;$/;"	m	class:CvKNearest	access:protected
track_object	/usr/include/opencv/cvaux.hpp	/^    virtual bool  track_object( const IplImage* cur_frame );$/;"	p	class:CvCamShiftTracker	access:public	signature:( const IplImage* cur_frame )
train	/usr/include/opencv/ml.h	/^    virtual bool train( CvDTreeTrainData* _train_data, const CvMat* _subsample_idx );$/;"	p	class:CvBoostTree	access:public	signature:( CvDTreeTrainData* _train_data, const CvMat* _subsample_idx )
train	/usr/include/opencv/ml.h	/^    virtual bool train( CvDTreeTrainData* _train_data, const CvMat* _subsample_idx );$/;"	p	class:CvDTree	access:public	signature:( CvDTreeTrainData* _train_data, const CvMat* _subsample_idx )
train	/usr/include/opencv/ml.h	/^    virtual bool train( CvDTreeTrainData* _train_data, const CvMat* _subsample_idx );$/;"	p	class:CvForestTree	access:public	signature:( CvDTreeTrainData* _train_data, const CvMat* _subsample_idx )
train	/usr/include/opencv/ml.h	/^    virtual bool train( CvDTreeTrainData* _train_data, const CvMat* _subsample_idx, CvRTrees* forest );$/;"	p	class:CvForestTree	access:public	signature:( CvDTreeTrainData* _train_data, const CvMat* _subsample_idx, CvRTrees* forest )
train	/usr/include/opencv/ml.h	/^    virtual bool train( CvDTreeTrainData* _train_data,$/;"	p	class:CvBoostTree	access:public	signature:( CvDTreeTrainData* _train_data, const CvMat* subsample_idx, CvBoost* ensemble )
train	/usr/include/opencv/ml.h	/^    virtual bool train( const CvMat* _train_data, const CvMat* _responses,$/;"	p	class:CvKNearest	access:public	signature:( const CvMat* _train_data, const CvMat* _responses, const CvMat* _sample_idx=0, bool is_regression=false, int _max_k=32, bool _update_base=false )
train	/usr/include/opencv/ml.h	/^    virtual bool train( const CvMat* _train_data, const CvMat* _responses,$/;"	p	class:CvNormalBayesClassifier	access:public	signature:( const CvMat* _train_data, const CvMat* _responses, const CvMat* _var_idx = 0, const CvMat* _sample_idx=0, bool update=false )
train	/usr/include/opencv/ml.h	/^    virtual bool train( const CvMat* _train_data, const CvMat* _responses,$/;"	p	class:CvSVM	access:public	signature:( const CvMat* _train_data, const CvMat* _responses, const CvMat* _var_idx=0, const CvMat* _sample_idx=0, CvSVMParams _params=CvSVMParams() )
train	/usr/include/opencv/ml.h	/^    virtual bool train( const CvMat* _train_data, int _tflag,$/;"	p	class:CvBoost	access:public	signature:( const CvMat* _train_data, int _tflag, const CvMat* _responses, const CvMat* _var_idx=0, const CvMat* _sample_idx=0, const CvMat* _var_type=0, const CvMat* _missing_mask=0, CvBoostParams params=CvBoostParams(), bool update=false )
train	/usr/include/opencv/ml.h	/^    virtual bool train( const CvMat* _train_data, int _tflag,$/;"	p	class:CvBoostTree	access:public	signature:( const CvMat* _train_data, int _tflag, const CvMat* _responses, const CvMat* _var_idx=0, const CvMat* _sample_idx=0, const CvMat* _var_type=0, const CvMat* _missing_mask=0, CvDTreeParams params=CvDTreeParams() )
train	/usr/include/opencv/ml.h	/^    virtual bool train( const CvMat* _train_data, int _tflag,$/;"	p	class:CvDTree	access:public	signature:( const CvMat* _train_data, int _tflag, const CvMat* _responses, const CvMat* _var_idx=0, const CvMat* _sample_idx=0, const CvMat* _var_type=0, const CvMat* _missing_mask=0, CvDTreeParams params=CvDTreeParams() )
train	/usr/include/opencv/ml.h	/^    virtual bool train( const CvMat* _train_data, int _tflag,$/;"	p	class:CvForestTree	access:public	signature:( const CvMat* _train_data, int _tflag, const CvMat* _responses, const CvMat* _var_idx=0, const CvMat* _sample_idx=0, const CvMat* _var_type=0, const CvMat* _missing_mask=0, CvDTreeParams params=CvDTreeParams() )
train	/usr/include/opencv/ml.h	/^    virtual bool train( const CvMat* _train_data, int _tflag,$/;"	p	class:CvRTrees	access:public	signature:( const CvMat* _train_data, int _tflag, const CvMat* _responses, const CvMat* _var_idx=0, const CvMat* _sample_idx=0, const CvMat* _var_type=0, const CvMat* _missing_mask=0, CvRTParams params=CvRTParams() )
train	/usr/include/opencv/ml.h	/^    virtual bool train( const CvMat* samples, const CvMat* sample_idx=0,$/;"	p	class:CvEM	access:public	signature:( const CvMat* samples, const CvMat* sample_idx=0, CvEMParams params=CvEMParams(), CvMat* labels=0 )
train	/usr/include/opencv/ml.h	/^    virtual int train( const CvMat* _inputs, const CvMat* _outputs,$/;"	p	class:CvANN_MLP	access:public	signature:( const CvMat* _inputs, const CvMat* _outputs, const CvMat* _sample_weights, const CvMat* _sample_idx=0, CvANN_MLP_TrainParams _params = CvANN_MLP_TrainParams(), int flags=0 )
train1	/usr/include/opencv/ml.h	/^    virtual bool train1( int sample_count, int var_count, const float** samples,$/;"	p	class:CvSVM	access:protected	signature:( int sample_count, int var_count, const float** samples, const void* _responses, double Cp, double Cn, CvMemStorage* _storage, double* alpha, double& rho )
train_backprop	/usr/include/opencv/ml.h	/^    virtual int train_backprop( CvVectors _ivecs, CvVectors _ovecs, const double* _sw );$/;"	p	class:CvANN_MLP	access:protected	signature:( CvVectors _ivecs, CvVectors _ovecs, const double* _sw )
train_method	/usr/include/opencv/ml.h	/^    int train_method;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
train_rprop	/usr/include/opencv/ml.h	/^    virtual int train_rprop( CvVectors _ivecs, CvVectors _ovecs, const double* _sw );$/;"	p	class:CvANN_MLP	access:protected	signature:( CvVectors _ivecs, CvVectors _ovecs, const double* _sw )
transP	/usr/include/opencv/cvaux.h	/^    float*  transP;\/*transition probab. matrices for states *\/$/;"	m	struct:CvEHMM	access:public
transVect	/usr/include/opencv/cvaux.h	/^    float   transVect[3]; \/* rotation matrix and transition vector relatively$/;"	m	struct:CvCamera	access:public
transVector	/usr/include/opencv/cvaux.h	/^    float transVector[3];$/;"	m	struct:CvStereoCamera	access:public
transition_matrix	/usr/include/opencv/cvtypes.h	/^    CvMat* transition_matrix;   \/* state transition matrix (A) *\/$/;"	m	struct:CvKalman	access:public
translation	geometry_structures.h	/^	CvMat * projection, * rotation, * translation, * internal_calibration;$/;"	m	struct:Shot	access:public
tree_error	/usr/include/opencv/ml.h	/^    double node_risk, tree_risk, tree_error;$/;"	m	struct:CvDTreeNode	access:public
tree_risk	/usr/include/opencv/ml.h	/^    double node_risk, tree_risk, tree_error;$/;"	m	struct:CvDTreeNode	access:public
tree_storage	/usr/include/opencv/ml.h	/^    CvMemStorage* tree_storage;$/;"	m	struct:CvDTreeTrainData	access:public
trees	/usr/include/opencv/ml.h	/^    CvForestTree** trees;$/;"	m	class:CvRTrees	access:protected
treeview	ui_state.h	/^		* treeview, * treeview_shots, * treeview_vertices, \/* * tabs, *\/$/;"	m	struct:UI_State	access:public
treeview_shots	ui_state.h	/^		* treeview, * treeview_shots, * treeview_vertices, \/* * tabs, *\/$/;"	m	struct:UI_State	access:public
treeview_vertices	ui_state.h	/^		* treeview, * treeview_shots, * treeview_vertices, \/* * tabs, *\/$/;"	m	struct:UI_State	access:public
triangulate_refresh_ui	tool_triangulation.cpp	/^void triangulate_refresh_ui()$/;"	f	signature:()
trim_weights	/usr/include/opencv/ml.h	/^    virtual void trim_weights();$/;"	p	class:CvBoost	access:protected	signature:()
truncate_pruned_tree	/usr/include/opencv/ml.h	/^    bool  truncate_pruned_tree;$/;"	m	struct:CvDTreeParams	access:public
try_split_node	/usr/include/opencv/ml.h	/^    virtual void try_split_node( CvDTreeNode* n );$/;"	p	class:CvBoostTree	access:protected	signature:( CvDTreeNode* n )
try_split_node	/usr/include/opencv/ml.h	/^    virtual void try_split_node( CvDTreeNode* n );$/;"	p	class:CvDTree	access:protected	signature:( CvDTreeNode* n )
type	/usr/include/opencv/cxcore.hpp	/^    int type() const { return matrix ? CV_MAT_TYPE(matrix->type) : 0; }$/;"	f	class:CvMatrix	access:public	signature:() const
type	/usr/include/opencv/cxtypes.h	/^    int     type;$/;"	m	struct:CvHistogram	access:public
type	/usr/include/opencv/cxtypes.h	/^    int    type;  \/* may be combination of$/;"	m	struct:CvTermCriteria	access:public
type	/usr/include/opencv/cxtypes.h	/^    int type;$/;"	m	struct:CvMat	access:public
type	/usr/include/opencv/cxtypes.h	/^    int type;$/;"	m	struct:CvMatND	access:public
type	/usr/include/opencv/cxtypes.h	/^    int type;$/;"	m	struct:CvSparseMat	access:public
type	/usr/include/opencv/ml.h	/^    int type;$/;"	m	struct:CvVectors	access:public
type	tool_core.h	/^	Tool_Parameter_Type type; $/;"	m	struct:Tool_Parameter	access:public
type	ui_core.h	/^	UI_Item_Type type; $/;"	m	struct:UI_Section_Meta	access:public
type	ui_core.h	/^	UI_Item_Type type; $/;"	m	struct:UI_Shot_Meta	access:public
type	ui_core.h	/^	UI_Item_Type type;$/;"	m	struct:UI_Meta	access:public
type_name	/usr/include/opencv/cxtypes.h	/^    const char* type_name;$/;"	m	struct:CvTypeInfo	access:public
u	/usr/include/opencv/cvaux.h	/^    } u;$/;"	m	struct:CvEHMM	typeref:union:CvEHMM::__anon2	access:public
u	/usr/include/opencv/cxtypes.h	/^    uint64 u;$/;"	m	union:Cv64suf	access:public
u	/usr/include/opencv/cxtypes.h	/^    unsigned u;$/;"	m	union:Cv32suf	access:public
uchar	/usr/include/opencv/cxtypes.h	/^typedef unsigned char uchar;$/;"	t
ui	geometry_structures.h	/^	void * ui;$/;"	m	struct:Shot	access:public
ui_2d_selection_box	ui_selection.cpp	/^void ui_2d_selection_box(double x1, double y1, double x2, double y2, Selection_Type operation)$/;"	f	signature:(double x1, double y1, double x2, double y2, Selection_Type operation)
ui_2d_selection_box	ui_selection.h	/^void ui_2d_selection_box(double x1, double y1, double x2, double y2, Selection_Type operation);$/;"	p	signature:(double x1, double y1, double x2, double y2, Selection_Type operation)
ui_3d_selection_box	ui_selection.cpp	/^void ui_3d_selection_box(double x1, double y1, double x2, double y2, Selection_Type operation) $/;"	f	signature:(double x1, double y1, double x2, double y2, Selection_Type operation)
ui_3d_selection_box	ui_selection.h	/^void ui_3d_selection_box(double x1, double y1, double x2, double y2, Selection_Type operation);$/;"	p	signature:(double x1, double y1, double x2, double y2, Selection_Type operation)
ui_add_point_to_selection	ui_selection.cpp	/^bool ui_add_point_to_selection(const size_t shot_id, const size_t point_id) $/;"	f	signature:(const size_t shot_id, const size_t point_id)
ui_add_point_to_selection	ui_selection.h	/^bool ui_add_point_to_selection(const size_t shot_id, const size_t point_id);$/;"	p	signature:(const size_t shot_id, const size_t point_id)
ui_add_vertex_to_selection	ui_selection.cpp	/^bool ui_add_vertex_to_selection(const size_t vertex_id) $/;"	f	signature:(const size_t vertex_id)
ui_add_vertex_to_selection	ui_selection.h	/^bool ui_add_vertex_to_selection(const size_t vertex_id);$/;"	p	signature:(const size_t vertex_id)
ui_agar_initialization	ui_core.cpp	/^bool ui_agar_initialization()$/;"	f	signature:()
ui_agar_initialization	ui_core.h	/^bool ui_agar_initialization();$/;"	p	signature:()
ui_check_section_meta	ui_core.cpp	/^UI_Section_Meta * ui_check_section_meta(UI_Section_Meta * & meta)$/;"	f	signature:(UI_Section_Meta * & meta)
ui_check_section_meta	ui_core.h	/^UI_Section_Meta * ui_check_section_meta(UI_Section_Meta * & meta);$/;"	p	signature:(UI_Section_Meta * & meta)
ui_check_shot_meta	ui_core.cpp	/^UI_Shot_Meta * ui_check_shot_meta(size_t shot_id) $/;"	f	signature:(size_t shot_id)
ui_check_shot_meta	ui_core.h	/^UI_Shot_Meta * ui_check_shot_meta(size_t shot_id);$/;"	p	signature:(size_t shot_id)
ui_clear_key	ui_core.cpp	/^void ui_clear_key(int key) $/;"	f	signature:(int key)
ui_clear_key	ui_core.h	/^void ui_clear_key(int key);$/;"	p	signature:(int key)
ui_context_add_thumbnail	ui_context.cpp	/^void ui_context_add_thumbnail(const size_t shot_id, const double x, const double y, const double width, const double height, Context_Decoration decoration)$/;"	f	signature:(const size_t shot_id, const double x, const double y, const double width, const double height, Context_Decoration decoration)
ui_context_add_thumbnail	ui_context.h	/^void ui_context_add_thumbnail(const size_t shot_id, const double x, const double y, const double width, const double height, Context_Decoration decoration);$/;"	p	signature:(const size_t shot_id, const double x, const double y, const double width, const double height, Context_Decoration decoration)
ui_context_add_zoom	ui_context.cpp	/^void ui_context_add_zoom(const double width, const double height, Context_Decoration decoration)$/;"	f	signature:(const double width, const double height, Context_Decoration decoration)
ui_context_add_zoom	ui_context.h	/^void ui_context_add_zoom(const double width, const double height, Context_Decoration decoration);$/;"	p	signature:(const double width, const double height, Context_Decoration decoration)
ui_context_clear	ui_context.cpp	/^void ui_context_clear() $/;"	f	signature:()
ui_context_clear	ui_context.h	/^void ui_context_clear();$/;"	p	signature:()
ui_context_display	ui_context.cpp	/^void ui_context_display(double shot_x, double shot_y)$/;"	f	signature:(double shot_x, double shot_y)
ui_context_display	ui_context.h	/^void ui_context_display(double shot_x, double shot_y);$/;"	p	signature:(double shot_x, double shot_y)
ui_context_hide	ui_context.cpp	/^void ui_context_hide() $/;"	f	signature:()
ui_context_hide	ui_context.h	/^void ui_context_hide();$/;"	p	signature:()
ui_context_initialize	ui_context.cpp	/^bool ui_context_initialize()$/;"	f	signature:()
ui_context_initialize	ui_context.h	/^bool ui_context_initialize();$/;"	p	signature:()
ui_context_set_delay	ui_context.cpp	/^void ui_context_set_delay(const double delay)$/;"	f	signature:(const double delay)
ui_context_set_delay	ui_context.h	/^void ui_context_set_delay(const double delay);$/;"	p	signature:(const double delay)
ui_context_show	ui_context.cpp	/^void ui_context_show() $/;"	f	signature:()
ui_context_show	ui_context.h	/^void ui_context_show();$/;"	p	signature:()
ui_convert_xy_from_screen_to_shot	ui_core.cpp	/^void ui_convert_xy_from_screen_to_shot(Uint16 screen_x, Uint16 screen_y, double & x, double & y)$/;"	f	signature:(Uint16 screen_x, Uint16 screen_y, double & x, double & y)
ui_convert_xy_from_screen_to_shot	ui_core.h	/^void ui_convert_xy_from_screen_to_shot(Uint16 screen_x, Uint16 screen_y, double & x, double & y);$/;"	p	signature:(Uint16 screen_x, Uint16 screen_y, double & x, double & y)
ui_convert_xy_from_shot_to_opengl	ui_core.cpp	/^void ui_convert_xy_from_shot_to_opengl(const double shot_x, const double shot_y, double & x, double & y)$/;"	f	signature:(const double shot_x, const double shot_y, double & x, double & y)
ui_convert_xy_from_shot_to_opengl	ui_core.h	/^void ui_convert_xy_from_shot_to_opengl(const double shot_x, const double shot_y, double & x, double & y);$/;"	p	signature:(const double shot_x, const double shot_y, double & x, double & y)
ui_create	ui_core.cpp	/^bool ui_create()$/;"	f	signature:()
ui_create	ui_core.h	/^bool ui_create();$/;"	p	signature:()
ui_create_dialogs	ui_core.cpp	/^bool ui_create_dialogs() $/;"	f	signature:()
ui_create_dialogs	ui_core.h	/^bool ui_create_dialogs();$/;"	p	signature:()
ui_create_file_dialogs	ui_core.cpp	/^bool ui_create_file_dialogs()$/;"	f	signature:()
ui_create_file_dialogs	ui_core.h	/^bool ui_create_file_dialogs();$/;"	p	signature:()
ui_create_main_window	ui_core.cpp	/^bool ui_create_main_window()$/;"	f	signature:()
ui_create_main_window	ui_core.h	/^bool ui_create_main_window();$/;"	p	signature:()
ui_create_menu	ui_core.cpp	/^bool ui_create_menu()$/;"	f	signature:()
ui_create_menu	ui_core.h	/^bool ui_create_menu();$/;"	p	signature:()
ui_create_meta	ui_core.cpp	/^UI_Meta * ui_create_meta(UI_Item_Type type, size_t index)$/;"	f	signature:(UI_Item_Type type, size_t index)
ui_create_meta	ui_core.h	/^UI_Meta * ui_create_meta(UI_Item_Type type, size_t index);$/;"	p	signature:(UI_Item_Type type, size_t index)
ui_delete_selected_points	ui_selection.cpp	/^void ui_delete_selected_points(bool dont_restrict_to_current_shot \/*= false*\/)$/;"	f	signature:(bool dont_restrict_to_current_shot )
ui_delete_selected_points	ui_selection.h	/^void ui_delete_selected_points(bool dont_restrict_to_current_shot = false);$/;"	p	signature:(bool dont_restrict_to_current_shot = false)
ui_done	ui_core.cpp	/^bool ui_done()$/;"	f	signature:()
ui_done	ui_core.h	/^bool ui_done();$/;"	p	signature:()
ui_empty_selection_list	ui_selection.cpp	/^void ui_empty_selection_list()$/;"	f	signature:()
ui_empty_selection_list	ui_selection.h	/^void ui_empty_selection_list();$/;"	p	signature:()
ui_epipolars_display	ui_epipolars.cpp	/^void ui_epipolars_display(const size_t shot_id, const size_t point_id)$/;"	f	signature:(const size_t shot_id, const size_t point_id)
ui_epipolars_display	ui_epipolars.h	/^void ui_epipolars_display(const size_t shot_id, const size_t point_id);$/;"	p	signature:(const size_t shot_id, const size_t point_id)
ui_event_agar_button_down	ui_events.cpp	/^void ui_event_agar_button_down(GUI_Panel * event)$/;"	f	signature:(GUI_Panel * event)
ui_event_agar_button_down	ui_events.h	/^void ui_event_agar_button_down(GUI_Panel * event);$/;"	p	signature:(GUI_Panel * event)
ui_event_agar_button_up	ui_events.cpp	/^void ui_event_agar_button_up() $/;"	f	signature:()
ui_event_agar_button_up	ui_events.h	/^void ui_event_agar_button_up();$/;"	p	signature:()
ui_event_agar_motion	ui_events.cpp	/^void ui_event_agar_motion(GUI_Panel * event)$/;"	f	signature:(GUI_Panel * event)
ui_event_agar_motion	ui_events.h	/^void ui_event_agar_motion(GUI_Panel * event);$/;"	p	signature:(GUI_Panel * event)
ui_event_key_down	ui_events.h	/^void ui_event_key_down(GUI_Panel * event);$/;"	p	signature:(GUI_Panel * event)
ui_event_key_up	ui_events.h	/^void ui_event_key_up(GUI_Panel * event);$/;"	p	signature:(GUI_Panel * event)
ui_event_motion	ui_events.h	/^void ui_event_motion(GUI_Panel * event);$/;"	p	signature:(GUI_Panel * event)
ui_event_mouse_button_down	ui_events.cpp	/^void ui_event_mouse_button_down(Uint8 button, Uint16 x, Uint16 y)$/;"	f	signature:(Uint8 button, Uint16 x, Uint16 y)
ui_event_mouse_button_down	ui_events.h	/^void ui_event_mouse_button_down(Uint8 button, Uint16 x, Uint16 y);$/;"	p	signature:(Uint8 button, Uint16 x, Uint16 y)
ui_event_mouse_button_up	ui_events.cpp	/^void ui_event_mouse_button_up(Uint8 button, Uint16 x, Uint16 y)$/;"	f	signature:(Uint8 button, Uint16 x, Uint16 y)
ui_event_mouse_button_up	ui_events.h	/^void ui_event_mouse_button_up(Uint8 button, Uint16 x, Uint16 y) ;$/;"	p	signature:(Uint8 button, Uint16 x, Uint16 y)
ui_event_mouse_move	ui_events.cpp	/^void ui_event_mouse_move(Uint16 x, Uint16 y)$/;"	f	signature:(Uint16 x, Uint16 y)
ui_event_mouse_move	ui_events.h	/^void ui_event_mouse_move(Uint16 x, Uint16 y);$/;"	p	signature:(Uint16 x, Uint16 y)
ui_event_mouse_out	ui_events.cpp	/^void ui_event_mouse_out(GUI_Panel * event)$/;"	f	signature:(GUI_Panel * event)
ui_event_mouse_out	ui_events.h	/^void ui_event_mouse_out(GUI_Panel * event);$/;"	p	signature:(GUI_Panel * event)
ui_event_redraw	ui_events.cpp	/^void ui_event_redraw()$/;"	f	signature:()
ui_event_redraw	ui_events.h	/^void ui_event_redraw();$/;"	p	signature:()
ui_event_resize	ui_events.cpp	/^void ui_event_resize()$/;"	f	signature:()
ui_event_resize	ui_events.h	/^void ui_event_resize();$/;"	p	signature:()
ui_event_update	ui_events.cpp	/^void ui_event_update(const Uint32 delta_time)$/;"	f	signature:(const Uint32 delta_time)
ui_event_update	ui_events.h	/^void ui_event_update(const Uint32 delta_time);$/;"	p	signature:(const Uint32 delta_time)
ui_event_update_shot	ui_events.cpp	/^void ui_event_update_shot(const Uint32 delta_time)$/;"	f	signature:(const Uint32 delta_time)
ui_event_update_shot	ui_events.h	/^void ui_event_update_shot(const Uint32 delta_time);$/;"	p	signature:(const Uint32 delta_time)
ui_get_selection	ui_selection.cpp	/^void ui_get_selection()$/;"	f	signature:()
ui_get_selection	ui_selection.h	/^void ui_get_selection();$/;"	p	signature:()
ui_icons_initialize	ui_icons.h	/^bool ui_icons_initialize();$/;"	p	signature:()
ui_initialize	ui_core.cpp	/^bool ui_initialize()$/;"	f	signature:()
ui_initialize	ui_core.h	/^bool ui_initialize();$/;"	p	signature:()
ui_inspection_ground_initialization	ui_inspection_mode.cpp	/^bool ui_inspection_ground_initialization()$/;"	f	signature:()
ui_inspection_ground_initialization	ui_inspection_mode.h	/^bool ui_inspection_ground_initialization();$/;"	p	signature:()
ui_inspection_mouse_button_down	ui_inspection_mode.cpp	/^void ui_inspection_mouse_button_down()$/;"	f	signature:()
ui_inspection_mouse_button_down	ui_inspection_mode.h	/^void ui_inspection_mouse_button_down();$/;"	p	signature:()
ui_inspection_mouse_click	ui_inspection_mode.cpp	/^void ui_inspection_mouse_click()$/;"	f	signature:()
ui_inspection_mouse_click	ui_inspection_mode.h	/^void ui_inspection_mouse_click();$/;"	p	signature:()
ui_inspection_mouse_move	ui_inspection_mode.cpp	/^void ui_inspection_mouse_move()$/;"	f	signature:()
ui_inspection_mouse_move	ui_inspection_mode.h	/^void ui_inspection_mouse_move();$/;"	p	signature:()
ui_inspection_mouse_selection	ui_inspection_mode.cpp	/^void ui_inspection_mouse_selection()$/;"	f	signature:()
ui_inspection_mouse_selection	ui_inspection_mode.h	/^void ui_inspection_mouse_selection();$/;"	p	signature:()
ui_list_update	ui_list.cpp	/^void ui_list_update()$/;"	f	signature:()
ui_list_update	ui_list.h	/^void ui_list_update();$/;"	p	signature:()
ui_next_shot	ui_list.cpp	/^void ui_next_shot(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
ui_next_shot	ui_list.h	/^void ui_next_shot(GUI_Panel * panel); $/;"	p	signature:(GUI_Panel * panel)
ui_opengl_initialization	ui_core.cpp	/^bool ui_opengl_initialization()$/;"	f	signature:()
ui_opengl_initialization	ui_core.h	/^bool ui_opengl_initialization();$/;"	p	signature:()
ui_prepare_for_deletition	ui_core.cpp	/^void ui_prepare_for_deletition(bool points, bool vertices, bool polygons, bool shots, bool calibrations)$/;"	f	signature:(bool points, bool vertices, bool polygons, bool shots, bool calibrations)
ui_prepare_for_deletition	ui_core.h	/^void ui_prepare_for_deletition(bool points, bool vertices, bool polygons, bool shots, bool calibrations);$/;"	p	signature:(bool points, bool vertices, bool polygons, bool shots, bool calibrations)
ui_prev_shot	ui_list.cpp	/^void ui_prev_shot(GUI_Panel * panel)$/;"	f	signature:(GUI_Panel * panel)
ui_prev_shot	ui_list.h	/^void ui_prev_shot(GUI_Panel * panel);$/;"	p	signature:(GUI_Panel * panel)
ui_register_tools	ui_core.cpp	/^bool ui_register_tools() $/;"	f	signature:()
ui_register_tools	ui_core.h	/^bool ui_register_tools();$/;"	p	signature:()
ui_release	ui_core.cpp	/^void ui_release()$/;"	f	signature:()
ui_release	ui_core.h	/^void ui_release();$/;"	p	signature:()
ui_release_dualview	ui_core.cpp	/^void ui_release_dualview() $/;"	f	signature:()
ui_release_dualview	ui_core.h	/^void ui_release_dualview();$/;"	p	signature:()
ui_remove_point_from_selection	ui_selection.cpp	/^void ui_remove_point_from_selection(const size_t selection_id) $/;"	f	signature:(const size_t selection_id)
ui_remove_point_from_selection	ui_selection.h	/^void ui_remove_point_from_selection(const size_t selection_id);$/;"	p	signature:(const size_t selection_id)
ui_remove_vertex_from_selection	ui_selection.cpp	/^void ui_remove_vertex_from_selection(const size_t selection_id)$/;"	f	signature:(const size_t selection_id)
ui_remove_vertex_from_selection	ui_selection.h	/^void ui_remove_vertex_from_selection(const size_t selection_id);$/;"	p	signature:(const size_t selection_id)
ui_select_all_points	ui_selection.cpp	/^void ui_select_all_points() $/;"	f	signature:()
ui_select_all_points	ui_selection.h	/^void ui_select_all_points();$/;"	p	signature:()
ui_select_points_on_shot	ui_selection.cpp	/^void ui_select_points_on_shot(const size_t shot_id) $/;"	f	signature:(const size_t shot_id)
ui_select_points_on_shot	ui_selection.h	/^void ui_select_points_on_shot(const size_t shot_id);$/;"	p	signature:(const size_t shot_id)
ui_select_points_with_reconstructed_vertices	ui_selection.cpp	/^void ui_select_points_with_reconstructed_vertices()$/;"	f	signature:()
ui_select_points_with_reconstructed_vertices	ui_selection.h	/^void ui_select_points_with_reconstructed_vertices();$/;"	p	signature:()
ui_selected_shots_n	ui_selection.cpp	/^size_t ui_selected_shots_n(size_t * const selected, const size_t count) $/;"	f	signature:(size_t * const selected, const size_t count)
ui_selected_shots_n	ui_selection.h	/^size_t ui_selected_shots_n(size_t * const selected, const size_t count);$/;"	p	signature:(size_t * const selected, const size_t count)
ui_selection_box	ui_selection.cpp	/^void ui_selection_box()$/;"	f	signature:()
ui_selection_box	ui_selection.h	/^void ui_selection_box();$/;"	p	signature:()
ui_selection_get_point_by_position	ui_selection.cpp	/^bool ui_selection_get_point_by_position(const double x, const double y, size_t & point_id)$/;"	f	signature:(const double x, const double y, size_t & point_id)
ui_selection_get_point_by_position	ui_selection.h	/^bool ui_selection_get_point_by_position(const double x, const double y, size_t & point_id);$/;"	p	signature:(const double x, const double y, size_t & point_id)
ui_shot_mouse_click	ui_shot_mode.cpp	/^void ui_shot_mouse_click()$/;"	f	signature:()
ui_shot_mouse_click	ui_shot_mode.h	/^void ui_shot_mouse_click();$/;"	p	signature:()
ui_shot_mouse_selection	ui_shot_mode.cpp	/^void ui_shot_mouse_selection()$/;"	f	signature:()
ui_shot_mouse_selection	ui_shot_mode.h	/^void ui_shot_mouse_selection();$/;"	p	signature:()
ui_state	ui_state.cpp	/^UI_State ui_state;$/;"	v
ui_switch_shot	ui_shot_mode.cpp	/^bool ui_switch_shot(size_t shot_id)$/;"	f	signature:(size_t shot_id)
ui_switch_shot	ui_shot_mode.h	/^bool ui_switch_shot(size_t shot_id);$/;"	p	signature:(size_t shot_id)
ui_switch_to_inspection_mode	ui_inspection_mode.cpp	/^void ui_switch_to_inspection_mode()$/;"	f	signature:()
ui_switch_to_inspection_mode	ui_inspection_mode.h	/^void ui_switch_to_inspection_mode();$/;"	p	signature:()
ui_switch_to_shot_mode	ui_shot_mode.cpp	/^void ui_switch_to_shot_mode() $/;"	f	signature:()
ui_switch_to_shot_mode	ui_shot_mode.h	/^void ui_switch_to_shot_mode();$/;"	p	signature:()
ui_treeview_changed	ui_treeview.h	/^void ui_treeview_changed(AG_Event * event);$/;"	p	signature:(AG_Event * event)
ui_treeview_initialize	ui_treeview.h	/^void ui_treeview_initialize();$/;"	p	signature:()
ui_treeview_poll	ui_treeview.h	/^void ui_treeview_poll(AG_Event * event);$/;"	p	signature:(AG_Event * event)
ui_treeview_unfold_pictures	ui_treeview.h	/^void ui_treeview_unfold_pictures();$/;"	p	signature:()
ui_update_inspection	ui_inspection_mode.cpp	/^void ui_update_inspection(const Uint32 delta_time)$/;"	f	signature:(const Uint32 delta_time)
ui_update_inspection	ui_inspection_mode.h	/^void ui_update_inspection(const Uint32 delta_time);$/;"	p	signature:(const Uint32 delta_time)
ui_update_shot	ui_shot_mode.cpp	/^void ui_update_shot(const Uint32 delta_time)$/;"	f	signature:(const Uint32 delta_time)
ui_update_shot	ui_shot_mode.h	/^void ui_update_shot(const Uint32 delta_time);$/;"	p	signature:(const Uint32 delta_time)
ui_vertex_invisible	ui_selection.cpp	/^bool ui_vertex_invisible(size_t vertex_id)$/;"	f	signature:(size_t vertex_id)
ui_vertex_invisible	ui_selection.h	/^bool ui_vertex_invisible(size_t vertex_id);$/;"	p	signature:(size_t vertex_id)
ui_viewport_set	ui_core.cpp	/^bool ui_viewport_set(const size_t shot_id) $/;"	f	signature:(const size_t shot_id)
ui_viewport_set	ui_core.h	/^bool ui_viewport_set(const size_t shot_id);$/;"	p	signature:(const size_t shot_id)
ui_workflow_default_shot	ui_workflow.cpp	/^void ui_workflow_default_shot()$/;"	f	signature:()
ui_workflow_default_shot	ui_workflow.h	/^void ui_workflow_default_shot();$/;"	p	signature:()
ui_workflow_first_vertex	ui_workflow.cpp	/^void ui_workflow_first_vertex() $/;"	f	signature:()
ui_workflow_first_vertex	ui_workflow.h	/^void ui_workflow_first_vertex();$/;"	p	signature:()
ui_workflow_next_polygon	ui_workflow.cpp	/^void ui_workflow_next_polygon()$/;"	f	signature:()
ui_workflow_next_polygon	ui_workflow.h	/^void ui_workflow_next_polygon();$/;"	p	signature:()
ui_workflow_next_vertex	ui_workflow.cpp	/^void ui_workflow_next_vertex()$/;"	f	signature:()
ui_workflow_next_vertex	ui_workflow.h	/^void ui_workflow_next_vertex();$/;"	p	signature:()
ui_workflow_no_vertex	ui_workflow.cpp	/^void ui_workflow_no_vertex()$/;"	f	signature:()
ui_workflow_no_vertex	ui_workflow.h	/^void ui_workflow_no_vertex();$/;"	p	signature:()
ui_workflow_prev_polygon	ui_workflow.cpp	/^void ui_workflow_prev_polygon()$/;"	f	signature:()
ui_workflow_prev_polygon	ui_workflow.h	/^void ui_workflow_prev_polygon();$/;"	p	signature:()
ui_workflow_prev_vertex	ui_workflow.cpp	/^void ui_workflow_prev_vertex()$/;"	f	signature:()
ui_workflow_prev_vertex	ui_workflow.h	/^void ui_workflow_prev_vertex();$/;"	p	signature:()
ui_workflow_select_shot	ui_workflow.cpp	/^void ui_workflow_select_shot(size_t shot_id)$/;"	f	signature:(size_t shot_id)
ui_workflow_select_shot	ui_workflow.h	/^void ui_workflow_select_shot(size_t shot_id);$/;"	p	signature:(size_t shot_id)
ui_workflow_set_focused_point	ui_workflow.cpp	/^void ui_workflow_set_focused_point(const size_t point_id)$/;"	f	signature:(const size_t point_id)
ui_workflow_set_focused_point	ui_workflow.h	/^void ui_workflow_set_focused_point(const size_t point_id);$/;"	p	signature:(const size_t point_id)
ui_workflow_unset_focused_point	ui_workflow.cpp	/^void ui_workflow_unset_focused_point()$/;"	f	signature:()
ui_workflow_unset_focused_point	ui_workflow.h	/^void ui_workflow_unset_focused_point();$/;"	p	signature:()
uint64	/usr/include/opencv/cxtypes.h	/^typedef unsigned __int64 uint64;$/;"	t
uint64	/usr/include/opencv/cxtypes.h	/^typedef unsigned long long uint64;$/;"	t
undistImg	/usr/include/opencv/cvaux.h	/^    CvMat*  undistImg;$/;"	m	class:CvCalibFilter	access:protected
undistMap	/usr/include/opencv/cvaux.h	/^    CvMat*  undistMap[MAX_CAMERAS][2];$/;"	m	class:CvCalibFilter	access:protected
undistortion_map	/usr/include/opencv/cvcompat.h	/^                                CvArr* undistortion_map,$/;"	v
unfolded	ui_core.h	/^	bool unfolded;$/;"	m	struct:UI_Section_Meta	access:public
update_histogram	/usr/include/opencv/cvaux.hpp	/^    virtual bool  update_histogram( const IplImage* cur_frame );$/;"	p	class:CvCamShiftTracker	access:public	signature:( const IplImage* cur_frame )
update_tree_rnc	/usr/include/opencv/ml.h	/^    virtual double update_tree_rnc( int T, int fold );$/;"	p	class:CvDTree	access:protected	signature:( int T, int fold )
update_weights	/usr/include/opencv/ml.h	/^    virtual void update_weights( CvBoostTree* tree );$/;"	p	class:CvBoost	access:protected	signature:( CvBoostTree* tree )
upper_bound_n	/usr/include/opencv/ml.h	/^    double upper_bound_n;$/;"	m	struct:CvSVMSolutionInfo	access:public
upper_bound_p	/usr/include/opencv/ml.h	/^    double upper_bound_p;$/;"	m	struct:CvSVMSolutionInfo	access:public
use_1se_rule	/usr/include/opencv/ml.h	/^    bool  use_1se_rule;$/;"	m	struct:CvDTreeParams	access:public
use_surrogates	/usr/include/opencv/ml.h	/^    bool  use_surrogates;$/;"	m	struct:CvDTreeParams	access:public
ushort	/usr/include/opencv/cxtypes.h	/^typedef unsigned short ushort;$/;"	t
v	/usr/include/opencv/cvaux.h	/^    uchar          v[3];$/;"	m	struct:CvBGPixelCStatTable	access:public
v	/usr/include/opencv/cvaux.h	/^    uchar          v[6];$/;"	m	struct:CvBGPixelCCStatTable	access:public
val	/usr/include/opencv/cxtypes.h	/^    double val[4];$/;"	m	struct:CvScalar	access:public
val	/usr/include/opencv/ml.h	/^    float val;$/;"	m	struct:CvPair32s32f	access:public
valid	/usr/include/opencv/cvaux.h	/^    CvBool valid;$/;"	m	struct:__anon5	access:public
validate_point	geometry_structures.cpp	/^bool validate_point(size_t shot_id, size_t point_id)$/;"	f	signature:(size_t shot_id, size_t point_id)
validate_point	geometry_structures.h	/^bool validate_point(size_t shot_id, size_t point_id);$/;"	p	signature:(size_t shot_id, size_t point_id)
validate_polygon	geometry_structures.cpp	/^bool validate_polygon(size_t polygon_id)$/;"	f	signature:(size_t polygon_id)
validate_polygon	geometry_structures.h	/^bool validate_polygon(size_t polygon_id);$/;"	p	signature:(size_t polygon_id)
validate_shot	geometry_structures.cpp	/^bool validate_shot(size_t id)$/;"	f	signature:(size_t id)
validate_shot	geometry_structures.h	/^bool validate_shot(size_t id);$/;"	p	signature:(size_t id)
validate_vertex	geometry_structures.cpp	/^bool validate_vertex(size_t vertex_id)$/;"	f	signature:(size_t vertex_id)
validate_vertex	geometry_structures.h	/^bool validate_vertex(size_t vertex_id);$/;"	p	signature:(size_t vertex_id)
valoffset	/usr/include/opencv/cxtypes.h	/^    int valoffset;$/;"	m	struct:CvSparseMat	access:public
value	/usr/include/opencv/cvtypes.h	/^    CvScalar value; \/* average color of the connected component *\/$/;"	m	struct:CvConnectedComp	access:public
value	/usr/include/opencv/ml.h	/^    double value;$/;"	m	struct:CvDTreeNode	access:public
value	geometry_structures.h	/^	size_t value; $/;"	m	struct:Index	access:public
value	tool_core.h	/^	void * value;$/;"	m	struct:Tool_Parameter	access:public
values	/usr/include/opencv/cxtypes.h	/^    float *values;$/;"	m	struct:_IplConvKernelFP	access:public
values	/usr/include/opencv/cxtypes.h	/^    int *values;$/;"	m	struct:_IplConvKernel	access:public
var_all	/usr/include/opencv/ml.h	/^    int     var_count, var_all;$/;"	m	class:CvNormalBayesClassifier	access:protected
var_all	/usr/include/opencv/ml.h	/^    int sample_count, var_all, var_count, max_c_count;$/;"	m	struct:CvDTreeTrainData	access:public
var_all	/usr/include/opencv/ml.h	/^    int var_all;$/;"	m	class:CvSVM	access:protected
var_count	/usr/include/opencv/ml.h	/^    int     var_count, var_all;$/;"	m	class:CvNormalBayesClassifier	access:protected
var_count	/usr/include/opencv/ml.h	/^    int max_k, var_count;$/;"	m	class:CvKNearest	access:protected
var_count	/usr/include/opencv/ml.h	/^    int sample_count, var_all, var_count, max_c_count;$/;"	m	struct:CvDTreeTrainData	access:public
var_count	/usr/include/opencv/ml.h	/^    int var_count;$/;"	m	class:CvSVMSolver	access:public
var_idx	/usr/include/opencv/ml.h	/^    CvMat*  var_idx;$/;"	m	class:CvNormalBayesClassifier	access:protected
var_idx	/usr/include/opencv/ml.h	/^    CvMat* var_idx;$/;"	m	class:CvSVM	access:protected
var_idx	/usr/include/opencv/ml.h	/^    CvMat* var_idx;$/;"	m	struct:CvDTreeTrainData	access:public
var_idx	/usr/include/opencv/ml.h	/^    int var_idx;$/;"	m	struct:CvDTreeSplit	access:public
var_importance	/usr/include/opencv/ml.h	/^    CvMat* var_importance;$/;"	m	class:CvDTree	access:protected
var_importance	/usr/include/opencv/ml.h	/^    CvMat* var_importance;$/;"	m	class:CvRTrees	access:protected
var_type	/usr/include/opencv/ml.h	/^    CvMat* var_type; \/\/ i-th element =$/;"	m	struct:CvDTreeTrainData	access:public
variance	/usr/include/opencv/cvaux.h	/^    double      variance[CV_BGFG_MOG_NCOLORS];$/;"	m	struct:CvGaussBGValues	access:public
variance_init	/usr/include/opencv/cvaux.h	/^    double  weight_init, variance_init;$/;"	m	struct:CvGaussBGStatModelParams	access:public
vbox_selections	ui_state.h	/^		* div_selections, * div_tabs, * vbox_selections, * vbox_tabs, $/;"	m	struct:UI_State	access:public
vbox_tabs	ui_state.h	/^		* div_selections, * div_tabs, * vbox_selections, * vbox_tabs, $/;"	m	struct:UI_State	access:public
vector_norm	core_math_routines.cpp	/^double vector_norm(double * x, size_t length)$/;"	f	signature:(double * x, size_t length)
vector_norm	core_math_routines.h	/^double vector_norm(double * x, size_t length);$/;"	p	signature:(double * x, size_t length)
vector_norm_3	core_math_routines.cpp	/^double vector_norm_3(const double * x) $/;"	f	signature:(const double * x)
vector_norm_3	core_math_routines.h	/^double vector_norm_3(const double * x);$/;"	p	signature:(const double * x)
version	/usr/include/opencv/cxtypes.h	/^    const char* version;$/;"	m	struct:CvModuleInfo	access:public
vertex	geometry_structures.h	/^	size_t vertex;                       \/\/ 3d vertex id$/;"	m	struct:Point	access:public
vertex_id	geometry_structures.h	/^	size_t vertex_id; \/\/ id of the vertex from the original dataset$/;"	m	struct:Calibration_Vertex	access:public
vertex_type	geometry_structures.h	/^	GEOMETRY_VERTEX_TYPE vertex_type; \/\/ vertex type$/;"	m	struct:Vertex	access:public
vertex_weights	/usr/include/opencv/cvaux.h	/^    float* vertex_weights;$/;"	m	struct:CvCliqueFinder	access:public
vertices	geometry_loader.h	/^	Vertices * vertices; $/;"	m	struct:geometry_loader_SAX_state	access:public
vertices	geometry_structures.cpp	/^Vertices vertices; \/\/ 3d vertices$/;"	v
vertices	geometry_structures.h	/^	Indices vertices;            \/\/ vertices$/;"	m	struct:Contour	access:public
vertices	geometry_structures.h	/^	Indices vertices;            \/\/ vertices$/;"	m	struct:Polygon_3d	access:public
vertices_incidence	geometry_structures.cpp	/^Vertices_Incidence vertices_incidence; \/\/ incidence$/;"	v
video_flags	gui.h	/^	int video_flags;$/;"	m	struct:GUI_Context	access:public
video_info	gui.h	/^	const SDL_VideoInfo * video_info;$/;"	m	struct:GUI_Context	access:public
view_center_x	ui_core.h	/^	double view_center_x, view_center_y, view_zoom;    \/\/ zooming and scrolling $/;"	m	struct:UI_Shot_Meta	access:public
view_center_y	ui_core.h	/^	double view_center_x, view_center_y, view_zoom;    \/\/ zooming and scrolling $/;"	m	struct:UI_Shot_Meta	access:public
view_zoom	ui_core.h	/^	double view_center_x, view_center_y, view_zoom;    \/\/ zooming and scrolling $/;"	m	struct:UI_Shot_Meta	access:public
visible	core_state.h	/^	bool visible;$/;"	m	struct:Core_State	access:public
visible	ui_context.h	/^	bool visible; $/;"	m	struct:Context_State	access:public
visualization_T	geometry_structures.h	/^	double visualization_T[3]; \/\/ used for storing recomputed inhomogeneous coordinates in visualization routines $/;"	m	struct:Shot	access:public
visualization_calc_dx	ui_visualization_helpers.cpp	/^double visualization_calc_dx(const double screen_distance_x)$/;"	f	signature:(const double screen_distance_x)
visualization_calc_dx	ui_visualization_helpers.h	/^double visualization_calc_dx(const double screen_distance_x);$/;"	p	signature:(const double screen_distance_x)
visualization_calc_dy	ui_visualization_helpers.cpp	/^double visualization_calc_dy(const double screen_distance_y)$/;"	f	signature:(const double screen_distance_y)
visualization_calc_dy	ui_visualization_helpers.h	/^double visualization_calc_dy(const double screen_distance_y);$/;"	p	signature:(const double screen_distance_y)
visualization_calc_screen_distance_sq	ui_visualization_helpers.cpp	/^double visualization_calc_screen_distance_sq(double distance) $/;"	f	signature:(double distance)
visualization_calc_screen_distance_sq	ui_visualization_helpers.h	/^double visualization_calc_screen_distance_sq(double distance);$/;"	p	signature:(double distance)
visualization_calc_x	ui_visualization_helpers.cpp	/^double visualization_calc_x(const double shot_x, const double screen_distance_x)$/;"	f	signature:(const double shot_x, const double screen_distance_x)
visualization_calc_x	ui_visualization_helpers.h	/^double visualization_calc_x(const double shot_x, const double screen_distance_x);$/;"	p	signature:(const double shot_x, const double screen_distance_x)
visualization_calc_y	ui_visualization_helpers.cpp	/^double visualization_calc_y(const double shot_y, const double screen_distance_y)$/;"	f	signature:(const double shot_y, const double screen_distance_y)
visualization_calc_y	ui_visualization_helpers.h	/^double visualization_calc_y(const double shot_y, const double screen_distance_y);$/;"	p	signature:(const double shot_y, const double screen_distance_y)
visualization_cameras	ui_visualization.cpp	/^void visualization_cameras(const Shots shots, const double world_scale \/*= 1*\/)$/;"	f	signature:(const Shots shots, const double world_scale )
visualization_cameras	ui_visualization.h	/^void visualization_cameras(const Shots shots, const double world_scale = 1);$/;"	p	signature:(const Shots shots, const double world_scale = 1)
visualization_contours	ui_visualization.cpp	/^void visualization_contours(const Shots & shots, const Vertices & vertices, const double world_scale \/*= 1*\/)$/;"	f	signature:(const Shots & shots, const Vertices & vertices, const double world_scale )
visualization_contours	ui_visualization.h	/^void visualization_contours(const Shots & shots, const Vertices & vertices, const double world_scale = 1);$/;"	p	signature:(const Shots & shots, const Vertices & vertices, const double world_scale = 1)
visualization_denormalize	ui_visualization.cpp	/^double visualization_denormalize(const double x, const Core_Axes axis) $/;"	f	signature:(const double x, const Core_Axes axis)
visualization_denormalize	ui_visualization.h	/^double visualization_denormalize(const double x, const Core_Axes axis);$/;"	p	signature:(const double x, const Core_Axes axis)
visualization_denormalize_vector	ui_visualization.cpp	/^void visualization_denormalize_vector(double * point)$/;"	f	signature:(double * point)
visualization_denormalize_vector	ui_visualization.h	/^void visualization_denormalize_vector(double * point);$/;"	p	signature:(double * point)
visualization_end_planar_drawing	ui_visualization.cpp	/^void visualization_end_planar_drawing()$/;"	f	signature:()
visualization_end_planar_drawing	ui_visualization.h	/^void visualization_end_planar_drawing();$/;"	p	signature:()
visualization_export_opengl_matrices	ui_visualization.cpp	/^void visualization_export_opengl_matrices()$/;"	f	signature:()
visualization_export_opengl_matrices	ui_visualization.h	/^void visualization_export_opengl_matrices();$/;"	p	signature:()
visualization_fit_to_viewport	ui_visualization.cpp	/^void visualization_fit_to_viewport()$/;"	f	signature:()
visualization_fit_to_viewport	ui_visualization.h	/^void visualization_fit_to_viewport();$/;"	p	signature:()
visualization_get_zoom_x	ui_visualization.cpp	/^const double visualization_get_zoom_x() $/;"	f	signature:()
visualization_get_zoom_x	ui_visualization.h	/^const double visualization_get_zoom_x();$/;"	p	signature:()
visualization_helper_cube	ui_visualization_helpers.cpp	/^void visualization_helper_cube()$/;"	f	signature:()
visualization_helper_cube	ui_visualization_helpers.h	/^void visualization_helper_cube();$/;"	p	signature:()
visualization_helper_square	ui_visualization_helpers.cpp	/^void visualization_helper_square(double x, double y, double side)$/;"	f	signature:(double x, double y, double side)
visualization_helper_square	ui_visualization_helpers.h	/^void visualization_helper_square(double x, double y, double side);$/;"	p	signature:(double x, double y, double side)
visualization_initialize	ui_visualization.cpp	/^bool visualization_initialize()$/;"	f	signature:()
visualization_initialize	ui_visualization.h	/^bool visualization_initialize();$/;"	p	signature:()
visualization_inspection_user_camera	ui_visualization.cpp	/^void visualization_inspection_user_camera(double world_scale \/*= 1*\/)$/;"	f	signature:(double world_scale )
visualization_inspection_user_camera	ui_visualization.h	/^void visualization_inspection_user_camera(double world_scale = 1);$/;"	p	signature:(double world_scale = 1)
visualization_move_into_viewport	ui_visualization.cpp	/^void visualization_move_into_viewport(bool x_axis \/*= true*\/, bool y_axis \/*= true*\/) $/;"	f	signature:(bool x_axis , bool y_axis )
visualization_move_into_viewport	ui_visualization.h	/^void visualization_move_into_viewport(bool x_axis = true, bool y_axis = true);$/;"	p	signature:(bool x_axis = true, bool y_axis = true)
visualization_nearest_point	ui_visualization.cpp	/^double visualization_nearest_point(const size_t shot_id, const double x, const double y, size_t & point_id)$/;"	f	signature:(const size_t shot_id, const double x, const double y, size_t & point_id)
visualization_nearest_point	ui_visualization.h	/^double visualization_nearest_point(const size_t shot_id, const double x, const double y, size_t & point_id);$/;"	p	signature:(const size_t shot_id, const double x, const double y, size_t & point_id)
visualization_normalize	ui_visualization.cpp	/^double visualization_normalize(const double x, const Core_Axes axis)$/;"	f	signature:(const double x, const Core_Axes axis)
visualization_normalize	ui_visualization.h	/^double visualization_normalize(const double x, const Core_Axes axis);$/;"	p	signature:(const double x, const Core_Axes axis)
visualization_normalize_linear	ui_visualization.cpp	/^double visualization_normalize_linear(const double x, const Core_Axes axis)$/;"	f	signature:(const double x, const Core_Axes axis)
visualization_normalize_linear	ui_visualization.h	/^double visualization_normalize_linear(const double x, const Core_Axes axis);$/;"	p	signature:(const double x, const Core_Axes axis)
visualization_point	ui_visualization_point.cpp	/^void visualization_point(double x, double y, unsigned int style)$/;"	f	signature:(double x, double y, unsigned int style)
visualization_point	ui_visualization_point.h	/^void visualization_point(double x, double y, unsigned int style);$/;"	p	signature:(double x, double y, unsigned int style)
visualization_point_reprojection	ui_visualization_point.cpp	/^void visualization_point_reprojection(const size_t shot_id, const size_t point_id)$/;"	f	signature:(const size_t shot_id, const size_t point_id)
visualization_point_reprojection	ui_visualization_point.h	/^void visualization_point_reprojection(const size_t shot_id, const size_t point_id);$/;"	p	signature:(const size_t shot_id, const size_t point_id)
visualization_point_reprojection_calibration	ui_visualization_point.cpp	/^void visualization_point_reprojection_calibration($/;"	f	signature:( const size_t shot_id, const size_t point_id, const size_t calibration_id, const size_t P_id, const size_t X_id, const bool outlier )
visualization_point_reprojection_calibration	ui_visualization_point.h	/^void visualization_point_reprojection_calibration($/;"	p	signature:( const size_t shot_id, const size_t point_id, const size_t calibration_id, const size_t P_id, const size_t X_id, const bool outlier )
visualization_polygons	ui_visualization.cpp	/^void visualization_polygons(const Polygons_3d & polygons, const double world_scale \/*= 1*\/)$/;"	f	signature:(const Polygons_3d & polygons, const double world_scale )
visualization_polygons	ui_visualization.h	/^void visualization_polygons(const Polygons_3d & polygons, const double world_scale = 1);$/;"	p	signature:(const Polygons_3d & polygons, const double world_scale = 1)
visualization_prepare_inspection_projection	ui_visualization.cpp	/^void visualization_prepare_inspection_projection(double fovx) $/;"	f	signature:(double fovx)
visualization_prepare_inspection_projection	ui_visualization.h	/^void visualization_prepare_inspection_projection(double fovx);$/;"	p	signature:(double fovx)
visualization_prepare_planar_drawing	ui_visualization.cpp	/^void visualization_prepare_planar_drawing() $/;"	f	signature:()
visualization_prepare_planar_drawing	ui_visualization.h	/^void visualization_prepare_planar_drawing();$/;"	p	signature:()
visualization_prepare_projection	ui_visualization.cpp	/^void visualization_prepare_projection()$/;"	f	signature:()
visualization_prepare_projection	ui_visualization.h	/^void visualization_prepare_projection();$/;"	p	signature:()
visualization_process_data	ui_visualization.cpp	/^void visualization_process_data(Vertices vertices, Shots shots) $/;"	f	signature:(Vertices vertices, Shots shots)
visualization_process_data	ui_visualization.h	/^void visualization_process_data(Vertices vertices, Shots shots);$/;"	p	signature:(Vertices vertices, Shots shots)
visualization_process_data_cameras	ui_visualization.cpp	/^bool visualization_process_data_cameras(Shots shots)$/;"	f	signature:(Shots shots)
visualization_process_data_cameras	ui_visualization.h	/^bool visualization_process_data_cameras(Shots shots);$/;"	p	signature:(Shots shots)
visualization_process_data_vertices	ui_visualization.cpp	/^bool visualization_process_data_vertices(Vertices vertices) $/;"	f	signature:(Vertices vertices)
visualization_process_data_vertices	ui_visualization.h	/^bool visualization_process_data_vertices(Vertices vertices);$/;"	p	signature:(Vertices vertices)
visualization_pyr_00	geometry_structures.h	/^		visualization_pyr_00[3], $/;"	m	struct:Shot	access:public
visualization_pyr_01	geometry_structures.h	/^		visualization_pyr_01[3]		$/;"	m	struct:Shot	access:public
visualization_pyr_10	geometry_structures.h	/^		visualization_pyr_10[3], $/;"	m	struct:Shot	access:public
visualization_pyr_11	geometry_structures.h	/^		visualization_pyr_11[3], $/;"	m	struct:Shot	access:public
visualization_rect_with_shadow	ui_visualization.cpp	/^void visualization_rect_with_shadow(double left, double top, double right, double bottom, double texture_left, double texture_top, double texture_right, double texture_bottom, double alpha)$/;"	f	signature:(double left, double top, double right, double bottom, double texture_left, double texture_top, double texture_right, double texture_bottom, double alpha)
visualization_rect_with_shadow	ui_visualization.h	/^void visualization_rect_with_shadow(double left, double top, double right, double bottom, double texture_left, double texture_top, double texture_right, double texture_bottom, double alpha);$/;"	p	signature:(double left, double top, double right, double bottom, double texture_left, double texture_top, double texture_right, double texture_bottom, double alpha)
visualization_reprojection	ui_visualization_point.cpp	/^void visualization_reprojection(const double x, const double y, const double rx, const double ry, const bool outlier \/*= false*\/)$/;"	f	signature:(const double x, const double y, const double rx, const double ry, const bool outlier )
visualization_reprojection	ui_visualization_point.h	/^void visualization_reprojection(const double x, const double y, const double rx, const double ry, const bool outlier = false);$/;"	p	signature:(const double x, const double y, const double rx, const double ry, const bool outlier = false)
visualization_screen_distance_sq	ui_visualization.cpp	/^double visualization_screen_distance_sq(const double x1, const double y1, const double x2, const double y2) $/;"	f	signature:(const double x1, const double y1, const double x2, const double y2)
visualization_screen_distance_sq	ui_visualization.h	/^double visualization_screen_distance_sq(const double x1, const double y1, const double x2, const double y2);$/;"	p	signature:(const double x1, const double y1, const double x2, const double y2)
visualization_selection_box	ui_visualization.cpp	/^void visualization_selection_box(double x1, double y1, double x2, double y2)$/;"	f	signature:(double x1, double y1, double x2, double y2)
visualization_selection_box	ui_visualization.h	/^void visualization_selection_box(double x1, double y1, double x2, double y2);$/;"	p	signature:(double x1, double y1, double x2, double y2)
visualization_shot_contours	ui_visualization.cpp	/^void visualization_shot_contours(const size_t shot_id) $/;"	f	signature:(const size_t shot_id)
visualization_shot_contours	ui_visualization.h	/^void visualization_shot_contours(const size_t shot_id);$/;"	p	signature:(const size_t shot_id)
visualization_shot_image	ui_visualization.cpp	/^void visualization_shot_image(Shot & shot)$/;"	f	signature:(Shot & shot)
visualization_shot_image	ui_visualization.h	/^void visualization_shot_image(Shot & shot);$/;"	p	signature:(Shot & shot)
visualization_shot_points	ui_visualization_point.cpp	/^void visualization_shot_points()$/;"	f	signature:()
visualization_shot_points	ui_visualization_point.h	/^void visualization_shot_points();$/;"	p	signature:()
visualization_shot_polygons	ui_visualization.cpp	/^void visualization_shot_polygons(const size_t shot_id)$/;"	f	signature:(const size_t shot_id)
visualization_shot_polygons	ui_visualization.h	/^void visualization_shot_polygons(const size_t shot_id);$/;"	p	signature:(const size_t shot_id)
visualization_shot_user_camera	ui_visualization.cpp	/^void visualization_shot_user_camera(const double world_scale \/*= 1*\/)$/;"	f	signature:(const double world_scale )
visualization_shot_user_camera	ui_visualization.h	/^void visualization_shot_user_camera(const double world_scale = 1);$/;"	p	signature:(const double world_scale = 1)
visualization_show_dualview	ui_visualization.cpp	/^void visualization_show_dualview(size_t current_shot_id, size_t dual_shot_id, const double x, const double y) $/;"	f	signature:(size_t current_shot_id, size_t dual_shot_id, const double x, const double y)
visualization_show_dualview	ui_visualization.h	/^void visualization_show_dualview(size_t current_shot_id, size_t dual_shot_id, const double x, const double y);$/;"	p	signature:(size_t current_shot_id, size_t dual_shot_id, const double x, const double y)
visualization_state	ui_visualization.cpp	/^Visualization_State visualization_state; $/;"	v
visualization_vertices	ui_visualization.cpp	/^void visualization_vertices(const Vertices & vertices, double world_scale \/*= 1*\/)$/;"	f	signature:(const Vertices & vertices, double world_scale )
visualization_vertices	ui_visualization.h	/^void visualization_vertices(const Vertices & vertices, double world_scale = 1);$/;"	p	signature:(const Vertices & vertices, double world_scale = 1)
visualization_viewport_in_shot_coordinates	ui_visualization.cpp	/^void visualization_viewport_in_shot_coordinates(double & x1, double & y1, double & x2, double & y2) $/;"	f	signature:(double & x1, double & y1, double & x2, double & y2)
visualization_viewport_in_shot_coordinates	ui_visualization.h	/^void visualization_viewport_in_shot_coordinates(double & x1, double & y1, double & x2, double & y2);$/;"	p	signature:(double & x1, double & y1, double & x2, double & y2)
vscale	/usr/include/opencv/cxcore.h	/^    float       hscale, vscale;$/;"	m	struct:CvFont	access:public
vtx	/usr/include/opencv/cxcore.h	/^    CvGraphVtx* vtx;       \/* current graph vertex (or current edge origin) *\/$/;"	m	struct:CvGraphScanner	access:public
w	/usr/include/opencv/cvvidsurv.hpp	/^    float   w,h; \/* blob sizes      *\/$/;"	m	struct:CvBlob	access:public
warpSize	/usr/include/opencv/cvaux.h	/^    CvSize warpSize;$/;"	m	struct:CvStereoCamera	access:public
wbuf	/usr/include/opencv/ml.h	/^    CvMat* wbuf;$/;"	m	class:CvANN_MLP	access:protected
weak	/usr/include/opencv/ml.h	/^    CvSeq* weak;$/;"	m	class:CvBoost	access:protected
weak_count	/usr/include/opencv/ml.h	/^    int weak_count;$/;"	m	struct:CvBoostParams	access:public
weak_eval	/usr/include/opencv/ml.h	/^    CvMat* weak_eval;$/;"	m	class:CvBoost	access:protected
weight	/usr/include/opencv/cvaux.h	/^    double      weight;$/;"	m	struct:CvGaussBGValues	access:public
weight	/usr/include/opencv/cvaux.h	/^    float* weight;      \/*array of mixture weights. Summ of all weights in state is 1. *\/$/;"	m	struct:CvEHMMState	access:public
weight	/usr/include/opencv/cvtypes.h	/^        float weight;$/;"	m	struct:CvHaarFeature::__anon32	access:public
weight_init	/usr/include/opencv/cvaux.h	/^    double  weight_init, variance_init;$/;"	m	struct:CvGaussBGStatModelParams	access:public
weight_trim_rate	/usr/include/opencv/ml.h	/^    double weight_trim_rate;$/;"	m	struct:CvBoostParams	access:public
weighted	/usr/include/opencv/cvaux.h	/^    int weighted;$/;"	m	struct:CvCliqueFinder	access:public
weighted_edges	/usr/include/opencv/cvaux.h	/^    int weighted_edges;    $/;"	m	struct:CvCliqueFinder	access:public
weights	/usr/include/opencv/ml.h	/^    CvMat* weights;$/;"	m	class:CvBoost	access:protected
weights	/usr/include/opencv/ml.h	/^    CvMat* weights;$/;"	m	class:CvEM	access:protected
weights	/usr/include/opencv/ml.h	/^    const CvMat* weights;$/;"	m	struct:CvEMParams	access:public
weights	/usr/include/opencv/ml.h	/^    double** weights;$/;"	m	class:CvANN_MLP	access:protected
width	/usr/include/opencv/cvaux.h	/^    float width;$/;"	m	struct:CvLCMEdge	access:public
width	/usr/include/opencv/cvcompat.h	/^    int     width;                  \/* width of the image  ( in pixels )                *\/$/;"	m	struct:_CvPixelPosition8u	access:public
width	/usr/include/opencv/cvcompat.h	/^    int     width;$/;"	m	struct:_CvPixelPosition32f	access:public
width	/usr/include/opencv/cvcompat.h	/^    int     width;$/;"	m	struct:_CvPixelPosition8s	access:public
width	/usr/include/opencv/cxcore.hpp	/^    int width() const { return image ? image->width : 0; }$/;"	f	class:CvImage	access:public	signature:() const
width	/usr/include/opencv/cxtypes.h	/^        int width;$/;"	m	union:CvMat::__anon15	access:public
width	/usr/include/opencv/cxtypes.h	/^    float width;$/;"	m	struct:CvSize2D32f	access:public
width	/usr/include/opencv/cxtypes.h	/^    int  width;         \/* image width in pixels *\/$/;"	m	struct:_IplImage	access:public
width	/usr/include/opencv/cxtypes.h	/^    int  width;$/;"	m	struct:_IplROI	access:public
width	/usr/include/opencv/cxtypes.h	/^    int width;$/;"	m	struct:CvRect	access:public
width	/usr/include/opencv/cxtypes.h	/^    int width;$/;"	m	struct:__anon18	access:public
width	core_image_loader.h	/^	int width, height;$/;"	m	struct:Image_Loader_Shot	access:public
width	geometry_structures.h	/^	int width, height;     \/\/ size of image plane in pixels $/;"	m	struct:Shot	access:public
width	gui.h	/^	int width, height;$/;"	m	struct:GUI_Context	access:public
width	gui.h	/^	int width, height;$/;"	m	struct:GUI_Panel	access:public
width	tool_matching.h	/^	int width, height; \/\/ size of loaded shot $/;"	m	struct:Matching_Shot	access:public
width	ui_context.h	/^	double x, y, width, height;$/;"	m	struct:Context_Item	access:public
widthStep	/usr/include/opencv/cxtypes.h	/^    int  widthStep;   \/* size of aligned image row in bytes *\/$/;"	m	struct:_IplImage	access:public
win_size	/usr/include/opencv/cvaux.h	/^    int     win_size;               \/* = 1\/alpha *\/$/;"	m	struct:CvGaussBGStatModelParams	access:public
window	ui_state.h	/^		* window, * pane, * pane_tools, * div_tools, * div_glview, $/;"	m	struct:UI_State	access:public
work_type	/usr/include/opencv/cv.hpp	/^    int min_depth, src_type, dst_type, work_type;$/;"	m	class:CvBaseImageFilter	access:protected
write	/usr/include/opencv/cxcore.hpp	/^    void write( CvFileStorage* fs, const char* imgname );$/;"	p	class:CvImage	access:public	signature:( CvFileStorage* fs, const char* imgname )
write	/usr/include/opencv/cxcore.hpp	/^    void write( CvFileStorage* fs, const char* matname );$/;"	p	class:CvMatrix	access:public	signature:( CvFileStorage* fs, const char* matname )
write	/usr/include/opencv/cxtypes.h	/^    CvWriteFunc write;$/;"	m	struct:CvTypeInfo	access:public
write	/usr/include/opencv/ml.h	/^    virtual void write( CvFileStorage* fs );$/;"	p	class:CvDTree	access:public	signature:( CvFileStorage* fs )
write	/usr/include/opencv/ml.h	/^    virtual void write( CvFileStorage* fs, const char* name );$/;"	p	class:CvDTree	access:public	signature:( CvFileStorage* fs, const char* name )
write	/usr/include/opencv/ml.h	/^    virtual void write( CvFileStorage* fs, const char* name );$/;"	p	class:CvRTrees	access:public	signature:( CvFileStorage* fs, const char* name )
write	/usr/include/opencv/ml.h	/^    virtual void write( CvFileStorage* storage, const char* name );$/;"	p	class:CvANN_MLP	access:public	signature:( CvFileStorage* storage, const char* name )
write	/usr/include/opencv/ml.h	/^    virtual void write( CvFileStorage* storage, const char* name );$/;"	p	class:CvBoost	access:public	signature:( CvFileStorage* storage, const char* name )
write	/usr/include/opencv/ml.h	/^    virtual void write( CvFileStorage* storage, const char* name );$/;"	p	class:CvNormalBayesClassifier	access:public	signature:( CvFileStorage* storage, const char* name )
write	/usr/include/opencv/ml.h	/^    virtual void write( CvFileStorage* storage, const char* name );$/;"	p	class:CvSVM	access:public	signature:( CvFileStorage* storage, const char* name )
write	/usr/include/opencv/ml.h	/^    virtual void write( CvFileStorage* storage, const char* name );$/;"	p	class:CvStatModel	access:public	signature:( CvFileStorage* storage, const char* name )
write_node	/usr/include/opencv/ml.h	/^    virtual void write_node( CvFileStorage* fs, CvDTreeNode* node );$/;"	p	class:CvDTree	access:protected	signature:( CvFileStorage* fs, CvDTreeNode* node )
write_params	/usr/include/opencv/ml.h	/^    virtual void write_params( CvFileStorage* fs );$/;"	p	class:CvANN_MLP	access:protected	signature:( CvFileStorage* fs )
write_params	/usr/include/opencv/ml.h	/^    virtual void write_params( CvFileStorage* fs );$/;"	p	class:CvBoost	access:protected	signature:( CvFileStorage* fs )
write_params	/usr/include/opencv/ml.h	/^    virtual void write_params( CvFileStorage* fs );$/;"	p	class:CvSVM	access:protected	signature:( CvFileStorage* fs )
write_params	/usr/include/opencv/ml.h	/^    virtual void write_params( CvFileStorage* fs );$/;"	p	struct:CvDTreeTrainData	access:public	signature:( CvFileStorage* fs )
write_results	/usr/include/opencv/ml.h	/^    virtual float write_results( int k, int k1, int start, int end,$/;"	p	class:CvKNearest	access:protected	signature:( int k, int k1, int start, int end, const float* neighbor_responses, const float* dist, CvMat* _results, CvMat* _neighbor_responses, CvMat* _dist, Cv32suf* sort_buf ) const
write_split	/usr/include/opencv/ml.h	/^    virtual void write_split( CvFileStorage* fs, CvDTreeSplit* split );$/;"	p	class:CvDTree	access:protected	signature:( CvFileStorage* fs, CvDTreeSplit* split )
write_tree_nodes	/usr/include/opencv/ml.h	/^    virtual void write_tree_nodes( CvFileStorage* fs );$/;"	p	class:CvDTree	access:protected	signature:( CvFileStorage* fs )
x	/usr/include/opencv/cvcompat.h	/^    int     x;                      \/* current x coordinate ( in pixels )               *\/$/;"	m	struct:_CvPixelPosition8u	access:public
x	/usr/include/opencv/cvcompat.h	/^    int     x;$/;"	m	struct:_CvPixelPosition32f	access:public
x	/usr/include/opencv/cvcompat.h	/^    int     x;$/;"	m	struct:_CvPixelPosition8s	access:public
x	/usr/include/opencv/cvvidsurv.hpp	/^    float   x,y; \/* blob position   *\/$/;"	m	struct:CvBlob	access:public
x	/usr/include/opencv/cxtypes.h	/^    double x;$/;"	m	struct:CvPoint2D64f	access:public
x	/usr/include/opencv/cxtypes.h	/^    double x;$/;"	m	struct:CvPoint3D64f	access:public
x	/usr/include/opencv/cxtypes.h	/^    float x;$/;"	m	struct:CvPoint2D32f	access:public
x	/usr/include/opencv/cxtypes.h	/^    float x;$/;"	m	struct:CvPoint3D32f	access:public
x	/usr/include/opencv/cxtypes.h	/^    int x;$/;"	m	struct:CvPoint	access:public
x	/usr/include/opencv/cxtypes.h	/^    int x;$/;"	m	struct:CvRect	access:public
x	core_image_loader.h	/^	double x, y, sx, sy;$/;"	m	struct:Image_Loader_Request	access:public
x	geometry_structures.h	/^	double x, y, z;              \/\/ space coordinates of vertex$/;"	m	struct:Vertex	access:public
x	geometry_structures.h	/^	double x, y;                         \/\/ point coordinates, x and y are numbers from interval [0, 1]$/;"	m	struct:Point	access:public
x	ui_context.h	/^	double x, y, width, height;$/;"	m	struct:Context_Item	access:public
x	ui_context.h	/^	double x, y; \/\/ where is the context menu shown $/;"	m	struct:Context_State	access:public
x1	gui.h	/^	int x1, y1, x2, y2;$/;"	m	struct:GUI_Panel	access:public
x2	gui.h	/^	int x1, y1, x2, y2;$/;"	m	struct:GUI_Panel	access:public
xOffset	/usr/include/opencv/cxtypes.h	/^    int  xOffset;$/;"	m	struct:_IplROI	access:public
x_func	/usr/include/opencv/cv.hpp	/^    CvRowFilterFunc x_func;$/;"	m	class:CvBaseImageFilter	access:protected
y	/usr/include/opencv/cvvidsurv.hpp	/^    float   x,y; \/* blob position   *\/$/;"	m	struct:CvBlob	access:public
y	/usr/include/opencv/cxtypes.h	/^    double y;$/;"	m	struct:CvPoint2D64f	access:public
y	/usr/include/opencv/cxtypes.h	/^    double y;$/;"	m	struct:CvPoint3D64f	access:public
y	/usr/include/opencv/cxtypes.h	/^    float y;$/;"	m	struct:CvPoint2D32f	access:public
y	/usr/include/opencv/cxtypes.h	/^    float y;$/;"	m	struct:CvPoint3D32f	access:public
y	/usr/include/opencv/cxtypes.h	/^    int y;$/;"	m	struct:CvPoint	access:public
y	/usr/include/opencv/cxtypes.h	/^    int y;$/;"	m	struct:CvRect	access:public
y	/usr/include/opencv/ml.h	/^    char* y;$/;"	m	class:CvSVMSolver	access:public
y	core_image_loader.h	/^	double x, y, sx, sy;$/;"	m	struct:Image_Loader_Request	access:public
y	geometry_structures.h	/^	double x, y, z;              \/\/ space coordinates of vertex$/;"	m	struct:Vertex	access:public
y	geometry_structures.h	/^	double x, y;                         \/\/ point coordinates, x and y are numbers from interval [0, 1]$/;"	m	struct:Point	access:public
y	ui_context.h	/^	double x, y, width, height;$/;"	m	struct:Context_Item	access:public
y	ui_context.h	/^	double x, y; \/\/ where is the context menu shown $/;"	m	struct:Context_State	access:public
y1	gui.h	/^	int x1, y1, x2, y2;$/;"	m	struct:GUI_Panel	access:public
y2	gui.h	/^	int x1, y1, x2, y2;$/;"	m	struct:GUI_Panel	access:public
yOffset	/usr/include/opencv/cxtypes.h	/^    int  yOffset;$/;"	m	struct:_IplROI	access:public
y_func	/usr/include/opencv/cv.hpp	/^    CvColumnFilterFunc y_func;$/;"	m	class:CvBaseImageFilter	access:protected
z	/usr/include/opencv/cxtypes.h	/^    double z;$/;"	m	struct:CvPoint3D64f	access:public
z	/usr/include/opencv/cxtypes.h	/^    float z;$/;"	m	struct:CvPoint3D32f	access:public
z	geometry_structures.h	/^	double x, y, z;              \/\/ space coordinates of vertex$/;"	m	struct:Vertex	access:public
~CvANN_MLP	/usr/include/opencv/ml.h	/^    virtual ~CvANN_MLP();$/;"	p	class:CvANN_MLP	access:public	signature:()
~CvANN_MLP_TrainParams	/usr/include/opencv/ml.h	/^    ~CvANN_MLP_TrainParams();$/;"	p	struct:CvANN_MLP_TrainParams	access:public	signature:()
~CvBaseImageFilter	/usr/include/opencv/cv.hpp	/^    virtual ~CvBaseImageFilter();$/;"	p	class:CvBaseImageFilter	access:public	signature:()
~CvBlobSeq	/usr/include/opencv/cvvidsurv.hpp	/^    virtual ~CvBlobSeq()$/;"	f	class:CvBlobSeq	access:public	signature:()
~CvBlobTrackAnalysisOne	/usr/include/opencv/cvvidsurv.hpp	/^    virtual ~CvBlobTrackAnalysisOne() {};$/;"	f	class:CvBlobTrackAnalysisOne	access:public	signature:()
~CvBlobTrackSeq	/usr/include/opencv/cvvidsurv.hpp	/^    virtual ~CvBlobTrackSeq()$/;"	f	class:CvBlobTrackSeq	access:public	signature:()
~CvBoost	/usr/include/opencv/ml.h	/^    virtual ~CvBoost();$/;"	p	class:CvBoost	access:public	signature:()
~CvBoostTree	/usr/include/opencv/ml.h	/^    virtual ~CvBoostTree();$/;"	p	class:CvBoostTree	access:public	signature:()
~CvBoxFilter	/usr/include/opencv/cv.hpp	/^    virtual ~CvBoxFilter();$/;"	p	class:CvBoxFilter	access:public	signature:()
~CvCalibFilter	/usr/include/opencv/cvaux.h	/^    virtual ~CvCalibFilter();$/;"	p	class:CvCalibFilter	access:public	signature:()
~CvCamShiftTracker	/usr/include/opencv/cvaux.hpp	/^    virtual ~CvCamShiftTracker();$/;"	p	class:CvCamShiftTracker	access:public	signature:()
~CvDTree	/usr/include/opencv/ml.h	/^    virtual ~CvDTree();$/;"	p	class:CvDTree	access:public	signature:()
~CvDTreeTrainData	/usr/include/opencv/ml.h	/^    virtual ~CvDTreeTrainData();$/;"	p	struct:CvDTreeTrainData	access:public	signature:()
~CvEM	/usr/include/opencv/ml.h	/^    virtual ~CvEM();$/;"	p	class:CvEM	access:public	signature:()
~CvForestTree	/usr/include/opencv/ml.h	/^    virtual ~CvForestTree();$/;"	p	class:CvForestTree	access:public	signature:()
~CvImage	/usr/include/opencv/cxcore.hpp	/^    ~CvImage()$/;"	f	class:CvImage	access:public	signature:()
~CvImageDrawer	/usr/include/opencv/cvvidsurv.hpp	/^    ~CvImageDrawer() { cvReleaseImage( &m_image ); }$/;"	f	class:CvImageDrawer	access:public	signature:()
~CvKNearest	/usr/include/opencv/ml.h	/^    virtual ~CvKNearest();$/;"	p	class:CvKNearest	access:public	signature:()
~CvLaplaceFilter	/usr/include/opencv/cv.hpp	/^    virtual ~CvLaplaceFilter();$/;"	p	class:CvLaplaceFilter	access:public	signature:()
~CvLinearFilter	/usr/include/opencv/cv.hpp	/^    virtual ~CvLinearFilter();$/;"	p	class:CvLinearFilter	access:public	signature:()
~CvMatrix	/usr/include/opencv/cxcore.hpp	/^    ~CvMatrix()$/;"	f	class:CvMatrix	access:public	signature:()
~CvModule	/usr/include/opencv/cxcore.hpp	/^    ~CvModule();$/;"	p	struct:CvModule	access:public	signature:()
~CvMorphology	/usr/include/opencv/cv.hpp	/^    virtual ~CvMorphology();$/;"	p	class:CvMorphology	access:public	signature:()
~CvNormalBayesClassifier	/usr/include/opencv/ml.h	/^    virtual ~CvNormalBayesClassifier();$/;"	p	class:CvNormalBayesClassifier	access:public	signature:()
~CvObjectDetector	/usr/include/opencv/cvvidsurv.hpp	/^    ~CvObjectDetector() {};$/;"	f	class:CvObjectDetector	access:public	signature:()
~CvProb	/usr/include/opencv/cvvidsurv.hpp	/^    virtual ~CvProb() {};$/;"	f	class:CvProb	access:public	signature:()
~CvRTrees	/usr/include/opencv/ml.h	/^    virtual ~CvRTrees();$/;"	p	class:CvRTrees	access:public	signature:()
~CvSVM	/usr/include/opencv/ml.h	/^    virtual ~CvSVM();$/;"	p	class:CvSVM	access:public	signature:()
~CvSVMKernel	/usr/include/opencv/ml.h	/^    virtual ~CvSVMKernel();$/;"	p	struct:CvSVMKernel	access:public	signature:()
~CvSVMSolver	/usr/include/opencv/ml.h	/^    virtual ~CvSVMSolver();$/;"	p	class:CvSVMSolver	access:public	signature:()
~CvSepFilter	/usr/include/opencv/cv.hpp	/^    virtual ~CvSepFilter();$/;"	p	class:CvSepFilter	access:public	signature:()
~CvStatModel	/usr/include/opencv/ml.h	/^    virtual ~CvStatModel();$/;"	p	class:CvStatModel	access:public	signature:()
~CvType	/usr/include/opencv/cxcore.hpp	/^    ~CvType();$/;"	p	struct:CvType	access:public	signature:()
~CvVSModule	/usr/include/opencv/cvvidsurv.hpp	/^    virtual ~CvVSModule()$/;"	f	class:CvVSModule	access:public	signature:()
~CvvImage	/usr/include/opencv/highgui.h	/^    virtual ~CvvImage();$/;"	p	class:CvvImage	access:public	signature:()
